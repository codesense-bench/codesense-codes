{"idx": 0, "scratchpad_format": "def add_active_line_prints(code):\n    \"\"\"\n    Add print statements indicating line numbers to a python string.\n    \"\"\"\n    # Replace newlines and comments with pass statements, so the line numbers are accurate (ast will remove them otherwise)\n    code_lines = code.split(\"\\n\") # [STATE] code_lines = ['import getpass', 'import os', 'import platform'] [/STATE]\n    in_multiline_string = False # [STATE] in_multiline_string = False [/STATE]\n    for i in range(len(code_lines)): #  [STATE] i = 0 [/STATE] [STATE] i = 1 [/STATE] [STATE] i = 2 [/STATE]\n        line = code_lines[i] #  [STATE] line = 'import getpass' [/STATE] [STATE] line = 'import os' [/STATE] [STATE] line = 'import platform' [/STATE]\n        if '\"\"\"' in line or \"'''\" in line:\n            in_multiline_string = not in_multiline_string\n        if not in_multiline_string and (line.strip().startswith(\"#\") or line == \"\"):\n            whitespace = len(line) - len(line.lstrip(\" \"))\n            code_lines[i] = \" \" * whitespace + \"pass\"\n    processed_code = \"\\n\".join(code_lines) # [STATE] processed_code = 'import getpass\\nimport os\\nimport platform' [/STATE]\n    try:\n        tree = ast.parse(processed_code) # [STATE] tree = {body=[<ast.Import object at 0x7f3a38b33850>, <ast.Import object at 0x7f3a3c052700>, <ast.Import object at 0x7f3a38a2e220>], type_ignores=[]} [/STATE]\n    except:\n        # If you can't parse the processed version, try the unprocessed version before giving up\n        tree = ast.parse(code)\n    transformer = AddLinePrints() # [STATE] transformer = {} [/STATE]\n    new_tree = transformer.visit(tree) # [STATE] new_tree = {body=[<ast.Expr object at 0x7f3a38b33af0>, <ast.Import object at 0x7f3a38b33850>, <ast.Expr object at 0x7f3a38e23820>, <ast.Import object at 0x7f3a3c052700>, <ast.Expr object at 0x7f3a38e237c0>, <ast.Import object at 0x7f3a38a2e220>], type_ignores=[]} [/STATE] # [STATE] tree = {body=[<ast.Expr object at 0x7f3a38b33af0>, <ast.Import object at 0x7f3a38b33850>, <ast.Expr object at 0x7f3a38e23820>, <ast.Import object at 0x7f3a3c052700>, <ast.Expr object at 0x7f3a38e237c0>, <ast.Import object at 0x7f3a38a2e220>], type_ignores=[]} [/STATE]\n    return ast.unparse(new_tree)\n\nadd_active_line_prints('import getpass\\nimport os\\nimport platform')", "loop_code": "1: def add_active_line_prints(code):\n2:     \"\"\"\n3:     Add print statements indicating line numbers to a python string.\n4:     \"\"\"\n5:     # Replace newlines and comments with pass statements, so the line numbers are accurate (ast will remove them otherwise)\n6:     code_lines = code.split(\"\\n\")\n7:     in_multiline_string = False\n8:     for i in range(len(code_lines)):\n9:         line = code_lines[i]\n10:         if '\"\"\"' in line or \"'''\" in line:\n11:             in_multiline_string = not in_multiline_string\n12:         if not in_multiline_string and (line.strip().startswith(\"#\") or line == \"\"):\n13:             whitespace = len(line) - len(line.lstrip(\" \"))\n14:             code_lines[i] = \" \" * whitespace + \"pass\"\n15:     processed_code = \"\\n\".join(code_lines)\n16:     try:\n17:         tree = ast.parse(processed_code)\n18:     except:\n19:         # If you can't parse the processed version, try the unprocessed version before giving up\n20:         tree = ast.parse(code)\n21:     transformer = AddLinePrints()\n22:     new_tree = transformer.visit(tree)\n23:     return ast.unparse(new_tree)\n24:\n25: add_active_line_prints('import getpass\\nimport os\\nimport platform')", "question": "What is the value of 'processed_code' in line 15 after executing 'add_active_line_prints('import getpass\\nimport os\\nimport platform')'?", "answer": "'import getpass\\nimport os\\nimport platform'", "variable_assignment": "processed_code = 'import getpass\\nimport os\\nimport platform'", "loop_range": [8, 14], "post_loop_line": 15, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 1, "scratchpad_format": "def count_messages_tokens(messages=[], model=None):\n    \"\"\"\n    Count the number of tokens in a list of messages\n    \"\"\"\n    try:\n        tokens_used = 0 # [STATE] tokens_used = 0 [/STATE]\n\n        for message in messages: #  [STATE] message = {'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'} [/STATE]\n            if isinstance(message, str):\n                tokens_used += count_tokens(message, model=model)\n            elif \"message\" in message:\n                tokens_used += count_tokens(message[\"message\"], model=model) # [STATE] tokens_used = 360 [/STATE]\n\n                if \"code\" in message:\n                    tokens_used += count_tokens(message[\"code\"], model=model)\n\n                if \"output\" in message:\n                    tokens_used += count_tokens(message[\"output\"], model=model)\n\n        prompt_cost = token_cost(tokens_used, model=model) # [STATE] prompt_cost = 0.00054 [/STATE]\n\n        return (tokens_used, prompt_cost)\n    except:\n        # Non-essential feature\n        return (0, 0)\n\ncount_messages_tokens([{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], 'gpt-3.5-turbo')", "loop_code": "1: def count_messages_tokens(messages=[], model=None):\n2:     \"\"\"\n3:     Count the number of tokens in a list of messages\n4:     \"\"\"\n5:     try:\n6:         tokens_used = 0\n7:\n8:         for message in messages:\n9:             if isinstance(message, str):\n10:                 tokens_used += count_tokens(message, model=model)\n11:             elif \"message\" in message:\n12:                 tokens_used += count_tokens(message[\"message\"], model=model)\n13:\n14:                 if \"code\" in message:\n15:                     tokens_used += count_tokens(message[\"code\"], model=model)\n16:\n17:                 if \"output\" in message:\n18:                     tokens_used += count_tokens(message[\"output\"], model=model)\n19:\n20:         prompt_cost = token_cost(tokens_used, model=model)\n21:\n22:         return (tokens_used, prompt_cost)\n23:     except:\n24:         # Non-essential feature\n25:         return (0, 0)\n26:\n27: count_messages_tokens([{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], 'gpt-3.5-turbo')", "question": "What is the value of 'prompt_cost' in line 20 after executing 'count_messages_tokens([{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], 'gpt-3.5-turbo')'?", "answer": "0.00054", "variable_assignment": "prompt_cost = 0.00054", "loop_range": [8, 18], "post_loop_line": 20, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"idx": 2, "scratchpad_format": "def _get_builtin_metadata(dataset_name):\n    if dataset_name == \"coco\":\n        return _get_coco_instances_meta()\n    if dataset_name == \"coco_panoptic_separated\":\n        return _get_coco_panoptic_separated_meta()\n    elif dataset_name == \"coco_panoptic_standard\":\n        meta = {} # [STATE] meta = {} [/STATE]\n        # The following metadata maps contiguous id from [0, #thing categories +\n        # #stuff categories) to their names and colors. We have to replica of the\n        # same name and color under \"thing_*\" and \"stuff_*\" because the current\n        # visualization function in D2 handles thing and class classes differently\n        # due to some heuristic used in Panoptic FPN. We keep the same naming to\n        # enable reusing existing visualization functions.\n        thing_classes = [k[\"name\"] for k in COCO_CATEGORIES] # [STATE] thing_classes = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'] [/STATE]\n        thing_colors = [k[\"color\"] for k in COCO_CATEGORIES] # [STATE] thing_colors = [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]] [/STATE]\n        stuff_classes = [k[\"name\"] for k in COCO_CATEGORIES] # [STATE] stuff_classes = ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'] [/STATE]\n        stuff_colors = [k[\"color\"] for k in COCO_CATEGORIES] # [STATE] stuff_colors = [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]] [/STATE]\n\n        meta[\"thing_classes\"] = thing_classes # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']} [/STATE]\n        meta[\"thing_colors\"] = thing_colors # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]} [/STATE]\n        meta[\"stuff_classes\"] = stuff_classes # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']} [/STATE]\n        meta[\"stuff_colors\"] = stuff_colors # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]} [/STATE]\n\n        # Convert category id for training:\n        #   category id: like semantic segmentation, it is the class id for each\n        #   pixel. Since there are some classes not used in evaluation, the category\n        #   id is not always contiguous and thus we have two set of category ids:\n        #       - original category id: category id in the original dataset, mainly\n        #           used for evaluation.\n        #       - contiguous category id: [0, #classes), in order to train the linear\n        #           softmax classifier.\n        thing_dataset_id_to_contiguous_id = {} # [STATE] thing_dataset_id_to_contiguous_id = {} [/STATE]\n        stuff_dataset_id_to_contiguous_id = {} # [STATE] stuff_dataset_id_to_contiguous_id = {} [/STATE]\n\n        for i, cat in enumerate(COCO_CATEGORIES): #  [STATE] i = 0 [/STATE] [STATE] cat = {'color': [220, 20, 60], 'isthing': 1, 'id': 1, 'name': 'person'} [/STATE] [STATE] i = 1 [/STATE] [STATE] cat = {'color': [119, 11, 32], 'isthing': 1, 'id': 2, 'name': 'bicycle'} [/STATE] [STATE] i = 2 [/STATE] [STATE] cat = {'color': [0, 0, 142], 'isthing': 1, 'id': 3, 'name': 'car'} [/STATE] [STATE] i = 3 [/STATE] [STATE] cat = {'color': [0, 0, 230], 'isthing': 1, 'id': 4, 'name': 'motorcycle'} [/STATE] [STATE] i = 4 [/STATE] [STATE] cat = {'color': [106, 0, 228], 'isthing': 1, 'id': 5, 'name': 'airplane'} [/STATE] [STATE] i = 5 [/STATE] [STATE] cat = {'color': [0, 60, 100], 'isthing': 1, 'id': 6, 'name': 'bus'} [/STATE] [STATE] i = 6 [/STATE] [STATE] cat = {'color': [0, 80, 100], 'isthing': 1, 'id': 7, 'name': 'train'} [/STATE] [STATE] i = 7 [/STATE] [STATE] cat = {'color': [0, 0, 70], 'isthing': 1, 'id': 8, 'name': 'truck'} [/STATE] [STATE] i = 8 [/STATE] [STATE] cat = {'color': [0, 0, 192], 'isthing': 1, 'id': 9, 'name': 'boat'} [/STATE] [STATE] i = 9 [/STATE] [STATE] cat = {'color': [250, 170, 30], 'isthing': 1, 'id': 10, 'name': 'traffic light'} [/STATE] [STATE] i = 10 [/STATE]\n            if cat[\"isthing\"]:\n                thing_dataset_id_to_contiguous_id[cat[\"id\"]] = i #  [STATE] thing_dataset_id_to_contiguous_id = {1: 0} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19} [/STATE] [STATE] thing_dataset_id_to_contiguous_id = {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20} [/STATE]\n            else:\n                stuff_dataset_id_to_contiguous_id[cat[\"id\"]] = i #  [STATE] stuff_dataset_id_to_contiguous_id = {92: 80} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99} [/STATE] [STATE] stuff_dataset_id_to_contiguous_id = {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100} [/STATE]\n\n        meta[\"thing_dataset_id_to_contiguous_id\"] = thing_dataset_id_to_contiguous_id # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}} [/STATE]\n        meta[\"stuff_dataset_id_to_contiguous_id\"] = stuff_dataset_id_to_contiguous_id # [STATE] meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skatebo...rigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}, 'stuff_dataset_id_to_contiguous_id': {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129, 198: 130, 199: 131, 200: 132}} [/STATE]\n\n        return meta\n    elif dataset_name == \"coco_person\":\n        return {\n            \"thing_classes\": [\"person\"],\n            \"keypoint_names\": COCO_PERSON_KEYPOINT_NAMES,\n            \"keypoint_flip_map\": COCO_PERSON_KEYPOINT_FLIP_MAP,\n            \"keypoint_connection_rules\": KEYPOINT_CONNECTION_RULES,\n        }\n    elif dataset_name == \"cityscapes\":\n        # fmt: off\n        CITYSCAPES_THING_CLASSES = [\n            \"person\", \"rider\", \"car\", \"truck\",\n            \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n        ]\n        CITYSCAPES_STUFF_CLASSES = [\n            \"road\", \"sidewalk\", \"building\", \"wall\", \"fence\", \"pole\", \"traffic light\",\n            \"traffic sign\", \"vegetation\", \"terrain\", \"sky\", \"person\", \"rider\", \"car\",\n            \"truck\", \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n        ]\n        # fmt: on\n        return {\n            \"thing_classes\": CITYSCAPES_THING_CLASSES,\n            \"stuff_classes\": CITYSCAPES_STUFF_CLASSES,\n        }\n    raise KeyError(\"No built-in metadata for dataset {}\".format(dataset_name))\n\n_get_builtin_metadata('coco_panoptic_standard')", "loop_code": "1: def _get_builtin_metadata(dataset_name):\n2:     if dataset_name == \"coco\":\n3:         return _get_coco_instances_meta()\n4:     if dataset_name == \"coco_panoptic_separated\":\n5:         return _get_coco_panoptic_separated_meta()\n6:     elif dataset_name == \"coco_panoptic_standard\":\n7:         meta = {}\n8:         # The following metadata maps contiguous id from [0, #thing categories +\n9:         # #stuff categories) to their names and colors. We have to replica of the\n10:         # same name and color under \"thing_*\" and \"stuff_*\" because the current\n11:         # visualization function in D2 handles thing and class classes differently\n12:         # due to some heuristic used in Panoptic FPN. We keep the same naming to\n13:         # enable reusing existing visualization functions.\n14:         thing_classes = [k[\"name\"] for k in COCO_CATEGORIES]\n15:         thing_colors = [k[\"color\"] for k in COCO_CATEGORIES]\n16:         stuff_classes = [k[\"name\"] for k in COCO_CATEGORIES]\n17:         stuff_colors = [k[\"color\"] for k in COCO_CATEGORIES]\n18:\n19:         meta[\"thing_classes\"] = thing_classes\n20:         meta[\"thing_colors\"] = thing_colors\n21:         meta[\"stuff_classes\"] = stuff_classes\n22:         meta[\"stuff_colors\"] = stuff_colors\n23:\n24:         # Convert category id for training:\n25:         #   category id: like semantic segmentation, it is the class id for each\n26:         #   pixel. Since there are some classes not used in evaluation, the category\n27:         #   id is not always contiguous and thus we have two set of category ids:\n28:         #       - original category id: category id in the original dataset, mainly\n29:         #           used for evaluation.\n30:         #       - contiguous category id: [0, #classes), in order to train the linear\n31:         #           softmax classifier.\n32:         thing_dataset_id_to_contiguous_id = {}\n33:         stuff_dataset_id_to_contiguous_id = {}\n34:\n35:         for i, cat in enumerate(COCO_CATEGORIES):\n36:             if cat[\"isthing\"]:\n37:                 thing_dataset_id_to_contiguous_id[cat[\"id\"]] = i\n38:             else:\n39:                 stuff_dataset_id_to_contiguous_id[cat[\"id\"]] = i\n40:\n41:         meta[\"thing_dataset_id_to_contiguous_id\"] = thing_dataset_id_to_contiguous_id\n42:         meta[\"stuff_dataset_id_to_contiguous_id\"] = stuff_dataset_id_to_contiguous_id\n43:\n44:         return meta\n45:     elif dataset_name == \"coco_person\":\n46:         return {\n47:             \"thing_classes\": [\"person\"],\n48:             \"keypoint_names\": COCO_PERSON_KEYPOINT_NAMES,\n49:             \"keypoint_flip_map\": COCO_PERSON_KEYPOINT_FLIP_MAP,\n50:             \"keypoint_connection_rules\": KEYPOINT_CONNECTION_RULES,\n51:         }\n52:     elif dataset_name == \"cityscapes\":\n53:         # fmt: off\n54:         CITYSCAPES_THING_CLASSES = [\n55:             \"person\", \"rider\", \"car\", \"truck\",\n56:             \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n57:         ]\n58:         CITYSCAPES_STUFF_CLASSES = [\n59:             \"road\", \"sidewalk\", \"building\", \"wall\", \"fence\", \"pole\", \"traffic light\",\n60:             \"traffic sign\", \"vegetation\", \"terrain\", \"sky\", \"person\", \"rider\", \"car\",\n61:             \"truck\", \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n62:         ]\n63:         # fmt: on\n64:         return {\n65:             \"thing_classes\": CITYSCAPES_THING_CLASSES,\n66:             \"stuff_classes\": CITYSCAPES_STUFF_CLASSES,\n67:         }\n68:     raise KeyError(\"No built-in metadata for dataset {}\".format(dataset_name))\n69:\n70: _get_builtin_metadata('coco_panoptic_standard')", "question": "What is the value of 'meta' in line 41 after executing '_get_builtin_metadata('coco_panoptic_standard')'?", "answer": "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}}", "variable_assignment": "meta = {'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}}", "loop_range": [35, 39], "post_loop_line": 41, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"idx": 3, "scratchpad_format": "def _merge(a, aux, lo, mid, hi):\n        i = lo # [STATE] i = 0 [/STATE]\n        j = mid + 1 # [STATE] j = 4 [/STATE]\n\n        for k in range(lo, hi + 1): #  [STATE] k = 0 [/STATE] [STATE] k = 1 [/STATE] [STATE] k = 2 [/STATE] [STATE] k = 3 [/STATE] [STATE] k = 4 [/STATE] [STATE] k = 5 [/STATE] [STATE] k = 6 [/STATE] [STATE] k = 7 [/STATE]\n            aux[k] = a[k] #  [STATE] aux = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] [/STATE] [STATE] aux = [1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0] [/STATE]\n\n        for k in range(lo, hi + 1): #  [STATE] k = 0 [/STATE] [STATE] k = 1 [/STATE] [STATE] k = 2 [/STATE] [STATE] k = 3 [/STATE] [STATE] k = 4 [/STATE] [STATE] k = 5 [/STATE] [STATE] k = 6 [/STATE] [STATE] k = 7 [/STATE]\n            if i > mid:\n                a[k] = aux[j]\n                j += 1 #  [STATE] j = 5 [/STATE] [STATE] j = 6 [/STATE] [STATE] j = 7 [/STATE] [STATE] j = 8 [/STATE]\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1 #  [STATE] i = 1 [/STATE] [STATE] i = 2 [/STATE] [STATE] i = 3 [/STATE] [STATE] i = 4 [/STATE]\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge([1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 3, 7)", "loop_code": "1: def _merge(a, aux, lo, mid, hi):\n2:         i = lo\n3:         j = mid + 1\n4:\n5:         for k in range(lo, hi + 1):\n6:             aux[k] = a[k]\n7:\n8:         for k in range(lo, hi + 1):\n9:             if i > mid:\n10:                 a[k] = aux[j]\n11:                 j += 1\n12:             elif j > hi:\n13:                 a[k] = aux[i]\n14:                 i += 1\n15:             elif util.less(aux[i], aux[j]):\n16:                 a[k] = aux[i]\n17:                 i += 1\n18:             else:\n19:                 a[k] = aux[j]\n20:                 j += 1\n21:\n22: _merge([1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 3, 7)", "question": "What is the value of 'k' in line 8 after executing '_merge([1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0, 3, 7)'?", "answer": "3", "variable_assignment": "k = 3", "loop_range": [5, 6], "post_loop_line": 8, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"idx": 4, "scratchpad_format": "def join_options(options):\n    \"\"\"Given a list of option strings this joins them in the most appropriate\n    way and returns them in the form ``(formatted_string,\n    any_prefix_is_slash)`` where the second item in the tuple is a flag that\n    indicates if any of the option prefixes was a slash.\n    \"\"\"\n    rv = [] # [STATE] rv = [] [/STATE]\n    any_prefix_is_slash = False # [STATE] any_prefix_is_slash = False [/STATE]\n    for opt in options: #  [STATE] opt = '--help' [/STATE]\n        prefix = split_opt(opt)[0] # [STATE] prefix = '--' [/STATE]\n        if prefix == '/':\n            any_prefix_is_slash = True\n        rv.append((len(prefix), opt)) # [STATE] rv = [(2, '--help')] [/STATE]\n\n    rv.sort(key=lambda x: x[0])\n\n    rv = ', '.join(x[1] for x in rv) # [STATE] rv = '--help' [/STATE]\n    return rv, any_prefix_is_slash\n\njoin_options(['--help'])", "loop_code": "1: def join_options(options):\n2:     \"\"\"Given a list of option strings this joins them in the most appropriate\n3:     way and returns them in the form ``(formatted_string,\n4:     any_prefix_is_slash)`` where the second item in the tuple is a flag that\n5:     indicates if any of the option prefixes was a slash.\n6:     \"\"\"\n7:     rv = []\n8:     any_prefix_is_slash = False\n9:     for opt in options:\n10:         prefix = split_opt(opt)[0]\n11:         if prefix == '/':\n12:             any_prefix_is_slash = True\n13:         rv.append((len(prefix), opt))\n14:\n15:     rv.sort(key=lambda x: x[0])\n16:\n17:     rv = ', '.join(x[1] for x in rv)\n18:     return rv, any_prefix_is_slash\n19:\n20: join_options(['--help'])", "question": "What is the value of 'rv' in line 17 after executing 'join_options(['--help'])'?", "answer": "'--help'", "variable_assignment": "rv = '--help'", "loop_range": [9, 13], "post_loop_line": 17, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 5, "scratchpad_format": "def which(exe=None):\n    \"\"\"\n    Python clone of /usr/bin/which\n    \"\"\"\n\n    if not exe:\n        log.error(\"No executable was passed to be searched by salt.utils.path.which()\")\n        return None\n\n    ## define some utilities (we use closures here because our predecessor used them)\n    def is_executable_common(path): # [STATE] is_executable_common = <function which.<locals>.is_executable_common at 0x7f27d3207c10> [/STATE]\n        \"\"\"\n        This returns truth if posixy semantics (which python simulates on\n        windows) states that this is executable.\n        \"\"\"\n        return os.path.isfile(path) and os.access(path, os.X_OK)\n\n    def resolve(path): # [STATE] resolve = <function which.<locals>.resolve at 0x7f27d3207820> [/STATE]\n        \"\"\"\n        This will take a path and recursively follow the link until we get to a\n        real file.\n        \"\"\"\n        while os.path.islink(path):\n            res = readlink(path)\n\n            # if the link points to a relative target, then convert it to an\n            # absolute path relative to the original path\n            if not os.path.isabs(res):\n                directory, _ = os.path.split(path)\n                res = join(directory, res)\n            path = res\n        return path\n\n    # windows-only\n    def has_executable_ext(path, ext_membership): # [STATE] has_executable_ext = <function which.<locals>.has_executable_ext at 0x7f27d31c20d0> [/STATE]\n        \"\"\"\n        Extract the extension from the specified path, lowercase it so we\n        can be insensitive, and then check it against the available exts.\n        \"\"\"\n        p, ext = os.path.splitext(path)\n        return ext.lower() in ext_membership\n\n    ## prepare related variables from the environment\n    res = salt.utils.stringutils.to_unicode(os.environ.get(\"PATH\", \"\")) # [STATE] res = '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin' [/STATE]\n    system_path = res.split(os.pathsep) # [STATE] system_path = ['/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/home/XXX/.gvm/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/local/rcs/XXX/miniforge3/condabin', '/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', '/sbin', '/bin', '/usr/games', '/usr/local/games', '/snap/bin', '/home/XXX/.local/bin', '/home/XXX/.local/bin'] [/STATE]\n\n    # add some reasonable defaults in case someone's PATH is busted\n    if not salt.utils.platform.is_windows():\n        res = set(system_path) # [STATE] res = {'/usr/games', '/sbin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.local/bin', '/snap/bin', '/usr/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/usr/local/games', '/usr/local/sbin', '/home/XXX/.gdrive-downloader', '/local/rcs/XXX/miniforge3/condabin', '/local/arise/XXX/miniforge3/bin', '/usr/sbin', '/usr/local/bin'} [/STATE]\n        extended_path = [ # [STATE] extended_path = ['/sbin', '/bin', '/usr/sbin', '/usr/bin', '/usr/local/sbin', '/usr/local/bin'] [/STATE]\n            \"/sbin\",\n            \"/bin\",\n            \"/usr/sbin\",\n            \"/usr/bin\",\n            \"/usr/local/sbin\",\n            \"/usr/local/bin\",\n        ]\n        system_path.extend([p for p in extended_path if p not in res])\n\n    ## now to define the semantics of what's considered executable on a given platform\n    if salt.utils.platform.is_windows():\n        # executable semantics on windows requires us to search PATHEXT\n        res = salt.utils.stringutils.to_str(os.environ.get(\"PATHEXT\", \".EXE\"))\n\n        # generate two variables, one of them for O(n) searches (but ordered)\n        # and another for O(1) searches. the previous guy was trying to use\n        # memoization with a function that has no arguments, this provides\n        # the exact same benefit\n        pathext = res.split(os.pathsep)\n        res = {ext.lower() for ext in pathext}\n\n        # check if our caller already specified a valid extension as then we don't need to match it\n        _, ext = os.path.splitext(exe)\n        if ext.lower() in res:\n            pathext = [\"\"]\n\n            is_executable = is_executable_common\n\n        # The specified extension isn't valid, so we just assume it's part of the\n        # filename and proceed to walk the pathext list\n        else:\n            is_executable = lambda path, membership=res: is_executable_common(\n                path\n            ) and has_executable_ext(path, membership)\n\n    else:\n        # in posix, there's no such thing as file extensions..only zuul\n        pathext = [\"\"] # [STATE] pathext = [''] [/STATE]\n\n        # executable semantics are pretty simple on reasonable platforms...\n        is_executable = is_executable_common # [STATE] is_executable = <function which.<locals>.is_executable_common at 0x7f27d3207c10> [/STATE]\n\n    ## search for the executable\n\n    # check to see if the full path was specified as then we don't need\n    # to actually walk the system_path for any reason\n    if is_executable(exe):\n        return exe\n\n    # now to search through our system_path\n    for path in system_path: #  [STATE] path = '/home/XXX/.gdrive-downloader' [/STATE] [STATE] path = '/local/arise/XXX/miniforge3/bin' [/STATE] [STATE] path = '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin' [/STATE] [STATE] path = '/home/XXX/.gvm/gos/go1.19.1/bin' [/STATE] [STATE] path = '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin' [/STATE] [STATE] path = '/home/XXX/.gvm/bin' [/STATE] [STATE] path = '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin' [/STATE] [STATE] path = '/local/rcs/XXX/miniforge3/condabin' [/STATE] [STATE] path = '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli' [/STATE] [STATE] path = '/usr/local/sbin' [/STATE] [STATE] path = '/usr/local/bin' [/STATE] [STATE] path = '/usr/sbin' [/STATE] [STATE] path = '/usr/bin' [/STATE]\n        p = join(path, exe) #  [STATE] p = '/home/XXX/.gdrive-downloader/true' [/STATE] [STATE] p = '/local/arise/XXX/miniforge3/bin/true' [/STATE] [STATE] p = '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true' [/STATE] [STATE] p = '/home/XXX/.gvm/gos/go1.19.1/bin/true' [/STATE] [STATE] p = '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true' [/STATE] [STATE] p = '/home/XXX/.gvm/bin/true' [/STATE] [STATE] p = '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true' [/STATE] [STATE] p = '/local/rcs/XXX/miniforge3/condabin/true' [/STATE] [STATE] p = '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true' [/STATE] [STATE] p = '/usr/local/sbin/true' [/STATE] [STATE] p = '/usr/local/bin/true' [/STATE] [STATE] p = '/usr/sbin/true' [/STATE] [STATE] p = '/usr/bin/true' [/STATE]\n\n        # iterate through all extensions to see which one is executable\n        for ext in pathext: #  [STATE] ext = '' [/STATE]\n            pext = p + ext #  [STATE] pext = '/home/XXX/.gdrive-downloader/true' [/STATE] [STATE] pext = '/local/arise/XXX/miniforge3/bin/true' [/STATE] [STATE] pext = '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true' [/STATE] [STATE] pext = '/home/XXX/.gvm/gos/go1.19.1/bin/true' [/STATE] [STATE] pext = '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true' [/STATE] [STATE] pext = '/home/XXX/.gvm/bin/true' [/STATE] [STATE] pext = '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true' [/STATE] [STATE] pext = '/local/rcs/XXX/miniforge3/condabin/true' [/STATE] [STATE] pext = '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true' [/STATE] [STATE] pext = '/usr/local/sbin/true' [/STATE] [STATE] pext = '/usr/local/bin/true' [/STATE] [STATE] pext = '/usr/sbin/true' [/STATE] [STATE] pext = '/usr/bin/true' [/STATE]\n            rp = resolve(pext) #  [STATE] rp = '/home/XXX/.gdrive-downloader/true' [/STATE] [STATE] rp = '/local/arise/XXX/miniforge3/bin/true' [/STATE] [STATE] rp = '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true' [/STATE] [STATE] rp = '/home/XXX/.gvm/gos/go1.19.1/bin/true' [/STATE] [STATE] rp = '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true' [/STATE] [STATE] rp = '/home/XXX/.gvm/bin/true' [/STATE] [STATE] rp = '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true' [/STATE] [STATE] rp = '/local/rcs/XXX/miniforge3/condabin/true' [/STATE] [STATE] rp = '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true' [/STATE] [STATE] rp = '/usr/local/sbin/true' [/STATE] [STATE] rp = '/usr/local/bin/true' [/STATE] [STATE] rp = '/usr/sbin/true' [/STATE] [STATE] rp = '/usr/bin/true' [/STATE]\n            if is_executable(rp):\n                return p + ext\n            continue\n        continue\n\n    ## if something was executable, we should've found it already...\n    log.trace(\n        \"'%s' could not be found in the following search path: '%s'\", exe, system_path\n    )\n    return None\n\nwhich('true')", "loop_code": "1: def which(exe=None):\n2:     \"\"\"\n3:     Python clone of /usr/bin/which\n4:     \"\"\"\n5:\n6:     if not exe:\n7:         log.error(\"No executable was passed to be searched by salt.utils.path.which()\")\n8:         return None\n9:\n10:     ## define some utilities (we use closures here because our predecessor used them)\n11:     def is_executable_common(path):\n12:         \"\"\"\n13:         This returns truth if posixy semantics (which python simulates on\n14:         windows) states that this is executable.\n15:         \"\"\"\n16:         return os.path.isfile(path) and os.access(path, os.X_OK)\n17:\n18:     def resolve(path):\n19:         \"\"\"\n20:         This will take a path and recursively follow the link until we get to a\n21:         real file.\n22:         \"\"\"\n23:         while os.path.islink(path):\n24:             res = readlink(path)\n25:\n26:             # if the link points to a relative target, then convert it to an\n27:             # absolute path relative to the original path\n28:             if not os.path.isabs(res):\n29:                 directory, _ = os.path.split(path)\n30:                 res = join(directory, res)\n31:             path = res\n32:         return path\n33:\n34:     # windows-only\n35:     def has_executable_ext(path, ext_membership):\n36:         \"\"\"\n37:         Extract the extension from the specified path, lowercase it so we\n38:         can be insensitive, and then check it against the available exts.\n39:         \"\"\"\n40:         p, ext = os.path.splitext(path)\n41:         return ext.lower() in ext_membership\n42:\n43:     ## prepare related variables from the environment\n44:     res = salt.utils.stringutils.to_unicode(os.environ.get(\"PATH\", \"\"))\n45:     system_path = res.split(os.pathsep)\n46:\n47:     # add some reasonable defaults in case someone's PATH is busted\n48:     if not salt.utils.platform.is_windows():\n49:         res = set(system_path)\n50:         extended_path = [\n51:             \"/sbin\",\n52:             \"/bin\",\n53:             \"/usr/sbin\",\n54:             \"/usr/bin\",\n55:             \"/usr/local/sbin\",\n56:             \"/usr/local/bin\",\n57:         ]\n58:         system_path.extend([p for p in extended_path if p not in res])\n59:\n60:     ## now to define the semantics of what's considered executable on a given platform\n61:     if salt.utils.platform.is_windows():\n62:         # executable semantics on windows requires us to search PATHEXT\n63:         res = salt.utils.stringutils.to_str(os.environ.get(\"PATHEXT\", \".EXE\"))\n64:\n65:         # generate two variables, one of them for O(n) searches (but ordered)\n66:         # and another for O(1) searches. the previous guy was trying to use\n67:         # memoization with a function that has no arguments, this provides\n68:         # the exact same benefit\n69:         pathext = res.split(os.pathsep)\n70:         res = {ext.lower() for ext in pathext}\n71:\n72:         # check if our caller already specified a valid extension as then we don't need to match it\n73:         _, ext = os.path.splitext(exe)\n74:         if ext.lower() in res:\n75:             pathext = [\"\"]\n76:\n77:             is_executable = is_executable_common\n78:\n79:         # The specified extension isn't valid, so we just assume it's part of the\n80:         # filename and proceed to walk the pathext list\n81:         else:\n82:             is_executable = lambda path, membership=res: is_executable_common(\n83:                 path\n84:             ) and has_executable_ext(path, membership)\n85:\n86:     else:\n87:         # in posix, there's no such thing as file extensions..only zuul\n88:         pathext = [\"\"]\n89:\n90:         # executable semantics are pretty simple on reasonable platforms...\n91:         is_executable = is_executable_common\n92:\n93:     ## search for the executable\n94:\n95:     # check to see if the full path was specified as then we don't need\n96:     # to actually walk the system_path for any reason\n97:     if is_executable(exe):\n98:         return exe\n99:\n100:     # now to search through our system_path\n101:     for path in system_path:\n102:         p = join(path, exe)\n103:\n104:         # iterate through all extensions to see which one is executable\n105:         for ext in pathext:\n106:             pext = p + ext\n107:             rp = resolve(pext)\n108:             if is_executable(rp):\n109:                 return p + ext\n110:             continue\n111:         continue\n112:\n113:     ## if something was executable, we should've found it already...\n114:     log.trace(\n115:         \"'%s' could not be found in the following search path: '%s'\", exe, system_path\n116:     )\n117:     return None\n118:\n119: which('true')", "question": "What is the value of 'has_executable_ext' in line 35 after executing 'which('true')'?", "answer": "<function which.<locals>.has_executable_ext at 0x7f27d31c20d0>", "variable_assignment": "has_executable_ext = <function which.<locals>.has_executable_ext at 0x7f27d31c20d0>", "loop_range": [23, 31], "post_loop_line": 35, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 6, "scratchpad_format": "def _remove_comments_inline(text):\n  \"\"\"Removes the comments from the string 'text' and ignores % inside \\\\url{}.\"\"\"\n  if 'auto-ignore' in text:\n    return text\n  if text.lstrip(' ').lstrip('\\t').startswith('%'):\n    return ''\n\n  url_pattern = r'\\\\url\\{(?>[^{}]|(?R))*\\}' # [STATE] url_pattern = '\\\\\\\\url\\\\{(?>[^{}]|(?R))*\\\\}' [/STATE]\n\n  def remove_comments(segment): # [STATE] remove_comments = <function _remove_comments_inline.<locals>.remove_comments at 0x7f185616f280> [/STATE]\n    \"\"\"Remove comments from a segment of text.\"\"\"\n    if segment.lstrip().startswith('%'):\n      return ''\n    match = regex.search(r'(?<!\\\\)%', segment)\n    if match:\n      return segment[: match.end()] + '\\n'\n    else:\n      return segment\n\n  # split the text into segments based on \\url{} tags\n  segments = regex.split(f'({url_pattern})', text) # [STATE] segments = ['Foo %Comment\\n'] [/STATE]\n\n  for i in range(len(segments)): #  [STATE] i = 0 [/STATE]\n    # only process segments that are not part of a \\url{} tag\n    if not regex.match(url_pattern, segments[i]):\n      segments[i] = remove_comments(segments[i]) # [STATE] segments = ['Foo %\\n'] [/STATE]\n\n  final_text = ''.join(segments) # [STATE] final_text = 'Foo %\\n' [/STATE]\n  return (\n      final_text\n      if final_text.endswith('\\n') or final_text.endswith('\\\\n')\n      else final_text + '\\n'\n  )\n\n_remove_comments_inline('Foo %Comment\\n')", "loop_code": "1: def _remove_comments_inline(text):\n2:   \"\"\"Removes the comments from the string 'text' and ignores % inside \\\\url{}.\"\"\"\n3:   if 'auto-ignore' in text:\n4:     return text\n5:   if text.lstrip(' ').lstrip('\\t').startswith('%'):\n6:     return ''\n7:\n8:   url_pattern = r'\\\\url\\{(?>[^{}]|(?R))*\\}'\n9:\n10:   def remove_comments(segment):\n11:     \"\"\"Remove comments from a segment of text.\"\"\"\n12:     if segment.lstrip().startswith('%'):\n13:       return ''\n14:     match = regex.search(r'(?<!\\\\)%', segment)\n15:     if match:\n16:       return segment[: match.end()] + '\\n'\n17:     else:\n18:       return segment\n19:\n20:   # split the text into segments based on \\url{} tags\n21:   segments = regex.split(f'({url_pattern})', text)\n22:\n23:   for i in range(len(segments)):\n24:     # only process segments that are not part of a \\url{} tag\n25:     if not regex.match(url_pattern, segments[i]):\n26:       segments[i] = remove_comments(segments[i])\n27:\n28:   final_text = ''.join(segments)\n29:   return (\n30:       final_text\n31:       if final_text.endswith('\\n') or final_text.endswith('\\\\n')\n32:       else final_text + '\\n'\n33:   )\n34:\n35: _remove_comments_inline('Foo %Comment\\n')", "question": "What is the value of 'final_text' in line 28 after executing '_remove_comments_inline('Foo %Comment\\n')'?", "answer": "'Foo %\\n'", "variable_assignment": "final_text = 'Foo %\\n'", "loop_range": [23, 26], "post_loop_line": 28, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 7, "scratchpad_format": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename) # [STATE] filename_path = PosixPath('to/img.ext') [/STATE]\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix # [STATE] root = 'img' [/STATE] # [STATE] extension = '.ext' [/STATE]\n    basename_regex = '{}({})?'.format( # [STATE] basename_regex = 'img(\\\\.ext)?' [/STATE]\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = '' # [STATE] path_prefix_regex = '' [/STATE]\n    for fragment in reversed(filename_path.parents): #  [STATE] fragment = PosixPath('.') [/STATE] [STATE] fragment = PosixPath('to') [/STATE]\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name) #  [STATE] fragment = '' [/STATE] [STATE] fragment = 'to' [/STATE]\n      path_prefix_regex = '({}{}{})?'.format( #  [STATE] path_prefix_regex = '(/)?' [/STATE] [STATE] path_prefix_regex = '((/)?to/)?' [/STATE]\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex # [STATE] filename_regex = '((/)?to/)?img(\\\\.ext)?' [/STATE]\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex # [STATE] filename_regex = '(./)?((/)?to/)?img(\\\\.ext)?' [/STATE]\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex) # [STATE] patn = '\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}' [/STATE]\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference('to/img.ext', '{long/path/to/img}', False)", "loop_code": "1: def _search_reference(filename, contents, strict=False):\n2:   \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n3:\n4:   If not strict mode, path prefix and extension are optional.\n5:   \"\"\"\n6:   if strict:\n7:     # regex pattern for strict=True for path/to/img.ext:\n8:     # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n9:     filename_regex = filename.replace('.', r'\\.')\n10:   else:\n11:     filename_path = Path(filename)\n12:\n13:     # make extension optional\n14:     root, extension = filename_path.stem, filename_path.suffix\n15:     basename_regex = '{}({})?'.format(\n16:         regex.escape(root), regex.escape(extension)\n17:     )\n18:\n19:     # iterate through parent fragments to make path prefix optional\n20:     path_prefix_regex = ''\n21:     for fragment in reversed(filename_path.parents):\n22:       if fragment.name == '.':\n23:         continue\n24:       fragment = regex.escape(fragment.name)\n25:       path_prefix_regex = '({}{}{})?'.format(\n26:           path_prefix_regex, fragment, os.sep\n27:       )\n28:\n29:     # Regex pattern for strict=True for path/to/img.ext:\n30:     # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n31:     filename_regex = path_prefix_regex + basename_regex\n32:\n33:   # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n34:   # adds prefix for relative paths starting with './' or '.\\' to regex search.\n35:   filename_regex = r'(.' + os.sep + r')?' + filename_regex\n36:\n37:   # Pads with braces and optional whitespace/comment characters.\n38:   patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n39:   # Picture references in LaTeX are allowed to be in different cases.\n40:   return regex.search(patn, contents, regex.IGNORECASE)\n41:\n42: _search_reference('to/img.ext', '{long/path/to/img}', False)", "question": "What is the value of 'filename_regex' in line 31 after executing '_search_reference('to/img.ext', '{long/path/to/img}', False)'?", "answer": "'((/)?to/)?img(\\\\.ext)?'", "variable_assignment": "filename_regex = '((/)?to/)?img(\\\\.ext)?'", "loop_range": [21, 27], "post_loop_line": 31, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 8, "scratchpad_format": "def run_arxiv_cleaner(parameters):\n  \"\"\"Core of the code, runs the actual arXiv cleaner.\"\"\"\n\n  files_to_delete = [ # [STATE] files_to_delete = ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$'] [/STATE]\n      r'\\.aux$',\n      r'\\.sh$',\n      r'\\.blg$',\n      r'\\.brf$',\n      r'\\.log$',\n      r'\\.out$',\n      r'\\.ps$',\n      r'\\.dvi$',\n      r'\\.synctex.gz$',\n      '~$',\n      r'\\.backup$',\n      r'\\.gitignore$',\n      r'\\.DS_Store$',\n      r'\\.svg$',\n      r'^\\.idea',\n      r'\\.dpth$',\n      r'\\.md5$',\n      r'\\.dep$',\n      r'\\.auxlock$',\n      r'\\.fls$',\n      r'\\.fdb_latexmk$',\n  ]\n\n  if not parameters['keep_bib']:\n    files_to_delete.append(r'\\.bib$') # [STATE] files_to_delete = ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'] [/STATE]\n\n  parameters.update({ # [STATE] parameters = {'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$']} [/STATE]\n      'to_delete': files_to_delete,\n      'figures_to_copy_if_referenced': [\n          r'\\.png$',\n          r'\\.jpg$',\n          r'\\.jpeg$',\n          r'\\.pdf$',\n      ],\n  })\n\n  logging.info('Collecting file structure.')\n  parameters['output_folder'] = _create_out_folder(parameters['input_folder']) # [STATE] parameters = {'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$'], 'output_folder': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv'} [/STATE]\n\n  from_zip = parameters['input_folder'].endswith('.zip') # [STATE] from_zip = False [/STATE]\n  tempdir_context = ( # [STATE] tempdir_context = {_exceptions=()} [/STATE]\n      tempfile.TemporaryDirectory() if from_zip else contextlib.suppress()\n  )\n\n  with tempdir_context as tempdir: # [STATE] tempdir = None [/STATE]\n\n    if from_zip:\n      logging.info('Unzipping input folder.')\n      shutil.unpack_archive(parameters['input_folder'], tempdir)\n      parameters['input_folder'] = tempdir\n\n    splits = _split_all_files(parameters) # [STATE] splits = {'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []} [/STATE]\n\n    logging.info('Reading all tex files')\n    tex_contents = _read_all_tex_contents( # [STATE] tex_contents = {'main.tex': ['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}\\n', '\\\\input{figures/figure_not_included_2.tex}\\n'], 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']} [/STATE]\n        splits['tex_in_root'] + splits['tex_not_in_root'], parameters\n    )\n\n    for tex_file in tex_contents: #  [STATE] tex_file = 'main.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included_2.tex' [/STATE] [STATE] tex_file = 'figures/figure_included.tikz' [/STATE] [STATE] tex_file = 'figures/figure_included.tex' [/STATE]\n      logging.info('Removing comments in file %s.', tex_file)\n      tex_contents[tex_file] = _remove_comments_and_commands_to_delete( #  [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}\\n', '\\\\input{figures/figure_not_included_2.tex}\\n'], 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']} [/STATE] [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']} [/STATE] [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']} [/STATE] [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']} [/STATE] [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE]\n          tex_contents[tex_file], parameters\n      )\n\n    for tex_file in tex_contents: #  [STATE] tex_file = 'main.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included_2.tex' [/STATE] [STATE] tex_file = 'figures/figure_included.tikz' [/STATE] [STATE] tex_file = 'figures/figure_included.tex' [/STATE]\n      logging.info('Replacing \\\\includesvg calls in file %s.', tex_file)\n      tex_contents[tex_file] = _replace_includesvg(\n          tex_contents[tex_file], splits['svg_inkscape']\n      )\n\n    for tex_file in tex_contents: #  [STATE] tex_file = 'main.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included.tex' [/STATE] [STATE] tex_file = 'figures/figure_not_included_2.tex' [/STATE] [STATE] tex_file = 'figures/figure_included.tikz' [/STATE] [STATE] tex_file = 'figures/figure_included.tex' [/STATE]\n      logging.info('Replacing Tikz Pictures in file %s.', tex_file)\n      content = _replace_tikzpictures( #  [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE] [STATE] content = '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n' [/STATE] [STATE] content = '' [/STATE] [STATE] content = '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n' [/STATE] [STATE] content = '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n' [/STATE]\n          tex_contents[tex_file], splits['external_tikz_figures']\n      )\n      # If file ends with '\\n' already, the split in last line would add an extra\n      # '\\n', so we remove it.\n      tex_contents[tex_file] = content.split('\\n') #  [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']} [/STATE]\n\n    _keep_only_referenced_tex(tex_contents, splits) # [STATE] splits = {'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']} [/STATE]\n    _add_root_tex_files(splits)\n\n    for tex_file in splits['tex_to_copy']: #  [STATE] tex_file = 'figures/figure_included.tikz' [/STATE] [STATE] tex_file = 'main.tex' [/STATE]\n      logging.info('Replacing patterns in file %s.', tex_file)\n      content = '\\n'.join(tex_contents[tex_file]) #  [STATE] content = '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n' [/STATE] [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n      content = _find_and_replace_patterns(\n          content, parameters.get('patterns_and_insertions', list())\n      )\n      tex_contents[tex_file] = content #  [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE] [STATE] tex_contents = {'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'} [/STATE]\n      new_path = os.path.join(parameters['output_folder'], tex_file) #  [STATE] new_path = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/figures/figure_included.tex' [/STATE] [STATE] new_path = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/figures/figure_included.tikz' [/STATE] [STATE] new_path = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/main.tex' [/STATE]\n      logging.info('Writing modified contents to %s.', new_path)\n      _write_file_content(\n          content,\n          new_path,\n      )\n\n    full_content = '\\n'.join( # [STATE] full_content = '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n\\n\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n\\n\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n        ''.join(tex_contents[fn]) for fn in splits['tex_to_copy']\n    )\n    _copy_only_referenced_non_tex_not_in_root(parameters, full_content, splits)\n    for non_tex_file in splits['non_tex_in_root']: #  [STATE] non_tex_file = 'main.bbl' [/STATE]\n      logging.info('Copying non-tex file %s.', non_tex_file)\n      _copy_file(non_tex_file, parameters)\n\n    _resize_and_copy_figures_if_referenced(parameters, full_content, splits)\n    logging.info('Outputs written to %s', parameters['output_folder'])\n\nrun_arxiv_cleaner({'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False})", "loop_code": "1: def run_arxiv_cleaner(parameters):\n2:   \"\"\"Core of the code, runs the actual arXiv cleaner.\"\"\"\n3:\n4:   files_to_delete = [\n5:       r'\\.aux$',\n6:       r'\\.sh$',\n7:       r'\\.blg$',\n8:       r'\\.brf$',\n9:       r'\\.log$',\n10:       r'\\.out$',\n11:       r'\\.ps$',\n12:       r'\\.dvi$',\n13:       r'\\.synctex.gz$',\n14:       '~$',\n15:       r'\\.backup$',\n16:       r'\\.gitignore$',\n17:       r'\\.DS_Store$',\n18:       r'\\.svg$',\n19:       r'^\\.idea',\n20:       r'\\.dpth$',\n21:       r'\\.md5$',\n22:       r'\\.dep$',\n23:       r'\\.auxlock$',\n24:       r'\\.fls$',\n25:       r'\\.fdb_latexmk$',\n26:   ]\n27:\n28:   if not parameters['keep_bib']:\n29:     files_to_delete.append(r'\\.bib$')\n30:\n31:   parameters.update({\n32:       'to_delete': files_to_delete,\n33:       'figures_to_copy_if_referenced': [\n34:           r'\\.png$',\n35:           r'\\.jpg$',\n36:           r'\\.jpeg$',\n37:           r'\\.pdf$',\n38:       ],\n39:   })\n40:\n41:   logging.info('Collecting file structure.')\n42:   parameters['output_folder'] = _create_out_folder(parameters['input_folder'])\n43:\n44:   from_zip = parameters['input_folder'].endswith('.zip')\n45:   tempdir_context = (\n46:       tempfile.TemporaryDirectory() if from_zip else contextlib.suppress()\n47:   )\n48:\n49:   with tempdir_context as tempdir:\n50:\n51:     if from_zip:\n52:       logging.info('Unzipping input folder.')\n53:       shutil.unpack_archive(parameters['input_folder'], tempdir)\n54:       parameters['input_folder'] = tempdir\n55:\n56:     splits = _split_all_files(parameters)\n57:\n58:     logging.info('Reading all tex files')\n59:     tex_contents = _read_all_tex_contents(\n60:         splits['tex_in_root'] + splits['tex_not_in_root'], parameters\n61:     )\n62:\n63:     for tex_file in tex_contents:\n64:       logging.info('Removing comments in file %s.', tex_file)\n65:       tex_contents[tex_file] = _remove_comments_and_commands_to_delete(\n66:           tex_contents[tex_file], parameters\n67:       )\n68:\n69:     for tex_file in tex_contents:\n70:       logging.info('Replacing \\\\includesvg calls in file %s.', tex_file)\n71:       tex_contents[tex_file] = _replace_includesvg(\n72:           tex_contents[tex_file], splits['svg_inkscape']\n73:       )\n74:\n75:     for tex_file in tex_contents:\n76:       logging.info('Replacing Tikz Pictures in file %s.', tex_file)\n77:       content = _replace_tikzpictures(\n78:           tex_contents[tex_file], splits['external_tikz_figures']\n79:       )\n80:       # If file ends with '\\n' already, the split in last line would add an extra\n81:       # '\\n', so we remove it.\n82:       tex_contents[tex_file] = content.split('\\n')\n83:\n84:     _keep_only_referenced_tex(tex_contents, splits)\n85:     _add_root_tex_files(splits)\n86:\n87:     for tex_file in splits['tex_to_copy']:\n88:       logging.info('Replacing patterns in file %s.', tex_file)\n89:       content = '\\n'.join(tex_contents[tex_file])\n90:       content = _find_and_replace_patterns(\n91:           content, parameters.get('patterns_and_insertions', list())\n92:       )\n93:       tex_contents[tex_file] = content\n94:       new_path = os.path.join(parameters['output_folder'], tex_file)\n95:       logging.info('Writing modified contents to %s.', new_path)\n96:       _write_file_content(\n97:           content,\n98:           new_path,\n99:       )\n100:\n101:     full_content = '\\n'.join(\n102:         ''.join(tex_contents[fn]) for fn in splits['tex_to_copy']\n103:     )\n104:     _copy_only_referenced_non_tex_not_in_root(parameters, full_content, splits)\n105:     for non_tex_file in splits['non_tex_in_root']:\n106:       logging.info('Copying non-tex file %s.', non_tex_file)\n107:       _copy_file(non_tex_file, parameters)\n108:\n109:     _resize_and_copy_figures_if_referenced(parameters, full_content, splits)\n110:     logging.info('Outputs written to %s', parameters['output_folder'])\n111:\n112: run_arxiv_cleaner({'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False})", "question": "What is the value of 'tex_file' in line 75 after executing 'run_arxiv_cleaner({'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False})'?", "answer": "'figures/figure_included.tikz'", "variable_assignment": "tex_file = 'figures/figure_included.tikz'", "loop_range": [69, 73], "post_loop_line": 75, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 9, "scratchpad_format": "def _remove_comments_and_commands_to_delete(content, parameters):\n  \"\"\"Erases all LaTeX comments in the content, and writes it.\"\"\"\n  content = [_remove_comments_inline(line) for line in content] # [STATE] content = ['\\\\begin{document}\\n', 'Text\\n', '', '\\n', 'Text%\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '', '\\\\includegraphics{images/im1_included.png}\\n', '', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '', '', '', '', '', '\\n', '', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '', '\\n', '\\\\input{figures/figure_included.tex}\\n', '', '\\n', '', '', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'] [/STATE]\n  content = _remove_environment(''.join(content), 'comment') # [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should\\\\mytodo{Do this later} not be separated\\n\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\nPlease remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\nfrom this one.\\n\\n\\\\begin{mynote}\\n  This is a custom environment that could be excluded.\\n\\\\end{mynote}\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\if    false\\n\\\\if false\\n\\\\if 0\\n\\\\iffalse\\n\\\\ifvar\\nText\\n\\\\fi\\n\\\\fi\\n\\\\fi\\n\\\\fi\\n\\\\fi\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test \\\\red{hello\\ntest \\\\red{hello}}\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n  content = _remove_iffalse_block(content) # [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should\\\\mytodo{Do this later} not be separated\\n\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\nPlease remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\nfrom this one.\\n\\n\\\\begin{mynote}\\n  This is a custom environment that could be excluded.\\n\\\\end{mynote}\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test \\\\red{hello\\ntest \\\\red{hello}}\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n  for environment in parameters.get('environments_to_delete', []): #  [STATE] environment = 'mynote' [/STATE]\n    content = _remove_environment(content, environment) # [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should\\\\mytodo{Do this later} not be separated\\n\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\nPlease remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test \\\\red{hello\\ntest \\\\red{hello}}\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n  for command in parameters.get('commands_only_to_delete', []): #  [STATE] command = 'red' [/STATE]\n    content = _remove_command(content, command, True) # [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should\\\\mytodo{Do this later} not be separated\\n\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\nPlease remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n  for command in parameters['commands_to_delete']: #  [STATE] command = 'mytodo' [/STATE]\n    content = _remove_command(content, command, False) # [STATE] content = '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n' [/STATE]\n  return content\n\n_remove_comments_and_commands_to_delete(['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'], {'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$'], 'output_folder': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv'})", "loop_code": "1: def _remove_comments_and_commands_to_delete(content, parameters):\n2:   \"\"\"Erases all LaTeX comments in the content, and writes it.\"\"\"\n3:   content = [_remove_comments_inline(line) for line in content]\n4:   content = _remove_environment(''.join(content), 'comment')\n5:   content = _remove_iffalse_block(content)\n6:   for environment in parameters.get('environments_to_delete', []):\n7:     content = _remove_environment(content, environment)\n8:   for command in parameters.get('commands_only_to_delete', []):\n9:     content = _remove_command(content, command, True)\n10:   for command in parameters['commands_to_delete']:\n11:     content = _remove_command(content, command, False)\n12:   return content\n13:\n14: _remove_comments_and_commands_to_delete(['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'], {'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$'], 'output_folder': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv'})", "question": "What is the value of 'command' in line 8 after executing '_remove_comments_and_commands_to_delete(['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'], {'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$'], 'output_folder': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv'})'?", "answer": "'red'", "variable_assignment": "command = 'red'", "loop_range": [6, 7], "post_loop_line": 8, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 10, "scratchpad_format": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f: # [STATE] f = <_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'> [/STATE]\n        original_file_lines = f.readlines() # [STATE] original_file_lines = ['first line\\n', 'second line\\n', 'third line'] [/STATE]\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change] # [STATE] operation_changes = [{'operation': 'Replace', 'line': 2, 'content': 'new second line'}] [/STATE]\n    explanations = [ # [STATE] explanations = [] [/STATE]\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy() # [STATE] file_lines = ['first line\\n', 'second line\\n', 'third line'] [/STATE]\n    for change in operation_changes: #  [STATE] change = {'operation': 'Replace', 'line': 2, 'content': 'new second line'} [/STATE]\n        operation = change[\"operation\"] # [STATE] operation = 'Replace' [/STATE]\n        line = change[\"line\"] # [STATE] line = 2 [/STATE]\n        content = change[\"content\"] # [STATE] content = 'new second line' [/STATE]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\" # [STATE] file_lines = ['first line\\n', 'new second line\\n', 'third line'] [/STATE]\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\") # [STATE] diff = <generator object unified_diff at 0x7f5b71b2cba0> [/STATE]\n    for line in diff: #  [STATE] line = '--- ' [/STATE] [STATE] line = '+++ ' [/STATE] [STATE] line = '@@ -1,3 +1,3 @@' [/STATE] [STATE] line = ' first line\\n' [/STATE] [STATE] line = '-second line\\n' [/STATE] [STATE] line = '+new second line\\n' [/STATE] [STATE] line = ' third line' [/STATE]\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f: # [STATE] f = <_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'> [/STATE]\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes('/tmp/tmp6qrrn_j9', [{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], False)", "loop_code": "1: def apply_changes(file_path: str, changes: List, confirm: bool = False):\n2:     \"\"\"\n3:     Pass changes as loaded json (list of dicts)\n4:     \"\"\"\n5:     with open(file_path) as f:\n6:         original_file_lines = f.readlines()\n7:\n8:     # Filter out explanation elements\n9:     operation_changes = [change for change in changes if \"operation\" in change]\n10:     explanations = [\n11:         change[\"explanation\"] for change in changes if \"explanation\" in change\n12:     ]\n13:\n14:     # Sort the changes in reverse line order\n15:     operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n16:\n17:     file_lines = original_file_lines.copy()\n18:     for change in operation_changes:\n19:         operation = change[\"operation\"]\n20:         line = change[\"line\"]\n21:         content = change[\"content\"]\n22:\n23:         if operation == \"Replace\":\n24:             file_lines[line - 1] = content + \"\\n\"\n25:         elif operation == \"Delete\":\n26:             del file_lines[line - 1]\n27:         elif operation == \"InsertAfter\":\n28:             file_lines.insert(line, content + \"\\n\")\n29:\n30:     # Print explanations\n31:     cprint(\"Explanations:\", \"blue\")\n32:     for explanation in explanations:\n33:         cprint(f\"- {explanation}\", \"blue\")\n34:\n35:     # Display changes diff\n36:     print(\"\\nChanges to be made:\")\n37:     diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n38:     for line in diff:\n39:         if line.startswith(\"+\"):\n40:             cprint(line, \"green\", end=\"\")\n41:         elif line.startswith(\"-\"):\n42:             cprint(line, \"red\", end=\"\")\n43:         else:\n44:             print(line, end=\"\")\n45:\n46:     if confirm:\n47:         # check if user wants to apply changes or exit\n48:         confirmation = input(\"Do you want to apply these changes? (y/n): \")\n49:         if confirmation.lower() != \"y\":\n50:             print(\"Changes not applied\")\n51:             sys.exit(0)\n52:\n53:     with open(file_path, \"w\") as f:\n54:         f.writelines(file_lines)\n55:     print(\"Changes applied.\")\n56:\n57: apply_changes('/tmp/tmp6qrrn_j9', [{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], False)", "question": "What is the value of 'f' in line 53 after executing 'apply_changes('/tmp/tmp6qrrn_j9', [{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], False)'?", "answer": "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>", "variable_assignment": "f = <_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>", "loop_range": [38, 44], "post_loop_line": 53, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 11, "scratchpad_format": "def parse_layout(layout_str):\n    \"\"\"Parse a layout string\n\n    Return a dict\n        {'walls': list_of_wall_coordinates,\n         'food' : list_of_food_coordinates,\n         'bot'  : list_of_4_bot_coordinate}\n\n    A layout string is composed of wall characters '#', food characters '.', and\n    bot characters '0', '1', '2', and '3'.\n\n    Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n\n     ########\n     #0  .  #\n     #2    1#\n     #  .  3#\n     ########\n\n\n    If items are overlapping, several layout strings can be concateneted:\n     ########\n     #0  .  #\n     #     1#\n     #  .  3#\n     ########\n     ########\n     #2  .  #\n     #     1#\n     #  .  3#\n     ########\n\n     In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n    \"\"\"\n    layout_list = [] # [STATE] layout_list = [] [/STATE]\n    start = False # [STATE] start = False [/STATE]\n    for i, line in enumerate(layout_str.splitlines()): #  [STATE] i = 0 [/STATE] [STATE] line = '' [/STATE] [STATE] i = 1 [/STATE] [STATE] line = '        ##################' [/STATE] [STATE] i = 2 [/STATE] [STATE] line = '        #. ... .##.     3#' [/STATE] [STATE] i = 3 [/STATE] [STATE] line = '        # # #  .  .### #1#' [/STATE] [STATE] i = 4 [/STATE] [STATE] line = '        # # ##.   .      #' [/STATE] [STATE] i = 5 [/STATE] [STATE] line = '        #      .   .## # #' [/STATE] [STATE] i = 6 [/STATE] [STATE] line = '        #0# ###.  .  # # #' [/STATE] [STATE] i = 7 [/STATE] [STATE] line = '        #2     .##. ... .#' [/STATE] [STATE] i = 8 [/STATE] [STATE] line = '        ################## ' [/STATE]\n        row = line.strip() #  [STATE] row = '' [/STATE] [STATE] row = '##################' [/STATE] [STATE] row = '#. ... .##.     3#' [/STATE] [STATE] row = '# # #  .  .### #1#' [/STATE] [STATE] row = '# # ##.   .      #' [/STATE] [STATE] row = '#      .   .## # #' [/STATE] [STATE] row = '#0# ###.  .  # # #' [/STATE] [STATE] row = '#2     .##. ... .#' [/STATE]\n        if not row:\n            # ignore emptylines\n            continue\n        if not start:\n            # start a new layout\n            # check that row is a valid opening string\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n            current_layout = [row] # [STATE] current_layout = ['##################'] [/STATE]\n            start = True # [STATE] start = True [/STATE]\n            continue\n        # we are in the middle of a layout, just append to the current\n        # layout unless we detect the closing string\n        current_layout.append(row) #  [STATE] current_layout = ['##################', '#. ... .##.     3#'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#'] [/STATE] [STATE] current_layout = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################'] [/STATE]\n        if row.count('#') == len(row):\n            # this is a closing string\n            # append the layout to tha layout list\n            layout_list.append('\\n'.join(current_layout)) # [STATE] layout_list = ['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'] [/STATE]\n            start = False # [STATE] start = False [/STATE]\n\n    if start:\n        # the last layout has not been closed, complain here!\n        raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n\n    # initialize walls, food and bots from the first layout\n    out = parse_single_layout(layout_list.pop(0)) # [STATE] out = {'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]} [/STATE] # [STATE] layout_list = [] [/STATE]\n    for layout in layout_list:\n        items = parse_layout(layout)\n        # walls should always be the same\n        if items['walls'] != out['walls']:\n            raise ValueError('Walls are not equal in all layouts!')\n        # add the food, removing duplicates\n        out['food'] = list(set(out['food'] + items['food']))\n        # add the bots\n        for bot_idx, bot_pos in enumerate(items['bots']):\n            if bot_pos:\n                # this bot position is not None, overwrite whatever we had before\n                out['bots'][bot_idx] = bot_pos\n\n    return out\n\nparse_layout('\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "loop_code": "1: def parse_layout(layout_str):\n2:     \"\"\"Parse a layout string\n3:\n4:     Return a dict\n5:         {'walls': list_of_wall_coordinates,\n6:          'food' : list_of_food_coordinates,\n7:          'bot'  : list_of_4_bot_coordinate}\n8:\n9:     A layout string is composed of wall characters '#', food characters '.', and\n10:     bot characters '0', '1', '2', and '3'.\n11:\n12:     Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n13:\n14:      ########\n15:      #0  .  #\n16:      #2    1#\n17:      #  .  3#\n18:      ########\n19:\n20:\n21:     If items are overlapping, several layout strings can be concateneted:\n22:      ########\n23:      #0  .  #\n24:      #     1#\n25:      #  .  3#\n26:      ########\n27:      ########\n28:      #2  .  #\n29:      #     1#\n30:      #  .  3#\n31:      ########\n32:\n33:      In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n34:     \"\"\"\n35:     layout_list = []\n36:     start = False\n37:     for i, line in enumerate(layout_str.splitlines()):\n38:         row = line.strip()\n39:         if not row:\n40:             # ignore emptylines\n41:             continue\n42:         if not start:\n43:             # start a new layout\n44:             # check that row is a valid opening string\n45:             if row.count('#') != len(row):\n46:                 raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n47:             current_layout = [row]\n48:             start = True\n49:             continue\n50:         # we are in the middle of a layout, just append to the current\n51:         # layout unless we detect the closing string\n52:         current_layout.append(row)\n53:         if row.count('#') == len(row):\n54:             # this is a closing string\n55:             # append the layout to tha layout list\n56:             layout_list.append('\\n'.join(current_layout))\n57:             start = False\n58:\n59:     if start:\n60:         # the last layout has not been closed, complain here!\n61:         raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n62:\n63:     # initialize walls, food and bots from the first layout\n64:     out = parse_single_layout(layout_list.pop(0))\n65:     for layout in layout_list:\n66:         items = parse_layout(layout)\n67:         # walls should always be the same\n68:         if items['walls'] != out['walls']:\n69:             raise ValueError('Walls are not equal in all layouts!')\n70:         # add the food, removing duplicates\n71:         out['food'] = list(set(out['food'] + items['food']))\n72:         # add the bots\n73:         for bot_idx, bot_pos in enumerate(items['bots']):\n74:             if bot_pos:\n75:                 # this bot position is not None, overwrite whatever we had before\n76:                 out['bots'][bot_idx] = bot_pos\n77:\n78:     return out\n79:\n80: parse_layout('\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "question": "What is the value of 'out' in line 64 after executing 'parse_layout('\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')'?", "answer": "{'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}", "variable_assignment": "out = {'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}", "loop_range": [37, 57], "post_loop_line": 64, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"idx": 12, "scratchpad_format": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None # [STATE] width = None [/STATE]\n    # list of layout rows\n    rows = [] # [STATE] rows = [] [/STATE]\n    start = False # [STATE] start = False [/STATE]\n    for i, line in enumerate(layout_str.splitlines()): #  [STATE] i = 0 [/STATE] [STATE] line = '##################' [/STATE] [STATE] i = 1 [/STATE] [STATE] line = '#. ... .##.     3#' [/STATE] [STATE] i = 2 [/STATE] [STATE] line = '# # #  .  .### #1#' [/STATE] [STATE] i = 3 [/STATE] [STATE] line = '# # ##.   .      #' [/STATE] [STATE] i = 4 [/STATE] [STATE] line = '#      .   .## # #' [/STATE] [STATE] i = 5 [/STATE] [STATE] line = '#0# ###.  .  # # #' [/STATE] [STATE] i = 6 [/STATE] [STATE] line = '#2     .##. ... .#' [/STATE] [STATE] i = 7 [/STATE]\n        row = line.strip() #  [STATE] row = '##################' [/STATE] [STATE] row = '#. ... .##.     3#' [/STATE] [STATE] row = '# # #  .  .### #1#' [/STATE] [STATE] row = '# # ##.   .      #' [/STATE] [STATE] row = '#      .   .## # #' [/STATE] [STATE] row = '#0# ###.  .  # # #' [/STATE] [STATE] row = '#2     .##. ... .#' [/STATE]\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True # [STATE] start = True [/STATE]\n                # set width of layout\n                width = len(row) # [STATE] width = 18 [/STATE]\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row) # [STATE] rows = ['##################'] [/STATE]\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row) #  [STATE] rows = ['##################', '#. ... .##.     3#'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#'] [/STATE] [STATE] rows = ['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################'] [/STATE]\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False # [STATE] start = False [/STATE]\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows) # [STATE] height = 8 [/STATE]\n    walls = [] # [STATE] walls = [] [/STATE]\n    food = [] # [STATE] food = [] [/STATE]\n    # bot positions (we assume 4 bots)\n    bots = [None]*4 # [STATE] bots = [None, None, None, None] [/STATE]\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows): #  [STATE] y = 0 [/STATE] [STATE] row = '#. ... .##.     3#' [/STATE] [STATE] y = 1 [/STATE] [STATE] row = '# # #  .  .### #1#' [/STATE] [STATE] y = 2 [/STATE] [STATE] row = '# # ##.   .      #' [/STATE] [STATE] y = 3 [/STATE] [STATE] row = '#      .   .## # #' [/STATE] [STATE] y = 4 [/STATE] [STATE] row = '#0# ###.  .  # # #' [/STATE] [STATE] y = 5 [/STATE] [STATE] row = '#2     .##. ... .#' [/STATE] [STATE] y = 6 [/STATE] [STATE] row = '##################' [/STATE] [STATE] y = 7 [/STATE]\n        for x, char in enumerate(row): #  [STATE] x = 0 [/STATE] [STATE] char = '#' [/STATE] [STATE] x = 1 [/STATE] [STATE] x = 2 [/STATE] [STATE] x = 3 [/STATE] [STATE] x = 4 [/STATE] [STATE] x = 5 [/STATE] [STATE] x = 6 [/STATE] [STATE] x = 7 [/STATE] [STATE] x = 8 [/STATE] [STATE] x = 9 [/STATE] [STATE] x = 10 [/STATE] [STATE] x = 11 [/STATE] [STATE] x = 12 [/STATE] [STATE] x = 13 [/STATE] [STATE] x = 14 [/STATE] [STATE] x = 15 [/STATE] [STATE] x = 16 [/STATE] [STATE] x = 17 [/STATE] [STATE] char = '.' [/STATE] [STATE] char = ' ' [/STATE]\n            coord = (x, y) #  [STATE] coord = (0, 0) [/STATE] [STATE] coord = (1, 0) [/STATE] [STATE] coord = (2, 0) [/STATE] [STATE] coord = (3, 0) [/STATE] [STATE] coord = (4, 0) [/STATE] [STATE] coord = (5, 0) [/STATE] [STATE] coord = (6, 0) [/STATE] [STATE] coord = (7, 0) [/STATE] [STATE] coord = (8, 0) [/STATE] [STATE] coord = (9, 0) [/STATE] [STATE] coord = (10, 0) [/STATE] [STATE] coord = (11, 0) [/STATE] [STATE] coord = (12, 0) [/STATE] [STATE] coord = (13, 0) [/STATE] [STATE] coord = (14, 0) [/STATE] [STATE] coord = (15, 0) [/STATE] [STATE] coord = (16, 0) [/STATE] [STATE] coord = (17, 0) [/STATE] [STATE] coord = (0, 1) [/STATE] [STATE] coord = (1, 1) [/STATE] [STATE] coord = (2, 1) [/STATE]\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord) #  [STATE] walls = [(0, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)] [/STATE] [STATE] walls = [(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)] [/STATE]\n            elif char == '.':\n                # food\n                food.append(coord) #  [STATE] food = [(1, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)] [/STATE] [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)] [/STATE]\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char) #  [STATE] bot_idx = 3 [/STATE] [STATE] bot_idx = 1 [/STATE] [STATE] bot_idx = 0 [/STATE] [STATE] bot_idx = 2 [/STATE]\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord #  [STATE] bots = [None, None, None, (16, 1)] [/STATE] [STATE] bots = [None, (16, 2), None, (16, 1)] [/STATE] [STATE] bots = [(1, 5), (16, 2), None, (16, 1)] [/STATE] [STATE] bots = [(1, 5), (16, 2), (1, 6), (16, 1)] [/STATE]\n    walls.sort() # [STATE] walls = [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)] [/STATE]\n    food.sort() # [STATE] food = [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)] [/STATE]\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout('##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "loop_code": "1: def parse_single_layout(layout_str):\n2:     \"\"\"Parse a single layout from a string\n3:\n4:     See parse_layout for details about valid layout strings.\n5:     \"\"\"\n6:     # width of the layout (x-axis)\n7:     width = None\n8:     # list of layout rows\n9:     rows = []\n10:     start = False\n11:     for i, line in enumerate(layout_str.splitlines()):\n12:         row = line.strip()\n13:         if not row:\n14:             # always ignore empty lines\n15:             continue\n16:         # a layout is always started by a full row of walls\n17:         if not start:\n18:             if row.count('#') != len(row):\n19:                 raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n20:             else:\n21:                 # start the layout parsing\n22:                 start = True\n23:                 # set width of layout\n24:                 width = len(row)\n25:                 # check that width is even\n26:                 if width % 2:\n27:                     raise ValueError(f\"Layout width must be even (found {width})!\")\n28:                 rows.append(row)\n29:                 continue\n30:         # Here we are within the layout\n31:         # every row must have the same length\n32:         if len(row) != width:\n33:             raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n34:         # rows are always enclosed by walls\n35:         if row[0] != '#' or row[-1] != '#':\n36:             raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n37:         # append current row to the list of rows\n38:         rows.append(row)\n39:         # detect closing row and ignore whatever follows\n40:         if row.count('#') == len(row):\n41:             start = False\n42:             break\n43:\n44:     if start:\n45:         # layout has not been closed!\n46:         raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n47:\n48:     # height of the layout (y-axis)\n49:     height = len(rows)\n50:     walls = []\n51:     food = []\n52:     # bot positions (we assume 4 bots)\n53:     bots = [None]*4\n54:\n55:     # iterate through the grid of characters\n56:     for y, row in enumerate(rows):\n57:         for x, char in enumerate(row):\n58:             coord = (x, y)\n59:             # assign the char to the corresponding list\n60:             if char == '#':\n61:                 # wall\n62:                 walls.append(coord)\n63:             elif char == '.':\n64:                 # food\n65:                 food.append(coord)\n66:             elif char == ' ':\n67:                 # empty\n68:                 continue\n69:             else:\n70:                 # bot\n71:                 try:\n72:                     # we expect an 0<=index<=3\n73:                     bot_idx = int(char)\n74:                     if bot_idx >= len(bots):\n75:                         # reuse the except below\n76:                         raise ValueError\n77:                 except ValueError:\n78:                     raise ValueError(f\"Unknown character {char} in maze!\")\n79:                 bots[bot_idx] = coord\n80:     walls.sort()\n81:     food.sort()\n82:     return {'walls':walls, 'food':food, 'bots':bots}\n83:\n84: parse_single_layout('##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "question": "What is the value of 'height' in line 49 after executing 'parse_single_layout('##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')'?", "answer": "8", "variable_assignment": "height = 8", "loop_range": [11, 42], "post_loop_line": 49, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"idx": 13, "scratchpad_format": "def initial_positions(walls):\n    \"\"\"Calculate initial positions.\n\n    Given the list of walls, returns the free positions that are closest to the\n    bottom left and top right corner. The algorithm starts searching from\n    (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n    for judging what is closest. On equal distances, a smaller distance in the\n    x value is preferred.\n    \"\"\"\n    width = max(walls)[0] + 1 # [STATE] width = 8 [/STATE]\n    height = max(walls)[1] + 1 # [STATE] height = 4 [/STATE]\n\n    left_start = (1, height - 2) # [STATE] left_start = (1, 2) [/STATE]\n    left = [] # [STATE] left = [] [/STATE]\n    right_start = (width - 2, 1) # [STATE] right_start = (6, 1) [/STATE]\n    right = [] # [STATE] right = [] [/STATE]\n\n    dist = 0 # [STATE] dist = 0 [/STATE]\n    while len(left) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1): #  [STATE] x_dist = 0 [/STATE]\n            y_dist = dist - x_dist #  [STATE] y_dist = 0 [/STATE] [STATE] y_dist = 1 [/STATE]\n            pos = (left_start[0] + x_dist, left_start[1] - y_dist) #  [STATE] pos = (1, 2) [/STATE] [STATE] pos = (1, 1) [/STATE]\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                left.append(pos) #  [STATE] left = [(1, 2)] [/STATE] [STATE] left = [(1, 2), (1, 1)] [/STATE]\n\n            if len(left) == 2:\n                break\n\n        dist += 1 #  [STATE] dist = 1 [/STATE] [STATE] dist = 2 [/STATE]\n\n    dist = 0 # [STATE] dist = 0 [/STATE]\n    while len(right) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist #  [STATE] y_dist = 0 [/STATE] [STATE] y_dist = 1 [/STATE]\n            pos = (right_start[0] - x_dist, right_start[1] + y_dist) #  [STATE] pos = (6, 1) [/STATE] [STATE] pos = (6, 2) [/STATE]\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                right.append(pos) #  [STATE] right = [(6, 1)] [/STATE] [STATE] right = [(6, 1), (6, 2)] [/STATE]\n\n            if len(right) == 2:\n                break\n\n        dist += 1 #  [STATE] dist = 1 [/STATE] [STATE] dist = 2 [/STATE]\n\n    # lower indices start further away\n    left.reverse() # [STATE] left = [(1, 1), (1, 2)] [/STATE]\n    right.reverse() # [STATE] right = [(6, 2), (6, 1)] [/STATE]\n    return [left[0], right[0], left[1], right[1]]\n\ninitial_positions([(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "loop_code": "1: def initial_positions(walls):\n2:     \"\"\"Calculate initial positions.\n3:\n4:     Given the list of walls, returns the free positions that are closest to the\n5:     bottom left and top right corner. The algorithm starts searching from\n6:     (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n7:     for judging what is closest. On equal distances, a smaller distance in the\n8:     x value is preferred.\n9:     \"\"\"\n10:     width = max(walls)[0] + 1\n11:     height = max(walls)[1] + 1\n12:\n13:     left_start = (1, height - 2)\n14:     left = []\n15:     right_start = (width - 2, 1)\n16:     right = []\n17:\n18:     dist = 0\n19:     while len(left) < 2:\n20:         # iterate through all possible x distances (inclusive)\n21:         for x_dist in range(dist + 1):\n22:             y_dist = dist - x_dist\n23:             pos = (left_start[0] + x_dist, left_start[1] - y_dist)\n24:             # if both coordinates are out of bounds, we stop\n25:             if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n26:                 raise ValueError(\"Not enough free initial positions.\")\n27:             # if one coordinate is out of bounds, we just continue\n28:             if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n29:                 continue\n30:             # check if the new value is free\n31:             if pos not in walls:\n32:                 left.append(pos)\n33:\n34:             if len(left) == 2:\n35:                 break\n36:\n37:         dist += 1\n38:\n39:     dist = 0\n40:     while len(right) < 2:\n41:         # iterate through all possible x distances (inclusive)\n42:         for x_dist in range(dist + 1):\n43:             y_dist = dist - x_dist\n44:             pos = (right_start[0] - x_dist, right_start[1] + y_dist)\n45:             # if both coordinates are out of bounds, we stop\n46:             if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n47:                 raise ValueError(\"Not enough free initial positions.\")\n48:             # if one coordinate is out of bounds, we just continue\n49:             if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n50:                 continue\n51:             # check if the new value is free\n52:             if pos not in walls:\n53:                 right.append(pos)\n54:\n55:             if len(right) == 2:\n56:                 break\n57:\n58:         dist += 1\n59:\n60:     # lower indices start further away\n61:     left.reverse()\n62:     right.reverse()\n63:     return [left[0], right[0], left[1], right[1]]\n64:\n65: initial_positions([(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "question": "What is the value of 'left' in line 61 after executing 'initial_positions([(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])'?", "answer": "[(1, 1), (1, 2)]", "variable_assignment": "left = [(1, 1), (1, 2)]", "loop_range": [40, 58], "post_loop_line": 61, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"idx": 14, "scratchpad_format": "def process_fenced_block(lines, start_line_num):\n    for line_num in range(start_line_num, len(lines)): #  [STATE] line_num = 4 [/STATE] [STATE] line_num = 5 [/STATE] [STATE] line_num = 6 [/STATE] [STATE] line_num = 7 [/STATE] [STATE] line_num = 8 [/STATE] [STATE] line_num = 9 [/STATE]\n        line = lines[line_num] #  [STATE] line = '--- /dev/null\\n' [/STATE] [STATE] line = '+++ file.txt\\n' [/STATE] [STATE] line = '@@ ... @@\\n' [/STATE] [STATE] line = '-Original\\n' [/STATE] [STATE] line = '+Modified\\n' [/STATE] [STATE] line = '```\\n' [/STATE]\n        if line.startswith(\"```\"):\n            break\n\n    block = lines[start_line_num:line_num] # [STATE] block = ['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n'] [/STATE]\n    block.append(\"@@ @@\") # [STATE] block = ['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@'] [/STATE]\n\n    if block[0].startswith(\"--- \") and block[1].startswith(\"+++ \"):\n        # Extract the file path, considering that it might contain spaces\n        fname = block[1][4:].strip() # [STATE] fname = 'file.txt' [/STATE]\n        block = block[2:] # [STATE] block = ['@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@'] [/STATE]\n    else:\n        fname = None\n\n    edits = [] # [STATE] edits = [] [/STATE]\n\n    keeper = False # [STATE] keeper = False [/STATE]\n    hunk = [] # [STATE] hunk = [] [/STATE]\n    op = \" \" # [STATE] op = ' ' [/STATE]\n    for line in block: #  [STATE] line = '@@ ... @@\\n' [/STATE] [STATE] line = '-Original\\n' [/STATE] [STATE] line = '+Modified\\n' [/STATE] [STATE] line = '@@ @@' [/STATE]\n        hunk.append(line) #  [STATE] hunk = ['@@ ... @@\\n'] [/STATE] [STATE] hunk = ['-Original\\n'] [/STATE] [STATE] hunk = ['-Original\\n', '+Modified\\n'] [/STATE] [STATE] hunk = ['-Original\\n', '+Modified\\n', '@@ @@'] [/STATE]\n        if len(line) < 2:\n            continue\n\n        if line.startswith(\"+++ \") and hunk[-2].startswith(\"--- \"):\n            if hunk[-3] == \"\\n\":\n                hunk = hunk[:-3]\n            else:\n                hunk = hunk[:-2]\n\n            edits.append((fname, hunk))\n            hunk = []\n            keeper = False\n\n            fname = line[4:].strip()\n            continue\n\n        op = line[0] #  [STATE] op = '@' [/STATE] [STATE] op = '-' [/STATE] [STATE] op = '+' [/STATE]\n        if op in \"-+\":\n            keeper = True #  [STATE] keeper = True [/STATE]\n            continue\n        if op != \"@\":\n            continue\n        if not keeper:\n            hunk = [] # [STATE] hunk = [] [/STATE]\n            continue\n\n        hunk = hunk[:-1] # [STATE] hunk = ['-Original\\n', '+Modified\\n'] [/STATE]\n        edits.append((fname, hunk)) # [STATE] edits = [('file.txt', ['-Original\\n', '+Modified\\n'])] [/STATE]\n        hunk = [] # [STATE] hunk = [] [/STATE]\n        keeper = False # [STATE] keeper = False [/STATE]\n\n    return line_num + 1, edits\n\nprocess_fenced_block(['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n'], 4)", "loop_code": "1: def process_fenced_block(lines, start_line_num):\n2:     for line_num in range(start_line_num, len(lines)):\n3:         line = lines[line_num]\n4:         if line.startswith(\"```\"):\n5:             break\n6:\n7:     block = lines[start_line_num:line_num]\n8:     block.append(\"@@ @@\")\n9:\n10:     if block[0].startswith(\"--- \") and block[1].startswith(\"+++ \"):\n11:         # Extract the file path, considering that it might contain spaces\n12:         fname = block[1][4:].strip()\n13:         block = block[2:]\n14:     else:\n15:         fname = None\n16:\n17:     edits = []\n18:\n19:     keeper = False\n20:     hunk = []\n21:     op = \" \"\n22:     for line in block:\n23:         hunk.append(line)\n24:         if len(line) < 2:\n25:             continue\n26:\n27:         if line.startswith(\"+++ \") and hunk[-2].startswith(\"--- \"):\n28:             if hunk[-3] == \"\\n\":\n29:                 hunk = hunk[:-3]\n30:             else:\n31:                 hunk = hunk[:-2]\n32:\n33:             edits.append((fname, hunk))\n34:             hunk = []\n35:             keeper = False\n36:\n37:             fname = line[4:].strip()\n38:             continue\n39:\n40:         op = line[0]\n41:         if op in \"-+\":\n42:             keeper = True\n43:             continue\n44:         if op != \"@\":\n45:             continue\n46:         if not keeper:\n47:             hunk = []\n48:             continue\n49:\n50:         hunk = hunk[:-1]\n51:         edits.append((fname, hunk))\n52:         hunk = []\n53:         keeper = False\n54:\n55:     return line_num + 1, edits\n56:\n57: process_fenced_block(['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n'], 4)", "question": "What is the value of 'block' in line 7 after executing 'process_fenced_block(['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n'], 4)'?", "answer": "['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n']", "variable_assignment": "block = ['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n']", "loop_range": [2, 5], "post_loop_line": 7, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"idx": 15, "scratchpad_format": "def _test_grad_nd(n, ndim):\n    coords = [np.arange(n)] * ndim # [STATE] coords = [array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])] [/STATE]\n    xc = np.meshgrid(*coords, indexing=\"ij\") # [STATE] xc = [array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])] [/STATE]\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0) # [STATE] u = array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03]) [/STATE]\n    ucopy = np.copy(u) # [STATE] ucopy = array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03]) [/STATE]\n\n    # check the gradient values\n    slices = tuple([slice(1,-1,None)] * ndim) # [STATE] slices = (slice(1, -1, None),) [/STATE]\n    for i in range(ndim): #  [STATE] i = 0 [/STATE]\n        assert grad(u, axis=i) == pytest.approx(2*xc[i][slices]) # [STATE] @py_assert3 = None [/STATE] # [STATE] @py_assert7 = None [/STATE] # [STATE] @py_assert9 = None [/STATE] # [STATE] @py_assert11 = None [/STATE] # [STATE] @py_assert13 = None [/STATE] # [STATE] @py_assert14 = None [/STATE] # [STATE] @py_assert5 = None [/STATE]\n\n    # check if u is unchanged\n    assert np.all(u == ucopy) # [STATE] @py_assert1 = None [/STATE] # [STATE] @py_assert4 = None [/STATE] # [STATE] @py_assert8 = None [/STATE]\n\n_test_grad_nd(92, 1)", "loop_code": "1: def _test_grad_nd(n, ndim):\n2:     coords = [np.arange(n)] * ndim\n3:     xc = np.meshgrid(*coords, indexing=\"ij\")\n4:\n5:     # u = sum_i(xc[i]**2)\n6:     u = reduce(lambda x,y: x+y**2, xc, 0.0)\n7:     ucopy = np.copy(u)\n8:\n9:     # check the gradient values\n10:     slices = tuple([slice(1,-1,None)] * ndim)\n11:     for i in range(ndim):\n12:         assert grad(u, axis=i) == pytest.approx(2*xc[i][slices])\n13:\n14:     # check if u is unchanged\n15:     assert np.all(u == ucopy)\n16:\n17: _test_grad_nd(92, 1)", "question": "What is the value of '@py_assert8' in line 15 after executing '_test_grad_nd(92, 1)'?", "answer": "None", "variable_assignment": "@py_assert8 = None", "loop_range": [11, 12], "post_loop_line": 15, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"idx": 16, "scratchpad_format": "def _test_grad2_nd(n, ndim):\n    coords = [np.arange(n)] * ndim # [STATE] coords = [array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])] [/STATE]\n    xc = np.meshgrid(*coords, indexing=\"ij\") # [STATE] xc = [array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])] [/STATE]\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0) # [STATE] u = array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.]) [/STATE]\n    ucopy = np.copy(u) # [STATE] ucopy = array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.]) [/STATE]\n\n    # check the gradient values\n    gu = np.zeros(tuple([n-2]*ndim)) # [STATE] gu = array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]) [/STATE]\n    gu2 = gu + 2.0 # [STATE] gu2 = array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]) [/STATE]\n    for i in range(ndim): #  [STATE] i = 0 [/STATE]\n        for j in range(ndim): #  [STATE] j = 0 [/STATE]\n            if i == j:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu2) # [STATE] @py_assert2 = None [/STATE] # [STATE] @py_assert4 = None [/STATE] # [STATE] @py_assert8 = None [/STATE] # [STATE] @py_assert11 = None [/STATE] # [STATE] @py_assert6 = None [/STATE]\n            else:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n\n    # check if u is unchanged\n    assert np.all(u == ucopy) # [STATE] @py_assert1 = None [/STATE]\n\n_test_grad2_nd(32, 1)", "loop_code": "1: def _test_grad2_nd(n, ndim):\n2:     coords = [np.arange(n)] * ndim\n3:     xc = np.meshgrid(*coords, indexing=\"ij\")\n4:\n5:     # u = sum_i(xc[i]**2)\n6:     u = reduce(lambda x,y: x+y**2, xc, 0.0)\n7:     ucopy = np.copy(u)\n8:\n9:     # check the gradient values\n10:     gu = np.zeros(tuple([n-2]*ndim))\n11:     gu2 = gu + 2.0\n12:     for i in range(ndim):\n13:         for j in range(ndim):\n14:             if i == j:\n15:                 assert grad2(u, axes=(i,j)) == pytest.approx(gu2)\n16:             else:\n17:                 assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n18:\n19:     # check if u is unchanged\n20:     assert np.all(u == ucopy)\n21:\n22: _test_grad2_nd(32, 1)", "question": "What is the value of '@py_assert1' in line 20 after executing '_test_grad2_nd(32, 1)'?", "answer": "None", "variable_assignment": "@py_assert1 = None", "loop_range": [12, 17], "post_loop_line": 20, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"idx": 17, "scratchpad_format": "def test_audioclip_stereo_max_volume(nchannels, channel_muted):\n    def make_frame(t): # [STATE] make_frame = <function test_audioclip_stereo_max_volume.<locals>.make_frame at 0x7f8c02a8e670> [/STATE]\n        frame = []\n        # build channels (one of each pair muted)\n        for i in range(int(nchannels / 2)):\n            if channel_muted == \"left\":\n                # if muted channel is left, [0, sound, 0, sound...]\n                frame.append(np.sin(t * 0))\n                frame.append(np.sin(440 * 2 * np.pi * t))\n            else:\n                # if muted channel is right, [sound, 0, sound, 0...]\n                frame.append(np.sin(440 * 2 * np.pi * t))\n                frame.append(np.sin(t * 0))\n        return np.array(frame).T\n\n    clip = AudioClip(make_frame, fps=44100, duration=1) # [STATE] clip = {start=0, end=1, duration=1, memoize=False, memoized_t=None, memoized_frame=None, fps=44100, nchannels=2} [/STATE]\n    max_volume = clip.max_volume(stereo=True) # [STATE] max_volume = array([0.        , 0.99999975]) [/STATE]\n    # if `stereo == True`, `AudioClip.max_volume` returns a Numpy array`\n    assert isinstance(max_volume, np.ndarray) # [STATE] @py_assert3 = None [/STATE] # [STATE] @py_assert5 = None [/STATE]\n    assert len(max_volume) == nchannels # [STATE] @py_assert2 = None [/STATE] # [STATE] @py_assert4 = None [/STATE]\n\n    # check channels muted and with sound\n    for i, channel_max_volume in enumerate(max_volume): #  [STATE] i = 0 [/STATE] [STATE] channel_max_volume = 0.0 [/STATE] [STATE] i = 1 [/STATE] [STATE] channel_max_volume = 0.999999746257887 [/STATE]\n        if i % 2 == 0:\n            if channel_muted == \"left\":\n                assert channel_max_volume == 0 # [STATE] @py_assert1 = None [/STATE]\n            else:\n                assert channel_max_volume > 0\n        else:\n            if channel_muted == \"right\":\n                assert channel_max_volume == 0\n            else:\n                assert channel_max_volume > 0\n\ntest_audioclip_stereo_max_volume(2, 'left')", "loop_code": "1: def test_audioclip_stereo_max_volume(nchannels, channel_muted):\n2:     def make_frame(t):\n3:         frame = []\n4:         # build channels (one of each pair muted)\n5:         for i in range(int(nchannels / 2)):\n6:             if channel_muted == \"left\":\n7:                 # if muted channel is left, [0, sound, 0, sound...]\n8:                 frame.append(np.sin(t * 0))\n9:                 frame.append(np.sin(440 * 2 * np.pi * t))\n10:             else:\n11:                 # if muted channel is right, [sound, 0, sound, 0...]\n12:                 frame.append(np.sin(440 * 2 * np.pi * t))\n13:                 frame.append(np.sin(t * 0))\n14:         return np.array(frame).T\n15:\n16:     clip = AudioClip(make_frame, fps=44100, duration=1)\n17:     max_volume = clip.max_volume(stereo=True)\n18:     # if `stereo == True`, `AudioClip.max_volume` returns a Numpy array`\n19:     assert isinstance(max_volume, np.ndarray)\n20:     assert len(max_volume) == nchannels\n21:\n22:     # check channels muted and with sound\n23:     for i, channel_max_volume in enumerate(max_volume):\n24:         if i % 2 == 0:\n25:             if channel_muted == \"left\":\n26:                 assert channel_max_volume == 0\n27:             else:\n28:                 assert channel_max_volume > 0\n29:         else:\n30:             if channel_muted == \"right\":\n31:                 assert channel_max_volume == 0\n32:             else:\n33:                 assert channel_max_volume > 0\n34:\n35: test_audioclip_stereo_max_volume(2, 'left')", "question": "What is the value of 'clip' in line 16 after executing 'test_audioclip_stereo_max_volume(2, 'left')'?", "answer": "{start=0, end=1, duration=1, memoize=False, memoized_t=None, memoized_frame=None, fps=44100, nchannels=2}", "variable_assignment": "clip = {start=0, end=1, duration=1, memoize=False, memoized_t=None, memoized_frame=None, fps=44100, nchannels=2}", "loop_range": [5, 13], "post_loop_line": 16, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 18, "scratchpad_format": "def version_compare(v1, v2):\n    \"\"\"Returns -1 if v1 is older than v2, 0 if v1 == v2, and +1 if v1 > v2.\"\"\"\n\n    arr1 = v1.split(\".\") # [STATE] arr1 = ['3', '8', '18'] [/STATE]\n    arr2 = v2.split(\".\") # [STATE] arr2 = ['3', '8', '27'] [/STATE]\n    n = len(arr1) # [STATE] n = 3 [/STATE]\n    m = len(arr2) # [STATE] m = 3 [/STATE]\n\n    # converts to integer from string\n    arr1 = [int(i) for i in arr1] # [STATE] arr1 = [3, 8, 18] [/STATE]\n    arr2 = [int(i) for i in arr2] # [STATE] arr2 = [3, 8, 27] [/STATE]\n\n    # compares which list is bigger and fills\n    # smaller list with zero (for unequal delimeters)\n    if n > m:\n        for i in range(m, n):\n            arr2.append(0)\n    elif m > n:\n        for i in range(n, m):\n            arr1.append(0)\n\n    # returns 1 if version 1 is bigger and -1 if\n    # version 2 is bigger and 0 if equal\n    for i in range(len(arr1)): #  [STATE] i = 0 [/STATE] [STATE] i = 1 [/STATE] [STATE] i = 2 [/STATE]\n        if arr1[i] > arr2[i]:\n            return 1\n        elif arr2[i] > arr1[i]:\n            return -1\n    return 0\n\nversion_compare('3.8.18', '3.8.27')", "loop_code": "1: def version_compare(v1, v2):\n2:     \"\"\"Returns -1 if v1 is older than v2, 0 if v1 == v2, and +1 if v1 > v2.\"\"\"\n3:\n4:     arr1 = v1.split(\".\")\n5:     arr2 = v2.split(\".\")\n6:     n = len(arr1)\n7:     m = len(arr2)\n8:\n9:     # converts to integer from string\n10:     arr1 = [int(i) for i in arr1]\n11:     arr2 = [int(i) for i in arr2]\n12:\n13:     # compares which list is bigger and fills\n14:     # smaller list with zero (for unequal delimeters)\n15:     if n > m:\n16:         for i in range(m, n):\n17:             arr2.append(0)\n18:     elif m > n:\n19:         for i in range(n, m):\n20:             arr1.append(0)\n21:\n22:     # returns 1 if version 1 is bigger and -1 if\n23:     # version 2 is bigger and 0 if equal\n24:     for i in range(len(arr1)):\n25:         if arr1[i] > arr2[i]:\n26:             return 1\n27:         elif arr2[i] > arr1[i]:\n28:             return -1\n29:     return 0\n30:\n31: version_compare('3.8.18', '3.8.27')", "question": "What is the value of 'i' in line 24 after executing 'version_compare('3.8.18', '3.8.27')'?", "answer": "2", "variable_assignment": "i = 2", "loop_range": [19, 20], "post_loop_line": 24, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"idx": 19, "scratchpad_format": "def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n    \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n\n    defaults = HTYPE_CONFIGURATIONS[htype] # [STATE] defaults = {'dtype': None, 'sample_compression': None, 'chunk_compression': None, 'typestr': None, 'max_chunk_size': None, 'tiling_threshold': None, 'is_sequence': False, 'is_link': False, 'hidden': False, 'links': None, 'verify': False} [/STATE]\n\n    for key, value in htype_overwrite.items(): #  [STATE] key = 'sample_compression' [/STATE] [STATE] value = 'unspecified' [/STATE] [STATE] key = 'chunk_compression' [/STATE] [STATE] key = 'dtype' [/STATE] [STATE] value = 'int64' [/STATE] [STATE] key = 'hidden' [/STATE] [STATE] value = True [/STATE] [STATE] key = 'max_chunk_size' [/STATE] [STATE] value = 4000000 [/STATE] [STATE] key = 'is_sequence' [/STATE] [STATE] value = False [/STATE] [STATE] key = 'is_link' [/STATE] [STATE] key = 'verify' [/STATE]\n        if key not in defaults:\n            raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n\n        if isinstance(value, str) and value == UNSPECIFIED:\n            if defaults[key] == REQUIRE_USER_SPECIFICATION:\n                raise TensorMetaMissingRequiredValue(htype, key)\n\n    sc = htype_overwrite[\"sample_compression\"] # [STATE] sc = 'unspecified' [/STATE]\n    cc = htype_overwrite[\"chunk_compression\"] # [STATE] cc = 'unspecified' [/STATE]\n    compr = sc if cc in (None, UNSPECIFIED) else cc # [STATE] compr = 'unspecified' [/STATE]\n    actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype # [STATE] actual_htype = 'generic' [/STATE]\n    if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n        raise TensorMetaMissingRequiredValue(\n            actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n        )\n    if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n        if cc not in (UNSPECIFIED, None):\n            raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n        elif sc == UNSPECIFIED:\n            raise TensorMetaMissingRequiredValue(\n                actual_htype, \"sample_compression\"  # type: ignore\n            )\n    supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype) # [STATE] supported_compressions = None [/STATE]\n    if (\n        compr\n        and compr != UNSPECIFIED\n        and supported_compressions\n        and compr not in supported_compressions\n    ):\n        raise UnsupportedCompressionError(compr, htype=htype)\n\n_validate_htype_overwrites('generic', {'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'int64', 'hidden': True, 'max_chunk_size': 4000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "loop_code": "1: def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n2:     \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n3:\n4:     defaults = HTYPE_CONFIGURATIONS[htype]\n5:\n6:     for key, value in htype_overwrite.items():\n7:         if key not in defaults:\n8:             raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n9:\n10:         if isinstance(value, str) and value == UNSPECIFIED:\n11:             if defaults[key] == REQUIRE_USER_SPECIFICATION:\n12:                 raise TensorMetaMissingRequiredValue(htype, key)\n13:\n14:     sc = htype_overwrite[\"sample_compression\"]\n15:     cc = htype_overwrite[\"chunk_compression\"]\n16:     compr = sc if cc in (None, UNSPECIFIED) else cc\n17:     actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype\n18:     if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n19:         raise TensorMetaMissingRequiredValue(\n20:             actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n21:         )\n22:     if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n23:         if cc not in (UNSPECIFIED, None):\n24:             raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n25:         elif sc == UNSPECIFIED:\n26:             raise TensorMetaMissingRequiredValue(\n27:                 actual_htype, \"sample_compression\"  # type: ignore\n28:             )\n29:     supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)\n30:     if (\n31:         compr\n32:         and compr != UNSPECIFIED\n33:         and supported_compressions\n34:         and compr not in supported_compressions\n35:     ):\n36:         raise UnsupportedCompressionError(compr, htype=htype)\n37:\n38: _validate_htype_overwrites('generic', {'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'int64', 'hidden': True, 'max_chunk_size': 4000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "question": "What is the value of 'sc' in line 14 after executing '_validate_htype_overwrites('generic', {'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'int64', 'hidden': True, 'max_chunk_size': 4000000, 'is_sequence': False, 'is_link': False, 'verify': True})'?", "answer": "'unspecified'", "variable_assignment": "sc = 'unspecified'", "loop_range": [6, 12], "post_loop_line": 14, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 20, "scratchpad_format": "def format_uptime(uptime_in_seconds):\n    \"\"\"Format number of seconds into human-readable string.\n\n    :param uptime_in_seconds: The server uptime in seconds.\n    :returns: A human-readable string representing the uptime.\n\n    >>> uptime = format_uptime('56892')\n    >>> print(uptime)\n    15 hours 48 min 12 sec\n    \"\"\"\n\n    m, s = divmod(int(uptime_in_seconds), 60) # [STATE] m = 0 [/STATE] # [STATE] s = 59 [/STATE]\n    h, m = divmod(m, 60) # [STATE] h = 0 [/STATE]\n    d, h = divmod(h, 24) # [STATE] d = 0 [/STATE]\n\n    uptime_values = [] # [STATE] uptime_values = [] [/STATE]\n\n    for value, unit in ((d, 'days'), (h, 'hours'), (m, 'min'), (s, 'sec')): #  [STATE] value = 0 [/STATE] [STATE] unit = 'days' [/STATE] [STATE] unit = 'hours' [/STATE] [STATE] unit = 'min' [/STATE] [STATE] value = 59 [/STATE] [STATE] unit = 'sec' [/STATE]\n        if value == 0 and not uptime_values:\n            # Don't include a value/unit if the unit isn't applicable to\n            # the uptime. E.g. don't do 0 days 0 hours 1 min 30 sec.\n            continue\n        elif value == 1 and unit.endswith('s'):\n            # Remove the \"s\" if the unit is singular.\n            unit = unit[:-1]\n        uptime_values.append('{0} {1}'.format(value, unit)) # [STATE] uptime_values = ['59 sec'] [/STATE]\n\n    uptime = ' '.join(uptime_values) # [STATE] uptime = '59 sec' [/STATE]\n    return uptime\n\nformat_uptime(59)", "loop_code": "1: def format_uptime(uptime_in_seconds):\n2:     \"\"\"Format number of seconds into human-readable string.\n3:\n4:     :param uptime_in_seconds: The server uptime in seconds.\n5:     :returns: A human-readable string representing the uptime.\n6:\n7:     >>> uptime = format_uptime('56892')\n8:     >>> print(uptime)\n9:     15 hours 48 min 12 sec\n10:     \"\"\"\n11:\n12:     m, s = divmod(int(uptime_in_seconds), 60)\n13:     h, m = divmod(m, 60)\n14:     d, h = divmod(h, 24)\n15:\n16:     uptime_values = []\n17:\n18:     for value, unit in ((d, 'days'), (h, 'hours'), (m, 'min'), (s, 'sec')):\n19:         if value == 0 and not uptime_values:\n20:             # Don't include a value/unit if the unit isn't applicable to\n21:             # the uptime. E.g. don't do 0 days 0 hours 1 min 30 sec.\n22:             continue\n23:         elif value == 1 and unit.endswith('s'):\n24:             # Remove the \"s\" if the unit is singular.\n25:             unit = unit[:-1]\n26:         uptime_values.append('{0} {1}'.format(value, unit))\n27:\n28:     uptime = ' '.join(uptime_values)\n29:     return uptime\n30:\n31: format_uptime(59)", "question": "What is the value of 'uptime' in line 28 after executing 'format_uptime(59)'?", "answer": "'59 sec'", "variable_assignment": "uptime = '59 sec'", "loop_range": [18, 26], "post_loop_line": 28, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 21, "scratchpad_format": "def run_neox_args_load_test(yaml_files):\n    from megatron.neox_arguments import NeoXArgs # [STATE] NeoXArgs = <class 'megatron.neox_arguments.arguments.NeoXArgs'> [/STATE]\n\n    yaml_list = get_configs_with_path(yaml_files) # [STATE] yaml_list = ['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml'] [/STATE]\n    args_loaded = NeoXArgs.from_ymls(yaml_list) # [STATE] args_loaded = NeoXArgs(distributed_backend='nccl', local_rank=None, rank=None, lazy_mpu_init=False, short_seq_prob=0.1, eod_mask_loss=False, adlr_autoresume=False, adlr_autoresume_interval=1000, seed=1234, onnx_safe=False, deepscale=False, deepscale_config=None, deepspeed_mpi=False, deepspeed_slurm=False, user_script=None, iteration=None, do_train=None, do_valid=None, do_test=None, save_iters=[10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 200000, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 300000, 310000], global_num_gpus=1, text_gen_type='unconditional', temperature=0.0, top_p=0.0, top_k=0, return_logits=False, maximum_tokens=64, prompt_end='\\n', sample_input_file=None, sample_output_file='samples.txt', num_samples=1, recompute=False, eval_results_prefix='', eval_tasks=None, use_wandb=True, wandb_group=None, wandb_team=None, wandb_project='neox', wandb_host='https://api.wandb.ai', wandb_init_all_ranks=False, git_hash='7a8fa2f0', log_dir='logs', tensorboard_dir='tensorboard', log_interval=100, log_grad_pct_zeros=False, log_param_norm=False, log_grad_norm=False, log_optimizer_states=False, log_gradient_noise_scale=False, gradient_noise_scale_n_batches=5, gradient_noise_scale_cpu_offload=False, pipe_parallel_size=1, model_parallel_size=1, pipe_partition_method='type:transformer|mlp', world_size=None, is_pipe_parallel=True, data_path='data/enwik8/enwik8_text_document', use_shared_fs=True, train_data_paths=None, label_data_paths=None, test_data_paths=None, valid_data_paths=None, train_data_weights=None, valid_data_weights=None, test_data_weights=None, weight_by_num_documents=False, weighted_sampler_alpha=1.0, data_impl='mmap', mmap_warmup=False, save='checkpoints', s3_path=None, s3_chunk_size=104857600, config_files={'125M.yml': '# GPT-2 pretraining setup\\n{\\n   # parallelism settings ( you will want to change these based on your cluster setup, ideally scheduling pipeline stages\\n   # across the node boundaries )\\n   \"pipe_parallel_size\": 1,\\n   \"model_parallel_size\": 1,\\n\\n   # model settings\\n   \"num_layers\": 12,\\n   \"hidden_size\": 768,\\n   \"num_attention_heads\": 12,\\n   \"seq_length\": 2048,\\n   \"max_position_embeddings\": 2048,\\n   \"norm\": \"layernorm\",\\n   \"pos_emb\": \"rotary\",\\n   \"no_weight_tying\": true,\\n   \"gpt_j_residual\": false,\\n   \"output_layer_parallelism\": \"column\",\\n\\n   # these should provide some speedup but takes a while to build, set to true if desired\\n   \"scaled_upper_triang_masked_softmax_fusion\": false,\\n   \"bias_gelu_fusion\": false,\\n   \"rope_fusion\": false,\\n\\n   # init methods\\n   \"init_method\": \"small_init\",\\n   \"output_layer_init_method\": \"wang_init\",\\n\\n\\n   # optimizer settings\\n   \"optimizer\": {\\n     \"type\": \"Adam\",\\n     \"params\": {\\n       \"lr\": 0.0006,\\n       \"betas\": [0.9, 0.95],\\n       \"eps\": 1.0e-8,\\n     }\\n   },\\n   \"min_lr\": 0.00006,\\n\\n   # for all zero_optimization options, see https://www.deepspeed.ai/docs/config-json/#zero-optimizations-for-fp16-training\\n   \"zero_optimization\": {\\n    \"stage\": 1,\\n    \"allgather_partitions\": True,\\n    \"allgather_bucket_size\": 500000000,\\n    \"overlap_comm\": True,\\n    \"reduce_scatter\": True,\\n    \"reduce_bucket_size\": 500000000,\\n    \"contiguous_gradients\": True,\\n  },\\n\\n   # batch / data settings\\n   \"train_micro_batch_size_per_gpu\": 4,\\n   \"data_impl\": \"mmap\",\\n\\n   # activation checkpointing\\n   \"checkpoint_activations\": true,\\n   \"checkpoint_num_layers\": 1,\\n   \"partition_activations\": true,\\n   \"synchronize_each_layer\": true,\\n\\n   # regularization\\n   \"gradient_clipping\": 1.0,\\n   \"weight_decay\": 0.1,\\n   \"hidden_dropout\": 0.0,\\n   \"attention_dropout\": 0.0,\\n\\n   # precision settings\\n   \"fp16\": {\\n     \"enabled\": true,\\n     \"loss_scale\": 0,\\n     \"loss_scale_window\": 1000,\\n     \"hysteresis\": 2,\\n     \"min_loss_scale\": 1\\n   },\\n\\n   # misc. training settings\\n   \"train_iters\": 320000,\\n   \"lr_decay_iters\": 320000,\\n   \"distributed_backend\": \"nccl\",\\n   \"lr_decay_style\": \"cosine\",\\n   \"warmup\": 0.01,\\n   \"checkpoint_factor\": 10...\\n{\\n  \"global_num_gpus\": 1\\n}\\n'}, load='checkpoints', checkpoint_validation_with_forward_pass=False, checkpoint_scale='linear', checkpoint_factor=10000, extra_save_iters=None, no_save_optim=False, no_save_rng=False, no_load_optim=False, no_load_rng=False, finetune=False, batch_size=4, train_iters=320000, eval_iters=10, keep_last_n_checkpoints=4, eval_interval=1000, split='969, 30, 1', vocab_file='data/gpt2-vocab.json', merge_file='data/gpt2-merges.txt', num_workers=2, exit_interval=None, attention_dropout=0.0, hidden_dropout=0.0, weight_decay=0.1, checkpoint_activations=True, checkpoint_num_layers=1, deepspeed_activation_checkpointing=True, contiguous_checkpointing=False, checkpoint_in_cpu=False, synchronize_each_layer=True, profile_backward=False, partition_activations=True, gas=1, clip_grad=1.0, hysteresis=2, dynamic_loss_scale=True, loss_scale=None, loss_scale_window=1000.0, min_scale=1.0, char_level_ppl=False, use_mup=False, coord_check=False, save_base_shapes=False, base_shapes_file=None, mup_init_scale=1.0, mup_attn_temp=1.0, mup_output_temp=1.0, mup_embedding_mult=1.0, mup_rp_embedding_mult=1.0, mup_width_scale=2, tokenizer_type='GPT2BPETokenizer', padded_vocab_size=None, optimizer_type='Adam', use_bnb_optimizer=False, zero_stage=1, zero_reduce_scatter=True, zero_contiguous_gradients=True, zero_reduce_bucket_size=500000000, zero_allgather_bucket_size=500000000, lr=0.0006, lr_decay_style='cosine', lr_decay_iters=320000, min_lr=6e-05, warmup=0.01, override_lr_scheduler=False, use_checkpoint_lr_scheduler=False, precision='fp16', num_layers=12, hidden_size=768, num_attention_heads=12, seq_length=2048, max_position_embeddings=2048, norm='layernorm', use_qk_layernorm=False, layernorm_epsilon=1e-05, rms_norm_epsilon=1e-08, scalenorm_epsilon=1e-08, pos_emb='rotary', rpe_num_buckets=32, rpe_max_distance=128, opt_pos_emb_offset=0, no_weight_tying=True, attention_config=['global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global'], sparsity_config={}, num_unique_layers=None, param_sharing_style='grouped', make_vocab_size_divisible_by=128, activation='gelu', scaled_upper_triang_masked_softmax_fusion=False, scaled_masked_softmax_fusion=False, bias_gelu_fusion=False, bias_dropout_fusion=False, rope_fusion=False, fp16_lm_cross_entropy=False, init_method_std=0.02, apply_query_key_layer_scaling=False, use_cpu_initialization=False, attention_softmax_in_fp32=False, rotary_pct=1.0, rotary_emb_base=10000, init_method='small_init', output_layer_init_method='wang_init', gmlp_attn_dim=64, gpt_j_residual=False, gpt_j_tied=False, use_bias_in_norms=True, use_bias_in_attn_linear=True, mlp_type='regular', soft_prompt_tuning=None, output_layer_parallelism='column', deepspeed=True, train_batch_size=4, train_micro_batch_size_per_gpu=4, gradient_accumulation_steps=1, optimizer={'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, scheduler=None, fp32_allreduce=False, prescale_gradients=False, gradient_predivide_factor=1.0, sparse_gradients=False, fp16={'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, bf16=None, amp=None, gradient_clipping=1.0, zero_optimization={'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, curriculum_learning=None, curriculum_seqlen=0, steps_per_print=10, wall_clock_breakdown=True, dump_state=False, flops_profiler=None, communication_data_type=None, autotuning=None, activation_checkpointing=None, sparse_attention=None, data_efficiency=None, tensorboard=None, wandb=None, csv_monitor=None, elasticity=None, comms_logger=None, compression_training=None, checkpoint=None, data_types=None, deepspeed_extra_args=None, hostfile='/mock_path', include=None, exclude=None, num_nodes=-1, num_gpus=None, master_port=29500, master_addr=None, launcher='pdsh', force_multi=False, detect_nvlink_pairs=False, autotuning_run=None, no_ssh_check=False, comment=None, account=None) [/STATE]\n    assert isinstance(args_loaded, NeoXArgs) # [STATE] @py_assert3 = None [/STATE]\n\n    # initialize an empty config dictionary to be filled by yamls\n    config = dict() # [STATE] config = {} [/STATE]\n\n    # iterate of all to be loaded yaml files\n    for conf_file_name in yaml_list: #  [STATE] conf_file_name = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml' [/STATE] [STATE] conf_file_name = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml' [/STATE] [STATE] conf_file_name = '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml' [/STATE]\n\n        # load file\n        with open(conf_file_name) as conf_file: #  [STATE] conf_file = <_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml' mode='r' encoding='UTF-8'> [/STATE] [STATE] conf_file = <_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml' mode='r' encoding='UTF-8'> [/STATE] [STATE] conf_file = <_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml' mode='r' encoding='UTF-8'> [/STATE]\n            conf = yaml.load(conf_file, Loader=yaml.FullLoader) #  [STATE] conf = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path'} [/STATE] [STATE] conf = {'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True, 'wandb_host': 'https://api.wandb.ai', 'wandb_project': 'neox'} [/STATE] [STATE] conf = {'global_num_gpus': 1} [/STATE]\n\n        # check for key duplicates and load values\n        for conf_key, conf_value in conf.items(): #  [STATE] conf_key = 'pipe_parallel_size' [/STATE] [STATE] conf_value = 1 [/STATE] [STATE] conf_key = 'model_parallel_size' [/STATE] [STATE] conf_key = 'num_layers' [/STATE] [STATE] conf_value = 12 [/STATE] [STATE] conf_key = 'hidden_size' [/STATE] [STATE] conf_value = 768 [/STATE] [STATE] conf_key = 'num_attention_heads' [/STATE] [STATE] conf_key = 'seq_length' [/STATE] [STATE] conf_value = 2048 [/STATE] [STATE] conf_key = 'max_position_embeddings' [/STATE] [STATE] conf_key = 'norm' [/STATE] [STATE] conf_value = 'layernorm' [/STATE] [STATE] conf_key = 'pos_emb' [/STATE] [STATE] conf_value = 'rotary' [/STATE] [STATE] conf_key = 'no_weight_tying' [/STATE] [STATE] conf_value = True [/STATE] [STATE] conf_key = 'gpt_j_residual' [/STATE] [STATE] conf_value = False [/STATE] [STATE] conf_key = 'output_layer_parallelism' [/STATE] [STATE] conf_value = 'column' [/STATE]\n            if conf_key in config:\n                raise ValueError(\n                    f\"Conf file {conf_file_name} has the following duplicate keys with previously loaded file: {conf_key}\"\n                )\n\n            conf_key_converted = conf_key.replace( #  [STATE] conf_key_converted = 'pipe_parallel_size' [/STATE] [STATE] conf_key_converted = 'model_parallel_size' [/STATE] [STATE] conf_key_converted = 'num_layers' [/STATE] [STATE] conf_key_converted = 'hidden_size' [/STATE] [STATE] conf_key_converted = 'num_attention_heads' [/STATE] [STATE] conf_key_converted = 'seq_length' [/STATE] [STATE] conf_key_converted = 'max_position_embeddings' [/STATE] [STATE] conf_key_converted = 'norm' [/STATE] [STATE] conf_key_converted = 'pos_emb' [/STATE] [STATE] conf_key_converted = 'no_weight_tying' [/STATE] [STATE] conf_key_converted = 'gpt_j_residual' [/STATE] [STATE] conf_key_converted = 'output_layer_parallelism' [/STATE] [STATE] conf_key_converted = 'scaled_upper_triang_masked_softmax_fusion' [/STATE] [STATE] conf_key_converted = 'bias_gelu_fusion' [/STATE] [STATE] conf_key_converted = 'rope_fusion' [/STATE] [STATE] conf_key_converted = 'init_method' [/STATE] [STATE] conf_key_converted = 'output_layer_init_method' [/STATE] [STATE] conf_key_converted = 'optimizer' [/STATE] [STATE] conf_key_converted = 'min_lr' [/STATE] [STATE] conf_key_converted = 'zero_optimization' [/STATE] [STATE] conf_key_converted = 'train_micro_batch_size_per_gpu' [/STATE]\n                \"-\", \"_\"\n            )  # TODO remove replace and update configuration files?\n            config[conf_key_converted] = conf_value #  [STATE] config = {'pipe_parallel_size': 1} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm'} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary'} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column'} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init'} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init'} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}} [/STATE] [STATE] config = {'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4} [/STATE]\n\n    # validate that neox args has the same value as specified in the config (if specified in the config)\n    for k, v in config.items(): #  [STATE] k = 'pipe_parallel_size' [/STATE] [STATE] v = 1 [/STATE] [STATE] k = 'model_parallel_size' [/STATE] [STATE] k = 'num_layers' [/STATE] [STATE] v = 12 [/STATE] [STATE] k = 'hidden_size' [/STATE] [STATE] v = 768 [/STATE] [STATE] k = 'num_attention_heads' [/STATE] [STATE] k = 'seq_length' [/STATE] [STATE] v = 2048 [/STATE] [STATE] k = 'max_position_embeddings' [/STATE] [STATE] k = 'norm' [/STATE] [STATE] v = 'layernorm' [/STATE] [STATE] k = 'pos_emb' [/STATE] [STATE] v = 'rotary' [/STATE] [STATE] k = 'no_weight_tying' [/STATE] [STATE] v = True [/STATE] [STATE] k = 'gpt_j_residual' [/STATE] [STATE] v = False [/STATE] [STATE] k = 'output_layer_parallelism' [/STATE] [STATE] v = 'column' [/STATE]\n        neox_args_value = getattr(args_loaded, k) #  [STATE] neox_args_value = 1 [/STATE] [STATE] neox_args_value = 12 [/STATE] [STATE] neox_args_value = 768 [/STATE] [STATE] neox_args_value = 2048 [/STATE] [STATE] neox_args_value = 'layernorm' [/STATE] [STATE] neox_args_value = 'rotary' [/STATE] [STATE] neox_args_value = True [/STATE] [STATE] neox_args_value = False [/STATE] [STATE] neox_args_value = 'column' [/STATE] [STATE] neox_args_value = 'small_init' [/STATE] [STATE] neox_args_value = 'wang_init' [/STATE] [STATE] neox_args_value = {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}} [/STATE] [STATE] neox_args_value = 6e-05 [/STATE] [STATE] neox_args_value = {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True} [/STATE] [STATE] neox_args_value = 4 [/STATE] [STATE] neox_args_value = 'mmap' [/STATE] [STATE] neox_args_value = 1.0 [/STATE] [STATE] neox_args_value = 0.1 [/STATE] [STATE] neox_args_value = 0.0 [/STATE] [STATE] neox_args_value = {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1} [/STATE] [STATE] neox_args_value = 320000 [/STATE]\n        assert v == neox_args_value, ( #  [STATE] @py_assert1 = None [/STATE]\n            \"loaded neox args value \"\n            + str(k)\n            + \" == \"\n            + str(neox_args_value)\n            + \" different from config file \"\n            + str(v)\n        )\n\nrun_neox_args_load_test(['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml'])", "loop_code": "1: def run_neox_args_load_test(yaml_files):\n2:     from megatron.neox_arguments import NeoXArgs\n3:\n4:     yaml_list = get_configs_with_path(yaml_files)\n5:     args_loaded = NeoXArgs.from_ymls(yaml_list)\n6:     assert isinstance(args_loaded, NeoXArgs)\n7:\n8:     # initialize an empty config dictionary to be filled by yamls\n9:     config = dict()\n10:\n11:     # iterate of all to be loaded yaml files\n12:     for conf_file_name in yaml_list:\n13:\n14:         # load file\n15:         with open(conf_file_name) as conf_file:\n16:             conf = yaml.load(conf_file, Loader=yaml.FullLoader)\n17:\n18:         # check for key duplicates and load values\n19:         for conf_key, conf_value in conf.items():\n20:             if conf_key in config:\n21:                 raise ValueError(\n22:                     f\"Conf file {conf_file_name} has the following duplicate keys with previously loaded file: {conf_key}\"\n23:                 )\n24:\n25:             conf_key_converted = conf_key.replace(\n26:                 \"-\", \"_\"\n27:             )  # TODO remove replace and update configuration files?\n28:             config[conf_key_converted] = conf_value\n29:\n30:     # validate that neox args has the same value as specified in the config (if specified in the config)\n31:     for k, v in config.items():\n32:         neox_args_value = getattr(args_loaded, k)\n33:         assert v == neox_args_value, (\n34:             \"loaded neox args value \"\n35:             + str(k)\n36:             + \" == \"\n37:             + str(neox_args_value)\n38:             + \" different from config file \"\n39:             + str(v)\n40:         )\n41:\n42: run_neox_args_load_test(['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml'])", "question": "What is the value of 'k' in line 31 after executing 'run_neox_args_load_test(['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml'])'?", "answer": "'num_attention_heads'", "variable_assignment": "k = 'num_attention_heads'", "loop_range": [12, 28], "post_loop_line": 31, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 22, "scratchpad_format": "def main(input_args=None):\n    args = get_args(input_args) # [STATE] args = Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1) [/STATE]\n    encoder = Encoder(args) # [STATE] encoder = {args=Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1)} [/STATE]\n    tokenizer = build_tokenizer(args) # [STATE] tokenizer = {name='HFGPT2TokenizerFast', tokenizer=GPT2TokenizerFast(name_or_path='gpt2', vocab_size=50257, model_max_length=1024, is_fast=True, padding_side='right', truncation_side='right', special_tokens={'bos_token': '<|endoftext|>', 'eos_token': '<|endoftext|>', 'unk_token': '<|endoftext|>', 'pad_token': '<|padding|>'}, clean_up_tokenization_spaces=True),  added_tokens_decoder={\t50256: AddedToken(\"<|endoftext|>\", rstrip=False, lstrip=False, single_word=False, normalized=True, special=True),\t50257: AddedToken(\"<|padding|>\", rstrip=False, lstrip=False, single_word=False, normalized=False, special=True),}, eod_id=50256, pad_id=50257} [/STATE] # [STATE] args = Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1, padded_vocab_size=50304) [/STATE] # [STATE] encoder = {args=Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1, padded_vocab_size=50304)} [/STATE]\n    print(f\"Vocab size: {tokenizer.vocab_size}\")\n    print(f\"Output prefix: {args.output_prefix}\")\n\n    # build a semaphore object to stop `yield_from_files` from getting ahead of encoder.encode and\n    # hence building up memory\n    semaphore = Semaphore(10000 + args.workers) # [STATE] semaphore = {_cond=<Condition(<unlocked _thread.lock object at 0x7f1a969bf450>, 0)>, _value=10001} [/STATE]\n\n    # use multiprocessing to iterate over input documents\n    fin = yield_from_files(args.input.split(\",\"), semaphore) # [STATE] fin = <generator object yield_from_files at 0x7f1b94b985f0> [/STATE]\n\n    if args.workers > 1:\n        pool = multiprocessing.Pool(args.workers, initializer=encoder.initializer)\n        encoded_docs = pool.imap(encoder.encode, fin, chunksize=25)\n    else:\n        encoder.initializer()\n        encoded_docs = (encoder.encode(doc) for doc in fin) # [STATE] encoded_docs = <generator object main.<locals>.<genexpr> at 0x7f1a97c25270> [/STATE]\n\n    # make a dataset builder for each key in args.jsonl_keys\n    # each key will output to a different file beginning with args.output_prefix\n    output_bin_files = {} # [STATE] output_bin_files = {} [/STATE]\n    output_idx_files = {} # [STATE] output_idx_files = {} [/STATE]\n    builders = {} # [STATE] builders = {} [/STATE]\n    for key in args.jsonl_keys: #  [STATE] key = 'text' [/STATE]\n        output_bin_files[key] = \"{}_{}_{}.bin\".format( # [STATE] output_bin_files = {'text': './tests/data/enwik8_first100_text_document.bin'} [/STATE]\n            args.output_prefix, key, \"document\"\n        )\n        output_idx_files[key] = \"{}_{}_{}.idx\".format( # [STATE] output_idx_files = {'text': './tests/data/enwik8_first100_text_document.idx'} [/STATE]\n            args.output_prefix, key, \"document\"\n        )\n        builders[key] = indexed_dataset.make_builder( # [STATE] builders = {'text': <megatron.data.indexed_dataset.MMapIndexedDatasetBuilder object at 0x7f1a969bfcd0>} [/STATE]\n            output_bin_files[key],\n            impl=args.dataset_impl,\n            vocab_size=tokenizer.vocab_size,\n        )\n\n    # actually do tokenization\n    proc_start = time.time() # [STATE] proc_start = 1712171758.7156355 [/STATE]\n    total_bytes_processed = 0 # [STATE] total_bytes_processed = 0 [/STATE]\n    pbar = tqdm.tqdm() # [STATE] pbar = {iterable=None, desc='', total=None, leave=True, fp=<tqdm.utils.DisableOnWriteError object at 0x7f1a969bf100>, ncols=None, nrows=None, mininterval=0.1, maxinterval=10.0, miniters=0, dynamic_miniters=True, ascii=True, disable=False, unit='it', unit_scale=False, unit_divisor=1000, initial=0, lock_args=None, delay=0.0, gui=False, dynamic_ncols=False, smoothing=0.3, _ema_dn=<tqdm.std.EMA object at 0x7f1a969bf520>, _ema_dt=<tqdm.std.EMA object at 0x7f1a969bf3a0>, _ema_miniters=<tqdm.std.EMA object at 0x7f1a969bf070>, bar_format=None, postfix=None, colour=None, _time=<built-in function time>, last_print_n=0, n=0, pos=0, last_print_t=1712171758.7435398, start_t=1712171758.7435398} [/STATE]\n    for i, (doc, bytes_processed) in enumerate(encoded_docs, start=1): #  [STATE] i = 1 [/STATE] [STATE] doc = {'text': [[27, 11431, 15466, 35555, 5907, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 30487, 35555, 5907, 25, 87, 13396, 2625, 4023, 1378, 2503, 13, 86, 18, 13, 2398, 14, 14585, 14, 55, 5805, 27054, 2611, 12, 39098, 1, 2124, 13396, 25, 15952, 2611, 14749, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 14, 2638, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 13, 87, 21282, 1, 2196, 2625, 15, 13, 18, 1, 35555, 25, 17204, 2625, 268, 5320, 198, 220, 1279, 15654, 10951, 29, 198, 220, 220, 220, 1279, 48937, 12453, 29, 48845, 3556, 48937, 12453, 29, 198, 220, 220, 220, 1279, 8692, 29, 4023, 1378, 268, 13, 31266, 13, 2398, 14, 15466, 14, 13383, 62, 9876, 3556, 8692, 29, 198, 220, 220, 220, 1279, 8612, 1352, 29, 13152, 32603, 352, 13, 21, 26591, 3556, 8612, 1352, 29, 198, 220, 220, 220, 1279, 7442, 29, 11085, 12, 9291, 3556, 7442, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 43076, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 17, 5320, 13152, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 16, 5320, 13409, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 15, 1, 11037, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 16, 5320, 25685, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 17, 5320, 12982, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 18, 5320, 12982, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 19, 5320, 48845, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 20, 5320, 48845, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 21, 5320, 5159, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 22, 5320, 5159, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 23, 5320, 13152, 32603, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 24, 5320, 13152, 32603, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 940, 5320, 30800, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1157, 5320, 30800, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1065, 5320, 22087, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1485, 5320, 22087, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1415, 5320, 27313, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1314, 5320, 27313, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 3064, 5320, 13924, 282, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 8784, 5320, 13924, 282, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 7359, 14933, 43076, 29, 198, 220, 7359, 15654, 10951, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 32, 64, 32, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 16, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 34256, 2079, 27936, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 1065, 12, 1983, 51, 1507, 25, 3510, 25, 2857, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 49044, 4164, 7084, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 21, 23726, 1485, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 29697, 11907, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178...0, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3388, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1485, 25, 1485, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 1090, 62, 312, 28, 20, 25, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 2348, 1362, 544, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 7437, 16305, 12162, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 21, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3865, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1415, 25, 1558, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 284, 1090, 62, 312, 28, 21, 220, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 7437, 43663, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 4677, 18511, 40226, 873, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 23, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16942, 12, 2999, 12, 1495, 51, 1314, 25, 3559, 25, 1157, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 541, 29, 3103, 9641, 4226, 3556, 541, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 38062, 515, 11315, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 4677, 18511, 14458, 11907, 198, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 15457, 856, 5377, 48074, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 940, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 2231, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16088, 12, 3023, 12, 1495, 51, 1828, 25, 1507, 25, 2548, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 32, 907, 1795, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 2425, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 22743, 278, 18941, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 15457, 856, 62, 785, 48074, 11907, 3556, 5239, 29, 198, 50256]]} [/STATE] [STATE] bytes_processed = 3355 [/STATE] [STATE] semaphore = {_cond=<Condition(<unlocked _thread.lock object at 0x7f1a969bf450>, 0)>, _value=9999} [/STATE]\n        total_bytes_processed += bytes_processed # [STATE] total_bytes_processed = 3355 [/STATE]\n\n        # release semaphore so `yield_from_files` can add another file to the buffer\n        semaphore.release() # [STATE] semaphore = {_cond=<Condition(<unlocked _thread.lock object at 0x7f1a969bf450>, 0)>, _value=10000} [/STATE]\n\n        # add each tokenized document / sentence\n        for key, sentences in doc.items(): #  [STATE] sentences = [[27, 11431, 15466, 35555, 5907, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 30487, 35555, 5907, 25, 87, 13396, 2625, 4023, 1378, 2503, 13, 86, 18, 13, 2398, 14, 14585, 14, 55, 5805, 27054, 2611, 12, 39098, 1, 2124, 13396, 25, 15952, 2611, 14749, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 14, 2638, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 13, 87, 21282, 1, 2196, 2625, 15, 13, 18, 1, 35555, 25, 17204, 2625, 268, 5320, 198, 220, 1279, 15654, 10951, 29, 198, 220, 220, 220, 1279, 48937, 12453, 29, 48845, 3556, 48937, 12453, 29, 198, 220, 220, 220, 1279, 8692, 29, 4023, 1378, 268, 13, 31266, 13, 2398, 14, 15466, 14, 13383, 62, 9876, 3556, 8692, 29, 198, 220, 220, 220, 1279, 8612, 1352, 29, 13152, 32603, 352, 13, 21, 26591, 3556, 8612, 1352, 29, 198, 220, 220, 220, 1279, 7442, 29, 11085, 12, 9291, 3556, 7442, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 43076, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 17, 5320, 13152, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 16, 5320, 13409, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 15, 1, 11037, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 16, 5320, 25685, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 17, 5320, 12982, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 18, 5320, 12982, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 19, 5320, 48845, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 20, 5320, 48845, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 21, 5320, 5159, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 22, 5320, 5159, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 23, 5320, 13152, 32603, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 24, 5320, 13152, 32603, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 940, 5320, 30800, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1157, 5320, 30800, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1065, 5320, 22087, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1485, 5320, 22087, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1415, 5320, 27313, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1314, 5320, 27313, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 3064, 5320, 13924, 282, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 8784, 5320, 13924, 282, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 7359, 14933, 43076, 29, 198, 220, 7359, 15654, 10951, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 32, 64, 32, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 16, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 34256, 2079, 27936, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 1065, 12, 1983, 51, 1507, 25, 3510, 25, 2857, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 49044, 4164, 7084, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 21, 23726, 1485, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 29697, 11907, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198...20, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3388, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1485, 25, 1485, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 1090, 62, 312, 28, 20, 25, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 2348, 1362, 544, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 7437, 16305, 12162, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 21, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3865, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1415, 25, 1558, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 284, 1090, 62, 312, 28, 21, 220, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 7437, 43663, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 4677, 18511, 40226, 873, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 23, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16942, 12, 2999, 12, 1495, 51, 1314, 25, 3559, 25, 1157, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 541, 29, 3103, 9641, 4226, 3556, 541, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 38062, 515, 11315, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 4677, 18511, 14458, 11907, 198, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 15457, 856, 5377, 48074, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 940, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 2231, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16088, 12, 3023, 12, 1495, 51, 1828, 25, 1507, 25, 2548, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 32, 907, 1795, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 2425, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 22743, 278, 18941, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 15457, 856, 62, 785, 48074, 11907, 3556, 5239, 29, 198, 50256]] [/STATE]\n            for sentence in sentences: #  [STATE] sentence = [27, 11431, 15466, 35555, 5907, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 30487, 35555, 5907, 25, 87, 13396, 2625, 4023, 1378, 2503, 13, 86, 18, 13, 2398, 14, 14585, 14, 55, 5805, 27054, 2611, 12, 39098, 1, 2124, 13396, 25, 15952, 2611, 14749, 2625, 4023, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 14, 2638, 1378, 2503, 13, 11431, 15466, 13, 2398, 14, 19875, 14, 39344, 12, 15, 13, 18, 13, 87, 21282, 1, 2196, 2625, 15, 13, 18, 1, 35555, 25, 17204, 2625, 268, 5320, 198, 220, 1279, 15654, 10951, 29, 198, 220, 220, 220, 1279, 48937, 12453, 29, 48845, 3556, 48937, 12453, 29, 198, 220, 220, 220, 1279, 8692, 29, 4023, 1378, 268, 13, 31266, 13, 2398, 14, 15466, 14, 13383, 62, 9876, 3556, 8692, 29, 198, 220, 220, 220, 1279, 8612, 1352, 29, 13152, 32603, 352, 13, 21, 26591, 3556, 8612, 1352, 29, 198, 220, 220, 220, 1279, 7442, 29, 11085, 12, 9291, 3556, 7442, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 43076, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 17, 5320, 13152, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 12, 16, 5320, 13409, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 15, 1, 11037, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 16, 5320, 25685, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 17, 5320, 12982, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 18, 5320, 12982, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 19, 5320, 48845, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 20, 5320, 48845, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 21, 5320, 5159, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 22, 5320, 5159, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 23, 5320, 13152, 32603, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 24, 5320, 13152, 32603, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 940, 5320, 30800, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1157, 5320, 30800, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1065, 5320, 22087, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1485, 5320, 22087, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1415, 5320, 27313, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 1314, 5320, 27313, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 3064, 5320, 13924, 282, 3556, 14933, 10223, 29, 198, 220, 220, 220, 220, 220, 1279, 14933, 10223, 1994, 2625, 8784, 5320, 13924, 282, 1561, 3556, 14933, 10223, 29, 198, 220, 220, 220, 7359, 14933, 43076, 29, 198, 220, 7359, 15654, 10951, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 32, 64, 32, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 16, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 34256, 2079, 27936, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 1065, 12, 1983, 51, 1507, 25, 3510, 25, 2857, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 49044, 4164, 7084, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 21, 23726, 1485, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 29697, 11907, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198,...220, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3388, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1485, 25, 1485, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 1090, 62, 312, 28, 20, 25, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 2348, 1362, 544, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 7437, 16305, 12162, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 21, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 1507, 3312, 2718, 3865, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 14315, 12, 2998, 12, 3070, 51, 1157, 25, 1415, 25, 1558, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 23579, 84, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 1795, 1959, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 26872, 284, 1090, 62, 312, 28, 21, 220, 22935, 49, 422, 43281, 20448, 11709, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 7437, 43663, 11907, 27007, 49, 422, 43281, 20448, 11709, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 4677, 18511, 40226, 873, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 23, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16942, 12, 2999, 12, 1495, 51, 1314, 25, 3559, 25, 1157, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 541, 29, 3103, 9641, 4226, 3556, 541, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 38062, 515, 11315, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 4677, 18511, 14458, 11907, 198, 3556, 5239, 29, 198, 220, 220, 220, 7359, 260, 10178, 29, 198, 220, 7359, 7700, 29, 198, 220, 1279, 7700, 29, 198, 220, 220, 220, 1279, 7839, 29, 15457, 856, 5377, 48074, 3556, 7839, 29, 198, 220, 220, 220, 1279, 312, 29, 940, 3556, 312, 29, 198, 220, 220, 220, 1279, 260, 10178, 29, 198, 220, 220, 220, 220, 220, 1279, 312, 29, 21273, 42520, 2231, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 1279, 16514, 27823, 29, 16088, 12, 3023, 12, 1495, 51, 1828, 25, 1507, 25, 2548, 57, 3556, 16514, 27823, 29, 198, 220, 220, 220, 220, 220, 1279, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 29460, 29, 32, 907, 1795, 3556, 29460, 29, 198, 220, 220, 220, 220, 220, 220, 220, 1279, 312, 29, 2425, 3559, 3556, 312, 29, 198, 220, 220, 220, 220, 220, 7359, 3642, 2455, 273, 29, 198, 220, 220, 220, 220, 220, 1279, 1084, 273, 11037, 198, 220, 220, 220, 220, 220, 1279, 23893, 29, 22743, 278, 18941, 3556, 23893, 29, 198, 220, 220, 220, 220, 220, 1279, 5239, 35555, 25, 13200, 2625, 18302, 3760, 5320, 2, 22083, 40, 23988, 16410, 15457, 856, 62, 785, 48074, 11907, 3556, 5239, 29, 198, 50256] [/STATE]\n                builders[key].add_item(np.array(sentence, dtype=builders[key].dtype))\n            # separate with eos token\n            builders[key].end_document()\n\n        # log progress\n        if i % args.log_interval == 0:\n            current = time.time()\n            elapsed = current - proc_start\n            mbs = total_bytes_processed / elapsed / 1024 / 1024\n            pbar.set_description(\n                f\"Processed {i}{'' if args.num_docs is None else '/' + str(args.num_docs)} documents ({i / elapsed :.2f} docs/s, {mbs:.2f} MB/s).\"\n            )\n            if i != 0:\n                pbar.update(args.log_interval)\n\n    # save output file\n    for key in args.jsonl_keys:\n        builders[key].finalize(output_idx_files[key])\n\nmain(['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])", "loop_code": "1: def main(input_args=None):\n2:     args = get_args(input_args)\n3:     encoder = Encoder(args)\n4:     tokenizer = build_tokenizer(args)\n5:     print(f\"Vocab size: {tokenizer.vocab_size}\")\n6:     print(f\"Output prefix: {args.output_prefix}\")\n7:\n8:     # build a semaphore object to stop `yield_from_files` from getting ahead of encoder.encode and\n9:     # hence building up memory\n10:     semaphore = Semaphore(10000 + args.workers)\n11:\n12:     # use multiprocessing to iterate over input documents\n13:     fin = yield_from_files(args.input.split(\",\"), semaphore)\n14:\n15:     if args.workers > 1:\n16:         pool = multiprocessing.Pool(args.workers, initializer=encoder.initializer)\n17:         encoded_docs = pool.imap(encoder.encode, fin, chunksize=25)\n18:     else:\n19:         encoder.initializer()\n20:         encoded_docs = (encoder.encode(doc) for doc in fin)\n21:\n22:     # make a dataset builder for each key in args.jsonl_keys\n23:     # each key will output to a different file beginning with args.output_prefix\n24:     output_bin_files = {}\n25:     output_idx_files = {}\n26:     builders = {}\n27:     for key in args.jsonl_keys:\n28:         output_bin_files[key] = \"{}_{}_{}.bin\".format(\n29:             args.output_prefix, key, \"document\"\n30:         )\n31:         output_idx_files[key] = \"{}_{}_{}.idx\".format(\n32:             args.output_prefix, key, \"document\"\n33:         )\n34:         builders[key] = indexed_dataset.make_builder(\n35:             output_bin_files[key],\n36:             impl=args.dataset_impl,\n37:             vocab_size=tokenizer.vocab_size,\n38:         )\n39:\n40:     # actually do tokenization\n41:     proc_start = time.time()\n42:     total_bytes_processed = 0\n43:     pbar = tqdm.tqdm()\n44:     for i, (doc, bytes_processed) in enumerate(encoded_docs, start=1):\n45:         total_bytes_processed += bytes_processed\n46:\n47:         # release semaphore so `yield_from_files` can add another file to the buffer\n48:         semaphore.release()\n49:\n50:         # add each tokenized document / sentence\n51:         for key, sentences in doc.items():\n52:             for sentence in sentences:\n53:                 builders[key].add_item(np.array(sentence, dtype=builders[key].dtype))\n54:             # separate with eos token\n55:             builders[key].end_document()\n56:\n57:         # log progress\n58:         if i % args.log_interval == 0:\n59:             current = time.time()\n60:             elapsed = current - proc_start\n61:             mbs = total_bytes_processed / elapsed / 1024 / 1024\n62:             pbar.set_description(\n63:                 f\"Processed {i}{'' if args.num_docs is None else '/' + str(args.num_docs)} documents ({i / elapsed :.2f} docs/s, {mbs:.2f} MB/s).\"\n64:             )\n65:             if i != 0:\n66:                 pbar.update(args.log_interval)\n67:\n68:     # save output file\n69:     for key in args.jsonl_keys:\n70:         builders[key].finalize(output_idx_files[key])\n71:\n72: main(['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])", "question": "What is the value of 'proc_start' in line 41 after executing 'main(['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])'?", "answer": "1712171758.7156355", "variable_assignment": "proc_start = 1712171758.7156355", "loop_range": [27, 38], "post_loop_line": 41, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"idx": 23, "scratchpad_format": "def get_article_detail(text, del_qqmusic=True, del_voice=True):\n        \"\"\"根据微信文章的临时链接获取明细\n\n        1. 获取文本中所有的图片链接列表\n        2. 获取微信文章的html内容页面(去除标题等信息)\n\n        Parameters\n        ----------\n        text : str or unicode\n            一篇微信文章的文本\n        del_qqmusic: bool\n            删除文章中的qq音乐\n        del_voice: bool\n            删除文章中的语音内容\n\n        Returns\n        -------\n        dict\n        {\n            'content_html': str # 微信文本内容\n            'content_img_list': list[img_url1, img_url2, ...] # 微信文本中图片列表\n\n        }\n        \"\"\"\n        # 1. 获取微信文本content\n        html_obj = BeautifulSoup(text, \"lxml\") # [STATE] html_obj = <!DOCTYPE html><!--headTrap<body></body><head></head><html></html>--><html><head><meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/><meta content=\"IE=edge\" http-equiv=\"X-UA-Compatible\"/><meta content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0,viewport-fit=cover\" name=\"viewport\"/><meta content=\"yes\" name=\"apple-mobile-web-app-capable\"/><meta content=\"black\" name=\"apple-mobile-web-app-status-bar-style\"/><meta content=\"telephone=no\" name=\"format-detection\"/><script nonce=\"1926782896\" type=\"text/javascript\">        window.logs = {            pagetime: {}        };        window.logs.pagetime['html_begin'] = (+new Date());    </script><script nonce=\"1926782896\" type=\"text/javascript\">        var biz = \"\" || \"ODUzMjkwMzYx\";        var sn = \"\" || \"\" || \"\";        var mid = \"\" || \"\" || \"2654593305\";        var idx = \"\" || \"\" || \"1\";        window.__allowLoadResFromMp = true;    </script><script nonce=\"1926782896\" type=\"text/javascript\">        var page_begintime = +new Date, is_rumor = \"\", norumor = \"\";        1 * is_rumor && !(1 * norumor) && biz && mid && (document.referrer && -1 != document.referrer.indexOf(\"mp.weixin.qq.com/mp/rumor\") || (location.href = \"http://mp.weixin.qq.com/mp/rumor?action=info&__biz=\" + biz + \"&mid=\" + mid + \"&idx=\" + idx + \"&sn=\" + sn + \"#wechat_redirect\")),                document.domain = \"qq.com\";    </script><script nonce=\"1926782896\" type=\"text/javascript\">        var MutationObserver = window.WebKitMutationObserver || window.MutationObserver || window.MozMutationObserver, isDangerSrc = function (t) {            if (t) {                var e = t.match(/http(?:s)?:\\/\\/([^\\/]+?)(\\/|$)/);                if (e && !/qq\\.com(\\:8080)?$/.test(e[1]) && !/weishi\\.com$/.test(e[1]))return !0;            }            return !1;        }, ishttp = 0 == location.href.indexOf(\"http://\");        -1 == location.href.indexOf(\"safe=0\") && ishttp && \"function\" == typeof MutationObserver && \"mp.weixin.qq.com\" == location.host && (window.__observer_data = {            count: 0,            exec_time: 0,            list: []        }, window.__observer = new MutationObserver(function (t) {            window.__observer_data.count++;            var e = new Date, r = [];            t.forEach(function (t) {                for (var e = t.addedNodes, o = 0; o < e.length; o++) {                    var n = e[o];                    if (\"SCRIPT\" === n.tagName) {                        var i = n.src;                        isDangerSrc(i) && (window.__observer_data.list.push(i), r.push(n)), !i && window.__nonce_str && n.getAttribute(\"nonce\") != window.__nonce_str && (window.__observer_data.list.push(\"inlinescript_without_nonce\"),                                r.push(n));                    }                }            });            for (var o = 0; o < r.length; o++) {                var n = r[o];                n.parentNode && n.parentNode.removeChild(n);            }            window.__observer_data.exec_time += new Date - e;        }), window.__observer.observe(document, {            subtree: !0,            childList: !0        })), function () {            if (-1 == location.href.indexOf(\"safe=0\") && Math.random() < .01 && ishttp && HTMLScriptElement.prototype.__lookupSetter__ && \"undefined\" != typeof Object.defineProperty) {                window.__danger_src = {                    xmlhttprequest: [],                    script_src: [],                    script_setAttribute: []                };                var t = \"$\" + Math.random();                HTMLScriptElement.prototype.__old_method_script_src = HTMLScriptElement.prototype.__lookupSetter__(\"src\"),                        HTMLScriptElement.prototype.__defineSetter__(\"src\", function (t) {                            t && isDangerSrc(t) && window.__danger_src.script_src.push(t), this.__old_method_script_src(t);                        });                var e = \"element_setAttribute\" + t;                Object.defineProperty(Element.prototype, e, {                    value: Element.prototype.setAttribute,                   ...t/javascript\", a.async = !0, a.down_time = +new Date, a.onerror = function (s) {                                    t(i, \"status\", \"error\"), t(i, \"end\", +new Date);                                    var c = new Error(s);                                    if (n >= 0)if (u > n) {                                        var m = o.replace(\"res.wx.qq.com\", \"mp.weixin.qq.com\");                                        g.request(m, n, r);                                    } else g.request(o, n, r); else window.__moon_report && window.__moon_report([{                                        offset: d,                                        log: \"load_script_error: \" + o,                                        e: c                                    }], 1);                                    if (n == u - 1 && window.__moon_report([{                                                offset: _,                                                log: \"load_script_error: \" + o,                                                e: c                                            }], 1), -1 == n) {                                        var l = \"ua: \" + window.navigator.userAgent + \", time=\" + (+new Date - a.down_time) + \", load_script_error -1 : \" + o;                                        window.__moon_report([{                                            offset: w,                                            log: l                                        }], 1);                                    }                                    window.__moonclientlog.push(\"moon load js error : \" + o + \", error -> \" + c.toString()),                                            e(\"moon_request_error url:\" + o);                                }, \"undefined\" != typeof moon_crossorigin && moon_crossorigin && a.setAttribute(\"crossorigin\", !0),                                        a.onload = a.onreadystatechange = function () {                                            t(i, \"status\", \"loaded\"), t(i, \"end\", +new Date), !a || a.readyState && !/loaded|complete/.test(a.readyState) || (t(i, \"status\", \"200\"),                                                    a.onload = a.onreadystatechange = null, \"function\" == typeof r && r());                                        }, n--, c.appendChild(a), e(\"moon_request url:\" + o + \" retry:\" + n);                            }                        },                        setItem: function (e, o) {                            !!s && s.setItem(e, o);                        },                        clear: function () {                            s && (a(s, function (e, o) {                                ~o.indexOf(g.prefix) && s.removeItem(o);                            }), console.debug && console.debug(\"[moon] clear\"));                        },                        idkeyReport: function (e, o, t) {                            t = t || 1;                            var n = e + \"_\" + o + \"_\" + t;                            (new Image).src = \"/mp/jsmonitor?idkey=\" + n + \"&r=\" + Math.random();                        }                    };                    seajs && seajs.use && \"string\" == typeof window.__moon_mainjs && seajs.use(window.__moon_mainjs),                            window.moon = g;                }(window), function () {                    try {                        Math.random() < 1;                    } catch (e) {                    }                }(), window.moon.init();            };            e(), !!window.__moon_initcallback && window.__moon_initcallback(), window.__wxgspeeds && (window.__wxgspeeds.moonendtime = +new Date);        }    }    __moonf__();}, 25);</script><script nonce=\"1926782896\" type=\"text/javascript\">    var real_show_page_time = +new Date();    if (!!window.addEventListener) {        window.addEventListener(\"load\", function () {            window.onload_endtime = +new Date();        });    }</script></body><script nonce=\"1926782896\" type=\"text/javascript\">document.addEventListener(\"touchstart\", function () {}, false);</script></html><!--tailTrap<body></body><head></head><html></html>--> [/STATE]\n        content_text = html_obj.find('div', {'class': 'rich_media_content', 'id': 'js_content'}) # [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"580\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"><p style=\"color: inherit;\"><qqmusic albumid=\"001k4Q4m2RYxCy\" albumurl=\"https://y.gtimg.cn/music/photo_new/T002R68x68M000001k4Q4m2RYxCy.jpg\" audiourl=\"http://ws.stream.qqmusic.qq.com/C100002VMURX2Ebx6y.m4a?fromtag=46\" class=\"res_iframe qqmusic_iframe js_editor_qqmusic\" frameborder=\"0\" jumpurlkey=\"\" mid=\"002VMURX2Ebx6y\" music_name=\"柔如彩虹\" musicid=\"635327\" musictype=\"1\" otherid=\"002VMURX2Ebx6y\" play_length=\"221\" scrolling=\"no\" singer=\"Richard Clayderman - 理查德.克莱德曼钢琴曲精选\" src=\"/cgi-bin/readtemplate?t=tmpl/qqmusic_tmpl&amp;singer=Richard%20Clayderman%20-%20%E7%90%86%E6%9F%A5%E5%BE%B7.%E5%85%8B%E8%8E%B1%E5%BE%B7%E6%9B%BC%E9%92%A2%E7%90%B4%E6%9B%B2%E7%B2%BE%E9%80%89&amp;music_name=%E6%9F%94%E5%A6%82%E5%BD%A9%E8%99%B9&amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000001k4Q4m2RYxCy.jpg&amp;musictype=1\"></qqmusic></p></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25....ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE]\n\n        # 2. 删除部分标签\n        if del_qqmusic:\n            qqmusic = content_text.find_all('qqmusic') or [] # [STATE] qqmusic = [<qqmusic albumid=\"001k4Q4m2RYxCy\" albumurl=\"https://y.gtimg.cn/music/photo_new/T002R68x68M000001k4Q4m2RYxCy.jpg\" audiourl=\"http://ws.stream.qqmusic.qq.com/C100002VMURX2Ebx6y.m4a?fromtag=46\" class=\"res_iframe qqmusic_iframe js_editor_qqmusic\" frameborder=\"0\" jumpurlkey=\"\" mid=\"002VMURX2Ebx6y\" music_name=\"柔如彩虹\" musicid=\"635327\" musictype=\"1\" otherid=\"002VMURX2Ebx6y\" play_length=\"221\" scrolling=\"no\" singer=\"Richard Clayderman - 理查德.克莱德曼钢琴曲精选\" src=\"/cgi-bin/readtemplate?t=tmpl/qqmusic_tmpl&amp;singer=Richard%20Clayderman%20-%20%E7%90%86%E6%9F%A5%E5%BE%B7.%E5%85%8B%E8%8E%B1%E5%BE%B7%E6%9B%BC%E9%92%A2%E7%90%B4%E6%9B%B2%E7%B2%BE%E9%80%89&amp;music_name=%E6%9F%94%E5%A6%82%E5%BD%A9%E8%99%B9&amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000001k4Q4m2RYxCy.jpg&amp;musictype=1\"></qqmusic>] [/STATE]\n            for music in qqmusic: #  [STATE] music = <qqmusic albumid=\"001k4Q4m2RYxCy\" albumurl=\"https://y.gtimg.cn/music/photo_new/T002R68x68M000001k4Q4m2RYxCy.jpg\" audiourl=\"http://ws.stream.qqmusic.qq.com/C100002VMURX2Ebx6y.m4a?fromtag=46\" class=\"res_iframe qqmusic_iframe js_editor_qqmusic\" frameborder=\"0\" jumpurlkey=\"\" mid=\"002VMURX2Ebx6y\" music_name=\"柔如彩虹\" musicid=\"635327\" musictype=\"1\" otherid=\"002VMURX2Ebx6y\" play_length=\"221\" scrolling=\"no\" singer=\"Richard Clayderman - 理查德.克莱德曼钢琴曲精选\" src=\"/cgi-bin/readtemplate?t=tmpl/qqmusic_tmpl&amp;singer=Richard%20Clayderman%20-%20%E7%90%86%E6%9F%A5%E5%BE%B7.%E5%85%8B%E8%8E%B1%E5%BE%B7%E6%9B%BC%E9%92%A2%E7%90%B4%E6%9B%B2%E7%B2%BE%E9%80%89&amp;music_name=%E6%9F%94%E5%A6%82%E5%BD%A9%E8%99%B9&amp;albumurl=https%3A%2F%2Fy.gtimg.cn%2Fmusic%2Fphoto_new%2FT002R68x68M000001k4Q4m2RYxCy.jpg&amp;musictype=1\"></qqmusic> [/STATE]\n                music.parent.decompose() # [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"580\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height:...ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] # [STATE] qqmusic = REPR FAILED [/STATE] # [STATE] music = REPR FAILED [/STATE]\n\n        if del_voice:\n            # voice是一个p标签下的mpvoice标签以及class为'js_audio_frame db'的span构成，所以将父标签删除\n            voices = content_text.find_all('mpvoice') or [] # [STATE] voices = [] [/STATE]\n            for voice in voices:\n                voice.parent.decompose()\n\n        # 3. 获取所有的图片 [img标签，和style中的background-image]\n        all_img_set = set() # [STATE] all_img_set = set() [/STATE]\n        all_img_element = content_text.find_all('img') or [] # [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"580\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE]\n        for ele in all_img_element: #  [STATE] ele = <img class=\"\" data-ratio=\"0.1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"580\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/> [/STATE] [STATE] ele = <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"664\" style=\"width: 430px;height: 254px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/> [/STATE] [STATE] ele = <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/> [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/> [/STATE]\n            # 删除部分属性\n            img_url = format_image_url(ele.attrs['data-src']) #  [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png' [/STATE] [STATE] img_url = 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png' [/STATE]\n            del ele.attrs['data-src'] #  [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height: 0px;border-width: 1.3em;border-style: solid;border-color: rgb(255, 255, 255) transparent;\"></section><section class=\"Powered-by-Videaba\" style=\"margi...ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\"/> [/STATE] [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height: 0px;border-width: 1.3em;border-style: solid;border-color: rgb(255, 255, 255) transparent;\"></section><section class=\"Powered-by-Videaba\" style=\"margin: 0....ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\"...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" ...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=pn...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" style=\"vertical-align:middle;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\"...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" da...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" data-...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"6...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"664\" sty...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" style=\"\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"664\" style=...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE]\n\n            ele.attrs['src'] = img_url #  [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height: 0px;...ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" data-type=\"png\" data-w=\"444\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/> [/STATE] [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height: 0px;borde...ic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" ...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" data-w=\"14\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" data-type=\"png\" data-w=\"670\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" data-type=\"png\" data-w=\"495\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mm...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" data-type=\"png\" data-w=\"493\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.q...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" data-type=\"png\" data-w=\"305\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.c...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" data-type=\"png\" data-w=\"496\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmb...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE] [STATE] ele = <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" style=\"\"/> [/STATE] [STATE] all_img_element = [<img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>, <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6140625\" data-s=\"300,640\" data-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 431px;height: 265px;\"/>, <img class=\"wx-img\" data-ratio=\"1.5714285714285714\" data-w=\"14\" src=\"https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640\" style=\"vertical-align:middle;\"/>, <img class=\"\" data-ratio=\"0.47313432835820896\" data-s=\"300,640\" data-type=\"png\" data-w=\"670\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png\" style=\"width: 429px;height: 203px;\"/>, <img class=\"\" data-ratio=\"0.6404040404040404\" data-s=\"300,640\" data-type=\"png\" data-w=\"495\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png\" style=\"color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);box-sizing: border-box !important;word-wrap: break-word !important;width: 426px;visibility: visible !important;height: 273px;\"/>, <img class=\"\" data-ratio=\"0.5517241379310345\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png\" style=\"width: 423px;height: 233px;\"/>, <img class=\"\" data-ratio=\"0.6369168356997972\" data-s=\"300,640\" data-type=\"png\" data-w=\"493\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png\" style=\"width: 420px;height: 268px;\"/>, <img class=\"\" data-ratio=\"0.7901639344262295\" data-s=\"300,640\" data-type=\"png\" data-w=\"305\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png\" style=\"\"/>, <img class=\"\" data-ratio=\"0.6633064516129032\" data-s=\"300,640\" data-type=\"png\" data-w=\"496\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png\" style=\"width: 424px;height: 281px;\"/>, <img class=\"\" data-ratio=\"0.7359154929577465\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"568\" style=\"width: 427px;height: 314px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6416666666666667\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 427px;height: 274px;\"/>, <img class=\"\" data-ratio=\"1.336986301369863\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png\" data-type=\"png\" data-w=\"365\" style=\"\"/>, <img class=\"\" data-ratio=\"0.7246376811594203\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png\" data-type=\"png\" data-w=\"690\" style=\"width: 373px;height: 270px;\"/>, <img class=\"\" data-ratio=\"0.5903614457831325\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_pn...t: auto;font-family: 微软雅黑;font-size: 14px;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.7133333333333334\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"600\" style=\"color: rgb(62, 62, 62);width: 448px;height: 320px;\"/>, <img class=\"\" data-ratio=\"0.6200716845878136\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png\" data-type=\"png\" data-w=\"\" style=\"height: 278px;width: 449px;\"/>, <img class=\"\" data-ratio=\"0.5195530726256983\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png\" data-type=\"png\" data-w=\"537\" style=\"width: 458px;height: 238px;\"/>, <img class=\"\" data-ratio=\"0.5407239819004525\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png\" data-type=\"png\" data-w=\"442\" style=\"\"/>, <img class=\"\" data-ratio=\"0.5401785714285714\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png\" data-type=\"png\" data-w=\"448\" style=\"\"/>, <img class=\"\" data-ratio=\"0.43847874720357943\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png\" data-type=\"png\" data-w=\"447\" style=\"\"/>, <img class=\"\" data-ratio=\"1\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?\" data-w=\"55\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;width: 2.5rem;\"/>, <img class=\"\" data-ratio=\"0.5692599620493358\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png\" data-type=\"png\" data-w=\"527\" style=\"width: 437px;height: 249px;\"/>, <img class=\"\" data-copyright=\"0\" data-ratio=\"0.6640625\" data-s=\"300,640\" data-src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" data-type=\"jpeg\" data-w=\"1280\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/>, <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" data-type=\"gif\" data-w=\"1152\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>, <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>, <img class=\"\" data-ratio=\"1.1200980392156863\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" data-type=\"png\" data-w=\"408\" height=\"140\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>, <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" data-type=\"png\" data-w=\"927\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>] [/STATE]\n\n            if not img_url.startswith('http'):\n                raise WechatSogouException('img_url [{}] 不合法'.format(img_url))\n            all_img_set.add(img_url) #  [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE] [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png'} [/STATE]\n\n        backgroud_image = content_text.find_all(style=re.compile(\"background-image\")) or [] # [STATE] backgroud_image = [<section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section>] [/STATE]\n        for ele in backgroud_image: #  [STATE] ele = <section class=\"videababg\" data-width=\"292px\" data-wxurl=\"http://mmbiz.qpic.cn/mmbiz/buNzDicETA2mgoYiaHkFsg4JzxwN07MAmjadTuMnkwKGKttCicE24jeSicXttcbK3S9CXIk6W0gOrCckN4ywlqDwuw/0?wx_fmt=jpeg\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section> [/STATE]\n            # 删除部分属性\n            if ele.attrs.get('data-src'):\n                del ele.attrs['data-src']\n\n            if ele.attrs.get('data-wxurl'):\n                del ele.attrs['data-wxurl'] # [STATE] content_text = <div class=\"rich_media_content\" id=\"js_content\"><section class=\"videabaArticle\"><section class=\"videabaArticle\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><section class=\"videaba\" data-color=\"\"><img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/></section></section></section></section></section><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\"><section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\"><p><img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/></p><section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\"><section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\"><p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">                                                 早上好~</p></section></section><section style=\"text-align: justify;line-height: 1.8;\"><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不要总呆在自己的舒适圈里，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>不走出去，</strong></p><p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\"><strong>你很难发现自己的潜力</strong></p><section class=\"videabaArticle\"><section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\"><section class=\"videababg\" data-width=\"292px\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section></section></section></section></section></section></section></section><p style=\"line-height: 25.6px;white-space: normal;text-align: center;\"><br/></p><section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\"><section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\"><section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\"><section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;border-left-width: 1.5em !important;border-left-style: solid !important;border-right-width: 1.5em !important;border-right-style: solid !important;\"></section><section style=\"margin: -2.75em 1.65em;height: 0px;border-width: 1.3em;border-style: solid;border-color: rgb(255, 255, 255) transparent;\"></section><section class=\"Powered-by-Videaba\" style=\"margin: 0....ata-type=\"jpeg\" data-w=\"1280\" src=\"https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg\" style=\"color: rgb(62, 62, 62);width: 429px;height: 285px;\"/></p></section></section><section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\"><p><br/></p><article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\"><img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-type=\"gif\" data-w=\"1152\" src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/></article></section><section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\"><section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><span style=\"color: rgb(255, 76, 65);\"><strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">欢迎分享到朋友圈~</strong></span></p><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><br/></p></section></section><section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\"><section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\"><p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/></p><p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"1.1200980392156863\" data-type=\"png\" data-w=\"408\" height=\"140\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/></p></section></section><p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\"><img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-type=\"png\" data-w=\"927\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/></p></section></div> [/STATE] # [STATE] ele = <section class=\"videababg\" data-width=\"292px\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section> [/STATE] # [STATE] backgroud_image = [<section class=\"videababg\" data-width=\"292px\" style='margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;'><section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\"><section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\"></section></section></section>] [/STATE]\n            img_url = re.findall(backgroud_image_p, str(ele)) # [STATE] img_url = ['https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg'] [/STATE]\n            if not img_url:\n                continue\n            all_img_set.add(img_url[0]) # [STATE] all_img_set = {'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png', 'http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg'} [/STATE]\n\n        # 4. 处理iframe\n        all_img_element = content_text.find_all('iframe') or [] # [STATE] all_img_element = [] [/STATE]\n        for ele in all_img_element:\n            # 删除部分属性\n            img_url = ele.attrs['data-src']\n            del ele.attrs['data-src']\n            ele.attrs['src'] = img_url\n\n        # 5. 返回数据\n        all_img_list = list(all_img_set) # [STATE] all_img_list = ['https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulWic8GkI4jTUAOfJrme36PZwQ2dic784yPtYumdthOKGrLYHfemicV6Hw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruNFHXlrc4bmxH3DWgqn0tvBSHUTg6fcF9DUGlDf2kJFmmHrAtvicha1A/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruMagzpWJa3IowapejQRxeaN9xNG1ond1XQ7Kd4TUtnSCqTMPJm50UWQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruGeGwW9Io6ibmFOteW04ibmg5HT8DKfEvfoojVleRiaibgON6Fwr6Hhanwg/640?wx_fmt=png', 'http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruBcqVLOZsEGT1fRZvsRsmRqCl6eyLrYHR0kwovFhkjU8dSvhzs2mtRA/640?wx_fmt=png', 'http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErulge7eq0v065JzON3PwdUWSXMPh9PLNRRmI9l4t8g5m4HYvhLCM73kg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEru7Y9cXa6t7b4sKlcURer8XpRkP84hURFRWJkSibUlDySMUdyPA8lxmSw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/oq1PymRl9D7wicq1tSoqEUMOFsicSz0VMHQGKRJDOVGNqve308J4BjpiaqhdcJaFgicVsdn88v5icRLPWRyE4Um2M5g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruPfXZic5rn0ddft1UrbQdz1PvEmMhoQ5cw87H7gL0PImMlF4UB5wpkSg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErux30g1cwicx2awgxGUrVAq3G6kACAWqdoAZ1jdjuLv7ShVjp9fjtKkcQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwloSIbsVMqDDYSQyjZ7sPdAl17PBJptmWGKvPCO2z3p9DPp6HwBmpcg/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_jpg/xrFYciaHL08BQibj45TouE53ViauIKoykFLFe6qb4jYnHM9xxicibN1gFfFVMUfMicqeTF3SYz25IaSxgbDvXGEFxK0g/640?wx_fmt=jpeg', 'https://mmbiz.qpic.cn/mmbiz_gif/v4vz52CcB10icDUYXeCCiatGPFKaHaOBnWIARweIA8tLOrFS5N5BBByIwqO8yCVjuUzwYAa2HuxiabDzQHtYD61Bw/640?', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruxgJMkE11iao5lr8OibR9f9yqIrHx2cxUCu65pzIZP3auOicenn1dDpvkA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErutPdD6pGvqMWZXBvtDl6Q72CuTpRa5C2eOPVswhh7W6rDXic45pRicdkg/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErucGICXziaPSicIltx8Of5CkDJjKy6dxiclrVvByiabLaO7p3uZibTNmfhTxw/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruJD3CIeXArI8asI4qxCoqYuNN7paYWa4XfP2JuD6SjuF6OqTwgIzt7g/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruaXSrvfWk7B0jvWEogxVf8WvriaPGZjFwxtKPaKrmUBkfYxgOAZfR4rQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruQDBRUibgY8e14K7eR4x6fxMibeQ2ibJzuFNujBpVGHlacOW3iajP6zvsAA/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_png/v4vz52CcB13K0y1mCNoDfAMJ4nqJkGapfrQJ4KiatPCu1xiaiaFGF3DNfvhUCYliaKV0UVm2LtDrYRxtFnQ3IvL5RA/640', 'https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgEruXXUwTb1e7uoXOvTJSexke9YgfkicFyibTria7CDgfia8VBUj6Q2XQqVIDQ/640?wx_fmt=png', 'https://mmbiz.qpic.cn/mmbiz_jpg/azXQmS1HA7lxZkZaxyTQ8yqLM57WTkZwqLtGOkNR3jeI17pRBmuicnRJDNsjltcb7Y9rBOh7jxe0S3iadnGsnEXg/640?wx_fmt=jpeg'] [/STATE]\n        content_html = content_text.prettify() # [STATE] content_html = '<div class=\"rich_media_content\" id=\"js_content\">\\n <section class=\"videabaArticle\">\\n  <section class=\"videabaArticle\">\\n   <section class=\"videaba\" data-color=\"\">\\n    <section class=\"videaba\" data-color=\"\">\\n     <section class=\"videaba\" data-color=\"\">\\n      <img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>\\n     </section>\\n    </section>\\n   </section>\\n  </section>\\n </section>\\n <section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\">\\n   <section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\">\\n    <section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\">\\n     <p>\\n      <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>\\n     </p>\\n     <section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\">\\n      <section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\">\\n       <p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">\\n        早上好~\\n       </p>\\n      </section>\\n     </section>\\n     <section style=\"text-align: justify;line-height: 1.8;\">\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        不要总呆在自己的舒适圈里，\\n       </strong>\\n      </p>\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        不走出去，\\n       </strong>\\n      </p>\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        你很难发现自己的潜力\\n       </strong>\\n      </p>\\n      <section class=\"videabaArticle\">\\n       <section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\">\\n        <section class=\"videababg\" data-width=\"292px\" style=\\'margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;\\'>\\n         <section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\">\\n          <section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\">\\n          </section>\\n         </section>\\n        </section>\\n       </section>\\n      </section>\\n     </section>\\n    </section>\\n   </section>\\n  </section>\\n </section>\\n <p style=\"line-height: 25.6px;white-space: normal;text-align: center;\">\\n  <br/>\\n </p>\\n <section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\">\\n   <section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\">\\n    <section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bott... 62);width: 429px;height: 285px;\"/>\\n   </p>\\n  </section>\\n </section>\\n <section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <p>\\n   <br/>\\n  </p>\\n  <article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\">\\n   <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-type=\"gif\" data-w=\"1152\" src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>\\n  </article>\\n </section>\\n <section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n  <section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <span style=\"color: rgb(255, 76, 65);\">\\n     <strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n      欢迎分享到朋友圈~\\n     </strong>\\n    </span>\\n   </p>\\n   <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <br/>\\n   </p>\\n  </section>\\n </section>\\n <section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\">\\n  <section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n     <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>\\n    </p>\\n    <p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n     <img class=\"\" data-ratio=\"1.1200980392156863\" data-type=\"png\" data-w=\"408\" height=\"140\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>\\n    </p>\\n   </section>\\n  </section>\\n  <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-type=\"png\" data-w=\"927\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>\\n  </p>\\n </section>\\n</div>\\n' [/STATE]\n        # 去除div[id=js_content]\n        content_html = re.findall(js_content, content_html)[0][0] # [STATE] content_html = '\\n <section class=\"videabaArticle\">\\n  <section class=\"videabaArticle\">\\n   <section class=\"videaba\" data-color=\"\">\\n    <section class=\"videaba\" data-color=\"\">\\n     <section class=\"videaba\" data-color=\"\">\\n      <img class=\"\" data-ratio=\"0.1\" data-type=\"gif\" data-w=\"580\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRYoicViaW9XPCpzfumwpdbOg0icWwx9OGEjuOgF7OCxLYxf0ibXz3T5ogxQ/640?wx_fmt=gif\"/>\\n     </section>\\n    </section>\\n   </section>\\n  </section>\\n </section>\\n <section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <section class=\"videaba\" data-color=\"section.powered-by-videaba-1:background-color;\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\">\\n   <section style=\"margin-top: 10px;margin-bottom: 10px;text-align: center;\">\\n    <section style=\"margin: 3px;padding: 15px;display: inline-block;vertical-align: top;box-shadow: rgb(153, 166, 171) 0px 0px 3px;\">\\n     <p>\\n      <img class=\"\" data-ratio=\"0.5855855855855856\" data-s=\"300,640\" data-type=\"png\" data-w=\"444\" src=\"https://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajsBt80vSPPsBtpefTAgErumf6Uuyibn37TsUkRY4Ahzxib69WZN0UP5b9iblJx7baFzCVdv7iakEyqkw/640?wx_fmt=png\" style=\"width: 353px;height: 207px;\"/>\\n     </p>\\n     <section style=\"margin-top: -25px;margin-bottom: 5px;transform: translate3d(0px, 0px, 0px);\">\\n      <section class=\"powered-by-videaba-1\" style=\"padding: 0.1em 0.3em;display: inline-block;border-width: 2px;border-style: solid;border-color: rgb(255, 255, 255);background-color: rgb(245, 64, 135);\">\\n       <p style=\"color: rgb(255, 255, 255);font-weight: bold;min-width: 1px;\">\\n        早上好~\\n       </p>\\n      </section>\\n     </section>\\n     <section style=\"text-align: justify;line-height: 1.8;\">\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        不要总呆在自己的舒适圈里，\\n       </strong>\\n      </p>\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        不走出去，\\n       </strong>\\n      </p>\\n      <p style=\"min-width: 1px;font-size: 14.0625px;text-align: center;\">\\n       <strong>\\n        你很难发现自己的潜力\\n       </strong>\\n      </p>\\n      <section class=\"videabaArticle\">\\n       <section class=\"videaba videabanow\" data-color=\"\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;\">\\n        <section class=\"videababg\" data-width=\"292px\" style=\\'margin-right: auto;margin-left: auto;height: 168px;width: 292px;color: inherit;background-image: url(\"https://mmbiz.qpic.cn/mmbiz_jpg/Jyco923vDiahUG7Gqyp3hMzafzu1MqfvRHGXoMtN8oReOYz7SkiaHJqjk7ACtFQfUOhQkibtofRZt463fujIwQcicg/640?wx_fmt=jpeg\");background-size: 100%;\\'>\\n         <section data-width=\"166px\" style=\"margin-top: 22px;margin-left: 26px;height: 145px;display: inline-block;overflow: hidden;border-radius: 8px;text-align: center;width: 166px;color: inherit;background: rgb(231, 231, 231);\">\\n          <section data-width=\"148px\" style=\"margin-top: 10px;padding-top: 9px;padding-bottom: 9px;vertical-align: middle;display: inline-block;height: 123px;border-radius: 8px;width: 148px;box-sizing: border-box;color: inherit;background: rgb(255, 255, 255);\">\\n          </section>\\n         </section>\\n        </section>\\n       </section>\\n      </section>\\n     </section>\\n    </section>\\n   </section>\\n  </section>\\n </section>\\n <p style=\"line-height: 25.6px;white-space: normal;text-align: center;\">\\n  <br/>\\n </p>\\n <section class=\"videabaArticle\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <section class=\"videaba\" data-color=\"section.Powered-by-Videaba:border-color\" style=\"margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;font-size: 16px;font-family: 微软雅黑;\">\\n   <section style=\"margin-top: 2px;margin-right: 0.8em;margin-bottom: 1em;text-align: center;font-size: 1em;vertical-align: middle;\">\\n    <section class=\"Powered-by-Videaba\" style=\"height: 0px;border-top-width: 1.5em;border-top-style: solid;border-color: rgb(151, 216, 247);border-bottom-width: 1.5em;border-bottom-style: solid;borde...(62, 62, 62);width: 429px;height: 285px;\"/>\\n   </p>\\n  </section>\\n </section>\\n <section data-author=\"Wxeditor\" style=\"line-height: 25.6px;white-space: normal;\">\\n  <p>\\n   <br/>\\n  </p>\\n  <article class=\"yead_editor\" data-author=\"Wxeditor\" style=\"margin: 5px auto;font-size: 14px;\">\\n   <img class=\"wx-img\" data-ratio=\"0.029513888888888888\" data-type=\"gif\" data-w=\"1152\" src=\"https://mmbiz.qpic.cn/mmbiz/ianq03UUWGmK4x8wVTdM27HAUGhBg5y42uC4diafFxJ2oeg8gsqbRRfjOMibqibaUEg2AicYRX1YpE1ne58SMR2XGkQ/640?wx_fmt=gif\" style=\"margin-right: auto;margin-left: auto;display: block;clear: both;\"/>\\n  </article>\\n </section>\\n <section style=\"line-height: 25.6px;white-space: normal;max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n  <section style=\"max-width: 100%;line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <span style=\"color: rgb(255, 76, 65);\">\\n     <strong style=\"max-width: 100%;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n      欢迎分享到朋友圈~\\n     </strong>\\n    </span>\\n   </p>\\n   <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <br/>\\n   </p>\\n  </section>\\n </section>\\n <section style=\"font-size: 16px;line-height: 25.6px;white-space: normal;max-width: 100%;color: rgb(62, 62, 62);box-sizing: border-box !important;word-wrap: break-word !important;\">\\n  <section data-source=\"bj.96weixin.com\" style=\"padding-right: 5px;padding-left: 5px;max-width: 100%;line-height: normal;border-width: 1px;border-style: dashed;border-color: transparent;font-size: 14px;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <section data-width=\"320px\" style=\"margin-right: auto;margin-left: auto;max-width: 100%;width: 320px;overflow: hidden;clear: both;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n    <p style=\"margin-right: 16px;margin-left: 16px;padding-right: 0.1em;max-width: 100%;min-height: 1em;width: 320px;text-align: center;float: left;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n     <img class=\"__bg_gif\" data-ratio=\"0.5025380710659898\" data-type=\"gif\" data-w=\"591\" data-width=\"319px\" height=\"144\" src=\"https://mmbiz.qpic.cn/mmbiz_gif/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmC42xAdtpV7C8YpDSZ6JXO52pg0m3cv5AfNpNeooyIsqQKS5D5lfTmQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 287px !important;\" width=\"287\"/>\\n    </p>\\n    <p style=\"margin-top: -10.5em;margin-right: 16px;margin-left: 16px;padding: 0.2em 1em;max-width: 100%;min-height: 1em;color: rgb(255, 255, 255);float: left;opacity: 0.95;line-height: 1.75em;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n     <img class=\"\" data-ratio=\"1.1200980392156863\" data-type=\"png\" data-w=\"408\" height=\"140\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiajJ1SEqcphq0AdJklqfSBSmfah3nFRxglymcibajPooleKzlV9qZZy5FcyOqDOuH5QibXVR0cuiahRkQ/640?\" style=\"box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: 131px !important;\" title=\"1473153749101511.png\" width=\"131\"/>\\n    </p>\\n   </section>\\n  </section>\\n  <p style=\"margin-right: 16px;margin-left: 16px;max-width: 100%;min-height: 1em;text-align: center;box-sizing: border-box !important;word-wrap: break-word !important;\">\\n   <img class=\"\" data-ratio=\"0.36138079827400216\" data-s=\"300,640\" data-type=\"png\" data-w=\"927\" src=\"http://mmbiz.qpic.cn/mmbiz_png/Jyco923vDiagSm5VtCHMcEYXtrmgBK4U7liaapv8Mhicwf05CWlM0JicxzBAs4QDQt2xOMVuL9Y4tEKSG1tSDVvOnA/640?wx_fmt=png\" style=\"line-height: 25.6px;box-sizing: border-box !important;word-wrap: break-word !important;visibility: visible !important;width: auto !important;\" width=\"auto\"/>\\n  </p>\\n </section>\\n' [/STATE]\n        return {\n            'content_html': content_html,\n            'content_img_list': all_img_list\n        }\n\nget_article_detail('<!DOCTYPE html>\\n<!--headTrap<body></body><head></head><html></html>-->\\n<html>\\n<head>\\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n    <meta name=\"viewport\"\\n          content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0,viewport-fit=cover\">\\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\\n    <meta name=\"format-detection\" content=\"telephone=no\">\\n\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        window.logs = {\\n            pagetime: {}\\n        };\\n        window.logs.pagetime[\\'html_begin\\'] = (+new Date());\\n    </script>\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var biz = \"\" || \"ODUzMjkwMzYx\";\\n        var sn = \"\" || \"\" || \"\";\\n        var mid = \"\" || \"\" || \"2654593305\";\\n        var idx = \"\" || \"\" || \"1\";\\n        window.__allowLoadResFromMp = true;\\n\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var page_begintime = +new Date, is_rumor = \"\", norumor = \"\";\\n        1 * is_rumor && !(1 * norumor) && biz && mid && (document.referrer && -1 != document.referrer.indexOf(\"mp.weixin.qq.com/mp/rumor\") || (location.href = \"http://mp.weixin.qq.com/mp/rumor?action=info&__biz=\" + biz + \"&mid=\" + mid + \"&idx=\" + idx + \"&sn=\" + sn + \"#wechat_redirect\")),\\n                document.domain = \"qq.com\";\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var MutationObserver = window.WebKitMutationObserver || window.MutationObserver || window.MozMutationObserver, isDangerSrc = function (t) {\\n            if (t) {\\n                var e = t.match(/http(?:s)?:\\\\/\\\\/([^\\\\/]+?)(\\\\/|$)/);\\n                if (e && !/qq\\\\.com(\\\\:8080)?$/.test(e[1]) && !/weishi\\\\.com$/.test(e[1]))return !0;\\n            }\\n            return !1;\\n        }, ishttp = 0 == location.href.indexOf(\"http://\");\\n        -1 == location.href.indexOf(\"safe=0\") && ishttp && \"function\" == typeof MutationObserver && \"mp.weixin.qq.com\" == location.host && (window.__observer_data = {\\n            count: 0,\\n            exec_time: 0,\\n            list: []\\n        }, window.__observer = new MutationObserver(function (t) {\\n            window.__observer_data.count++;\\n            var e = new Date, r = [];\\n            t.forEach(function (t) {\\n                for (var e = t.addedNodes, o = 0; o < e.length; o++) {\\n                    var n = e[o];\\n                    if (\"SCRIPT\" === n.tagName) {\\n                        var i = n.src;\\n                        isDangerSrc(i) && (window.__observer_data.list.push(i), r.push(n)), !i && window.__nonce_str && n.getAttribute(\"nonce\") != window.__nonce_str && (window.__observer_data.list.push(\"inlinescript_without_nonce\"),\\n                                r.push(n));\\n                    }\\n                }\\n            });\\n            for (var o = 0; o < r.length; o++) {\\n                var n = r[o];\\n                n.parentNode && n.parentNode.removeChild(n);\\n            }\\n            window.__observer_data.exec_time += new Date - e;\\n        }), window.__observer.observe(document, {\\n            subtree: !0,\\n            childList: !0\\n        })), function () {\\n            if (-1 == location.href.indexOf(\"safe=0\") && Math.random() < .01 && ishttp && HTMLScriptElement.prototype.__lookupSetter__ && \"undefined\" != typeof Object.defineProperty) {\\n                window.__danger_src = {\\n                    xmlhttprequest: [],\\n                    script_src: [],\\n                    script_setAttribute: []\\n                };\\n                var t = \"$\" + Math.random();\\n                HTMLScriptElement.prototype.__old_method_script_src = HTMLScriptElement.prototype.__lookupSetter__(\"src\"),\\n                        HTMLScriptElement.prototype.__defineSetter__(\"src\", function (t) {\\n                            t && isDangerSrc(t) && window.__danger_src.script_src.push(t), this.__old_method_script_src(t);\\n         ...end\", +new Date);\\n                                    var c = new Error(s);\\n                                    if (n >= 0)if (u > n) {\\n                                        var m = o.replace(\"res.wx.qq.com\", \"mp.weixin.qq.com\");\\n                                        g.request(m, n, r);\\n                                    } else g.request(o, n, r); else window.__moon_report && window.__moon_report([{\\n                                        offset: d,\\n                                        log: \"load_script_error: \" + o,\\n                                        e: c\\n                                    }], 1);\\n                                    if (n == u - 1 && window.__moon_report([{\\n                                                offset: _,\\n                                                log: \"load_script_error: \" + o,\\n                                                e: c\\n                                            }], 1), -1 == n) {\\n                                        var l = \"ua: \" + window.navigator.userAgent + \", time=\" + (+new Date - a.down_time) + \", load_script_error -1 : \" + o;\\n                                        window.__moon_report([{\\n                                            offset: w,\\n                                            log: l\\n                                        }], 1);\\n                                    }\\n                                    window.__moonclientlog.push(\"moon load js error : \" + o + \", error -> \" + c.toString()),\\n                                            e(\"moon_request_error url:\" + o);\\n                                }, \"undefined\" != typeof moon_crossorigin && moon_crossorigin && a.setAttribute(\"crossorigin\", !0),\\n                                        a.onload = a.onreadystatechange = function () {\\n                                            t(i, \"status\", \"loaded\"), t(i, \"end\", +new Date), !a || a.readyState && !/loaded|complete/.test(a.readyState) || (t(i, \"status\", \"200\"),\\n                                                    a.onload = a.onreadystatechange = null, \"function\" == typeof r && r());\\n                                        }, n--, c.appendChild(a), e(\"moon_request url:\" + o + \" retry:\" + n);\\n                            }\\n                        },\\n                        setItem: function (e, o) {\\n                            !!s && s.setItem(e, o);\\n                        },\\n                        clear: function () {\\n                            s && (a(s, function (e, o) {\\n                                ~o.indexOf(g.prefix) && s.removeItem(o);\\n                            }), console.debug && console.debug(\"[moon] clear\"));\\n                        },\\n                        idkeyReport: function (e, o, t) {\\n                            t = t || 1;\\n                            var n = e + \"_\" + o + \"_\" + t;\\n                            (new Image).src = \"/mp/jsmonitor?idkey=\" + n + \"&r=\" + Math.random();\\n                        }\\n                    };\\n                    seajs && seajs.use && \"string\" == typeof window.__moon_mainjs && seajs.use(window.__moon_mainjs),\\n                            window.moon = g;\\n                }(window), function () {\\n                    try {\\n                        Math.random() < 1;\\n                    } catch (e) {\\n                    }\\n                }(), window.moon.init();\\n            };\\n            e(), !!window.__moon_initcallback && window.__moon_initcallback(), window.__wxgspeeds && (window.__wxgspeeds.moonendtime = +new Date);\\n        }\\n    }\\n\\n    __moonf__();\\n}, 25);</script>\\n<script nonce=\"1926782896\" type=\"text/javascript\">\\n    var real_show_page_time = +new Date();\\n    if (!!window.addEventListener) {\\n        window.addEventListener(\"load\", function () {\\n            window.onload_endtime = +new Date();\\n        });\\n    }\\n\\n</script>\\n\\n</body>\\n<script nonce=\"1926782896\" type=\"text/javascript\">document.addEventListener(\"touchstart\", function () {\\n}, false);</script>\\n</html>\\n<!--tailTrap<body></body><head></head><html></html>-->', True, True)", "loop_code": "1: def get_article_detail(text, del_qqmusic=True, del_voice=True):\n2:         \"\"\"根据微信文章的临时链接获取明细\n3:\n4:         1. 获取文本中所有的图片链接列表\n5:         2. 获取微信文章的html内容页面(去除标题等信息)\n6:\n7:         Parameters\n8:         ----------\n9:         text : str or unicode\n10:             一篇微信文章的文本\n11:         del_qqmusic: bool\n12:             删除文章中的qq音乐\n13:         del_voice: bool\n14:             删除文章中的语音内容\n15:\n16:         Returns\n17:         -------\n18:         dict\n19:         {\n20:             'content_html': str # 微信文本内容\n21:             'content_img_list': list[img_url1, img_url2, ...] # 微信文本中图片列表\n22:\n23:         }\n24:         \"\"\"\n25:         # 1. 获取微信文本content\n26:         html_obj = BeautifulSoup(text, \"lxml\")\n27:         content_text = html_obj.find('div', {'class': 'rich_media_content', 'id': 'js_content'})\n28:\n29:         # 2. 删除部分标签\n30:         if del_qqmusic:\n31:             qqmusic = content_text.find_all('qqmusic') or []\n32:             for music in qqmusic:\n33:                 music.parent.decompose()\n34:\n35:         if del_voice:\n36:             # voice是一个p标签下的mpvoice标签以及class为'js_audio_frame db'的span构成，所以将父标签删除\n37:             voices = content_text.find_all('mpvoice') or []\n38:             for voice in voices:\n39:                 voice.parent.decompose()\n40:\n41:         # 3. 获取所有的图片 [img标签，和style中的background-image]\n42:         all_img_set = set()\n43:         all_img_element = content_text.find_all('img') or []\n44:         for ele in all_img_element:\n45:             # 删除部分属性\n46:             img_url = format_image_url(ele.attrs['data-src'])\n47:             del ele.attrs['data-src']\n48:\n49:             ele.attrs['src'] = img_url\n50:\n51:             if not img_url.startswith('http'):\n52:                 raise WechatSogouException('img_url [{}] 不合法'.format(img_url))\n53:             all_img_set.add(img_url)\n54:\n55:         backgroud_image = content_text.find_all(style=re.compile(\"background-image\")) or []\n56:         for ele in backgroud_image:\n57:             # 删除部分属性\n58:             if ele.attrs.get('data-src'):\n59:                 del ele.attrs['data-src']\n60:\n61:             if ele.attrs.get('data-wxurl'):\n62:                 del ele.attrs['data-wxurl']\n63:             img_url = re.findall(backgroud_image_p, str(ele))\n64:             if not img_url:\n65:                 continue\n66:             all_img_set.add(img_url[0])\n67:\n68:         # 4. 处理iframe\n69:         all_img_element = content_text.find_all('iframe') or []\n70:         for ele in all_img_element:\n71:             # 删除部分属性\n72:             img_url = ele.attrs['data-src']\n73:             del ele.attrs['data-src']\n74:             ele.attrs['src'] = img_url\n75:\n76:         # 5. 返回数据\n77:         all_img_list = list(all_img_set)\n78:         content_html = content_text.prettify()\n79:         # 去除div[id=js_content]\n80:         content_html = re.findall(js_content, content_html)[0][0]\n81:         return {\n82:             'content_html': content_html,\n83:             'content_img_list': all_img_list\n84:         }\n85:\n86: get_article_detail('<!DOCTYPE html>\\n<!--headTrap<body></body><head></head><html></html>-->\\n<html>\\n<head>\\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n    <meta name=\"viewport\"\\n          content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0,viewport-fit=cover\">\\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\\n    <meta name=\"format-detection\" content=\"telephone=no\">\\n\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        window.logs = {\\n            pagetime: {}\\n        };\\n        window.logs.pagetime[\\'html_begin\\'] = (+new Date());\\n    </script>\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var biz = \"\" || \"ODUzMjkwMzYx\";\\n        var sn = \"\" || \"\" || \"\";\\n        var mid = \"\" || \"\" || \"2654593305\";\\n        var idx = \"\" || \"\" || \"1\";\\n        window.__allowLoadResFromMp = true;\\n\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var page_begintime = +new Date, is_rumor = \"\", norumor = \"\";\\n        1 * is_rumor && !(1 * norumor) && biz && mid && (document.referrer && -1 != document.referrer.indexOf(\"mp.weixin.qq.com/mp/rumor\") || (location.href = \"http://mp.weixin.qq.com/mp/rumor?action=info&__biz=\" + biz + \"&mid=\" + mid + \"&idx=\" + idx + \"&sn=\" + sn + \"#wechat_redirect\")),\\n                document.domain = \"qq.com\";\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var MutationObserver = window.WebKitMutationObserver || window.MutationObserver || window.MozMutationObserver, isDangerSrc = function (t) {\\n            if (t) {\\n                var e = t.match(/http(?:s)?:\\\\/\\\\/([^\\\\/]+?)(\\\\/|$)/);\\n                if (e && !/qq\\\\.com(\\\\:8080)?$/.test(e[1]) && !/weishi\\\\.com$/.test(e[1]))return !0;\\n            }\\n            return !1;\\n        }, ishttp = 0 == location.href.indexOf(\"http://\");\\n        -1 == location.href.indexOf(\"safe=0\") && ishttp && \"function\" == typeof MutationObserver && \"mp.weixin.qq.com\" == location.host && (window.__observer_data = {\\n            count: 0,\\n            exec_time: 0,\\n            list: []\\n        }, window.__observer = new MutationObserver(function (t) {\\n            window.__observer_data.count++;\\n            var e = new Date, r = [];\\n            t.forEach(function (t) {\\n                for (var e = t.addedNodes, o = 0; o < e.length; o++) {\\n                    var n = e[o];\\n                    if (\"SCRIPT\" === n.tagName) {\\n                        var i = n.src;\\n                        isDangerSrc(i) && (window.__observer_data.list.push(i), r.push(n)), !i && window.__nonce_str && n.getAttribute(\"nonce\") != window.__nonce_str && (window.__observer_data.list.push(\"inlinescript_without_nonce\"),\\n                                r.push(n));\\n                    }\\n                }\\n            });\\n            for (var o = 0; o < r.length; o++) {\\n                var n = r[o];\\n                n.parentNode && n.parentNode.removeChild(n);\\n            }\\n            window.__observer_data.exec_time += new Date - e;\\n        }), window.__observer.observe(document, {\\n            subtree: !0,\\n            childList: !0\\n        })), function () {\\n            if (-1 == location.href.indexOf(\"safe=0\") && Math.random() < .01 && ishttp && HTMLScriptElement.prototype.__lookupSetter__ && \"undefined\" != typeof Object.defineProperty) {\\n                window.__danger_src = {\\n                    xmlhttprequest: [],\\n                    script_src: [],\\n                    script_setAttribute: []\\n                };\\n                var t = \"$\" + Math.random();\\n                HTMLScriptElement.prototype.__old_method_script_src = HTMLScriptElement.prototype.__lookupSetter__(\"src\"),\\n                        HTMLScriptElement.prototype.__defineSetter__(\"src\", function (t) {\\n                            t && isDangerSrc(t) && window.__danger_src.script_src.push(t), this.__old_method_script_src(t);\\n         ...end\", +new Date);\\n                                    var c = new Error(s);\\n                                    if (n >= 0)if (u > n) {\\n                                        var m = o.replace(\"res.wx.qq.com\", \"mp.weixin.qq.com\");\\n                                        g.request(m, n, r);\\n                                    } else g.request(o, n, r); else window.__moon_report && window.__moon_report([{\\n                                        offset: d,\\n                                        log: \"load_script_error: \" + o,\\n                                        e: c\\n                                    }], 1);\\n                                    if (n == u - 1 && window.__moon_report([{\\n                                                offset: _,\\n                                                log: \"load_script_error: \" + o,\\n                                                e: c\\n                                            }], 1), -1 == n) {\\n                                        var l = \"ua: \" + window.navigator.userAgent + \", time=\" + (+new Date - a.down_time) + \", load_script_error -1 : \" + o;\\n                                        window.__moon_report([{\\n                                            offset: w,\\n                                            log: l\\n                                        }], 1);\\n                                    }\\n                                    window.__moonclientlog.push(\"moon load js error : \" + o + \", error -> \" + c.toString()),\\n                                            e(\"moon_request_error url:\" + o);\\n                                }, \"undefined\" != typeof moon_crossorigin && moon_crossorigin && a.setAttribute(\"crossorigin\", !0),\\n                                        a.onload = a.onreadystatechange = function () {\\n                                            t(i, \"status\", \"loaded\"), t(i, \"end\", +new Date), !a || a.readyState && !/loaded|complete/.test(a.readyState) || (t(i, \"status\", \"200\"),\\n                                                    a.onload = a.onreadystatechange = null, \"function\" == typeof r && r());\\n                                        }, n--, c.appendChild(a), e(\"moon_request url:\" + o + \" retry:\" + n);\\n                            }\\n                        },\\n                        setItem: function (e, o) {\\n                            !!s && s.setItem(e, o);\\n                        },\\n                        clear: function () {\\n                            s && (a(s, function (e, o) {\\n                                ~o.indexOf(g.prefix) && s.removeItem(o);\\n                            }), console.debug && console.debug(\"[moon] clear\"));\\n                        },\\n                        idkeyReport: function (e, o, t) {\\n                            t = t || 1;\\n                            var n = e + \"_\" + o + \"_\" + t;\\n                            (new Image).src = \"/mp/jsmonitor?idkey=\" + n + \"&r=\" + Math.random();\\n                        }\\n                    };\\n                    seajs && seajs.use && \"string\" == typeof window.__moon_mainjs && seajs.use(window.__moon_mainjs),\\n                            window.moon = g;\\n                }(window), function () {\\n                    try {\\n                        Math.random() < 1;\\n                    } catch (e) {\\n                    }\\n                }(), window.moon.init();\\n            };\\n            e(), !!window.__moon_initcallback && window.__moon_initcallback(), window.__wxgspeeds && (window.__wxgspeeds.moonendtime = +new Date);\\n        }\\n    }\\n\\n    __moonf__();\\n}, 25);</script>\\n<script nonce=\"1926782896\" type=\"text/javascript\">\\n    var real_show_page_time = +new Date();\\n    if (!!window.addEventListener) {\\n        window.addEventListener(\"load\", function () {\\n            window.onload_endtime = +new Date();\\n        });\\n    }\\n\\n</script>\\n\\n</body>\\n<script nonce=\"1926782896\" type=\"text/javascript\">document.addEventListener(\"touchstart\", function () {\\n}, false);</script>\\n</html>\\n<!--tailTrap<body></body><head></head><html></html>-->', True, True)", "question": "What is the value of 'all_img_element' in line 69 after executing 'get_article_detail('<!DOCTYPE html>\\n<!--headTrap<body></body><head></head><html></html>-->\\n<html>\\n<head>\\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\\n    <meta name=\"viewport\"\\n          content=\"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0,viewport-fit=cover\">\\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\\n    <meta name=\"format-detection\" content=\"telephone=no\">\\n\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        window.logs = {\\n            pagetime: {}\\n        };\\n        window.logs.pagetime[\\'html_begin\\'] = (+new Date());\\n    </script>\\n\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var biz = \"\" || \"ODUzMjkwMzYx\";\\n        var sn = \"\" || \"\" || \"\";\\n        var mid = \"\" || \"\" || \"2654593305\";\\n        var idx = \"\" || \"\" || \"1\";\\n        window.__allowLoadResFromMp = true;\\n\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var page_begintime = +new Date, is_rumor = \"\", norumor = \"\";\\n        1 * is_rumor && !(1 * norumor) && biz && mid && (document.referrer && -1 != document.referrer.indexOf(\"mp.weixin.qq.com/mp/rumor\") || (location.href = \"http://mp.weixin.qq.com/mp/rumor?action=info&__biz=\" + biz + \"&mid=\" + mid + \"&idx=\" + idx + \"&sn=\" + sn + \"#wechat_redirect\")),\\n                document.domain = \"qq.com\";\\n    </script>\\n    <script nonce=\"1926782896\" type=\"text/javascript\">\\n        var MutationObserver = window.WebKitMutationObserver || window.MutationObserver || window.MozMutationObserver, isDangerSrc = function (t) {\\n            if (t) {\\n                var e = t.match(/http(?:s)?:\\\\/\\\\/([^\\\\/]+?)(\\\\/|$)/);\\n                if (e && !/qq\\\\.com(\\\\:8080)?$/.test(e[1]) && !/weishi\\\\.com$/.test(e[1]))return !0;\\n            }\\n            return !1;\\n        }, ishttp = 0 == location.href.indexOf(\"http://\");\\n        -1 == location.href.indexOf(\"safe=0\") && ishttp && \"function\" == typeof MutationObserver && \"mp.weixin.qq.com\" == location.host && (window.__observer_data = {\\n            count: 0,\\n            exec_time: 0,\\n            list: []\\n        }, window.__observer = new MutationObserver(function (t) {\\n            window.__observer_data.count++;\\n            var e = new Date, r = [];\\n            t.forEach(function (t) {\\n                for (var e = t.addedNodes, o = 0; o < e.length; o++) {\\n                    var n = e[o];\\n                    if (\"SCRIPT\" === n.tagName) {\\n                        var i = n.src;\\n                        isDangerSrc(i) && (window.__observer_data.list.push(i), r.push(n)), !i && window.__nonce_str && n.getAttribute(\"nonce\") != window.__nonce_str && (window.__observer_data.list.push(\"inlinescript_without_nonce\"),\\n                                r.push(n));\\n                    }\\n                }\\n            });\\n            for (var o = 0; o < r.length; o++) {\\n                var n = r[o];\\n                n.parentNode && n.parentNode.removeChild(n);\\n            }\\n            window.__observer_data.exec_time += new Date - e;\\n        }), window.__observer.observe(document, {\\n            subtree: !0,\\n            childList: !0\\n        })), function () {\\n            if (-1 == location.href.indexOf(\"safe=0\") && Math.random() < .01 && ishttp && HTMLScriptElement.prototype.__lookupSetter__ && \"undefined\" != typeof Object.defineProperty) {\\n                window.__danger_src = {\\n                    xmlhttprequest: [],\\n                    script_src: [],\\n                    script_setAttribute: []\\n                };\\n                var t = \"$\" + Math.random();\\n                HTMLScriptElement.prototype.__old_method_script_src = HTMLScriptElement.prototype.__lookupSetter__(\"src\"),\\n                        HTMLScriptElement.prototype.__defineSetter__(\"src\", function (t) {\\n                            t && isDangerSrc(t) && window.__danger_src.script_src.push(t), this.__old_method_script_src(t);\\n         ...end\", +new Date);\\n                                    var c = new Error(s);\\n                                    if (n >= 0)if (u > n) {\\n                                        var m = o.replace(\"res.wx.qq.com\", \"mp.weixin.qq.com\");\\n                                        g.request(m, n, r);\\n                                    } else g.request(o, n, r); else window.__moon_report && window.__moon_report([{\\n                                        offset: d,\\n                                        log: \"load_script_error: \" + o,\\n                                        e: c\\n                                    }], 1);\\n                                    if (n == u - 1 && window.__moon_report([{\\n                                                offset: _,\\n                                                log: \"load_script_error: \" + o,\\n                                                e: c\\n                                            }], 1), -1 == n) {\\n                                        var l = \"ua: \" + window.navigator.userAgent + \", time=\" + (+new Date - a.down_time) + \", load_script_error -1 : \" + o;\\n                                        window.__moon_report([{\\n                                            offset: w,\\n                                            log: l\\n                                        }], 1);\\n                                    }\\n                                    window.__moonclientlog.push(\"moon load js error : \" + o + \", error -> \" + c.toString()),\\n                                            e(\"moon_request_error url:\" + o);\\n                                }, \"undefined\" != typeof moon_crossorigin && moon_crossorigin && a.setAttribute(\"crossorigin\", !0),\\n                                        a.onload = a.onreadystatechange = function () {\\n                                            t(i, \"status\", \"loaded\"), t(i, \"end\", +new Date), !a || a.readyState && !/loaded|complete/.test(a.readyState) || (t(i, \"status\", \"200\"),\\n                                                    a.onload = a.onreadystatechange = null, \"function\" == typeof r && r());\\n                                        }, n--, c.appendChild(a), e(\"moon_request url:\" + o + \" retry:\" + n);\\n                            }\\n                        },\\n                        setItem: function (e, o) {\\n                            !!s && s.setItem(e, o);\\n                        },\\n                        clear: function () {\\n                            s && (a(s, function (e, o) {\\n                                ~o.indexOf(g.prefix) && s.removeItem(o);\\n                            }), console.debug && console.debug(\"[moon] clear\"));\\n                        },\\n                        idkeyReport: function (e, o, t) {\\n                            t = t || 1;\\n                            var n = e + \"_\" + o + \"_\" + t;\\n                            (new Image).src = \"/mp/jsmonitor?idkey=\" + n + \"&r=\" + Math.random();\\n                        }\\n                    };\\n                    seajs && seajs.use && \"string\" == typeof window.__moon_mainjs && seajs.use(window.__moon_mainjs),\\n                            window.moon = g;\\n                }(window), function () {\\n                    try {\\n                        Math.random() < 1;\\n                    } catch (e) {\\n                    }\\n                }(), window.moon.init();\\n            };\\n            e(), !!window.__moon_initcallback && window.__moon_initcallback(), window.__wxgspeeds && (window.__wxgspeeds.moonendtime = +new Date);\\n        }\\n    }\\n\\n    __moonf__();\\n}, 25);</script>\\n<script nonce=\"1926782896\" type=\"text/javascript\">\\n    var real_show_page_time = +new Date();\\n    if (!!window.addEventListener) {\\n        window.addEventListener(\"load\", function () {\\n            window.onload_endtime = +new Date();\\n        });\\n    }\\n\\n</script>\\n\\n</body>\\n<script nonce=\"1926782896\" type=\"text/javascript\">document.addEventListener(\"touchstart\", function () {\\n}, false);</script>\\n</html>\\n<!--tailTrap<body></body><head></head><html></html>-->', True, True)'?", "answer": "[]", "variable_assignment": "all_img_element = []", "loop_range": [56, 66], "post_loop_line": 69, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"idx": 24, "scratchpad_format": "def dump_from_base(args: list) -> None:\n    \"\"\"\n        Dump memory from a base address for a specific size to file\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) < 3:\n        click.secho('Usage: memory dump from_base <base_address> <size_to_dump> <local_destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    base_address = args[0] # [STATE] base_address = '0x00008000' [/STATE]\n    memory_size = args[1] # [STATE] memory_size = '200' [/STATE]\n    destination = args[2] # [STATE] destination = '/foo' [/STATE]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Override?'):\n            return\n\n    click.secho('Dumping {0} from {1} to {2}'.format(sizeof_fmt(int(memory_size)), base_address, destination),\n                fg='green', dim=True)\n\n    api = state_connection.get_api() # [STATE] api = <MagicMock name='get_api()' id='140041905169216'> [/STATE]\n\n    # iirc, if you don't cast the return type to a bytearray it uses the sizeof(int) per cell, which is massive\n    dump = bytearray() # [STATE] dump = bytearray(b'') [/STATE]\n    chunks = _get_chunks(int(base_address, 16), int(memory_size), BLOCK_SIZE) # [STATE] chunks = [(32768, 200)] [/STATE]\n    for chunk in chunks: #  [STATE] chunk = (32768, 200) [/STATE]\n        dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1]))) # [STATE] dump = bytearray(b'\\x00') [/STATE]\n\n    # append the results to the destination file\n    with open(destination, 'wb') as f: # [STATE] f = <MagicMock name='open().__enter__()' id='140041907062336'> [/STATE]\n        f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_from_base(['0x00008000', '200', '/foo'])", "loop_code": "1: def dump_from_base(args: list) -> None:\n2:     \"\"\"\n3:         Dump memory from a base address for a specific size to file\n4:\n5:         :param args:\n6:         :return:\n7:     \"\"\"\n8:\n9:     if len(clean_argument_flags(args)) < 3:\n10:         click.secho('Usage: memory dump from_base <base_address> <size_to_dump> <local_destination>', bold=True)\n11:         return\n12:\n13:     # the destination file to write the dump to\n14:     base_address = args[0]\n15:     memory_size = args[1]\n16:     destination = args[2]\n17:\n18:     # Check for file override\n19:     if os.path.exists(destination):\n20:         click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n21:         if not click.confirm('Override?'):\n22:             return\n23:\n24:     click.secho('Dumping {0} from {1} to {2}'.format(sizeof_fmt(int(memory_size)), base_address, destination),\n25:                 fg='green', dim=True)\n26:\n27:     api = state_connection.get_api()\n28:\n29:     # iirc, if you don't cast the return type to a bytearray it uses the sizeof(int) per cell, which is massive\n30:     dump = bytearray()\n31:     chunks = _get_chunks(int(base_address, 16), int(memory_size), BLOCK_SIZE)\n32:     for chunk in chunks:\n33:         dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n34:\n35:     # append the results to the destination file\n36:     with open(destination, 'wb') as f:\n37:         f.write(dump)\n38:\n39:     click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n40:\n41: dump_from_base(['0x00008000', '200', '/foo'])", "question": "What is the value of 'f' in line 36 after executing 'dump_from_base(['0x00008000', '200', '/foo'])'?", "answer": "<MagicMock name='open().__enter__()' id='140041907062336'>", "variable_assignment": "f = <MagicMock name='open().__enter__()' id='140041907062336'>", "loop_range": [32, 33], "post_loop_line": 36, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 25, "scratchpad_format": "def _a1_to_rowcol_unbounded(label):\n    \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n\n    Same as `a1_to_rowcol()` but allows for missing row or column part\n    (e.g. \"A\" for the first column)\n\n    :returns: a tuple containing `row` and `column` numbers. Both indexed\n        from 1 (one).\n    :rtype: tuple\n\n    Example:\n\n    >>> _a1_to_rowcol_unbounded('A1')\n    (1, 1)\n\n    >>> _a1_to_rowcol_unbounded('A')\n    (inf, 1)\n\n    >>> _a1_to_rowcol_unbounded('1')\n    (1, inf)\n\n    >>> _a1_to_rowcol_unbounded('ABC123')\n    (123, 731)\n\n    >>> _a1_to_rowcol_unbounded('ABC')\n    (inf, 731)\n\n    >>> _a1_to_rowcol_unbounded('123')\n    (123, inf)\n\n    >>> _a1_to_rowcol_unbounded('1A')\n    Traceback (most recent call last):\n        ...\n    gspread.exceptions.IncorrectCellLabel: 1A\n\n    >>> _a1_to_rowcol_unbounded('')\n    (inf, inf)\n\n    \"\"\"\n    m = A1_ADDR_ROW_COL_RE.match(label) # [STATE] m = <re.Match object; span=(0, 2), match='A1'> [/STATE]\n    if m:\n        column_label, row = m.groups() # [STATE] column_label = 'A' [/STATE] # [STATE] row = '1' [/STATE]\n\n        if column_label:\n            col = 0 # [STATE] col = 0 [/STATE]\n            for i, c in enumerate(reversed(column_label.upper())): #  [STATE] i = 0 [/STATE] [STATE] c = 'A' [/STATE]\n                col += (ord(c) - MAGIC_NUMBER) * (26**i) # [STATE] col = 1 [/STATE]\n        else:\n            col = inf\n\n        if row:\n            row = int(row) # [STATE] row = 1 [/STATE]\n        else:\n            row = inf\n    else:\n        raise IncorrectCellLabel(label)\n\n    return (row, col)\n\n_a1_to_rowcol_unbounded('A1')", "loop_code": "1: def _a1_to_rowcol_unbounded(label):\n2:     \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n3:\n4:     Same as `a1_to_rowcol()` but allows for missing row or column part\n5:     (e.g. \"A\" for the first column)\n6:\n7:     :returns: a tuple containing `row` and `column` numbers. Both indexed\n8:         from 1 (one).\n9:     :rtype: tuple\n10:\n11:     Example:\n12:\n13:     >>> _a1_to_rowcol_unbounded('A1')\n14:     (1, 1)\n15:\n16:     >>> _a1_to_rowcol_unbounded('A')\n17:     (inf, 1)\n18:\n19:     >>> _a1_to_rowcol_unbounded('1')\n20:     (1, inf)\n21:\n22:     >>> _a1_to_rowcol_unbounded('ABC123')\n23:     (123, 731)\n24:\n25:     >>> _a1_to_rowcol_unbounded('ABC')\n26:     (inf, 731)\n27:\n28:     >>> _a1_to_rowcol_unbounded('123')\n29:     (123, inf)\n30:\n31:     >>> _a1_to_rowcol_unbounded('1A')\n32:     Traceback (most recent call last):\n33:         ...\n34:     gspread.exceptions.IncorrectCellLabel: 1A\n35:\n36:     >>> _a1_to_rowcol_unbounded('')\n37:     (inf, inf)\n38:\n39:     \"\"\"\n40:     m = A1_ADDR_ROW_COL_RE.match(label)\n41:     if m:\n42:         column_label, row = m.groups()\n43:\n44:         if column_label:\n45:             col = 0\n46:             for i, c in enumerate(reversed(column_label.upper())):\n47:                 col += (ord(c) - MAGIC_NUMBER) * (26**i)\n48:         else:\n49:             col = inf\n50:\n51:         if row:\n52:             row = int(row)\n53:         else:\n54:             row = inf\n55:     else:\n56:         raise IncorrectCellLabel(label)\n57:\n58:     return (row, col)\n59:\n60: _a1_to_rowcol_unbounded('A1')", "question": "What is the value of 'row' in line 52 after executing '_a1_to_rowcol_unbounded('A1')'?", "answer": "1", "variable_assignment": "row = 1", "loop_range": [46, 47], "post_loop_line": 52, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"idx": 26, "scratchpad_format": "def test_multithreading_lock(execution_number):  # type: ignore[misc]\n    \"\"\"Reruns test multiple times since error is random and\n    depends on CPU and can lead to false positive result.\n\n    \"\"\"\n    n_threads = 10 # [STATE] n_threads = 10 [/STATE]\n    n_requests = 30 # [STATE] n_requests = 30 [/STATE]\n    with responses.RequestsMock() as m: # [STATE] m = {_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>} [/STATE]\n        for j in range(n_threads): #  [STATE] j = 0 [/STATE] [STATE] j = 1 [/STATE] [STATE] j = 2 [/STATE] [STATE] j = 3 [/STATE] [STATE] j = 4 [/STATE] [STATE] j = 5 [/STATE] [STATE] j = 6 [/STATE] [STATE] j = 7 [/STATE] [STATE] j = 8 [/STATE] [STATE] j = 9 [/STATE]\n            for i in range(n_requests): #  [STATE] i = 0 [/STATE] [STATE] i = 1 [/STATE] [STATE] i = 2 [/STATE] [STATE] i = 3 [/STATE] [STATE] i = 4 [/STATE] [STATE] i = 5 [/STATE] [STATE] i = 6 [/STATE] [STATE] i = 7 [/STATE] [STATE] i = 8 [/STATE] [STATE] i = 9 [/STATE] [STATE] i = 10 [/STATE] [STATE] i = 11 [/STATE] [STATE] i = 12 [/STATE] [STATE] i = 13 [/STATE] [STATE] i = 14 [/STATE] [STATE] i = 15 [/STATE] [STATE] i = 16 [/STATE] [STATE] i = 17 [/STATE] [STATE] i = 18 [/STATE] [STATE] i = 19 [/STATE] [STATE] i = 20 [/STATE]\n                m.add(url=f\"http://example.com/example{i}\", method=\"GET\")\n\n        def fun(): # [STATE] fun = <function test_multithreading_lock.<locals>.fun at 0x7f683d0139d0> [/STATE]\n            for req in range(n_requests):\n                requests.get(f\"http://example.com/example{req}\")\n\n        threads = [ # [STATE] threads = [<Thread(example0, initial)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE]\n            threading.Thread(name=f\"example{i}\", target=fun) for i in range(n_threads)\n        ]\n        for thread in threads: #  [STATE] thread = <Thread(example0, initial)> [/STATE] [STATE] thread = <Thread(example1, initial)> [/STATE] [STATE] thread = <Thread(example2, initial)> [/STATE] [STATE] thread = <Thread(example3, initial)> [/STATE] [STATE] thread = <Thread(example4, initial)> [/STATE] [STATE] thread = <Thread(example5, initial)> [/STATE] [STATE] thread = <Thread(example6, initial)> [/STATE] [STATE] thread = <Thread(example7, initial)> [/STATE] [STATE] thread = <Thread(example8, initial)> [/STATE] [STATE] thread = <Thread(example9, initial)> [/STATE]\n            thread.start() #  [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example0, started 140085666891328)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example1, started 140085658236480)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example2, started 140085649843776)> [/STATE] [STATE] m = {_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<locked _thread.lock object at 0x7f684a53b390>} [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example3, started 140085641451072)> [/STATE] [STATE] m = {_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>} [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example4, started 140085633058368)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example5, started 140085624665664)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example6, started 140085616272960)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, initial)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example7, started 140085607880256)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, initial)>] [/STATE] [STATE] thread = <Thread(example8, started 140085123085888)> [/STATE] [STATE] threads = [<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, started 140085114693184)>] [/STATE]\n        for thread in threads: #  [STATE] thread = <Thread(example0, started 140085666891328)> [/STATE] [STATE] thread = <Thread(example1, stopped 140085658236480)> [/STATE] [STATE] thread = <Thread(example2, stopped 140085649843776)> [/STATE] [STATE] thread = <Thread(example3, stopped 140085641451072)> [/STATE] [STATE] thread = <Thread(example4, stopped 140085633058368)> [/STATE] [STATE] thread = <Thread(example5, stopped 140085624665664)> [/STATE] [STATE] thread = <Thread(example6, stopped 140085616272960)> [/STATE] [STATE] thread = <Thread(example7, stopped 140085607880256)> [/STATE] [STATE] thread = <Thread(example8, started 140085123085888)> [/STATE] [STATE] thread = <Thread(example9, started 140085114693184)> [/STATE] [STATE] m = {_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f6838645a60>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=None, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>} [/STATE]\n            thread.join() #  [STATE] m = {_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>} [/STATE] [STATE] threads = [<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, started 140085114693184)>] [/STATE] [STATE] thread = <Thread(example0, stopped 140085666891328)> [/STATE] [STATE] threads = [<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, stopped 140085123085888)>, <Thread(example9, started 140085114693184)>] [/STATE] [STATE] thread = <Thread(example8, stopped 140085123085888)> [/STATE] [STATE] threads = [<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, stopped 140085123085888)>, <Thread(example9, stopped 140085114693184)>] [/STATE] [STATE] thread = <Thread(example9, stopped 140085114693184)> [/STATE]\n\ntest_multithreading_lock(0)", "loop_code": "1: def test_multithreading_lock(execution_number):  # type: ignore[misc]\n2:     \"\"\"Reruns test multiple times since error is random and\n3:     depends on CPU and can lead to false positive result.\n4:\n5:     \"\"\"\n6:     n_threads = 10\n7:     n_requests = 30\n8:     with responses.RequestsMock() as m:\n9:         for j in range(n_threads):\n10:             for i in range(n_requests):\n11:                 m.add(url=f\"http://example.com/example{i}\", method=\"GET\")\n12:\n13:         def fun():\n14:             for req in range(n_requests):\n15:                 requests.get(f\"http://example.com/example{req}\")\n16:\n17:         threads = [\n18:             threading.Thread(name=f\"example{i}\", target=fun) for i in range(n_threads)\n19:         ]\n20:         for thread in threads:\n21:             thread.start()\n22:         for thread in threads:\n23:             thread.join()\n24:\n25: test_multithreading_lock(0)", "question": "What is the value of 'threads' in line 17 after executing 'test_multithreading_lock(0)'?", "answer": "[<Thread(example0, initial)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]", "variable_assignment": "threads = [<Thread(example0, initial)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]", "loop_range": [14, 15], "post_loop_line": 17, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"idx": 27, "scratchpad_format": "def _clean_unicode(url: str) -> str:\n    \"\"\"Clean up URLs, which use punycode to handle unicode chars.\n\n    Applies percent encoding to URL path and query if required.\n\n    Parameters\n    ----------\n    url : str\n        URL that should be cleaned from unicode\n\n    Returns\n    -------\n    str\n        Cleaned URL\n\n    \"\"\"\n    urllist = list(urlsplit(url)) # [STATE] urllist = ['http', 'example.com', '/test', 'type=2&ie=utf8&query=汉字', ''] [/STATE]\n    netloc = urllist[1] # [STATE] netloc = 'example.com' [/STATE]\n    if _has_unicode(netloc):\n        domains = netloc.split(\".\")\n        for i, d in enumerate(domains):\n            if _has_unicode(d):\n                d = \"xn--\" + d.encode(\"punycode\").decode(\"ascii\")\n                domains[i] = d\n        urllist[1] = \".\".join(domains)\n        url = urlunsplit(urllist)\n\n    # Clean up path/query/params, which use url-encoding to handle unicode chars\n    chars = list(url) # [STATE] chars = ['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '汉', '字'] [/STATE]\n    for i, x in enumerate(chars): #  [STATE] i = 0 [/STATE] [STATE] x = 'h' [/STATE] [STATE] i = 1 [/STATE] [STATE] x = 't' [/STATE] [STATE] i = 2 [/STATE] [STATE] i = 3 [/STATE] [STATE] x = 'p' [/STATE] [STATE] i = 4 [/STATE] [STATE] x = ':' [/STATE] [STATE] i = 5 [/STATE] [STATE] x = '/' [/STATE] [STATE] i = 6 [/STATE] [STATE] i = 7 [/STATE] [STATE] x = 'e' [/STATE] [STATE] i = 8 [/STATE] [STATE] x = 'x' [/STATE] [STATE] i = 9 [/STATE] [STATE] x = 'a' [/STATE] [STATE] i = 10 [/STATE] [STATE] x = 'm' [/STATE] [STATE] i = 11 [/STATE]\n        if ord(x) > 128:\n            chars[i] = quote(x) #  [STATE] chars = ['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '字'] [/STATE] [STATE] chars = ['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '%E5%AD%97'] [/STATE]\n\n    return \"\".join(chars)\n\n_clean_unicode('http://example.com/test?type=2&ie=utf8&query=汉字')", "loop_code": "1: def _clean_unicode(url: str) -> str:\n2:     \"\"\"Clean up URLs, which use punycode to handle unicode chars.\n3:\n4:     Applies percent encoding to URL path and query if required.\n5:\n6:     Parameters\n7:     ----------\n8:     url : str\n9:         URL that should be cleaned from unicode\n10:\n11:     Returns\n12:     -------\n13:     str\n14:         Cleaned URL\n15:\n16:     \"\"\"\n17:     urllist = list(urlsplit(url))\n18:     netloc = urllist[1]\n19:     if _has_unicode(netloc):\n20:         domains = netloc.split(\".\")\n21:         for i, d in enumerate(domains):\n22:             if _has_unicode(d):\n23:                 d = \"xn--\" + d.encode(\"punycode\").decode(\"ascii\")\n24:                 domains[i] = d\n25:         urllist[1] = \".\".join(domains)\n26:         url = urlunsplit(urllist)\n27:\n28:     # Clean up path/query/params, which use url-encoding to handle unicode chars\n29:     chars = list(url)\n30:     for i, x in enumerate(chars):\n31:         if ord(x) > 128:\n32:             chars[i] = quote(x)\n33:\n34:     return \"\".join(chars)\n35:\n36: _clean_unicode('http://example.com/test?type=2&ie=utf8&query=汉字')", "question": "What is the value of 'chars' in line 29 after executing '_clean_unicode('http://example.com/test?type=2&ie=utf8&query=汉字')'?", "answer": "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '汉', '字']", "variable_assignment": "chars = ['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '汉', '字']", "loop_range": [21, 24], "post_loop_line": 29, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
