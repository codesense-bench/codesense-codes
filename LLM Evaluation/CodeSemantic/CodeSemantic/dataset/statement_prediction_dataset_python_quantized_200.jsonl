{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_reporting_config() -> Dict[str, Any]:\n    \"\"\"Get an existing reporting config\"\"\"\n    reporting_config: Dict[str, Any] = {\"consent\": False}\n    try:\n        if not os.path.exists(REPORTING_CONFIG_FILE_PATH):\n            client_id = str(uuid.uuid4())\n            reporting_config[\"client_id\"] = client_id\n            reporting_config = save_reporting_config(True, client_id)\n        else:\n            with open(REPORTING_CONFIG_FILE_PATH, \"r\") as ifp:\n                reporting_config = json.load(ifp)\n\n        # The following changes do NOT mutate the reporting_config.json file on the file system, but\n        # they provide a means to report the username as the client_id (if the username is available)\n        # while tracking the existing client_id as a machine_id.\n        reporting_config[\"machine_id\"] = reporting_config[\"client_id\"]\n\n        if (\n            reporting_config.get(\"username\") is not None\n            and reporting_config[\"client_id\"] != reporting_config[\"username\"]\n        ):\n            reporting_config[\"client_id\"] = reporting_config[\"username\"]\n\n    except Exception:\n        # Not being able to load reporting consent should not get in the user's way. We will just\n        # return the default reporting_config object in which consent is set to False.\n        pass\n    return reporting_config\n\nget_reporting_config()", "Selected Statement": "reporting_config[\"machine_id\"] = reporting_config[\"client_id\"]", "Function Input": {}, "Variable Values Before Statement": {"reporting_config": "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True}"}, "Value After Statement Execution": "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True, 'machine_id': '8728ad25-a15b-4b67-91db-a3a3878aba24'}", "Variable States During Runtime": {"reporting_config": [[3.0, "{'consent': False}"], [11.0, "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True}"], [16.0, "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True, 'machine_id': '8728ad25-a15b-4b67-91db-a3a3878aba24'}"]], "ifp": [[10.0, "<_io.TextIOWrapper name='/home/XXX/.activeloop/reporting_config.json' mode='r' encoding='UTF-8'>"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 45, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def exchange(a, i, j):\n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp\n\nexchange(a=[0, 100, 200, 0, 0, 0, 0, 0, 0, 0], i=2, j=1)", "Selected Statement": "temp = a[i]", "Function Input": {"a": "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]", "i": "2", "j": "1"}, "Variable Values Before Statement": {"a": "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]", "i": "2"}, "Value After Statement Execution": "200", "Variable States During Runtime": {"a": [[1, "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]"], [3.0, "[0, 100, 100, 0, 0, 0, 0, 0, 0, 0]"], [4.0, "[0, 200, 100, 0, 0, 0, 0, 0, 0, 0]"]], "i": [[1, "2"]], "j": [[1, "1"]], "temp": [[2.0, "200"]]}, "Program Information": "Project Name: chen0040+pycompressor", "idx": 2, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def find_csv_columns(csv, column_separator):\n    lines = csv.strip().split('\\n')\n    numeric_lines = [line for line in lines if column_separator in line and numeric_start.search(line)]\n    n_columns = list(set([len(line.split(column_separator)) for line in numeric_lines]))\n    if len(n_columns) != 1:\n        raise CsvParseError('Numeric lines have different number of columns')\n    n_columns = n_columns[0]\n    for line in lines:\n        if not numeric_start.search(line) and len(line.split(column_separator)) == n_columns:\n            return [cell.strip() for cell in line.split(column_separator)]\n\nfind_csv_columns(csv='20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0', column_separator='\\t')", "Selected Statement": "n_columns = n_columns[0]", "Function Input": {"csv": "'20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0'", "column_separator": "'\\t'"}, "Variable Values Before Statement": {"n_columns": "[3]"}, "Value After Statement Execution": "3", "Variable States During Runtime": {"csv": [[1, "'20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0'"]], "column_separator": [[1, "'\\t'"]], "lines": [[2.0, "['20.000\\t68.334\\t0', '20.250\\t68.335\\t0', '19998.498\\t27.402\\t0']"]], "numeric_lines": [[3.0, "['20.000\\t68.334\\t0', '20.250\\t68.335\\t0', '19998.498\\t27.402\\t0']"]], "n_columns": [[4.0, "[3]"], [7.0, "3"]], "line": [[8.0, "'20.000\\t68.334\\t0'"], [8.0, "'20.250\\t68.335\\t0'"], [8.0, "'19998.498\\t27.402\\t0'"]]}, "Program Information": "Project Name: jaakkopasanen+AutoEq", "idx": 15, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def parse_special_command(sql):\n    command, _, arg = sql.partition(' ')\n    verbose = '+' in command\n    command = command.strip().replace('+', '')\n    return (command, verbose, arg.strip())\n\nparse_special_command(sql='\\\\. ')", "Selected Statement": "verbose = '+' in command", "Function Input": {"sql": "'\\\\. '"}, "Variable Values Before Statement": {"command": "'\\\\.'"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"sql": [[1, "'\\\\. '"]], "command": [[2.0, "'\\\\.'"]], "_": [[2.0, "' '"]], "arg": [[2.0, "''"]], "verbose": [[3.0, "False"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 51, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def find_original_update_blocks(content, fence=DEFAULT_FENCE):\n    # make sure we end with a newline, otherwise the regex will miss <<UPD on the last line\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    pieces = re.split(split_re, content)\n\n    pieces.reverse()\n    processed = []\n\n    # Keep using the same filename in cases where GPT produces an edit block\n    # without a filename.\n    current_filename = None\n    try:\n        while pieces:\n            cur = pieces.pop()\n\n            if cur in (DIVIDER, UPDATED):\n                processed.append(cur)\n                raise ValueError(f\"Unexpected {cur}\")\n\n            if cur.strip() != HEAD:\n                processed.append(cur)\n                continue\n\n            processed.append(cur)  # original_marker\n\n            filename = strip_filename(processed[-2].splitlines()[-1], fence)\n            try:\n                if not filename:\n                    filename = strip_filename(processed[-2].splitlines()[-2], fence)\n                if not filename:\n                    if current_filename:\n                        filename = current_filename\n                    else:\n                        raise ValueError(missing_filename_err)\n            except IndexError:\n                if current_filename:\n                    filename = current_filename\n                else:\n                    raise ValueError(missing_filename_err)\n\n            current_filename = filename\n\n            original_text = pieces.pop()\n            processed.append(original_text)\n\n            divider_marker = pieces.pop()\n            processed.append(divider_marker)\n            if divider_marker.strip() != DIVIDER:\n                raise ValueError(f\"Expected `{DIVIDER}` not {divider_marker.strip()}\")\n\n            updated_text = pieces.pop()\n            processed.append(updated_text)\n\n            updated_marker = pieces.pop()\n            processed.append(updated_marker)\n            if updated_marker.strip() != UPDATED:\n                raise ValueError(f\"Expected `{UPDATED}` not `{updated_marker.strip()}\")\n\n            yield filename, original_text, updated_text\n    except ValueError as e:\n        processed = \"\".join(processed)\n        err = e.args[0]\n        raise ValueError(f\"{processed}\\n^^^ {err}\")\n    except IndexError:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Incomplete SEARCH/REPLACE block.\")\n    except Exception:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Error parsing SEARCH/REPLACE block.\")\n\nfind_original_update_blocks(content='ok', fence=('<source>', '</source>'))", "Selected Statement": "content = content + \"\\n\"", "Function Input": {"content": "'ok'", "fence": "('<source>', '</source>')"}, "Variable Values Before Statement": {"content": "'ok'"}, "Value After Statement Execution": "'ok\\n'", "Variable States During Runtime": {"content": [[1, "'ok'"], [4.0, "'ok\\n'"]], "fence": [[1, "('<source>', '</source>')"]], "pieces": [[6.0, "['ok\\n']"], [16.0, "[]"]], "processed": [[9.0, "[]"], [23.0, "['ok\\n']"]], "current_filename": [[13.0, "None"]], "cur": [[16.0, "'ok\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 35, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def file(input_file, light=False):\n    \"\"\"Import colorscheme from json file.\"\"\"\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/light/\"))\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/dark/\"))\n\n    theme_name = \".\".join((input_file, \"json\"))\n    bri = \"light\" if light else \"dark\"\n\n    user_theme_file = os.path.join(CONF_DIR, \"colorschemes\", bri, theme_name)\n    theme_file = os.path.join(MODULE_DIR, \"colorschemes\", bri, theme_name)\n\n    # Find the theme file.\n    if input_file in (\"random\", \"random_dark\"):\n        theme_file = get_random_theme()\n\n    elif input_file == \"random_light\":\n        theme_file = get_random_theme(light)\n\n    elif input_file == \"random_user\":\n        theme_file = get_random_theme_user()\n\n    elif os.path.isfile(user_theme_file):\n        theme_file = user_theme_file\n\n    elif os.path.isfile(input_file):\n        theme_file = input_file\n\n    # Parse the theme file.\n    if os.path.isfile(theme_file):\n        logging.info(\"Set theme to \\033[1;37m%s\\033[0m.\",\n                     os.path.basename(theme_file))\n        util.save_file(os.path.basename(theme_file),\n                       os.path.join(CACHE_DIR, \"last_used_theme\"))\n        return parse(theme_file)\n\n    logging.error(\"No %s colorscheme file found.\", bri)\n    logging.error(\"Try adding   '-l' to set light themes.\")\n    logging.error(\"Try removing '-l' to set dark themes.\")\n    sys.exit(1)\n\nfile(input_file='tests/test_files/test_file.json', light=False)", "Selected Statement": "bri = \"light\" if light else \"dark\"", "Function Input": {"input_file": "'tests/test_files/test_file.json'", "light": "False"}, "Variable Values Before Statement": {"light": "False"}, "Value After Statement Execution": "'dark'", "Variable States During Runtime": {"input_file": [[1, "'tests/test_files/test_file.json'"]], "light": [[1, "False"]], "theme_name": [[6.0, "'tests/test_files/test_file.json.json'"]], "bri": [[7.0, "'dark'"]], "user_theme_file": [[9.0, "'/home/XXX/.config/wal/colorschemes/dark/tests/test_files/test_file.json.json'"]], "theme_file": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/pywal/colorschemes/dark/tests/test_files/test_file.json.json'"], [26.0, "'tests/test_files/test_file.json'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 24, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def cat(args: list = None) -> None:\n    \"\"\"\n        Parses a plist on an iOS device and echoes it in a more human\n        readable way.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios plist cat <remote_plist>', bold=True)\n        return\n\n    plist = args[0]\n\n    if not os.path.isabs(plist):\n        pwd = filemanager.pwd()\n        plist = device_state.platform.path_separator.join([pwd, plist])\n\n    api = state_connection.get_api()\n    plist_data = api.ios_plist_read(plist)\n\n    click.secho(plist_data, bold=True)\n\ncat(args=['/foo'])", "Selected Statement": "plist = args[0]", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"args": "['/foo']"}, "Value After Statement Execution": "'/foo'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "plist": [[14.0, "'/foo'"]], "api": [[20.0, "<MagicMock name='get_api()' id='140041837108288'>"]], "plist_data": [[21.0, "'foo'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 56, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _to_str(size, suffixes, base):\n    # type: (SupportsInt, Iterable[Text], int) -> Text\n    try:\n        size = int(size)\n    except ValueError:\n        raise TypeError(\"filesize requires a numeric value, not {!r}\".format(size))\n    if size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return \"{:,} bytes\".format(size)\n\n    for i, suffix in enumerate(suffixes, 2):\n        unit = base ** i\n        if size < unit:\n            break\n    return \"{:,.1f} {}\".format((base * size / unit), suffix)\n\n_to_str(size=1024, suffixes=('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'), base=1024)", "Selected Statement": "unit = base ** i", "Function Input": {"size": "1024", "suffixes": "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')", "base": "1024"}, "Variable Values Before Statement": {"base": "1024", "i": "2"}, "Value After Statement Execution": "1048576", "Variable States During Runtime": {"size": [[1, "1024"]], "suffixes": [[1, "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')"]], "base": [[1, "1024"]], "i": [[12.0, "2"]], "suffix": [[12.0, "'KiB'"]], "unit": [[13.0, "1048576"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 66, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def strip_matching_quotes(s):\n    \"\"\"Remove matching, surrounding quotes from a string.\n\n    This is the same logic that ConfigObj uses when parsing config\n    values.\n\n    \"\"\"\n    if (isinstance(s, basestring) and len(s) >= 2 and\n            s[0] == s[-1] and s[0] in ('\"', \"'\")):\n        s = s[1:-1]\n    return s\n\nstrip_matching_quotes(s='\"May the force be with you.\"')", "Selected Statement": "s = s[1:-1]", "Function Input": {"s": "'\"May the force be with you.\"'"}, "Variable Values Before Statement": {"s": "'\"May the force be with you.\"'"}, "Value After Statement Execution": "'May the force be with you.'", "Variable States During Runtime": {"s": [[1, "'\"May the force be with you.\"'"], [10.0, "'May the force be with you.'"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 52, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def task_failed_events(worker, id=None, name=None):\n    id = id or uuid()\n    name = name or 'sometask'\n    return [Event('task-received', uuid=id, name=name,\n                  args='(2, 2)', kwargs=\"{'foo': 'bar'}\",\n                  retries=0, eta=None, hostname=worker),\n            Event('task-started', uuid=id, hostname=worker),\n            Event('task-failed', uuid=id, exception=\"KeyError('foo')\",\n                  traceback='line 1 at main', hostname=worker)]\n\ntask_failed_events(worker='worker3', id=None, name=None)", "Selected Statement": "name = name or 'sometask'", "Function Input": {"worker": "'worker3'", "id": "None", "name": "None"}, "Variable Values Before Statement": {"name": "None"}, "Value After Statement Execution": "'sometask'", "Variable States During Runtime": {"worker": [[1, "'worker3'"]], "id": [[1, "None"], [2.0, "'74ab0138-27c4-4571-9127-2f5241170ad8'"]], "name": [[1, "None"], [3.0, "'sometask'"]]}, "Program Information": "Project Name: mher+flower", "idx": 23, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def create_dummy_class(klass, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a class is not available, create a dummy class which throws ImportError\n    when used.\n\n    Args:\n        klass (str): name of the class.\n        dependency (str): name of the dependency.\n        message: extra message to print\n    Returns:\n        class: a class object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, klass)\n    if message:\n        err = err + \" \" + message\n\n    class _DummyMetaClass(type):\n        # throw error on class attribute access\n        def __getattr__(_, __):  # noqa: B902\n            raise ImportError(err)\n\n    class _Dummy(object, metaclass=_DummyMetaClass):\n        # throw error on constructor\n        def __init__(self, *args, **kwargs):\n            raise ImportError(err)\n\n    return _Dummy\n\ncreate_dummy_class(klass='DeformConv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"klass": "'DeformConv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"klass": [[1, "'DeformConv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_DummyMetaClass": [[17.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._DummyMetaClass'>"]], "_Dummy": [[22.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._Dummy'>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 8, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_default_expanded_coordinate(shape, ndim):\n    x_coords = []\n    for i in range(ndim):\n        idx = [None] * ndim\n        idx[i] = slice(None, None, None)\n        x_coords.append(np.arange(shape[i])[tuple(idx)])\n    return x_coords\n\n_get_default_expanded_coordinate(shape=array([102]), ndim=1)", "Selected Statement": "idx = [None] * ndim", "Function Input": {"shape": "array([102])", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[None]", "Variable States During Runtime": {"shape": [[1, "array([102])"]], "ndim": [[1, "1"]], "x_coords": [[2.0, "[]"], [6.0, "[array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101])]"]], "i": [[3.0, "0"]], "idx": [[4.0, "[None]"], [5.0, "[slice(None, None, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 41, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def ios_screenshot(args: list = None) -> None:\n    \"\"\"\n        Take an iOS screenshot.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios ui screenshot <local png destination>', bold=True)\n        return\n\n    destination = args[0]\n\n    if not destination.endswith('.png'):\n        destination = destination + '.png'\n\n    api = state_connection.get_api()\n    png = api.ios_ui_screenshot()\n\n    with open(destination, 'wb') as f:\n        f.write(png)\n\n    click.secho('Screenshot saved to: {0}'.format(destination), fg='green')\n\nios_screenshot(args=['foo'])", "Selected Statement": "destination = args[0]", "Function Input": {"args": "['foo']"}, "Variable Values Before Statement": {"args": "['foo']"}, "Value After Statement Execution": "'foo'", "Variable States During Runtime": {"args": [[1, "['foo']"]], "destination": [[13.0, "'foo'"], [16.0, "'foo.png'"]], "api": [[18.0, "<MagicMock name='get_api()' id='140041828273504'>"]], "png": [[19.0, "b'\\x00'"]], "f": [[21.0, "<MagicMock name='open().__enter__()' id='140041828431664'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 61, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_air_quality(city):\n    \"\"\"\n    \u901a\u8fc7\u57ce\u5e02\u540d\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\n    \u5b98\u7f51\uff1ahttp://aqicn.org/here/\n    token \u7533\u8bf7\u5730\u5740\uff1ahttp://aqicn.org/data-platform/token/#/\n    :param city: \u57ce\u5e02\n    :return:\n    \"\"\"\n\n    if not city or not city.strip():\n        return\n    print('\u83b7\u53d6 {} \u7684\u7a7a\u6c14\u8d28\u91cf...'.format(city))\n    try:\n\n        url = 'http://api.waqi.info/feed/{city}/?token={token}'.format(city=city, token=AQICN_TOKEN)\n        resp = requests.get(url)\n        if resp.status_code == 200:\n            # print(resp.text)\n            content_dict = resp.json()\n            if content_dict.get('status') == 'ok':\n                data_dict = content_dict['data']\n                aqi = data_dict['aqi']\n                air_status = '\u4e25\u91cd\u6c61\u67d3'\n                for key in sorted(AIR_STATUS_DICT):\n                    if key >= aqi:\n                        air_status = AIR_STATUS_DICT[key]\n                        break\n                aqi_info = '{city} PM2.5\uff1a{aqi} {air_status}'.format(city=city, aqi=aqi, air_status=air_status)\n                # print(aqi_info)\n                return aqi_info\n            else:\n                print('\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\u5931\u8d25:{}'.format(content_dict['data']))\n                return None\n        print('\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\u5931\u8d25\u3002')\n    except Exception as exception:\n        print(str(exception))\n    return None\n\nget_air_quality(city='\u6842\u6797')", "Selected Statement": "data_dict = content_dict['data']", "Function Input": {"city": "'\u6842\u6797'"}, "Variable Values Before Statement": {"content_dict": "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"}, "Value After Statement Execution": "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}", "Variable States During Runtime": {"city": [[1, "'\u6842\u6797'"]], "url": [[15.0, "'http://api.waqi.info/feed/\u6842\u6797/?token=6382db85ef321ae81f316486de0b5b8aa6c84f62'"]], "resp": [[16.0, "<Response [200]>"]], "content_dict": [[19.0, "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"]], "data_dict": [[21.0, "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}"]], "aqi": [[22.0, "50"]], "air_status": [[23.0, "'\u4e25\u91cd\u6c61\u67d3'"], [26.0, "'\u4f18'"]], "key": [[24.0, "50"]], "aqi_info": [[28.0, "'\u6842\u6797 PM2.5\uff1a50 \u4f18'"]]}, "Program Information": "Project Name: sfyc23+EverydayWechat", "idx": 32, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def check_head_methods(system, m_time, path=None):\n    \"\"\"\n    Tests head methods.\n\n    args:\n        io_object (pycosio._core.io_system.SystemBase subclass):\n            Object to test\n    \"\"\"\n    path = path or 'directory/file'\n    assert system.getmtime(path) == pytest.approx(m_time, 1)\n    assert system.getsize(path) == SIZE\n\ncheck_head_methods(system={_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}, m_time=1712175490.9806323, path=None)", "Selected Statement": "path = path or 'directory/file'", "Function Input": {"system": "{_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}", "m_time": "1712175490.9806323", "path": "None"}, "Variable Values Before Statement": {"path": "None"}, "Value After Statement Execution": "'directory/file'", "Variable States During Runtime": {"system": [[1, "{_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}"], [10.0, "{_storage_parameters={}, _unsecure=False, _client=<tests.test_http.test_http_raw_io.<locals>.Session object at 0x7ffa22ae3bb0>, _roots=('http://', 'https://')}"]], "m_time": [[1, "1712175490.9806323"]], "path": [[1, "None"], [9.0, "'directory/file'"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 19, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def str2datetime(string):\n    \"\"\"\n    Convert a normalized Benthos timestamp to a datetime object\n\n    Parameters\n    ----------\n    string : str\n        String to convert\n    \"\"\"\n\n    if string == \"0000-00-00T24:60:60Z\":\n        return None\n\n    ms = string[20:-1]\n    ms += \"000000\"[:6 - len(ms)]\n    return datetime.datetime(\n        int(string[:4]),\n        int(string[5:7]),\n        int(string[8:10]),\n        int(string[11:13]),\n        int(string[14:16]),\n        int(string[17:19]),\n        int(ms))\n\nstr2datetime(string='1970-01-01T00:00:00.0Z')", "Selected Statement": "ms = string[20:-1]", "Function Input": {"string": "'1970-01-01T00:00:00.0Z'"}, "Variable Values Before Statement": {"string": "'1970-01-01T00:00:00.0Z'"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"string": [[1, "'1970-01-01T00:00:00.0Z'"]], "ms": [[14.0, "'0'"], [15.0, "'000000'"]]}, "Program Information": "Project Name: SkyTruth+gpsd_format", "idx": 36, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def forward(source, phi):\n    \"\"\"\n    Obtain the target density distribution given the source distribution and\n    the mapping potential, phi.\n    The mapping from source coordinate, $x$, to the target coordinate, $y$, is\n    given by:\n\n    $$\n    y = x + \\nabla phi(x).\n    $$\n\n    The coordinate in i-th dimension is given by `np.arange(source.shape[i])`.\n\n    Parameters\n    ----------\n    * `source` : numpy.ndarray\n        The source density distribution in n-dimensional array.\n    * `phi` : numpy.ndarray\n        The mapping potential given above. It must have the same shape as\n        `source`.\n\n    Returns\n    -------\n    * numpy.ndarray\n        The target density distribution in n-dimensional array.\n    \"\"\"\n    # convert to np.ndarray\n    source = np.asarray(source)\n    phi = np.asarray(phi)\n    # check the shapes of inputs\n    if source.shape != phi.shape:\n        raise ValueError(\"The source and phi must have the same shape.\")\n\n    # calculate the total potential so that $y = \\nabla u(x)$\n    u0, u, phi_pad = _get_full_potential(phi)\n    ndim = np.ndim(phi)\n\n    # calculate the determinant of the hessian\n    det_hess_s = det_hess(u)\n\n    # get the displacement in (n x D) format\n    x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n    y = np.array([grad(u , axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n\n    # interpolate the values\n    interp = lambda s: griddata(y, s.flatten(), x, \"linear\").reshape(s.shape)\n    target_s = source / det_hess_s\n    target = interp(target_s)\n\n    # fill nan values with zeros\n    target[np.isnan(target)] = 0.0\n    return target\n\nforward(source=array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06]), phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "target_s = source / det_hess_s", "Function Input": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "det_hess_s": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"}, "Value After Statement Execution": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "Variable States During Runtime": {"source": [[1, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "phi_pad": [[35.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "u": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "u0": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "ndim": [[36.0, "1"]], "det_hess_s": [[39.0, "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]], "x": [[42.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "y": [[43.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "interp": [[46.0, "<function forward.<locals>.<lambda> at 0x7fab7f2e3700>"]], "target_s": [[47.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "target": [[48.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 40, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def sample(logits: torch.Tensor, temperature: float = 1.0, top_k: Optional[int] = None) -> torch.Tensor:\n    logits = logits[0, -1]\n    # optionally crop the logits to only the top k options\n    if top_k is not None:\n        v, i = torch.topk(logits, min(top_k, logits.size(-1)))\n        # do not use `torch.where` as in nanogpt because it will repeat top-k collisions\n        logits = torch.full_like(logits, float(\"-inf\")).scatter_(-1, i, v)\n    # optionally scale the logits and sample from a probability distribution\n    if temperature > 0.0:\n        probs = torch.nn.functional.softmax(logits / temperature, dim=-1)\n        return multinomial_num_samples_1(probs)\n    return torch.argmax(logits, dim=-1, keepdim=True)\n\nsample(logits=tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0'), temperature=0.8, top_k=None)", "Selected Statement": "logits = logits[0, -1]", "Function Input": {"logits": "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')", "temperature": "0.8", "top_k": "None"}, "Variable Values Before Statement": {"logits": "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')"}, "Value After Statement Execution": "tensor([ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539, -0.2213],       device", "Variable States During Runtime": {"logits": [[1, "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')"], [2.0, "tensor([ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539, -0.2213],       device='cuda:0')"]], "temperature": [[1, "0.8"]], "top_k": [[1, "None"]], "probs": [[10.0, "tensor([0.2101, 0.0732, 0.1800, 0.1411, 0.0362, 0.0316, 0.2456, 0.0823],       device='cuda:0')"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 63, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def xldate_as_tuple(xldate, datemode):\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n    if xldate == 0.00:\n        return (0, 0, 0, 0, 0, 0)\n    if xldate < 0.00:\n        raise XLDateNegative(xldate)\n    xldays = int(xldate)\n    frac = xldate - xldays\n    seconds = int(round(frac * 86400.0))\n    assert 0 <= seconds <= 86400\n    if seconds == 86400:\n        hour = minute = second = 0\n        xldays += 1\n    else:\n        # second = seconds % 60; minutes = seconds // 60\n        minutes, second = divmod(seconds, 60)\n        # minute = minutes % 60; hour    = minutes // 60\n        hour, minute = divmod(minutes, 60)\n    if xldays >= _XLDAYS_TOO_LARGE[datemode]:\n        raise XLDateTooLarge(xldate)\n\n    if xldays == 0:\n        return (0, 0, 0, hour, minute, second)\n\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(xldate)\n\n    jdn = xldays + _JDN_delta[datemode]\n    yreg = (ifd(ifd(jdn * 4 + 274277, 146097) * 3, 4) + jdn + 1363) * 4 + 3\n    mp = ifd(yreg % 1461, 4) * 535 + 333\n    d = ifd(mp % 16384, 535) + 1\n    # mp /= 16384\n    mp >>= 14\n    if mp >= 10:\n        return (ifd(yreg, 1461) - 4715, mp - 9, d, hour, minute, second)\n    else:\n        return (ifd(yreg, 1461) - 4716, mp + 3, d, hour, minute, second)\n\nxldate_as_tuple(xldate=2741.0, datemode=0)", "Selected Statement": "frac = xldate - xldays", "Function Input": {"xldate": "2741.0", "datemode": "0"}, "Variable Values Before Statement": {"xldate": "2741.0", "xldays": "2741"}, "Value After Statement Execution": "0.0", "Variable States During Runtime": {"xldate": [[1, "2741.0"]], "datemode": [[1, "0"]], "xldays": [[8.0, "2741"]], "frac": [[9.0, "0.0"]], "seconds": [[10.0, "0"]], "second": [[17.0, "0"]], "minutes": [[17.0, "0"]], "hour": [[19.0, "0"]], "minute": [[19.0, "0"]], "jdn": [[29.0, "2417760"]], "yreg": [[30.0, "9676699"]], "mp": [[31.0, "66673"], [34.0, "4"]], "d": [[32.0, "3"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 3, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def normalize_url(url):\n    \"\"\"Return url after stripping trailing .json and trailing slashes.\"\"\"\n    if url.endswith('.json'):\n        url = url[:-5]\n    if url.endswith('/'):\n        url = url[:-1]\n    return url\n\nnormalize_url(url='https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json')", "Selected Statement": "url = url[:-5]", "Function Input": {"url": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"}, "Variable Values Before Statement": {"url": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"}, "Value After Statement Execution": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1'", "Variable States During Runtime": {"url": [[1, "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"], [4.0, "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1'"]]}, "Program Information": "Project Name: Aareon+rtv", "idx": 10, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def show_android_class_methods(args: list = None) -> None:\n    \"\"\"\n        Shows the methods available on an Android class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: android hooking list class_methods <class name>', bold=True)\n        return\n\n    class_name = args[0]\n\n    api = state_connection.get_api()\n    methods = api.android_hooking_get_class_methods(class_name)\n\n    # print the enumerated classes\n    for class_name in sorted(methods):\n        click.secho(class_name)\n\n    click.secho('\\nFound {0} method(s)'.format(len(methods)), bold=True)\n\nshow_android_class_methods(args=['com.foo.bar'])", "Selected Statement": "class_name = args[0]", "Function Input": {"args": "['com.foo.bar']"}, "Variable Values Before Statement": {"args": "['com.foo.bar']"}, "Value After Statement Execution": "'com.foo.bar'", "Variable States During Runtime": {"args": [[1, "['com.foo.bar']"]], "class_name": [[13.0, "'com.foo.bar'"], [19.0, "'bar'"], [19.0, "'baz'"], [19.0, "'foo'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041905108928'>"]], "methods": [[16.0, "['foo', 'bar', 'baz']"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 54, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def serialize_chunkids(version: str, arr: np.ndarray) -> memoryview:\n    \"\"\"Serializes chunk ID encoders into a single byte stream. This is how the encoders will be written to the storage provider.\n\n    Args:\n        version: (str) Version of deeplake library.\n        arr: (np.ndarray) Encoded chunk ids from a `ChunkIdEncoder` instance.\n\n    Returns:\n        Serialized chunk ids as memoryview.\n    \"\"\"\n    len_version = len(version)\n    write_dtype = version_compare(version, \"2.7.6\") >= 0\n    flatbuff = bytearray(1 + int(write_dtype) + len_version + arr.nbytes)\n\n    # Write version\n    len_version = len(version)\n    flatbuff[0] = len_version\n    flatbuff[1 : 1 + len_version] = version.encode(\"ascii\")\n    offset = 1 + len_version\n\n    # write encoder dtype\n    if write_dtype:\n        dtype = arr.dtype\n        num_bytes = int(dtype.itemsize)\n        flatbuff[offset] = num_bytes\n        offset += 1\n\n    # Write ids\n    flatbuff[offset : offset + arr.nbytes] = arr.tobytes()\n    offset += arr.nbytes\n    return memoryview(flatbuff)\n\nserialize_chunkids(version='3.8.18', arr=array([], shape=(0, 2), dtype=uint64))", "Selected Statement": "offset = 1 + len_version", "Function Input": {"version": "'3.8.18'", "arr": "array([], shape=(0, 2), dtype=uint64)"}, "Variable Values Before Statement": {"len_version": "6"}, "Value After Statement Execution": "7", "Variable States During Runtime": {"version": [[1, "'3.8.18'"]], "arr": [[1, "array([], shape=(0, 2), dtype=uint64)"]], "len_version": [[11.0, "6"]], "write_dtype": [[12.0, "True"]], "flatbuff": [[13.0, "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [17.0, "bytearray(b'\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [18.0, "bytearray(b'\\x063.8.18\\x00')"], [25.0, "bytearray(b'\\x063.8.18\\x08')"]], "offset": [[19.0, "7"], [26.0, "8"]], "dtype": [[23.0, "dtype('uint64')"]], "num_bytes": [[24.0, "8"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 48, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "filename_regex = path_prefix_regex + basename_regex", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"path_prefix_regex": "'((/)?to/)?'", "basename_regex": "'img(\\\\.ext)?'"}, "Value After Statement Execution": "'((/)?to/)?img(\\\\.ext)?'", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 27, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def xldate_from_date_tuple(date_tuple, datemode):\n    \"\"\"Create an excel date from a tuple of (year, month, day)\"\"\"\n    year, month, day = date_tuple\n\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n\n    if year == 0 and month == 0 and day == 0:\n        return 0.00\n\n    if not (1900 <= year <= 9999):\n        raise XLDateBadTuple(\"Invalid year: %r\" % ((year, month, day),))\n    if not (1 <= month <= 12):\n        raise XLDateBadTuple(\"Invalid month: %r\" % ((year, month, day),))\n    if  day < 1 \\\n    or (day > _days_in_month[month] and not(day == 29 and month == 2 and _leap(year))):\n        raise XLDateBadTuple(\"Invalid day: %r\" % ((year, month, day),))\n\n    Yp = year + 4716\n    M = month\n    if M <= 2:\n        Yp = Yp - 1\n        Mp = M + 9\n    else:\n        Mp = M - 3\n    jdn = ifd(1461 * Yp, 4) + ifd(979 * Mp + 16, 32) + \\\n        day - 1364 - ifd(ifd(Yp + 184, 100) * 3, 4)\n    xldays = jdn - _JDN_delta[datemode]\n    if xldays <= 0:\n        raise XLDateBadTuple(\"Invalid (year, month, day): %r\" % ((year, month, day),))\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(\"Before 1900-03-01: %r\" % ((year, month, day),))\n    return float(xldays)\n\nxldate_from_date_tuple(date_tuple=(1907, 7, 3), datemode=0)", "Selected Statement": "Yp = year + 4716", "Function Input": {"date_tuple": "(1907, 7, 3)", "datemode": "0"}, "Variable Values Before Statement": {"year": "1907"}, "Value After Statement Execution": "6623", "Variable States During Runtime": {"date_tuple": [[1, "(1907, 7, 3)"]], "datemode": [[1, "0"]], "year": [[3.0, "1907"]], "month": [[3.0, "7"]], "day": [[3.0, "3"]], "Yp": [[19.0, "6623"]], "M": [[20.0, "7"]], "Mp": [[25.0, "4"]], "jdn": [[26.0, "2417760"]], "xldays": [[28.0, "2741"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 4, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def prefixLinesAfterFirst(prefix, s):\n    lines = s.splitlines(True)\n\n    for i in range(1, len(lines)):\n        lines[i] = prefix + lines[i]\n\n    return ''.join(lines)\n\nprefixLinesAfterFirst(prefix=' ', s=\"'line1\\nline2'\")", "Selected Statement": "lines[i] = prefix + lines[i]", "Function Input": {"prefix": "' '", "s": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {"prefix": "' '"}, "Value After Statement Execution": "[\"'line1\\n\", \" line2'\"]", "Variable States During Runtime": {"prefix": [[1, "' '"]], "s": [[1, "\"'line1\\nline2'\""]], "lines": [[2.0, "[\"'line1\\n\", \"line2'\"]"], [5.0, "[\"'line1\\n\", \" line2'\"]"]], "i": [[4.0, "1"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 13, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def rsa(text, pubkey, modulus):\n    text = text[::-1]\n    rs = pow(int(binascii.hexlify(text), 16), int(pubkey, 16), int(modulus, 16))\n    return format(rs, \"x\").zfill(256)\n\nrsa(text=b'8f0f5370d2e586d8', pubkey='010001', modulus='00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7')", "Selected Statement": "text = text[::-1]", "Function Input": {"text": "b'8f0f5370d2e586d8'", "pubkey": "'010001'", "modulus": "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"}, "Variable Values Before Statement": {"text": "b'8f0f5370d2e586d8'"}, "Value After Statement Execution": "b'8d685e2d0735f0f8'", "Variable States During Runtime": {"text": [[1, "b'8f0f5370d2e586d8'"], [2.0, "b'8d685e2d0735f0f8'"]], "pubkey": [[1, "'010001'"]], "modulus": [[1, "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"]], "rs": [[3.0, "41289025236364532763659893484694654271957746525301846225496173810914971221673940219469794803075175772641409601769538690249948382654879184221263545282891541468281379611086448019401240456345998524768441427254251530526498242614378789439179129682525095499524622736788988351523341804681052326293260583730641212123"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 62, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_idx(ndim, dim, s, defidx=None):\n    defidx = slice(None, None, None) if defidx is None else defidx\n    idx = [defidx] * ndim\n    idx[dim] = s\n    return tuple(idx)\n\n_get_idx(ndim=1, dim=0, s=slice(1, 2, None), defidx=None)", "Selected Statement": "idx = [defidx] * ndim", "Function Input": {"ndim": "1", "dim": "0", "s": "slice(1, 2, None)", "defidx": "None"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[slice(None, None, None)]", "Variable States During Runtime": {"ndim": [[1, "1"]], "dim": [[1, "0"]], "s": [[1, "slice(1, 2, None)"]], "defidx": [[1, "None"], [2.0, "slice(None, None, None)"]], "idx": [[3.0, "[slice(None, None, None)]"], [4.0, "[slice(1, 2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 42, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _add_notice_to_docstring(doc, no_doc_str, notice):\n    \"\"\"Adds a deprecation notice to a docstring.\"\"\"\n    if not doc:\n        lines = [no_doc_str]\n\n    else:\n        lines = _normalize_docstring(doc).splitlines()\n\n    notice = [''] + notice\n\n    if len(lines) > 1:\n        # Make sure that we keep our distance from the main body\n        if lines[1].strip():\n            notice.append('')\n\n        lines[1:1] = notice\n    else:\n        lines += notice\n\n    return '\\n'.join(lines)\n\n_add_notice_to_docstring(doc=None, no_doc_str='DEPRECATED FUNCTION', notice=['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        '])", "Selected Statement": "lines = [no_doc_str]", "Function Input": {"doc": "None", "no_doc_str": "'DEPRECATED FUNCTION'", "notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Variable Values Before Statement": {"no_doc_str": "'DEPRECATED FUNCTION'"}, "Value After Statement Execution": "['DEPRECATED FUNCTION']", "Variable States During Runtime": {"doc": [[1, "None"]], "no_doc_str": [[1, "'DEPRECATED FUNCTION'"]], "notice": [[1, "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"], [9.0, "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]], "lines": [[4.0, "['DEPRECATED FUNCTION']"], [18.0, "['DEPRECATED FUNCTION', '', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 5, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def glob_absolute_paths(file: Union[str, Path]) -> List[Path]:\n            path = Path(file)\n            if not path.is_absolute():\n                path = base / path\n            return sorted(path.parent.glob(path.name), key=lambda p: p.stem)\n\nglob_absolute_paths(file='aggrid.js', base=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements'))", "Selected Statement": "path = base / path", "Function Input": {"file": "'aggrid.js'", "base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"}, "Variable Values Before Statement": {"base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')", "path": "PosixPath('aggrid.js')"}, "Value After Statement Execution": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')", "Variable States During Runtime": {"file": [[1, "'aggrid.js'"]], "base": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"]], "path": [[2.0, "PosixPath('aggrid.js')"], [4.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 53, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "flag_args = args[separator_index + 1:]", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {"args": "['a', 'b', '--']"}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 33, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def div(self, other, precision=18):\n        distance = precision - self.decimals + other.decimals\n        if distance == 0:\n            numerator = self.integer\n        elif distance < 0:\n            exponent = self.base ** -distance\n            numerator = self.integer // exponent\n        else:\n            exponent = self.base ** distance\n            numerator = self.integer * exponent\n        result, mod = divmod(numerator, other.integer)\n        # python floors negative numbers down instead of truncating\n        # if mod is zero it will be floored to itself so we do not add one\n        result = result + 1 if result < 0 and mod else result\n        return Precise(result, precision)\n\ndiv(self=Precise(0.00000002), other=Precise(69696900000), precision=1, self.base=10, self.decimals=8, self.integer=2)", "Selected Statement": "numerator = self.integer // exponent", "Function Input": {"self": "Precise(0.00000002)", "other": "Precise(69696900000)", "precision": "1", "self.base": "10", "self.decimals": "8", "self.integer": "2"}, "Variable Values Before Statement": {"exponent": "1000000000000"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "Precise(0.00000002)"]], "other": [[1, "Precise(69696900000)"]], "precision": [[1, "1"]], "self.base": [[1, "10"]], "self.decimals": [[1, "8"]], "self.integer": [[1, "2"]], "distance": [[2.0, "-12"]], "exponent": [[6.0, "1000000000000"]], "numerator": [[7.0, "0"]], "result": [[11.0, "0"]], "mod": [[11.0, "0"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 65, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def execute(self, entry):\n        directives = []\n        for i, word in enumerate(entry.words()):\n            def append(resolvable):\n                directives.append((resolvable.directivevalue, i))\n                raise self.Enough\n            try:\n                self.getresolvables(word.cat(), append)\n            except (AttributeError, CatNotSupportedException, self.Enough):\n                pass\n        if 1 != len(directives):\n            raise UnsupportedEntryException(\"Expected 1 directive but %s found: %s\" % (directives, entry))\n        d, i = directives[0]\n        d(entry.subentry(0, i), entry.phrase(i + 1), self)\n\nexecute(self=Context(SuperContext(), False), entry=Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')]), self.islist=False, self.parent=SuperContext(), self.resolvables=OrderedDict([('here', Text('/tmp'))]))", "Selected Statement": "d, i = directives[0]", "Function Input": {"self": "Context(SuperContext(), False)", "entry": "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])", "self.islist": "False", "self.parent": "SuperContext()", "self.resolvables": "OrderedDict([('here', Text('/tmp'))])"}, "Variable Values Before Statement": {"directives": "[(<aridimpl.directives.Equals object at 0x7fe13ba8cd60>, 2)]"}, "Value After Statement Execution": "{}", "Variable States During Runtime": {"self": [[1, "Context(SuperContext(), False)"]], "entry": [[1, "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])"]], "self.islist": [[1, "False"]], "self.parent": [[1, "SuperContext()"]], "self.resolvables": [[1, "OrderedDict([('here', Text('/tmp'))])"], [14.0, "OrderedDict([('here', Text('/tmp')), ('ns', Context(Context(SuperContext(), False), False))])"]], "directives": [[2.0, "[]"], [8.0, "[(<aridimpl.directives.Equals object at 0x7fe13ba8cd60>, 2)]"]], "word": [[3.0, "Text('ns')"], [3.0, "Text('woo')"], [3.0, "Text('=')"], [3.0, "Text('yay')"]], "i": [[3.0, "0"], [3.0, "1"], [3.0, "2"], [3.0, "3"], [13.0, "2"]], "append": [[4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b030d0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b035e0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"]], "d": [[13.0, "{}"]]}, "Program Information": "Project Name: combatopera+aridity", "idx": 18, "quantized value": "Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def apply_env_options():\n    \"apply options passed through environment variables\"\n    env_options = filter(is_flower_envvar, os.environ)\n    for env_var_name in env_options:\n        name = env_var_name.replace(ENV_VAR_PREFIX, '', 1).lower()\n        value = os.environ[env_var_name]\n        try:\n            option = options._options[name]  # pylint: disable=protected-access\n        except KeyError:\n            option = options._options[name.replace('_', '-')]  # pylint: disable=protected-access\n        if option.multiple:\n            value = [option.type(i) for i in value.split(',')]\n        else:\n            if option.type is bool:\n                value = bool(strtobool(value))\n            else:\n                value = option.type(value)\n        setattr(options, name, value)\n\napply_env_options()", "Selected Statement": "value = os.environ[env_var_name]", "Function Input": {}, "Variable Values Before Statement": {"env_var_name": "'FLOWER_AUTO_REFRESH'"}, "Value After Statement Execution": "'false'", "Variable States During Runtime": {"env_options": [[3.0, "REPR FAILED"]], "env_var_name": [[4.0, "'FLOWER_AUTO_REFRESH'"]], "name": [[5.0, "'auto_refresh'"]], "value": [[6.0, "'false'"], [15.0, "False"]], "option": [[10.0, "{name='auto_refresh', help='refresh workerss', metavar=None, multiple=False, file_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', group_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', callback=None, default=True, _value=<object object at 0x7fc8330cff40>}"], [18.0, "{name='auto_refresh', help='refresh workerss', metavar=None, multiple=False, file_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', group_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', callback=None, default=True, _value=False}"]]}, "Program Information": "Project Name: mher+flower", "idx": 22, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_logger(name: str) -> logging.Logger:\n    if name.startswith(\"electrum.\"):\n        name = name[9:]\n    return electrum_logger.getChild(name)\n\nget_logger(name='electrum.logging')", "Selected Statement": "name = name[9:]", "Function Input": {"name": "'electrum.logging'"}, "Variable Values Before Statement": {"name": "'electrum.logging'"}, "Value After Statement Execution": "'logging'", "Variable States During Runtime": {"name": [[1, "'electrum.logging'"], [3.0, "'logging'"]]}, "Program Information": "Project Name: spesmilo+electrum", "idx": 11, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _find_and_replace_patterns(content, patterns_and_insertions):\n  r\"\"\"content: str\n\n  patterns_and_insertions: List[Dict]\n\n  Example for patterns_and_insertions:\n\n      [\n          {\n              \"pattern\" :\n              r\"(?:\\\\figcompfigures{\\s*)(?P<first>.*?)\\s*}\\s*{\\s*(?P<second>.*?)\\s*}\\s*{\\s*(?P<third>.*?)\\s*}\",\n              \"insertion\" :\n              r\"\\parbox[c]{{{second}\\linewidth}}{{\\includegraphics[width={third}\\linewidth]{{figures/{first}}}}}}\",\n              \"description\": \"Replace figcompfigures\"\n          },\n      ]\n  \"\"\"\n  for pattern_and_insertion in patterns_and_insertions:\n    pattern = pattern_and_insertion['pattern']\n    insertion = pattern_and_insertion['insertion']\n    description = pattern_and_insertion['description']\n    logging.info('Processing pattern: %s.', description)\n    p = regex.compile(pattern)\n    m = p.search(content)\n    while m is not None:\n      local_insertion = insertion.format(**m.groupdict())\n      if pattern_and_insertion.get('strip_whitespace', True):\n        local_insertion = strip_whitespace(local_insertion)\n      logging.info(f'Found {content[m.start():m.end()]:<70}')\n      logging.info(f'Replacing with {local_insertion:<30}')\n      content = content[: m.start()] + local_insertion + content[m.end() :]\n      m = p.search(content)\n    logging.info('Finished pattern: %s.', description)\n  return content\n\n_find_and_replace_patterns(content='& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}', patterns_and_insertions=[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}])", "Selected Statement": "pattern = pattern_and_insertion['pattern']", "Function Input": {"content": "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'", "patterns_and_insertions": "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"}, "Variable Values Before Statement": {"pattern_and_insertion": "{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}"}, "Value After Statement Execution": "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'", "Variable States During Runtime": {"content": [[1, "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]], "patterns_and_insertions": [[1, "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"]], "pattern_and_insertion": [[18.0, "{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}"]], "pattern": [[19.0, "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'"]], "insertion": [[20.0, "'\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} '"]], "description": [[21.0, "'Replace figcompfigures'"]], "p": [[23.0, "regex.Regex('(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', flags=regex.V0)"]], "m": [[24.0, "<regex.Match object; span=(2, 49), match='\\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}'>"], [32.0, "<regex.Match object; span=(89, 126), match='\\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'>"], [32.0, "None"]], "local_insertion": [[26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}'"], [26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image2.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 25, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "hs = df2['h']", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"df2": "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"}, "Value After Statement Execution": "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 50, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def __remove_ip_object(self, ip_object):\n\n        if ip_object not in self.__description:\n            raise IPObjectNotInSpaceError(\n                \"cannot remove undescribed IP object\"\n            )\n\n        if isinstance(ip_object, IPAddressTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            self.__children_ip_object[supernet].remove(ip_object)\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        elif isinstance(ip_object, IPNetworkTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            children_of_supernet = (\n                self.__children_ip_object.setdefault(supernet, set())\n            )\n\n            for child in self.__children_ip_object[ip_object]:\n                self.__parent_supernet[child] = supernet\n                children_of_supernet.add(child)\n\n            del self.__children_ip_object[ip_object]\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        else:\n\n            raise TypeError(\"ip_parameter must be a valid IP object\")\n\n        return True\n\n__remove_ip_object(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_object=IPv4Address('203.0.113.128'), self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "supernet = self.__parent_supernet[ip_object]", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_object": "IPv4Address('203.0.113.128')", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"ip_object": "IPv4Address('203.0.113.128')"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [11.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: set()})"], [12.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"], [13.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_object": [[1, "IPv4Address('203.0.113.128')"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [11.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [13.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [12.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "supernet": [[10.0, "None"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 37, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_code(code_lines, start_pos, end_pos):\n    # Get relevant lines.\n    lines = code_lines[start_pos[0] - 1:end_pos[0]]\n    # Remove the parts at the end of the line.\n    lines[-1] = lines[-1][:end_pos[1]]\n    # Remove first line indentation.\n    lines[0] = lines[0][start_pos[1]:]\n    return ''.join(lines)\n\n_get_code(code_lines=['\\n', 'import json\\n', 'json.lo'], start_pos=(3, 0), end_pos=(3, 5))", "Selected Statement": "lines = code_lines[start_pos[0] - 1:end_pos[0]]", "Function Input": {"code_lines": "['\\n', 'import json\\n', 'json.lo']", "start_pos": "(3, 0)", "end_pos": "(3, 5)"}, "Variable Values Before Statement": {"code_lines": "['\\n', 'import json\\n', 'json.lo']"}, "Value After Statement Execution": "['json.lo']", "Variable States During Runtime": {"code_lines": [[1, "['\\n', 'import json\\n', 'json.lo']"]], "start_pos": [[1, "(3, 0)"]], "end_pos": [[1, "(3, 5)"]], "lines": [[3.0, "['json.lo']"], [5.0, "['json.']"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 29, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def parse_layout(layout_str):\n    \"\"\"Parse a layout string\n\n    Return a dict\n        {'walls': list_of_wall_coordinates,\n         'food' : list_of_food_coordinates,\n         'bot'  : list_of_4_bot_coordinate}\n\n    A layout string is composed of wall characters '#', food characters '.', and\n    bot characters '0', '1', '2', and '3'.\n\n    Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n\n     ########\n     #0  .  #\n     #2    1#\n     #  .  3#\n     ########\n\n\n    If items are overlapping, several layout strings can be concateneted:\n     ########\n     #0  .  #\n     #     1#\n     #  .  3#\n     ########\n     ########\n     #2  .  #\n     #     1#\n     #  .  3#\n     ########\n\n     In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n    \"\"\"\n    layout_list = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # ignore emptylines\n            continue\n        if not start:\n            # start a new layout\n            # check that row is a valid opening string\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n            current_layout = [row]\n            start = True\n            continue\n        # we are in the middle of a layout, just append to the current\n        # layout unless we detect the closing string\n        current_layout.append(row)\n        if row.count('#') == len(row):\n            # this is a closing string\n            # append the layout to tha layout list\n            layout_list.append('\\n'.join(current_layout))\n            start = False\n\n    if start:\n        # the last layout has not been closed, complain here!\n        raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n\n    # initialize walls, food and bots from the first layout\n    out = parse_single_layout(layout_list.pop(0))\n    for layout in layout_list:\n        items = parse_layout(layout)\n        # walls should always be the same\n        if items['walls'] != out['walls']:\n            raise ValueError('Walls are not equal in all layouts!')\n        # add the food, removing duplicates\n        out['food'] = list(set(out['food'] + items['food']))\n        # add the bots\n        for bot_idx, bot_pos in enumerate(items['bots']):\n            if bot_pos:\n                # this bot position is not None, overwrite whatever we had before\n                out['bots'][bot_idx] = bot_pos\n\n    return out\n\nparse_layout(layout_str='\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "Selected Statement": "current_layout = [row]", "Function Input": {"layout_str": "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"}, "Variable Values Before Statement": {"row": "'##################'"}, "Value After Statement Execution": "['##################']", "Variable States During Runtime": {"layout_str": [[1, "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"]], "layout_list": [[35.0, "[]"], [56.0, "['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################']"], [64.0, "[]"]], "start": [[36.0, "False"], [48.0, "True"], [57.0, "False"]], "i": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"], [37.0, "4"], [37.0, "5"], [37.0, "6"], [37.0, "7"], [37.0, "8"]], "line": [[37.0, "''"], [37.0, "'        ##################'"], [37.0, "'        #. ... .##.     3#'"], [37.0, "'        # # #  .  .### #1#'"], [37.0, "'        # # ##.   .      #'"], [37.0, "'        #      .   .## # #'"], [37.0, "'        #0# ###.  .  # # #'"], [37.0, "'        #2     .##. ... .#'"], [37.0, "'        ################## '"]], "row": [[38.0, "''"], [38.0, "'##################'"], [38.0, "'#. ... .##.     3#'"], [38.0, "'# # #  .  .### #1#'"], [38.0, "'# # ##.   .      #'"], [38.0, "'#      .   .## # #'"], [38.0, "'#0# ###.  .  # # #'"], [38.0, "'#2     .##. ... .#'"], [38.0, "'##################'"]], "current_layout": [[47.0, "['##################']"], [52.0, "['##################', '#. ... .##.     3#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "out": [[64.0, "{'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 30, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def quat_from_axis_angle(axis, angle):\n        axis_ = np.array(axis, dtype=np.float64)\n        half_angle = angle * 0.5\n        ret = np.empty(4)\n        ret[0] = math.cos(half_angle)\n        ret[1:4] = math.sin(half_angle) * axis_\n        return ret\n\nquat_from_axis_angle(axis=[1.0, 0.0, 0.0], angle=6.1086523819801535)", "Selected Statement": "half_angle = angle * 0.5", "Function Input": {"axis": "[1.0, 0.0, 0.0]", "angle": "6.1086523819801535"}, "Variable Values Before Statement": {"angle": "6.1086523819801535"}, "Value After Statement Execution": "3.0543261909900767", "Variable States During Runtime": {"axis": [[1, "[1.0, 0.0, 0.0]"]], "angle": [[1, "6.1086523819801535"]], "axis_": [[2.0, "array([1., 0., 0.])"]], "half_angle": [[3.0, "3.0543261909900767"]], "ret": [[4.0, "array([4.65265954e-310, 0.00000000e+000, 1.58101007e-322, 6.90572610e-310])"], [5.0, "array([-9.96194698e-001,  0.00000000e+000,  1.58101007e-322,        6.90572610e-310])"], [6.0, "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])"]]}, "Program Information": "Project Name: Hasenpfote+fpq", "idx": 67, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def to_tuple(param, low=None, bias=None):\n    \"\"\"Convert input argument to min-max tuple\n    Args:\n        param (scalar, tuple or list of 2+ elements): Input value.\n            If value is scalar, return value would be (offset - value, offset + value).\n            If value is tuple, return value would be value + offset (broadcasted).\n        low:  Second element of tuple can be passed as optional argument\n        bias: An offset factor added to each element\n    \"\"\"\n    if low is not None and bias is not None:\n        raise ValueError(\"Arguments low and bias are mutually exclusive\")\n\n    if param is None:\n        return param\n\n    if isinstance(param, (int, float)):\n        if low is None:\n            param = -param, +param\n        else:\n            param = (low, param) if low < param else (param, low)\n    elif isinstance(param, Sequence):\n        if len(param) != 2:\n            raise ValueError(\"to_tuple expects 1 or 2 values\")\n        param = tuple(param)\n    else:\n        raise ValueError(\"Argument param must be either scalar (int, float) or tuple\")\n\n    if bias is not None:\n        return tuple(bias + x for x in param)\n\n    return tuple(param)\n\nto_tuple(param=7, low=3, bias=None)", "Selected Statement": "if bias is not None:", "Function Input": {"param": "7", "low": "3", "bias": "None"}, "Variable Values Before Statement": {"bias": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"param": [[1, "7"], [20.0, "(3, 7)"]], "low": [[1, "3"]], "bias": [[1, "None"]]}, "Program Information": "Project Name: albumentations-team+albumentations", "idx": 108, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def digit_version(version_str: str, length: int = 4):\n    \"\"\"Convert a version string into a tuple of integers.\n\n    This method is usually used for comparing two versions. For pre-release\n    versions: alpha < beta < rc.\n\n    Args:\n        version_str (str): The version string.\n        length (int): The maximum number of version levels. Default: 4.\n\n    Returns:\n        tuple[int]: The version info in digits (integers).\n    \"\"\"\n    assert 'parrots' not in version_str\n    version = parse(version_str)\n    assert version.release, f'failed to parse version {version_str}'\n    release = list(version.release)\n    release = release[:length]\n    if len(release) < length:\n        release = release + [0] * (length - len(release))\n    if version.is_prerelease:\n        mapping = {'a': -3, 'b': -2, 'rc': -1}\n        val = -4\n        # version.pre can be None\n        if version.pre:\n            if version.pre[0] not in mapping:\n                warnings.warn(f'unknown prerelease version {version.pre[0]}, '\n                              'version checking may go wrong')\n            else:\n                val = mapping[version.pre[0]]\n            release.extend([val, version.pre[-1]])\n        else:\n            release.extend([val, 0])\n\n    elif version.is_postrelease:\n        release.extend([1, version.post])\n    else:\n        release.extend([0, 0])\n    return tuple(release)\n\ndigit_version(version_str='2.2.2+cu121', length=4)", "Selected Statement": "if len(release) < length:", "Function Input": {"version_str": "'2.2.2+cu121'", "length": "4"}, "Variable Values Before Statement": {"length": "4"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"version_str": [[1, "'2.2.2+cu121'"]], "length": [[1, "4"]], "version": [[15.0, "<Version('2.2.2+cu121')>"]], "release": [[17.0, "[2, 2, 2]"], [20.0, "[2, 2, 2, 0]"], [38.0, "[2, 2, 2, 0, 0, 0]"]]}, "Program Information": "Project Name: Mikubill+sd-webui-controlnet", "idx": 116, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def file(input_file, light=False):\n    \"\"\"Import colorscheme from json file.\"\"\"\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/light/\"))\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/dark/\"))\n\n    theme_name = \".\".join((input_file, \"json\"))\n    bri = \"light\" if light else \"dark\"\n\n    user_theme_file = os.path.join(CONF_DIR, \"colorschemes\", bri, theme_name)\n    theme_file = os.path.join(MODULE_DIR, \"colorschemes\", bri, theme_name)\n\n    # Find the theme file.\n    if input_file in (\"random\", \"random_dark\"):\n        theme_file = get_random_theme()\n\n    elif input_file == \"random_light\":\n        theme_file = get_random_theme(light)\n\n    elif input_file == \"random_user\":\n        theme_file = get_random_theme_user()\n\n    elif os.path.isfile(user_theme_file):\n        theme_file = user_theme_file\n\n    elif os.path.isfile(input_file):\n        theme_file = input_file\n\n    # Parse the theme file.\n    if os.path.isfile(theme_file):\n        logging.info(\"Set theme to \\033[1;37m%s\\033[0m.\",\n                     os.path.basename(theme_file))\n        util.save_file(os.path.basename(theme_file),\n                       os.path.join(CACHE_DIR, \"last_used_theme\"))\n        return parse(theme_file)\n\n    logging.error(\"No %s colorscheme file found.\", bri)\n    logging.error(\"Try adding   '-l' to set light themes.\")\n    logging.error(\"Try removing '-l' to set dark themes.\")\n    sys.exit(1)\n\nfile(input_file='tests/test_files/test_file.json', light=False)", "Selected Statement": "if input_file in (\"random\", \"random_dark\"):", "Function Input": {"input_file": "'tests/test_files/test_file.json'", "light": "False"}, "Variable Values Before Statement": {"input_file": "'tests/test_files/test_file.json'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"input_file": [[1, "'tests/test_files/test_file.json'"]], "light": [[1, "False"]], "theme_name": [[6.0, "'tests/test_files/test_file.json.json'"]], "bri": [[7.0, "'dark'"]], "user_theme_file": [[9.0, "'/home/XXX/.config/wal/colorschemes/dark/tests/test_files/test_file.json.json'"]], "theme_file": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/pywal/colorschemes/dark/tests/test_files/test_file.json.json'"], [26.0, "'tests/test_files/test_file.json'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 109, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def mknode(id=None, ip=None, port=None, intid=None):\n    \"\"\"\n    Make a node.  Created a random id if not specified.\n    \"\"\"\n    if intid is not None:\n        id = pack('>l', intid)\n    id = id or hashlib.sha1(str(random.getrandbits(255))).digest()\n    return Node(id, ip, port)\n\nmknode(id=None, ip=None, port=None, intid=0)", "Selected Statement": "if intid is not None:", "Function Input": {"id": "None", "ip": "None", "port": "None", "intid": "0"}, "Variable Values Before Statement": {"intid": "0"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"id": [[1, "None"], [6.0, "b'\\x00\\x00\\x00\\x00'"]], "ip": [[1, "None"]], "port": [[1, "None"]], "intid": [[1, "0"]]}, "Program Information": "Project Name: Storj+storjkademlia", "idx": 72, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n    \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n\n    defaults = HTYPE_CONFIGURATIONS[htype]\n\n    for key, value in htype_overwrite.items():\n        if key not in defaults:\n            raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n\n        if isinstance(value, str) and value == UNSPECIFIED:\n            if defaults[key] == REQUIRE_USER_SPECIFICATION:\n                raise TensorMetaMissingRequiredValue(htype, key)\n\n    sc = htype_overwrite[\"sample_compression\"]\n    cc = htype_overwrite[\"chunk_compression\"]\n    compr = sc if cc in (None, UNSPECIFIED) else cc\n    actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype\n    if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n        raise TensorMetaMissingRequiredValue(\n            actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n        )\n    if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n        if cc not in (UNSPECIFIED, None):\n            raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n        elif sc == UNSPECIFIED:\n            raise TensorMetaMissingRequiredValue(\n                actual_htype, \"sample_compression\"  # type: ignore\n            )\n    supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)\n    if (\n        compr\n        and compr != UNSPECIFIED\n        and supported_compressions\n        and compr not in supported_compressions\n    ):\n        raise UnsupportedCompressionError(compr, htype=htype)\n\n_validate_htype_overwrites(htype='generic', htype_overwrite={'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "Selected Statement": "if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):", "Function Input": {"htype": "'generic'", "htype_overwrite": "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Variable Values Before Statement": {"htype": "'generic'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"htype": [[1, "'generic'"]], "htype_overwrite": [[1, "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"]], "defaults": [[4.0, "{'dtype': None, 'sample_compression': None, 'chunk_compression': None, 'typestr': None, 'max_chunk_size': None, 'tiling_threshold': None, 'is_sequence': False, 'is_link': False, 'hidden': False, 'links': None, 'verify': False}"]], "key": [[6.0, "'sample_compression'"], [6.0, "'chunk_compression'"], [6.0, "'dtype'"], [6.0, "'hidden'"], [6.0, "'tiling_threshold'"], [6.0, "'max_chunk_size'"], [6.0, "'is_sequence'"], [6.0, "'is_link'"], [6.0, "'verify'"]], "value": [[6.0, "'unspecified'"], [6.0, "False"], [6.0, "None"], [6.0, "2000000"], [6.0, "False"], [6.0, "True"]], "sc": [[14.0, "'unspecified'"]], "cc": [[15.0, "'unspecified'"]], "compr": [[16.0, "'unspecified'"]], "actual_htype": [[17.0, "'generic'"]], "supported_compressions": [[29.0, "None"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 134, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _copy(src, dst, src_is_storage, dst_is_storage):\n    \"\"\"\n    Copies file from source to destination\n\n    Args:\n        src (str or file-like object): Source file.\n        dst (str or file-like object): Destination file.\n        src_is_storage (bool): Source is storage.\n        dst_is_storage (bool): Destination is storage.\n    \"\"\"\n    # If both storage: Tries to perform same storage direct copy\n    if src_is_storage and dst_is_storage:\n        system = get_instance(src)\n        if system is get_instance(dst):\n\n            # Checks if same file\n            if system.relpath(src) == system.relpath(dst):\n                raise same_file_error(\n                    \"'%s' and '%s' are the same file\" % (src, dst))\n\n            # Tries to copy\n            try:\n                return system.copy(src, dst)\n            except (UnsupportedOperation, ObjectException):\n                pass\n\n    # At least one storage object: copies streams\n    with cos_open(src, 'rb') as fsrc:\n        with cos_open(dst, 'wb') as fdst:\n\n            # Get stream buffer size\n            for stream in (fdst, fsrc):\n                try:\n                    buffer_size = getattr(stream, '_buffer_size')\n                    break\n                except AttributeError:\n                    continue\n            else:\n                buffer_size = 16384\n\n            # Read and write\n            copyfileobj(fsrc, fdst, buffer_size)\n\n_copy(src='dummy_read://file.txt', dst='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt', src_is_storage=True, dst_is_storage=False)", "Selected Statement": "if src_is_storage and dst_is_storage:", "Function Input": {"src": "'dummy_read://file.txt'", "dst": "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'", "src_is_storage": "True", "dst_is_storage": "False"}, "Variable Values Before Statement": {"src_is_storage": "True", "dst_is_storage": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"src": [[1, "'dummy_read://file.txt'"]], "dst": [[1, "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'"]], "src_is_storage": [[1, "True"]], "dst_is_storage": [[1, "False"]], "fsrc": [[28.0, "{}"]], "fdst": [[29.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"]], "stream": [[32.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"], [32.0, "{}"]], "buffer_size": [[39.0, "16384"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 96, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_word_set_total_score(board, word_set, num_move_locations):\n    total_score = 0\n    word_score = 0\n\n    for word_location_set in word_set:\n        word_score = 0\n        word_multiplier = 1\n\n        for location in word_location_set:\n            square = board.board_square_dict[location]\n            word_multiplier *= square.word_multiplier\n            word_score += square.tile.point_value * square.letter_multiplier\n\n        word_score *= word_multiplier\n        total_score += word_score\n\n    if num_move_locations == config.PLAYER_RACK_SIZE:\n        total_score += config.BINGO_SCORE\n\n    return total_score\n\nget_word_set_total_score(board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, word_set={frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}, num_move_locations=5)", "Selected Statement": "if num_move_locations == config.PLAYER_RACK_SIZE:", "Function Input": {"board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "word_set": "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}", "num_move_locations": "5"}, "Variable Values Before Statement": {"num_move_locations": "5"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "word_set": [[1, "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}"]], "num_move_locations": [[1, "5"]], "total_score": [[2.0, "0"], [15.0, "24"]], "word_score": [[3.0, "0"], [12.0, "3"], [12.0, "8"], [12.0, "10"], [12.0, "11"], [12.0, "12"], [14.0, "24"]], "word_location_set": [[5.0, "frozenset()"], [5.0, "frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})"]], "word_multiplier": [[7.0, "1"], [11.0, "2"]], "location": [[9.0, "('h', 8)"], [9.0, "('j', 8)"], [9.0, "('l', 8)"], [9.0, "('i', 8)"], [9.0, "('k', 8)"]], "square": [[10.0, "B"], [10.0, "K"], [10.0, "R"], [10.0, "A"], [10.0, "E"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 136, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _merge(a, aux, lo, mid, hi):\n        i = lo\n        j = mid + 1\n\n        for k in range(lo, hi + 1):\n            aux[k] = a[k]\n\n        for k in range(lo, hi + 1):\n            if i > mid:\n                a[k] = aux[j]\n                j += 1\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge(a=[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, mid=3, hi=7)", "Selected Statement": "if i > mid:", "Function Input": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Variable Values Before Statement": {"i": "0", "mid": "3"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"a": [[1, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "mid": [[1, "3"]], "hi": [[1, "7"]], "i": [[2.0, "0"], [17.0, "1"], [17.0, "2"], [17.0, "3"], [17.0, "4"]], "j": [[3.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"], [11.0, "8"]], "k": [[5.0, "0"], [5.0, "1"], [5.0, "2"], [5.0, "3"], [5.0, "4"], [5.0, "5"], [5.0, "6"], [5.0, "7"], [8.0, "0"], [8.0, "1"], [8.0, "2"], [8.0, "3"], [8.0, "4"], [8.0, "5"], [8.0, "6"], [8.0, "7"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 90, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def secrets_dir(env=os.getenv('D2_ENVIRONMENT', None),\n                basedir=os.getenv('D2_SECRETS_BASEDIR', None)):\n    if env is not None:\n        env_str = str(env)\n    else:\n        cwd = os.getcwd()\n        default_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(default_file):\n            with open(default_file, 'r') as f:\n                env_str = f.read().strip()\n        else:\n            env_str = os.path.basename(cwd)\n    if basedir is None:\n        basedir = os.path.join(\n                HOME,\n                'secrets' if sys.platform.startswith('win') else '.secrets')\n    return os.path.join(basedir, env_str)\n\nsecrets_dir(env=None, basedir=None)", "Selected Statement": "if basedir is None:", "Function Input": {"env": "None", "basedir": "None"}, "Variable Values Before Statement": {"basedir": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"env": [[1, "None"]], "basedir": [[1, "None"], [14.0, "'/home/XXX/.secrets'"]], "cwd": [[6.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "default_file": [[7.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]], "env_str": [[12.0, "'davedittrich+python_secrets'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 69, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _fetch(c):\n        try:\n            if spos is None:\n                return c.popleft()\n            else:\n                return c.pop()\n        except IndexError:\n            return None\n\n_fetch(c=deque([-1, 1]), spos=None)", "Selected Statement": "if spos is None:", "Function Input": {"c": "deque([-1, 1])", "spos": "None"}, "Variable Values Before Statement": {"spos": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"c": [[1, "deque([-1, 1])"], [4.0, "deque([1])"]], "spos": [[1, "None"]]}, "Program Information": "Project Name: MrTango+click", "idx": 100, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def properties(self, **kwargs) -> Self:\n        \"\"\"Set top-level properties of the Chart.\n\n        Argument names and types are the same as class initialization.\n        \"\"\"\n        # ignore type as copy comes from another class for subclasses of TopLevelMixin\n        copy = self.copy(deep=False)  # type: ignore[attr-defined]\n        for key, val in kwargs.items():\n            if key == \"selection\" and isinstance(val, Parameter):\n                # TODO: Can this be removed\n                # For backward compatibility with old selection interface.\n                setattr(copy, key, {val.name: val.selection})\n            else:\n                # Don't validate data, because it hasn't been processed.\n                if key != \"data\":\n                    # ignore type as validate_property comes from SchemaBase,\n                    # not from TopLevelMixin\n                    self.validate_property(key, val)  # type: ignore[attr-defined]\n                setattr(copy, key, val)\n        return copy\n\nproperties(self=alt.Chart(...), kwargs={'width': 750, 'height': 500}, self._args=(), self._kwds={'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined})", "Selected Statement": "if key != \"data\":", "Function Input": {"self": "alt.Chart(...)", "kwargs": "{'width': 750, 'height': 500}", "self._args": "()", "self._kwds": "{'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined}"}, "Variable Values Before Statement": {"key": "'height'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "alt.Chart(...)"]], "kwargs": [[1, "{'width': 750, 'height': 500}"]], "self._args": [[1, "()"]], "self._kwds": [[1, "{'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined}"]], "copy": [[7.0, "alt.Chart(...)"]], "key": [[8.0, "'width'"], [8.0, "'height'"]], "val": [[8.0, "750"], [8.0, "500"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 85, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def stringified_dict_contains_value(key, value, str_dict):\n    \"\"\"Checks if dict in for of string like \"{'test': 5}\" contains\n    key/value pair. This works faster, then creating actual dict\n    from string since this operation is called for each task in case\n    of kwargs search.\"\"\"\n    if not str_dict:\n        return False\n    value = str(value)\n    try:\n        # + 3 for key right quote, one for colon and one for space\n        key_index = str_dict.index(key) + len(key) + 3\n    except ValueError:\n        return False\n    try:\n        comma_index = str_dict.index(',', key_index)\n    except ValueError:\n        # last value in dict\n        comma_index = str_dict.index('}', key_index)\n    return str(value) == str_dict[key_index:comma_index].strip('\"\\'')\n\nstringified_dict_contains_value(key='test', value=5, str_dict=\"{'test': 5}\")", "Selected Statement": "if not str_dict:", "Function Input": {"key": "'test'", "value": "5", "str_dict": "\"{'test': 5}\""}, "Variable Values Before Statement": {"str_dict": "\"{'test': 5}\""}, "Value After Statement Execution": "No", "Variable States During Runtime": {"key": [[1, "'test'"]], "value": [[1, "5"], [8.0, "'5'"]], "str_dict": [[1, "\"{'test': 5}\""]], "key_index": [[11.0, "9"]], "comma_index": [[18.0, "10"]]}, "Program Information": "Project Name: mher+flower", "idx": 106, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _keep_only_referenced_tex(contents, splits):\n  \"\"\"Returns the filenames referenced from the tex files themselves.\n\n  It needs various iterations in case one file is referenced from an\n  unreferenced file.\n  \"\"\"\n  old_referenced = set(splits['tex_in_root'] + splits['tex_not_in_root'])\n  while True:\n    referenced = set(splits['tex_in_root'])\n    for fn in old_referenced:\n      for fn2 in old_referenced:\n        if regex.search(\n            r'(' + os.path.splitext(fn)[0] + r'[.}])', '\\n'.join(contents[fn2])\n        ):\n          referenced.add(fn)\n\n    if referenced == old_referenced:\n      splits['tex_to_copy'] = list(referenced)\n      return\n\n    old_referenced = referenced.copy()\n\n_keep_only_referenced_tex(contents={'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}, splits={'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []})", "Selected Statement": "if referenced == old_referenced:", "Function Input": {"contents": "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}", "splits": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"}, "Variable Values Before Statement": {"referenced": "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}", "old_referenced": "{'figures/figure_included.tex', 'figures/figure_not_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"contents": [[1, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}"]], "splits": [[1, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"], [18.0, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}"]], "old_referenced": [[7.0, "{'figures/figure_included.tex', 'figures/figure_not_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "referenced": [[9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "fn": [[10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_not_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"]], "fn2": [[11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 111, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_generate(monkeypatch, generated, stop_tokens, expected):\n    import chat.base as chat\n    import generate.base as generate\n\n    input_idx = torch.tensor([5, 3])\n    max_returned_tokens = len(input_idx) + 8\n    model = MagicMock()\n    model.config.block_size = 100\n    model.max_seq_length = 100\n    it = iter(generated)\n\n    def multinomial(*_, **__):\n        out = next(it)\n        return torch.tensor([out])\n\n    monkeypatch.setattr(generate, \"multinomial_num_samples_1\", multinomial)\n    actual = chat.generate(model, input_idx, max_returned_tokens, stop_tokens=stop_tokens)\n    actual = list(actual)\n\n    assert len(actual) == len(expected)\n    if not actual:\n        assert actual == expected\n    else:\n        for t in actual:\n            assert t.dtype == torch.long\n        assert torch.cat(actual).tolist() == expected\n\ntest_generate(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, generated=repeat(1), stop_tokens=(), expected=[1, 1, 1, 1, 1, 1, 1, 1])", "Selected Statement": "if not actual:", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "generated": "repeat(1)", "stop_tokens": "()", "expected": "[1, 1, 1, 1, 1, 1, 1, 1]"}, "Variable Values Before Statement": {"actual": "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [16.0, "{_setattr=[(<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>, 'multinomial_num_samples_1', <function multinomial_num_samples_1 at 0x7f805238a160>)], _setitem=[], _cwd=None, _savesyspath=None}"]], "generated": [[1, "repeat(1)"]], "stop_tokens": [[1, "()"]], "expected": [[1, "[1, 1, 1, 1, 1, 1, 1, 1]"]], "chat": [[2.0, "<module 'chat.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/chat/base.py'>"]], "generate": [[3.0, "<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>"]], "input_idx": [[5.0, "tensor([5, 3])"]], "max_returned_tokens": [[6.0, "10"]], "model": [[7.0, "<MagicMock id='140188337253248'>"]], "it": [[10.0, "repeat(1)"]], "multinomial": [[12.0, "<function test_generate.<locals>.multinomial at 0x7f7fd0f7e430>"]], "actual": [[17.0, "<generator object generate at 0x7f803c55ff90>"], [18.0, "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"]], "@py_assert2": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "t": [[24.0, "tensor([1])"]], "@py_assert1": [[25.0, "None"]], "@py_assert5": [[25.0, "None"]], "@py_assert3": [[25.0, "None"]], "@py_assert6": [[26.0, "None"]], "@py_assert8": [[26.0, "None"]], "@py_assert10": [[26.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 148, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def do_replace(fname, content, before_text, after_text, fence=None):\n    before_text = strip_quoted_wrapping(before_text, fname, fence)\n    after_text = strip_quoted_wrapping(after_text, fname, fence)\n    fname = Path(fname)\n\n    # does it want to make a new file?\n    if not fname.exists() and not before_text.strip():\n        fname.touch()\n        content = \"\"\n\n    if content is None:\n        return\n\n    if not before_text.strip():\n        # append to existing file, or start a new file\n        new_content = content + after_text\n    else:\n        new_content = replace_most_similar_chunk(content, before_text, after_text)\n\n    return new_content\n\ndo_replace(fname='/tmp/tmp7g7a2csg/file.txt', content='two\\n', before_text='two\\n', after_text='three\\n', fence=('```', '```'))", "Selected Statement": "if content is None:", "Function Input": {"fname": "'/tmp/tmp7g7a2csg/file.txt'", "content": "'two\\n'", "before_text": "'two\\n'", "after_text": "'three\\n'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"content": "'two\\n'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"], [4.0, "PosixPath('/tmp/tmp7g7a2csg/file.txt')"]], "content": [[1, "'two\\n'"]], "before_text": [[1, "'two\\n'"]], "after_text": [[1, "'three\\n'"]], "fence": [[1, "('```', '```')"]], "new_content": [[18.0, "'three\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 120, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def static_bool_env(varname: str, default: bool) -> bool:\n  \"\"\"Read an environment variable and interpret it as a boolean.\n\n  This is deprecated. Please use bool_flag() unless your flag\n  will be used in a static method and does not require runtime updates.\n\n  True values are (case insensitive): 'y', 'yes', 't', 'true', 'on', and '1';\n  false values are 'n', 'no', 'f', 'false', 'off', and '0'.\n  Args:\n    varname: the name of the variable\n    default: the default boolean value\n  Returns:\n    boolean return value derived from defaults and environment.\n  Raises: ValueError if the environment variable is anything else.\n  \"\"\"\n  val = os.getenv(varname, str(default))\n  val = val.lower()\n  if val in ('y', 'yes', 't', 'true', 'on', '1'):\n    return True\n  elif val in ('n', 'no', 'f', 'false', 'off', '0'):\n    return False\n  else:\n    raise ValueError(\n      'invalid truth value {!r} for environment {!r}'.format(val, varname)\n    )\n\nstatic_bool_env(varname='FLAX_LAZY_RNG', default=True)", "Selected Statement": "if val in ('y', 'yes', 't', 'true', 'on', '1'):", "Function Input": {"varname": "'FLAX_LAZY_RNG'", "default": "True"}, "Variable Values Before Statement": {"val": "'True'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"varname": [[1, "'FLAX_LAZY_RNG'"]], "default": [[1, "True"]], "val": [[16.0, "'True'"], [17.0, "'true'"]]}, "Program Information": "Project Name: google+flax", "idx": 95, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):\n    \"\"\"\n    Given an input string which may have extra \"wrapping\" around it, remove the wrapping.\n    For example:\n\n    filename.ext\n    ```\n    We just want this content\n    Not the filename and triple quotes\n    ```\n    \"\"\"\n    if not res:\n        return res\n\n    res = res.splitlines()\n\n    if fname and res[0].strip().endswith(Path(fname).name):\n        res = res[1:]\n\n    if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):\n        res = res[1:-1]\n\n    res = \"\\n\".join(res)\n    if res and res[-1] != \"\\n\":\n        res += \"\\n\"\n\n    return res\n\nstrip_quoted_wrapping(res='two\\n', fname='/tmp/tmp7g7a2csg/file.txt', fence=('```', '```'))", "Selected Statement": "if res and res[-1] != \"\\n\":", "Function Input": {"res": "'two\\n'", "fname": "'/tmp/tmp7g7a2csg/file.txt'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"res": "['two']"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"res": [[1, "'two\\n'"], [15.0, "['two']"], [23.0, "'two'"], [25.0, "'two\\n'"]], "fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"]], "fence": [[1, "('```', '```')"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 121, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def version_compare(self, other):\n        \"Compares version of the form [epoch:]upstream-version[-debian-revision]\" \\\n        + \" according to Debian package version number format.\"\n\n        # compare epoch\n        diff = self.epoch - other.epoch\n        if diff != 0:\n            return diff\n\n        # compare upstream version and debian revision\n        for slf, othr in (self.upstream_version, other.upstream_version), (self.revision, other.revision):\n            i = 0\n            while len(slf) > 0 or len(othr) > 0:\n                decimal = (i % 2 == 1) \n                slf_part, slf = self._get_part(slf, decimal=decimal)\n                othr_part, othr = self._get_part(othr, decimal=decimal)\n                diff = self._compare_parts(slf_part, othr_part, decimal=decimal)\n                if diff != 0:\n                    return diff\n                i += 1\n\n        # versions are equal\n        return 0\n\nversion_compare(self=2.2.0~rc5, other=2.2.0~rc5, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "if diff != 0:", "Function Input": {"self": "2.2.0~rc5", "other": "2.2.0~rc5", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"diff": "0"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "other": [[1, "2.2.0~rc5"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "diff": [[6.0, "0"]], "slf": [[11.0, "'2.2.0~rc5'"], [15.0, "'.2.0~rc5'"], [15.0, "'2.0~rc5'"], [15.0, "'.0~rc5'"], [15.0, "'0~rc5'"], [15.0, "'~rc5'"], [15.0, "'5'"], [15.0, "''"], [11.0, "'0'"], [15.0, "''"]], "othr": [[11.0, "'2.2.0~rc5'"], [16.0, "'.2.0~rc5'"], [16.0, "'2.0~rc5'"], [16.0, "'.0~rc5'"], [16.0, "'0~rc5'"], [16.0, "'~rc5'"], [16.0, "'5'"], [16.0, "''"], [11.0, "'0'"], [16.0, "''"]], "i": [[12.0, "0"], [20.0, "1"], [20.0, "2"], [20.0, "3"], [20.0, "4"], [20.0, "5"], [20.0, "6"], [20.0, "7"], [20.0, "8"], [12.0, "0"], [20.0, "1"], [20.0, "2"]], "decimal": [[14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"]], "slf_part": [[15.0, "''"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'0'"], [15.0, "'~rc'"], [15.0, "'5'"], [15.0, "''"], [15.0, "'0'"]], "othr_part": [[16.0, "''"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'0'"], [16.0, "'~rc'"], [16.0, "'5'"], [16.0, "''"], [16.0, "'0'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 92, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def render_pep440_feature(pieces):\n    \"\"\"Build up version string, used within \"feature\" branch of repository.\n\n    Our goal: MERGE-POINT.post.devN+gHEX.BRANCH-NAME.M[.dirty]\n        +) MERGE-POINT = Most recent common ancestor for `develop` and `master`\n          *) Does not yet handle branch from `release-*`\n        +) N = DISTANCE from the MERGE-POINT of `develop` and `master`\n        +) M = DISTANCE from the MERGE-POINT of \"feature\" and `develop`\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"] and pieces[\"develop\"]:\n        rendered = pieces[\"closest-tag\"]\n        distance_to_develop = pieces[\"distance-to-develop\"]\n        distance_to_merge = pieces[\"distance-to-master\"]\n        distance_merge_to_tag = (pieces[\"distance\"] - distance_to_merge)\n        distance_dev_to_merge = (distance_to_merge - distance_to_develop)\n        if (distance_merge_to_tag > 0):\n            rendered += \".%d\" % distance_merge_to_tag\n        rendered += \".post.dev%d\" % distance_dev_to_merge\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n        rendered += \".%s\" % pieces[\"branch\"]\n        rendered += \".%d\" % distance_to_develop\n    else:\n        # exception #1\n        rendered = \"0.post.dev%d\" % (pieces[\"distance\"] - 1)\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \".dirty\"\n    return rendered\n\nrender_pep440_feature(pieces={'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']})", "Selected Statement": "if pieces[\"dirty\"]:", "Function Input": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Variable Values Before Statement": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"pieces": [[1, "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"]], "rendered": [[28.0, "'0.post.dev2'"], [29.0, "'0.post.dev2+'"], [30.0, "'0.post.dev2+ge60d005'"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 149, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def generate(resource_types=()):\n    resource_defs = {}\n    definitions = {\n        'resources': resource_defs,\n        'string_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\"type\": \"string\"},\n            },\n        },\n        'basic_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    'oneOf': [\n                        {\"type\": \"string\"},\n                        {\"type\": \"boolean\"},\n                        {\"type\": \"number\"},\n                    ],\n                }\n            },\n        },\n        'iam-statement': {\n            'additionalProperties': False,\n            'type': 'object',\n            'properties': {\n                'Sid': {'type': 'string'},\n                'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']},\n                'Principal': {'anyOf': [\n                    {'type': 'string'},\n                    {'type': 'object'}, {'type': 'array'}]},\n                'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]},\n                'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Condition': {'type': 'object'}\n            },\n            'required': ['Sid', 'Effect'],\n            'oneOf': [\n                {'required': ['Principal', 'Action', 'Resource']},\n                {'required': ['NotPrincipal', 'Action', 'Resource']},\n                {'required': ['Principal', 'NotAction', 'Resource']},\n                {'required': ['NotPrincipal', 'NotAction', 'Resource']},\n                {'required': ['Principal', 'Action', 'NotResource']},\n                {'required': ['NotPrincipal', 'Action', 'NotResource']},\n                {'required': ['Principal', 'NotAction', 'NotResource']},\n                {'required': ['NotPrincipal', 'NotAction', 'NotResource']}\n            ]\n        },\n        'actions': {},\n        'filters': {\n            'value': ValueFilter.schema,\n            'event': EventFilter.schema,\n            'age': AgeFilter.schema,\n            'reduce': ReduceFilter.schema,\n            # Shortcut form of value filter as k=v\n            'valuekv': {\n                'type': 'object',\n                'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'},\n                    {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]},\n                'minProperties': 1,\n                'maxProperties': 1},\n        },\n        'filters_common': {\n            'list_item_attrs': _get_attr_schema(),\n            'comparison_operators': {\n                'enum': list(OPERATORS.keys())},\n            'value_types': {'enum': VALUE_TYPES},\n            'value_from': ValuesFrom.schema,\n            'value': {'oneOf': [\n                {'type': 'array'},\n                {'type': 'string'},\n                {'type': 'boolean'},\n                {'type': 'number'},\n                {'type': 'null'}]},\n        },\n        'policy': {\n            'type': 'object',\n            'required': ['name', 'resource'],\n            'additionalProperties': False,\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'pattern': \"^[A-z][A-z0-9]*(-[A-z0-9]+)*$\"},\n                'conditions': {\n                    'type': 'array',\n                    'items': {'anyOf': [\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'or': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'not': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'and': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'$ref': '#/definitions/filters/value'},\n                        {'$ref': '#/definitions/filters/event'},\n                        {'$ref': '#/definitions/filters/valuekv'}]}},\n                # these should be deprecated for conditions\n                'region': {'type': 'string'},\n                'tz': {'type': 'string'},\n                'start': {'format': 'date-time'},\n                'end': {'format': 'date-time'},\n                'resource': {'oneOf': [\n                    {'type': 'string'},\n                    {'type': 'array', 'items': {'type': 'string'}}]},\n                'max-resources': {'anyOf': [\n                    {'type': 'integer', 'minimum': 1},\n                    {'$ref': '#/definitions/max-resources-properties'}\n                ]},\n                'max-resources-percent': {'type': 'number', 'minimum': 0, 'maximum': 100},\n                'comment': {'type': 'string'},\n                'comments': {'type': 'string'},\n                'description': {'type': 'string'},\n                'tags': {'type': 'array', 'items': {'type': 'string'}},\n                'metadata': {'type': 'object'},\n                'mode': {'$ref': '#/definitions/policy-mode'},\n                'source': {'enum': list(sources.keys())},\n                'actions': {\n                    'type': 'array',\n                },\n                'filters': {\n                    'type': 'array'\n                },\n                #\n                # TODO: source queries should really move under\n                # source. This was initially used for describe sources\n                # to expose server side query mechanisms, however its\n                # important to note it also prevents resource cache\n                # utilization between policies that have different\n                # queries.\n                'query': {\n                    'type': 'array', 'items': {'type': 'object'}}\n\n            },\n        },\n        'policy-mode': {\n            'anyOf': [e.schema for _, e in execution.items()],\n        },\n        'max-resources-properties': {\n            'type': 'object',\n            'additionalProperties': False,\n            'properties': {\n                'amount': {\"type\": 'integer', 'minimum': 1},\n                'op': {'enum': ['or', 'and']},\n                'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}\n            }\n        }\n    }\n\n    resource_refs = []\n    for cloud_name, cloud_type in sorted(clouds.items()):\n        for type_name, resource_type in sorted(cloud_type.resources.items()):\n            r_type_name = \"%s.%s\" % (cloud_name, type_name)\n            if resource_types and r_type_name not in resource_types:\n                if not resource_type.type_aliases:\n                    continue\n                elif not {\"%s.%s\" % (cloud_name, ralias) for ralias\n                        in resource_type.type_aliases}.intersection(\n                        resource_types):\n                    continue\n\n            aliases = []\n            if resource_type.type_aliases:\n                aliases.extend([\"%s.%s\" % (cloud_name, a) for a in resource_type.type_aliases])\n                # aws gets legacy aliases with no cloud prefix\n                if cloud_name == 'aws':\n                    aliases.extend(resource_type.type_aliases)\n\n            # aws gets additional alias for default name\n            if cloud_name == 'aws':\n                aliases.append(type_name)\n\n            resource_refs.append(\n                process_resource(\n                    r_type_name,\n                    resource_type,\n                    resource_defs,\n                    aliases,\n                    definitions,\n                    cloud_name\n                ))\n\n    schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        'id': 'http://schema.cloudcustodian.io/v0/custodian.json',\n        'definitions': definitions,\n        'type': 'object',\n        'required': ['policies'],\n        'additionalProperties': False,\n        'properties': {\n            'vars': {'type': 'object'},\n            'policies': {\n                'type': 'array',\n                'additionalItems': False,\n                'items': {'anyOf': resource_refs}\n            }\n        }\n    }\n\n    # allow empty policies with lazy load\n    if not resource_refs:\n        schema['properties']['policies']['items'] = {'type': 'object'}\n    return schema\n\ngenerate(resource_types=())", "Selected Statement": "if cloud_name == 'aws':", "Function Input": {"resource_types": "()"}, "Variable Values Before Statement": {"cloud_name": "'gcp'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"resource_types": [[1, "()"]], "resource_defs": [[2.0, "{}"], [177.0, "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}"]], "definitions": [[3.0, "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"], [177.0, "{'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"]], "resource_refs": [[153.0, "[]"], [176.0, "[{'$ref': '#/definitions/resources/gcp.region/policy'}]"]], "cloud_type": [[154.0, "<class 'c7n.resources.aws.AWS'>"], [154.0, "<class 'c7n_gcp.provider.GoogleCloud'>"]], "cloud_name": [[154.0, "'aws'"], [154.0, "'gcp'"]], "type_name": [[155.0, "'region'"]], "resource_type": [[155.0, "<class 'c7n_gcp.region.Region'>"]], "r_type_name": [[156.0, "'gcp.region'"]], "aliases": [[165.0, "[]"]], "schema": [[186.0, "{'$schema': 'http://json-schema.org/draft-07/schema#', 'id': 'http://schema.cloudcustodian.io/v0/custodian.json', 'definitions': {'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv'...ype': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}, 'type': 'object', 'required': ['policies'], 'additionalProperties': False, 'properties': {'vars': {'type': 'object'}, 'policies': {'type': 'array', 'additionalItems': False, 'items': {'anyOf': [{'$ref': '#/definitions/resources/gcp.region/policy'}]}}}}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 113, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def base64url_decode(input: Union[bytes, str]) -> bytes:\n    input_bytes = force_bytes(input)\n\n    rem = len(input_bytes) % 4\n\n    if rem > 0:\n        input_bytes += b\"=\" * (4 - rem)\n\n    return base64.urlsafe_b64decode(input_bytes)\n\nbase64url_decode(input='hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg')", "Selected Statement": "if rem > 0:", "Function Input": {"input": "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Variable Values Before Statement": {"rem": "3"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"input": [[1, "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"]], "input_bytes": [[2.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"], [7.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg='"]], "rem": [[4.0, "3"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 156, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def delete(self, *, ip_parameter, cascade):\n\n        as_address = clean_address(ip_parameter)\n        as_network = clean_network(ip_parameter)\n\n        if as_address in self.__description:\n            return self.__remove_ip_object(as_address)\n        elif as_network in self.__description:\n            return self.__remove_ip_object(as_network)\n\n        raise IPObjectNotInSpaceError(\"cannot delete undescribed IP object\")\n\ndelete(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_parameter='203.0.113.128', cascade=True, self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "if as_address in self.__description:", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_parameter": "'203.0.113.128'", "cascade": "True", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"as_address": "IPv4Address('203.0.113.128')"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [7.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_parameter": [[1, "'203.0.113.128'"]], "cascade": [[1, "True"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [7.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [7.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [7.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "as_address": [[3.0, "IPv4Address('203.0.113.128')"]], "as_network": [[4.0, "IPv4Network('203.0.113.128/32')"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 128, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _get_nested(data, key):\n    \"\"\"\n    Return value for a hierrachical key (like a.b.c).\n    Return None if nothing found.\n    If there is a key with . in the name, and a subdictionary,\n    the former is preferred:\n\n    >>> print(_get_nested({'a.b': 10, 'a':{'b': 20}}, 'a.b'))\n    10\n    >>> print(_get_nested({'a': {'b': 20}}, 'a.b'))\n    20\n    >>> print(_get_nested({'a': {'b': {'c': 30}}}, 'a.b.c'))\n    30\n    \"\"\"\n\n    if not data or not isinstance(data, dict):\n        return None\n    if '.' not in key:\n        return data.get(key)\n    if key in data:\n        return data[key]\n\n    parts = key.split('.')\n    for i in range(len(parts))[::-1]:\n        prefix = \".\".join(parts[:i])\n        if prefix in data:\n            return _get_nested(data[prefix], \".\".join(parts[i:]))\n\n    return None\n\n_get_nested(data={'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}, key='adapters.active')", "Selected Statement": "if '.' not in key:", "Function Input": {"data": "{'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}", "key": "'adapters.active'"}, "Variable Values Before Statement": {"key": "'adapters.active'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"data": [[1, "{'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}"]], "key": [[1, "'adapters.active'"]], "parts": [[23.0, "['adapters', 'active']"]], "i": [[24.0, "1"], [24.0, "0"]], "prefix": [[25.0, "'adapters'"], [25.0, "''"]]}, "Program Information": "Project Name: chubin+cheat.sh", "idx": 146, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def config_dict(configuration_tuple):\n    config_dict = {}\n\n    config_file = configuration_tuple._asdict().get('CFG')\n    if config_file is None:\n        config_file = configfile.get_config_path(configuration_tuple)\n\n    if config_file is not None:\n        config_dict = utils.filter_fields(configfile.read_config(config_file), configuration_tuple)\n        config_dict = utils.type_correct_with(config_dict, configuration_tuple)\n\n    return config_dict\n\nconfig_dict(configuration_tuple={})", "Selected Statement": "if config_file is not None:", "Function Input": {"configuration_tuple": "{}"}, "Variable Values Before Statement": {"config_file": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"configuration_tuple": [[1, "{}"]], "config_dict": [[2.0, "{}"], [9.0, "{'bar': '42'}"], [10.0, "{'bar': 42}"]], "config_file": [[4.0, "None"], [6.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 119, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "if coeff_name is None:", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {"coeff_name": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 98, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def driver():\n    TEST_BROWSER = os.environ.get(\"TEST_BROWSER\", \"chrome\").lower()\n\n    if TEST_BROWSER == \"chrome\":\n        options = webdriver.ChromeOptions()\n        options.headless = True\n        capabilities = DesiredCapabilities.CHROME\n        capabilities[\"goog:loggingPrefs\"] = {\"browser\": \"ALL\"}\n\n        if platform.system() == \"Windows\":\n            options.binary_location = \"C:/Program Files/Google/Chrome/Application/chrome.exe\"\n\n        driver = webdriver.Chrome(\n            ChromeDriverManager().install(),\n            options=options,\n            desired_capabilities=capabilities,\n            service_log_path=os.path.devnull,\n        )\n\n    # Firefox doesn't currently supported pulling JavaScript console logs, which we currently scan to affirm that\n    # JS/Python can communicate in some places. So for now, we can't really use firefox/geckodriver during testing.\n    # This may be added in the future: https://github.com/mozilla/geckodriver/issues/284\n\n    # elif TEST_BROWSER == \"firefox\":\n    #     options = webdriver.FirefoxOptions()\n    #     options.headless = True\n    #     capabilities = DesiredCapabilities.FIREFOX\n    #     capabilities['loggingPrefs'] = {\"browser\": \"ALL\"}\n    #\n    #     driver = webdriver.Firefox(options=options, capabilities=capabilities, service_log_path=os.path.devnull)\n\n    else:\n        raise ValueError(f\"Unsupported browser for testing: {TEST_BROWSER}\")\n\n    with mock.patch(\"eel.browsers.open\"):\n        yield driver\n\ndriver()", "Selected Statement": "if TEST_BROWSER == \"chrome\":", "Function Input": {}, "Variable Values Before Statement": {"TEST_BROWSER": "'chrome'"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"TEST_BROWSER": [[2.0, "'chrome'"]], "options": [[5.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None}"], [6.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None, headless=True}"]], "capabilities": [[7.0, "{'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}}"]]}, "Program Information": "Project Name: python-eel+Eel", "idx": 88, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def elapsed_text(seconds, precise, prefix=''):\n    seconds = round(seconds, 1 if precise else 0)\n    if seconds < 60.:\n        return '{}{:{}f}s'.format(prefix, seconds, .1 if precise else .0)\n\n    minutes, seconds = divmod(seconds, 60.)\n    if minutes < 60.:\n        return '{}{:.0f}:{:0{}f}'.format(prefix, minutes, seconds, 4.1 if precise else 2.0)\n\n    hours, minutes = divmod(minutes, 60.)\n    return '{}{:.0f}:{:02.0f}:{:0{}f}'.format(prefix, hours, minutes, seconds,\n                                              4.1 if precise else 2.0)\n\nelapsed_text(seconds=1.23, precise=True, prefix='')", "Selected Statement": "if seconds < 60.:", "Function Input": {"seconds": "1.23", "precise": "True", "prefix": "''"}, "Variable Values Before Statement": {"seconds": "1.23"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"seconds": [[1, "1.23"], [2.0, "1.2"]], "precise": [[1, "True"]], "prefix": [[1, "''"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 103, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_frames(tback, is_breakpoint):\n    \"\"\"Builds a list of ErrorFrame objects from a traceback\"\"\"\n\n    frames = []\n\n    while tback is not None:\n        if tback.tb_next is None and is_breakpoint:\n            break\n\n        filename = tback.tb_frame.f_code.co_filename\n        function = tback.tb_frame.f_code.co_name\n        context = tback.tb_frame.f_locals\n        lineno = tback.tb_lineno - 1\n        tback_id = id(tback)\n        pre_context_lineno, pre_context, context_line, post_context = get_lines_from_file(filename, lineno + 1, 7)\n        frames.append(ErrorFrame(tback, filename, function, lineno, context, tback_id, pre_context, context_line, post_context, pre_context_lineno))\n        tback = tback.tb_next\n\n    return frames\n\nget_frames(tback=REPR FAILED, is_breakpoint=False)", "Selected Statement": "if tback.tb_next is None and is_breakpoint:", "Function Input": {"tback": "REPR FAILED", "is_breakpoint": "False"}, "Variable Values Before Statement": {"is_breakpoint": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"tback": [[1, "REPR FAILED"], [17.0, "None"]], "is_breakpoint": [[1, "False"]], "frames": [[4.0, "[]"], [16.0, "[<oz.error_pages.ErrorFrame object at 0x7f85da9e7a30>]"], [16.0, "[<oz.error_pages.ErrorFrame object at 0x7f85da9e7a30>, <oz.error_pages.ErrorFrame object at 0x7f85da9e7c70>]"]], "filename": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/dailymuse+oz/dailymuse+oz/tests/error_pages/test_core.py'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/dailymuse+oz/dailymuse+oz/oz/error_pages/__init__.py'"]], "function": [[11.0, "'test_get_frames_debug'"], [11.0, "'debug'"]], "context": [[12.0, "{'self': <tests.error_pages.test_core.ErrorPagesCoreTestCase testMethod=test_get_frames_debug>, 'e': DebugBreakException(), '_': DebugBreakException(), 'tback': <traceback object at 0x7f85da895600>}"], [12.0, "{}"]], "lineno": [[13.0, "44"], [13.0, "19"]], "tback_id": [[14.0, "140212873811456"], [14.0, "140212874253504"]], "pre_context_lineno": [[15.0, "38"], [15.0, "13"]], "pre_context": [[15.0, "['            self.assertEqual(len(frames), 1)', '', '            for frame in frames:', '                self.assertTrue(isinstance(frame, oz.error_pages.ErrorFrame))', '', '    def test_get_frames_debug(self):', '        try:']"], [15.0, "['', 'class DebugBreakException(Exception):', '    \"\"\"Raise this to break into the debugger during an HTTP request\"\"\"', '    pass', '', 'def debug():', '    \"\"\"Used to create debug breakpoints in code\"\"\"']"]], "context_line": [[15.0, "'            oz.error_pages.debug()'"], [15.0, "'    raise DebugBreakException()'"]], "post_context": [[15.0, "['        except Exception as e:', '            _, _, tback = sys.exc_info()', '            frames = oz.error_pages.get_frames(tback, False)', '', '            self.assertEqual(len(frames), 2)', '']"], [15.0, "['', 'class ErrorFrame(object):', '    \"\"\"Holds information about a function call in a traceback\"\"\"', '', '    def __init__(self, tback, filename, function, lineno, vars, id, pre_context, context_line, post_context, pre_context_lineno):', '        self.tback = tback']"]]}, "Program Information": "Project Name: dailymuse+oz", "idx": 76, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "if len(xs) < w:", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"w": "1"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 137, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def encode_number(n):\n    b128_digits = []\n    while n:\n        b128_digits.insert(0, (n & 0x7f) | 0x80)\n        n = n >> 7\n    if not b128_digits:\n        b128_digits.append(0)\n    b128_digits[-1] &= 0x7f\n    return b''.join([int.to_bytes(d, 1, 'big') for d in b128_digits])\n\nencode_number(n=840)", "Selected Statement": "if not b128_digits:", "Function Input": {"n": "840"}, "Variable Values Before Statement": {"b128_digits": "[134, 200]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"n": [[1, "840"], [5.0, "6"], [5.0, "0"]], "b128_digits": [[2.0, "[]"], [4.0, "[200]"], [4.0, "[134, 200]"], [8.0, "[134, 72]"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 150, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def contains_sublist(list_: List[Any], sublist: List[Any]) -> bool:\n    \"\"\"Determine if a `list` contains a `sublist`.\n\n    :param list_:\n        list to search for the `sublist` in.\n    :param sublist:\n        Sub list to search for.\n\n    :return:\n        True if `list` contains `sublist`.\n\n    \"\"\"\n    # Adapted from: https://stackoverflow.com/a/12576755\n    if not sublist:\n        return False\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return True\n    return False\n\ncontains_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "if not sublist:", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"sublist": "[1, 2]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[16.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 141, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def to_values(data: DataType) -> ToValuesReturnType:\n    \"\"\"Replace a DataFrame by a data model with values.\"\"\"\n    check_data_type(data)\n    if hasattr(data, \"__geo_interface__\"):\n        if isinstance(data, pd.DataFrame):\n            data = sanitize_dataframe(data)\n        # Maybe the type could be further clarified here that it is\n        # SupportGeoInterface and then the ignore statement is not needed?\n        data_sanitized = sanitize_geo_interface(data.__geo_interface__)  # type: ignore[arg-type]\n        return {\"values\": data_sanitized}\n    elif isinstance(data, pd.DataFrame):\n        data = sanitize_dataframe(data)\n        return {\"values\": data.to_dict(orient=\"records\")}\n    elif isinstance(data, dict):\n        if \"values\" not in data:\n            raise KeyError(\"values expected in data dict, but not present.\")\n        return data\n    elif hasattr(data, \"__dataframe__\"):\n        # experimental interchange dataframe support\n        pi = import_pyarrow_interchange()\n        pa_table = sanitize_arrow_table(pi.from_dataframe(data))\n        return {\"values\": pa_table.to_pylist()}\n    else:\n        # Should never reach this state as tested by check_data_type\n        raise ValueError(\"Unrecognized data type: {}\".format(type(data)))\n\nto_values(data=           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns])", "Selected Statement": "if \"values\" not in data:", "Function Input": {"data": "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"}, "Variable Values Before Statement": {"data": "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"data": [[1, "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [12.0, "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 86, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def git_versions_from_vcs(tag_prefix, root, verbose=False):\n    # this runs 'git' from the root of the source tree. This only gets called\n    # if the git-archive 'subst' keywords were *not* expanded, and\n    # _version.py hasn't already been rewritten with a short version string,\n    # meaning we're inside a checked out source tree.\n\n    if not os.path.exists(os.path.join(root, \".git\")):\n        if verbose:\n            print(\"no .git in %s\" % root)\n        return {}\n\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    stdout = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\", \"--always\"],\n                         cwd=root)\n    if stdout is None:\n        return {}\n    if not stdout.startswith(tag_prefix):\n        if verbose:\n            print(\"tag '%s' doesn't start with prefix '%s'\"\n                  % (stdout, tag_prefix))\n        return {}\n    tag = stdout[len(tag_prefix):]\n    stdout = run_command(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if stdout is None:\n        return {}\n    full = stdout.strip()\n    if tag.endswith(\"-dirty\"):\n        full += \"-dirty\"\n    return {\"version\": tag, \"full\": full}\n\ngit_versions_from_vcs(tag_prefix='v', root='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs', verbose=False)", "Selected Statement": "if stdout is None:", "Function Input": {"tag_prefix": "'v'", "root": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'", "verbose": "False"}, "Variable Values Before Statement": {"stdout": "'v0.1.2'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"tag_prefix": [[1, "'v'"]], "root": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'"]], "verbose": [[1, "False"]], "GITS": [[12.0, "['git']"]], "stdout": [[15.0, "'v0.1.2'"], [25.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]], "tag": [[24.0, "'0.1.2'"]], "full": [[28.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]]}, "Program Information": "Project Name: andsor+pydevs", "idx": 79, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "if '--' in args:", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {"args": "['a', 'b', '--']"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 118, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _get_part(self, s, decimal):\n        \"Strips first part of string containing either non-decimal or decimal characters.\" \\\n        + \" Returns tuple (part, remider).\"\n        div = 0\n        for c in s:\n            if decimal and not c.isdecimal():\n                break\n            elif not decimal and c.isdecimal():\n                break\n            else:\n                div += 1\n\n        return (s[:div], s[div:])\n\n_get_part(self=2.2.0~rc5, s='2.2.0~rc5', decimal=False, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "if decimal and not c.isdecimal():", "Function Input": {"self": "2.2.0~rc5", "s": "'2.2.0~rc5'", "decimal": "False", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"decimal": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "s": [[1, "'2.2.0~rc5'"]], "decimal": [[1, "False"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "div": [[4.0, "0"]], "c": [[5.0, "'2'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 93, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def find(lst, key, value):\n    for i, dic in enumerate(lst):\n        if dic[key] == value:\n            return i\n    return None\n\nfind(lst=[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}], key='Variable', value='something_not_there')", "Selected Statement": "if dic[key] == value:", "Function Input": {"lst": "[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}]", "key": "'Variable'", "value": "'something_not_there'"}, "Variable Values Before Statement": {"value": "'something_not_there'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"lst": [[1, "[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}]"]], "key": [[1, "'Variable'"]], "value": [[1, "'something_not_there'"]], "i": [[2.0, "0"], [2.0, "1"]], "dic": [[2.0, "{'Variable': 'jenkins_admin_password', 'Type': 'password'}"], [2.0, "{'Variable': 'ca_rootca_password', 'Type': 'password'}"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 71, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _identify_environment(environment=None):\n    \"\"\"\n    Returns the environment identifier.\n\n    There are multiple ways to define the default environment (in order\n    of priority):\n\n    1. The --environment command line option;\n    2. The content of the file .python_secrets_environment in the current\n       working directory;\n    3. The value specified by environment variable D2_ENVIRONMENT; or\n    4. The basename of the current working directory.\n    \"\"\"\n    cwd = os.getcwd()\n    if environment is None:\n        env_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(env_file):\n            with open(env_file, 'r') as f:\n                environment = f.read().replace('\\n', '')\n        else:\n            environment = os.getenv('D2_ENVIRONMENT',\n                                    os.path.basename(cwd))\n    return environment\n\n_identify_environment(environment=None)", "Selected Statement": "if environment is None:", "Function Input": {"environment": "None"}, "Variable Values Before Statement": {"environment": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"environment": [[1, "None"], [21.0, "'davedittrich+python_secrets'"]], "cwd": [[14.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "env_file": [[16.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 70, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def getLogger(name, stdout=None):\n    \"\"\" Return logger suitable for Cumulus \"\"\"\n    logger = logging.getLogger(name)\n    # clear existing handlers\n    logger.handlers = []\n    if (stdout is None):\n        logger.addHandler(logging.NullHandler())\n    if stdout is not None:\n        handler = logging.StreamHandler()\n        handler.setLevel(stdout['level'])\n        handler.setFormatter(CumulusFormatter())\n        logger.addHandler(handler)\n    # logging level\n    logger.setLevel(1)\n    return logger\n\ngetLogger(name='cumulus.aws', stdout=None)", "Selected Statement": "if stdout is not None:", "Function Input": {"name": "'cumulus.aws'", "stdout": "None"}, "Variable Values Before Statement": {"stdout": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"name": [[1, "'cumulus.aws'"]], "stdout": [[1, "None"]], "logger": [[3.0, "<Logger cumulus.aws (WARNING)>"], [14.0, "<Logger cumulus.aws (Level 1)>"]]}, "Program Information": "Project Name: amarouane-ABDLHAK+cumulus-process-py", "idx": 127, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def format_decimal(self, altitude=None):\n        \"\"\"\n        Format decimal degrees with altitude::\n\n            >>> p = Point(41.5, -81.0, 12.3)\n            >>> p.format_decimal()\n            '41.5, -81.0, 12.3km'\n            >>> p = Point(41.5, 0, 0)\n            >>> p.format_decimal()\n            '41.5, 0.0'\n\n        :param bool altitude: Whether to include ``altitude`` value.\n            By default it is automatically included if it is non-zero.\n        \"\"\"\n        coordinates = [str(self.latitude), str(self.longitude)]\n\n        if altitude is None:\n            altitude = bool(self.altitude)\n        if altitude:\n            if not isinstance(altitude, str):\n                altitude = 'km'\n            coordinates.append(self.format_altitude(altitude))\n\n        return \", \".join(coordinates)\n\nformat_decimal(self=Point(41.5, 81.0, 2.5), altitude=None, self.altitude=2.5, self.latitude=41.5, self.longitude=81.0)", "Selected Statement": "if altitude is None:", "Function Input": {"self": "Point(41.5, 81.0, 2.5)", "altitude": "None", "self.altitude": "2.5", "self.latitude": "41.5", "self.longitude": "81.0"}, "Variable Values Before Statement": {"altitude": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"self": [[1, "Point(41.5, 81.0, 2.5)"]], "altitude": [[1, "None"], [18.0, "True"], [21.0, "'km'"]], "self.altitude": [[1, "2.5"]], "self.latitude": [[1, "41.5"]], "self.longitude": [[1, "81.0"]], "coordinates": [[15.0, "['41.5', '81.0']"], [22.0, "['41.5', '81.0', '2.5km']"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 74, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def strtobool(val):\n    \"\"\"Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    \"\"\"\n    val = val.lower()\n    if val in ('y', 'yes', 't', 'true', 'on', '1'):\n        return 1\n    if val in ('n', 'no', 'f', 'false', 'off', '0'):\n        return 0\n    raise ValueError(f\"invalid truth value {val!r}\")\n\nstrtobool(val='False')", "Selected Statement": "if val in ('n', 'no', 'f', 'false', 'off', '0'):", "Function Input": {"val": "'False'"}, "Variable Values Before Statement": {"val": "'false'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"val": [[1, "'False'"], [8.0, "'false'"]]}, "Program Information": "Project Name: mher+flower", "idx": 105, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _replace_includesvg(content, svg_inkscape_files):\n  def repl_svg(matchobj):\n    svg_path = matchobj.group(2)\n    svg_filename = os.path.basename(svg_path)\n    # search in svg_inkscape split if pdf_tex file is available\n    matching_pdf_tex_files = _keep_pattern(\n        svg_inkscape_files, ['/' + svg_filename + '-tex.pdf_tex']\n    )\n    if len(matching_pdf_tex_files) == 1:\n      options = '' if matchobj.group(1) is None else matchobj.group(1)\n      return f'\\\\includeinkscape{options}{{{matching_pdf_tex_files[0]}}}'\n    else:\n      return matchobj.group(0)\n\n  content = regex.sub(r'\\\\includesvg(\\[.*?\\])?{(.*?)}', repl_svg, content)\n\n  return content\n\n_replace_includesvg(content='Foo\\\\includesvg{test2}\\nFoo', svg_inkscape_files=['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex'])", "Selected Statement": "content = regex.sub(r'\\\\includesvg(\\[.*?\\])?{(.*?)}', repl_svg, content)", "Function Input": {"content": "'Foo\\\\includesvg{test2}\\nFoo'", "svg_inkscape_files": "['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex']"}, "Variable Values Before Statement": {"repl_svg": "<function _replace_includesvg.<locals>.repl_svg at 0x7f1855304550>", "content": "'Foo\\\\includesvg{test2}\\nFoo'"}, "Value After Statement Execution": "'Foo\\\\includeinkscape{ext_svg/test2-tex.pdf_tex}\\nFoo'", "Variable States During Runtime": {"content": [[1, "'Foo\\\\includesvg{test2}\\nFoo'"], [15.0, "'Foo\\\\includeinkscape{ext_svg/test2-tex.pdf_tex}\\nFoo'"]], "svg_inkscape_files": [[1, "['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex']"]], "repl_svg": [[2.0, "<function _replace_includesvg.<locals>.repl_svg at 0x7f1855304550>"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 247, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def hmac_digest(secret, message, encoding=\"utf-8\"):\n    \"\"\"Return hex digest of a message HMAC using secret\"\"\"\n    if isinstance(secret, str):\n        secret = secret.encode(encoding)\n    return hmac.new(secret, message.encode(encoding), hashlib.sha256).hexdigest()\n\nhmac_digest(secret='secret_hmac_for_userids', message='mat:secret', encoding='utf-8')", "Selected Statement": "secret = secret.encode(encoding)", "Function Input": {"secret": "'secret_hmac_for_userids'", "message": "'mat:secret'", "encoding": "'utf-8'"}, "Variable Values Before Statement": {"encoding": "'utf-8'"}, "Value After Statement Execution": "b'secret_hmac_for_userids'", "Variable States During Runtime": {"secret": [[1, "'secret_hmac_for_userids'"], [4.0, "b'secret_hmac_for_userids'"]], "message": [[1, "'mat:secret'"]], "encoding": [[1, "'utf-8'"]]}, "Program Information": "Project Name: Kinto+kinto", "idx": 193, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def global_import(name):\n    p = __import__(name, globals(), locals(), level=1)\n    lst = p.__all__ if '__all__' in dir(p) else []\n    del globals()[name]\n    for k in lst:\n        if not k.startswith('__'):\n            globals()[k] = p.__dict__[k]\n            __all__.append(k)\n\nglobal_import(name='model_desc')", "Selected Statement": "p = __import__(name, globals(), locals(), level=1)", "Function Input": {"name": "'model_desc'"}, "Variable Values Before Statement": {"name": "'model_desc'"}, "Value After Statement Execution": "<module 'tensorpack.graph_builder.model_desc' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/graph_builder/model_desc.py'>", "Variable States During Runtime": {"name": [[1, "'model_desc'"]], "p": [[2.0, "<module 'tensorpack.graph_builder.model_desc' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/graph_builder/model_desc.py'>"]], "lst": [[3.0, "[]"]]}, "Program Information": "Project Name: tensorpack+tensorpack", "idx": 166, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def set_up_autotuning(encoded_config, overwrite_values):\n        config = json.loads(base64.urlsafe_b64decode(encoded_config).decode(\"utf-8\"))\n        overwrite_values = overwrite_values if overwrite_values else {}\n        for tuning_param in AUTOTUNING_ARGS:\n            # TODO: This is for autotuning specifically, may cause surprises for someone with a weird setup\n            if tuning_param in config:\n                overwrite_values[tuning_param] = config[tuning_param]\n        return overwrite_values\n\nset_up_autotuning(encoded_config='eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', overwrite_values={'train_iters': 32})", "Selected Statement": "config = json.loads(base64.urlsafe_b64decode(encoded_config).decode(\"utf-8\"))", "Function Input": {"encoded_config": "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='", "overwrite_values": "{'train_iters': 32}"}, "Variable Values Before Statement": {"encoded_config": "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='"}, "Value After Statement Execution": "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}", "Variable States During Runtime": {"encoded_config": [[1, "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='"]], "overwrite_values": [[1, "{'train_iters': 32}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "config": [[2.0, "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}"]], "tuning_param": [[4.0, "'train_batch_size'"], [4.0, "'train_micro_batch_size_per_gpu'"], [4.0, "'gradient_accumulation_steps'"], [4.0, "'zero_optimization'"], [4.0, "'autotuning'"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 344, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def byteatoms(characterstring):\n            binary = characterstring.encode()\n            atoms.extend(binary[i:i + 1] for i in range(len(binary)))\n\nbyteatoms(characterstring='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', atoms=[])", "Selected Statement": "atoms.extend(binary[i:i + 1] for i in range(len(binary)))", "Function Input": {"characterstring": "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'", "atoms": "[]"}, "Variable Values Before Statement": {"binary": "b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"}, "Value After Statement Execution": "[b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x']", "Variable States During Runtime": {"characterstring": [[1, "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"]], "atoms": [[1, "[]"], [3.0, "[b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x']"]], "binary": [[2.0, "b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"]]}, "Program Information": "Project Name: combatopera+lagoon", "idx": 371, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def partition(a, lo, hi):\n        i = lo\n        j = hi\n\n        while True:\n            while not util.less(a[lo], a[i]):\n                i += 1\n                if i >= hi:\n                    break\n\n            while util.less(a[lo], a[j]):\n                j -= 1\n                if j <= lo:\n                    break\n\n            if i >= j:\n                break\n\n            util.exchange(a, i, j)\n\n        util.exchange(a, lo, j)\n        return j\n\npartition(a=[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66], lo=0, hi=14)", "Selected Statement": "util.exchange(a, i, j)", "Function Input": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "lo": "0", "hi": "14"}, "Variable Values Before Statement": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "i": "4", "j": "3"}, "Value After Statement Execution": "[4, 2, 1, 4, 23, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "Variable States During Runtime": {"a": [[1, "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [19.0, "[4, 2, 1, 4, 23, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"]], "lo": [[1, "0"]], "hi": [[1, "14"]], "i": [[2.0, "0"], [7.0, "1"], [7.0, "2"], [7.0, "3"], [7.0, "4"]], "j": [[3.0, "14"], [12.0, "13"], [12.0, "12"], [12.0, "11"], [12.0, "10"], [12.0, "9"], [12.0, "8"], [12.0, "7"], [12.0, "6"], [12.0, "5"], [12.0, "4"], [12.0, "3"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 196, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def deep_extend(*args):\n        \"\"\"\n        Deep copy of each item (\"extend\" makes swallow copy!)\n        \"\"\"\n        def clone_obj(item):\n            if isinstance(item, dict):\n                return dict(**item)\n            if isinstance(item, (list, tuple)):\n                return list(item)\n            return None\n\n        def iterator(item, i, iterable):\n            obj = clone_obj(item)\n            if obj is None:\n                iterable[i] = item\n            else:\n                if isinstance(obj, dict):\n                    iterable[i] = deep_extend({}, obj)\n                elif isinstance(obj, (list, tuple)):\n                    FuncFlow.each(obj, iterator)\n                    iterable[i] = obj\n                else:\n                    raise TypeError(\"deep_copy cannot handle this type: {}\".format(type(obj)))\n            \n        args = list(args)\n        dest = args.pop(0)\n\n        for source in args:\n            if source:\n                for k, v in source.items():\n                    obj = clone_obj(v)\n                    if obj is None:\n                        dest[k] = v\n                    else:\n                        FuncFlow.each(obj, iterator)\n                        dest[k] = obj\n        return dest\n\ndeep_extend(args=(2,))", "Selected Statement": "args = list(args)", "Function Input": {"args": "(2,)"}, "Variable Values Before Statement": {"args": "(2,)"}, "Value After Statement Execution": "[2]", "Variable States During Runtime": {"args": [[1, "(2,)"], [25.0, "[2]"], [26.0, "[]"]], "clone_obj": [[5.0, "<function FuncFlow.deep_extend.<locals>.clone_obj at 0x7f4e6dc12d30>"]], "iterator": [[12.0, "<function FuncFlow.deep_extend.<locals>.iterator at 0x7f4e6dc12c10>"]], "dest": [[26.0, "2"]]}, "Program Information": "Project Name: danwin+fairways_py", "idx": 265, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "rows.append(row)", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {"row": "'##################'"}, "Value After Statement Execution": "['##################']", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 263, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def cat(args: list = None) -> None:\n    \"\"\"\n        Parses a plist on an iOS device and echoes it in a more human\n        readable way.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios plist cat <remote_plist>', bold=True)\n        return\n\n    plist = args[0]\n\n    if not os.path.isabs(plist):\n        pwd = filemanager.pwd()\n        plist = device_state.platform.path_separator.join([pwd, plist])\n\n    api = state_connection.get_api()\n    plist_data = api.ios_plist_read(plist)\n\n    click.secho(plist_data, bold=True)\n\ncat(args=['/foo'])", "Selected Statement": "plist_data = api.ios_plist_read(plist)", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"plist": "'/foo'"}, "Value After Statement Execution": "'foo'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "plist": [[14.0, "'/foo'"]], "api": [[20.0, "<MagicMock name='get_api()' id='140041837108288'>"]], "plist_data": [[21.0, "'foo'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 353, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_echo_via_pager(monkeypatch, capfd, cat):\n    monkeypatch.setitem(os.environ, 'PAGER', cat)\n    monkeypatch.setattr(click._termui_impl, 'isatty', lambda x: True)\n    click.echo_via_pager('haha')\n    out, err = capfd.readouterr()\n    assert out == 'haha\\n'\n\ntest_echo_via_pager(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, capfd={request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}, cat='cat')", "Selected Statement": "monkeypatch.setitem(os.environ, 'PAGER', cat)", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "capfd": "{request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}", "cat": "'cat'"}, "Variable Values Before Statement": {"cat": "'cat'"}, "Value After Statement Execution": "{_setattr", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [2.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/MrTango+click', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(MrTango+click) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'cat', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'MrTango+click', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/MrTango+click/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/MrTango+click/bin/python', 'PYTEST_CURRENT_TEST': 'tests/test_utils.py::test_echo_via_pager[cat] (call)'}), 'PAGER', 'less')], _cwd=None, _savesyspath=None}"], [3.0, "{_setattr=[(<module 'click._termui_impl' from '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click/click/_termui_impl.py'>, 'isatty', <function isatty at 0x7fe6e9757e50>)], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/MrTango+click', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(MrTango+click) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'cat', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'MrTango+click', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/MrTango+click/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/MrTango+click/bin/python', 'PYTEST_CURRENT_TEST': 'tests/test_utils.py::test_echo_via_pager[cat] (call)'}), 'PAGER', 'less')], _cwd=None, _savesyspath=None}"]], "capfd": [[1, "{request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}"]], "cat": [[1, "'cat'"]], "out": [[5.0, "'haha\\n'"]], "err": [[5.0, "''"]], "@py_assert2": [[6.0, "None"]], "@py_assert1": [[6.0, "None"]]}, "Program Information": "Project Name: MrTango+click", "idx": 212, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _load_global_committers(path: str) -> List[Committer]:\n    lines = read_lines(path)\n    committers = []\n    for line in lines:\n        initials, name, email = line.rstrip().split(',')\n        committers.append(GlobalCommitter(initials=initials, name=name, email=email))\n    return committers\n\n_load_global_committers(path='/home/XXX/.guet/committers')", "Selected Statement": "lines = read_lines(path)", "Function Input": {"path": "'/home/XXX/.guet/committers'"}, "Variable Values Before Statement": {"path": "'/home/XXX/.guet/committers'"}, "Value After Statement Execution": "['initials,name,email\\n']", "Variable States During Runtime": {"path": [[1, "'/home/XXX/.guet/committers'"]], "lines": [[2.0, "['initials,name,email\\n']"]], "committers": [[3.0, "[]"], [6.0, "[<guet.committers.global_committer.GlobalCommitter object at 0x7fc0ad6a46a0>]"]], "line": [[4.0, "'initials,name,email\\n'"]], "initials": [[5.0, "'initials'"]], "name": [[5.0, "'name'"]], "email": [[5.0, "'email'"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 232, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def authenticate(pattern, email):\n    if '|' in pattern:\n        return email in pattern.split('|')\n    if '*' in pattern:\n        pattern = re.escape(pattern).replace(r'\\.\\*', r\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\-]*\")\n        return re.fullmatch(pattern, email)\n    return pattern == email\n\nauthenticate(pattern='.*@example.com', email='one@example.com')", "Selected Statement": "pattern = re.escape(pattern).replace(r'\\.\\*', r\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\-]*\")", "Function Input": {"pattern": "'.*@example.com'", "email": "'one@example.com'"}, "Variable Values Before Statement": {"pattern": "'.*@example.com'"}, "Value After Statement Execution": "\"[A-Za-z0-9!#$%&'*+/", "Variable States During Runtime": {"pattern": [[1, "'.*@example.com'"], [5.0, "\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\\\-]*@example\\\\.com\""]], "email": [[1, "'one@example.com'"]]}, "Program Information": "Project Name: mher+flower", "idx": 229, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _prep_ordered_arg(desired_length, arguments=None):\n    \"\"\"Ensure list of arguments passed to add_ordered_transitions has the proper length.\n    Expands the given arguments and apply same condition, callback\n    to all transitions if only one has been given.\n\n    Args:\n        desired_length (int): The size of the resulting list\n        arguments (optional[str, reference or list]): Parameters to be expanded.\n    Returns:\n        list: Parameter sets with the desired length.\n    \"\"\"\n    arguments = listify(arguments) if arguments is not None else [None]\n    if len(arguments) != desired_length and len(arguments) != 1:\n        raise ValueError(\"Argument length must be either 1 or the same length as \"\n                         \"the number of transitions.\")\n    if len(arguments) == 1:\n        return arguments * desired_length\n    return arguments\n\n_prep_ordered_arg(desired_length=3, arguments=None)", "Selected Statement": "arguments = listify(arguments) if arguments is not None else [None]", "Function Input": {"desired_length": "3", "arguments": "None"}, "Variable Values Before Statement": {"arguments": "None"}, "Value After Statement Execution": "[None]", "Variable States During Runtime": {"desired_length": [[1, "3"]], "arguments": [[1, "None"], [12.0, "[None]"]]}, "Program Information": "Project Name: pytransitions+transitions", "idx": 390, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_split_img_txt_da(inputs):\n    txt_da = DocumentArray()\n    img_da = DocumentArray()\n    for doc in inputs[0]:\n        split_img_txt_da(doc, img_da, txt_da)\n    assert len(txt_da) == inputs[1][0]\n    assert len(img_da) == inputs[1][1]\n\ntest_split_img_txt_da(inputs=(<DocumentArray (length=4) at 140538627068688>, (3, 1)))", "Selected Statement": "assert len(txt_da) == inputs[1][0]", "Function Input": {"inputs": "(<DocumentArray (length=4) at 140538627068688>, (3, 1))"}, "Variable Values Before Statement": {"txt_da": "<DocumentArray (length=3) at 140537876329136>"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"inputs": [[1, "(<DocumentArray (length=4) at 140538627068688>, (3, 1))"]], "txt_da": [[2.0, "<DocumentArray (length=0) at 140537876329136>"], [5.0, "<DocumentArray (length=1) at 140537876329136>"], [5.0, "<DocumentArray (length=2) at 140537876329136>"], [5.0, "<DocumentArray (length=3) at 140537876329136>"]], "img_da": [[3.0, "<DocumentArray (length=0) at 140537876330432>"], [5.0, "<DocumentArray (length=1) at 140537876330432>"]], "doc": [[4.0, "<Document ('id', 'text') at 4f6626f35426c735426ec7292e9a1f16>"], [4.0, "<Document ('id', 'text') at d6d91a560e93b578961de0cda87d7354>"], [4.0, "<Document ('id', 'mime_type', 'text', 'uri') at 0bc25489570139a4fb1df04f2c8f3441>"], [4.0, "<Document ('id', 'mime_type', 'uri') at 661ab035d871096f43200d69a11270ad>"]], "@py_assert2": [[6.0, "None"]], "@py_assert5": [[6.0, "None"]], "@py_assert4": [[6.0, "None"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 223, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def is_lt(value, rep=None):\n    if rep is None:\n        rep = repr(value)\n\n    def is_valid(data, explain=False):\n        if not explain:\n            return data < value\n        return (\n            True, 'data is lower than {}'.format(rep)\n        ) if data < value else (\n            False, 'data is not lower than {}'.format(rep)\n        )\n    return is_valid\n\nis_lt(value=0, rep=None)", "Selected Statement": "rep = repr(value)", "Function Input": {"value": "0", "rep": "None"}, "Variable Values Before Statement": {"value": "0"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"value": [[1, "0"]], "rep": [[1, "None"], [3.0, "'0'"]], "is_valid": [[5.0, "<function is_lt.<locals>.is_valid at 0x7fde765b6040>"]]}, "Program Information": "Project Name: daanvdk+is_valid", "idx": 278, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def det_hess(u):\n    \"\"\"\n    Get the determinant of the Hessian matrix of `u`.\n\n    Parameters\n    ----------\n    * `u` : numpy.ndarray\n        The ndarray input with shape (n0+2, n1+2, ..., nd1+2).\n\n    Returns\n    -------\n    * numpy.ndarray\n        The ndarray of the second grad of `u` with shape (n0, n1, ..., nd1).\n    \"\"\"\n    ndim = np.ndim(u)\n    inshape = np.asarray(u.shape)\n    outshape = list(inshape - 2)\n\n    # obtain the second gradient per each pairs of axes\n    hess_unarranged = np.zeros([ndim, ndim] + outshape)\n    for i in range(ndim):\n        for j in range(i,ndim):\n            grad2_val = grad2(u, (i,j))\n            hess_unarranged[i,j] = grad2_val\n            hess_unarranged[j,i] = grad2_val\n\n    # rearrange hessian to have shape: outshape + [ndim, ndim]\n    perm_idx = list(range(2,ndim+2)) + list(range(2))\n    hess = np.transpose(hess_unarranged, perm_idx)\n\n    # calculate and return the determinant\n    return np.linalg.det(hess)\n\ndet_hess(u=array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.]))", "Selected Statement": "hess = np.transpose(hess_unarranged, perm_idx)", "Function Input": {"u": "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"}, "Variable Values Before Statement": {"hess_unarranged": "array([[[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,         2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]]])", "perm_idx": "[2, 0, 1]"}, "Value After Statement Execution": "array([[[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]]])", "Variable States During Runtime": {"u": [[1, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ndim": [[15.0, "1"]], "inshape": [[16.0, "array([32])"]], "outshape": [[17.0, "[30]"]], "hess_unarranged": [[20.0, "array([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])"], [24.0, "array([[[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,         2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]]])"]], "i": [[21.0, "0"]], "j": [[22.0, "0"]], "grad2_val": [[23.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "perm_idx": [[28.0, "[2, 0, 1]"]], "hess": [[29.0, "array([[[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]]])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 310, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _add_committer_to_committers(all_committers: List[str], initials: str, name: str, email: str):\n    committer_formatted = f'{initials},{name},{email}\\n'\n    committer_position = _position_of_committer_with_initials(all_committers, initials)\n    if committer_position is _COMMITTER_NOT_PRESENT:\n        all_committers.append(committer_formatted)\n    else:\n        all_committers[committer_position] = committer_formatted\n\n_add_committer_to_committers(all_committers=[], initials='initials3', name='name3', email='email3')", "Selected Statement": "committer_position = _position_of_committer_with_initials(all_committers, initials)", "Function Input": {"all_committers": "[]", "initials": "'initials3'", "name": "'name3'", "email": "'email3'"}, "Variable Values Before Statement": {"all_committers": "[]", "initials": "'initials3'"}, "Value After Statement Execution": "-1", "Variable States During Runtime": {"all_committers": [[1, "[]"], [5.0, "['initials3,name3,email3\\n']"]], "initials": [[1, "'initials3'"]], "name": [[1, "'name3'"]], "email": [[1, "'email3'"]], "committer_formatted": [[2.0, "'initials3,name3,email3\\n'"]], "committer_position": [[3.0, "-1"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 230, "quantized value": "Negative Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_google_drive_folder_location():\n    \"\"\"\n    Try to locate the Google Drive folder.\n\n    Returns:\n        (str) Full path to the current Google Drive folder\n    \"\"\"\n    gdrive_db_path = \"Library/Application Support/Google/Drive/sync_config.db\"\n    yosemite_gdrive_db_path = (\n        \"Library/Application Support/Google/Drive/\" \"user_default/sync_config.db\"\n    )\n    yosemite_gdrive_db = os.path.join(os.environ[\"HOME\"], yosemite_gdrive_db_path)\n    if os.path.isfile(yosemite_gdrive_db):\n        gdrive_db_path = yosemite_gdrive_db\n\n    googledrive_home = None\n\n    gdrive_db = os.path.join(os.environ[\"HOME\"], gdrive_db_path)\n    if os.path.isfile(gdrive_db):\n        con = sqlite3.connect(gdrive_db)\n        if con:\n            cur = con.cursor()\n            query = (\n                \"SELECT data_value \"\n                \"FROM data \"\n                \"WHERE entry_key = 'local_sync_root_path';\"\n            )\n            cur.execute(query)\n            data = cur.fetchone()\n            googledrive_home = str(data[0])\n            con.close()\n\n    if not googledrive_home:\n        error(\n            constants.ERROR_UNABLE_TO_FIND_STORAGE.format(\n                provider=\"Google Drive install\"\n            )\n        )\n\n    return googledrive_home\n\nget_google_drive_folder_location()", "Selected Statement": "con = sqlite3.connect(gdrive_db)", "Function Input": {}, "Variable Values Before Statement": {"gdrive_db": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/sync_config.db'"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"gdrive_db_path": [[8.0, "'Library/Application Support/Google/Drive/sync_config.db'"]], "yosemite_gdrive_db_path": [[9.0, "'Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "yosemite_gdrive_db": [[12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "googledrive_home": [[16.0, "None"], [30.0, "'/Users/whatever/Google Drive'"]], "gdrive_db": [[18.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/sync_config.db'"]], "con": [[20.0, "REPR FAILED"]], "cur": [[22.0, "REPR FAILED"]], "query": [[23.0, "\"SELECT data_value FROM data WHERE entry_key = 'local_sync_root_path';\""]], "data": [[29.0, "('/Users/whatever/Google Drive',)"]]}, "Program Information": "Project Name: lra+mackup", "idx": 197, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def show_ios_class_methods(args: list) -> None:\n    \"\"\"\n        Displays the methods available in a class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: ios hooking list class_methods <class name> (--include-parents)', bold=True)\n        return\n\n    classname = args[0]\n\n    api = state_connection.get_api()\n    methods = api.ios_hooking_get_class_methods(classname, _should_include_parent_methods(args))\n\n    if len(methods) > 0:\n\n        # dump the methods to screen\n        for method in methods:\n            click.secho(method)\n\n        click.secho('\\nFound {0} methods'.format(len(methods)), bold=True)\n\n    else:\n        click.secho('No class / methods found')\n\nshow_ios_class_methods(args=['TEKeychainManager'])", "Selected Statement": "methods = api.ios_hooking_get_class_methods(classname, _should_include_parent_methods(args))", "Function Input": {"args": "['TEKeychainManager']"}, "Variable Values Before Statement": {"classname": "'TEKeychainManager'"}, "Value After Statement Execution": "['foo', 'bar']", "Variable States During Runtime": {"args": [[1, "['TEKeychainManager']"]], "classname": [[13.0, "'TEKeychainManager'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041837197248'>"]], "methods": [[16.0, "['foo', 'bar']"]], "method": [[21.0, "'foo'"], [21.0, "'bar'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 352, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def quat_from_axis_angle(axis, angle):\n        axis_ = np.array(axis, dtype=np.float64)\n        half_angle = angle * 0.5\n        ret = np.empty(4)\n        ret[0] = math.cos(half_angle)\n        ret[1:4] = math.sin(half_angle) * axis_\n        return ret\n\nquat_from_axis_angle(axis=[1.0, 0.0, 0.0], angle=6.1086523819801535)", "Selected Statement": "ret[1:4] = math.sin(half_angle) * axis_", "Function Input": {"axis": "[1.0, 0.0, 0.0]", "angle": "6.1086523819801535"}, "Variable Values Before Statement": {"half_angle": "3.0543261909900767"}, "Value After Statement Execution": "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])", "Variable States During Runtime": {"axis": [[1, "[1.0, 0.0, 0.0]"]], "angle": [[1, "6.1086523819801535"]], "axis_": [[2.0, "array([1., 0., 0.])"]], "half_angle": [[3.0, "3.0543261909900767"]], "ret": [[4.0, "array([4.65265954e-310, 0.00000000e+000, 1.58101007e-322, 6.90572610e-310])"], [5.0, "array([-9.96194698e-001,  0.00000000e+000,  1.58101007e-322,        6.90572610e-310])"], [6.0, "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])"]]}, "Program Information": "Project Name: Hasenpfote+fpq", "idx": 392, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def article_missing(field: str):\n    article = Article(\n        title=None, authors=[\"L, Robertson\"], year=1999, journal=\"Science\"\n    )\n    setattr(article, field, None)\n    return ArticleWrapper(article=article)\n\narticle_missing(field='year')", "Selected Statement": "setattr(article, field, None)", "Function Input": {"field": "'year'"}, "Variable Values Before Statement": {"article": "{title=None, authors=['L, Robertson'], keywords=[], year=1999, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}", "field": "'year'"}, "Value After Statement Execution": "{title", "Variable States During Runtime": {"field": [[1, "'year'"]], "article": [[2.0, "{title=None, authors=['L, Robertson'], keywords=[], year=1999, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}"], [5.0, "{title=None, authors=['L, Robertson'], keywords=[], year=None, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}"]]}, "Program Information": "Project Name: coreofscience+python-wostools", "idx": 175, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _pad_conserve_grads(phi):\n    # pad by conserving the edge gradients\n    ndim = np.ndim(phi)\n    pw = [1, 1]\n    pp = np.pad(phi, [tuple(pw)]*ndim, mode=\"constant\")\n    for dim in range(ndim):\n        # get the indices first\n        idx_pad0_l = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))\n        idx_pad0 = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_fill = _get_idx(ndim, dim, slice(None, pw[0], None))\n        idx_pad1_l = _get_idx(ndim, dim, slice(-pw[1]-2, -pw[1]-1, None))\n        idx_pad1_r = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1 = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1_fill = _get_idx(ndim, dim, slice(-pw[1], None, None))\n\n        # now get the padded values\n        grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)\n        grad1 = pp[idx_pad1_r] - pp[idx_pad1_l]\n        pad_arange0 = np.arange(-pw[0],0) # (1, ..., ndim=pw[i], ..., 1)\n        pad_arange1 = np.arange(1,pw[0]+1)\n        pad0 = pad_arange0 * grad0 + pp[idx_pad0] # (n0,...,ndim=pw[i],...,nd1)\n        pad1 = pad_arange1 * grad1 + pp[idx_pad1]\n        pp[idx_pad0_fill] = pad0\n        pp[idx_pad1_fill] = pad1\n\n    return pp\n\n_pad_conserve_grads(phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))", "Function Input": {"phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"ndim": "1", "dim": "0"}, "Value After Statement Execution": "(slice(2, 3, None),)", "Variable States During Runtime": {"phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "ndim": [[3.0, "1"]], "pw": [[4.0, "[1, 1]"]], "pp": [[5.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "dim": [[6.0, "0"]], "idx_pad0_l": [[8.0, "(slice(1, 2, None),)"]], "idx_pad0_r": [[9.0, "(slice(2, 3, None),)"]], "idx_pad0": [[10.0, "(slice(1, 2, None),)"]], "idx_pad0_fill": [[11.0, "(slice(None, 1, None),)"]], "idx_pad1_l": [[12.0, "(slice(-3, -2, None),)"]], "idx_pad1_r": [[13.0, "(slice(-2, -1, None),)"]], "idx_pad1": [[14.0, "(slice(-2, -1, None),)"]], "idx_pad1_fill": [[15.0, "(slice(-1, None, None),)"]], "grad0": [[18.0, "array([0.])"]], "grad1": [[19.0, "array([0.])"]], "pad_arange0": [[20.0, "array([-1])"]], "pad_arange1": [[21.0, "array([1])"]], "pad0": [[22.0, "array([0.])"]], "pad1": [[23.0, "array([0.])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 313, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def div(self, other, precision=18):\n        distance = precision - self.decimals + other.decimals\n        if distance == 0:\n            numerator = self.integer\n        elif distance < 0:\n            exponent = self.base ** -distance\n            numerator = self.integer // exponent\n        else:\n            exponent = self.base ** distance\n            numerator = self.integer * exponent\n        result, mod = divmod(numerator, other.integer)\n        # python floors negative numbers down instead of truncating\n        # if mod is zero it will be floored to itself so we do not add one\n        result = result + 1 if result < 0 and mod else result\n        return Precise(result, precision)\n\ndiv(self=Precise(0.00000002), other=Precise(69696900000), precision=1, self.base=10, self.decimals=8, self.integer=2)", "Selected Statement": "result, mod = divmod(numerator, other.integer)", "Function Input": {"self": "Precise(0.00000002)", "other": "Precise(69696900000)", "precision": "1", "self.base": "10", "self.decimals": "8", "self.integer": "2"}, "Variable Values Before Statement": {"numerator": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "Precise(0.00000002)"]], "other": [[1, "Precise(69696900000)"]], "precision": [[1, "1"]], "self.base": [[1, "10"]], "self.decimals": [[1, "8"]], "self.integer": [[1, "2"]], "distance": [[2.0, "-12"]], "exponent": [[6.0, "1000000000000"]], "numerator": [[7.0, "0"]], "result": [[11.0, "0"]], "mod": [[11.0, "0"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 378, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def abs_path(path):\n    path = os.path.expanduser(path)\n    if not os.path.isabs(path):\n        cwd = os.environ.get('PWD') or os.getcwd()\n        path = os.path.join(cwd, path)\n    return path\n\nabs_path(path='~/file.txt')", "Selected Statement": "path = os.path.expanduser(path)", "Function Input": {"path": "'~/file.txt'"}, "Variable Values Before Statement": {"path": "'~/file.txt'"}, "Value After Statement Execution": "'/home/XXX/file.txt'", "Variable States During Runtime": {"path": [[1, "'~/file.txt'"], [2.0, "'/home/XXX/file.txt'"]]}, "Program Information": "Project Name: mher+flower", "idx": 228, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def load_json_dict(filename, *args):\n    \"\"\"Checks if file exists. Returns {} if something fails.\"\"\"\n    data = {}\n    if os.path.exists(filename):\n        lock.acquire()\n        with open(filename, \"r\") as f:\n            try:\n                data = _json.load(f)\n                if not isinstance(data, dict):\n                    data = {}\n            except:\n                data = {}  # TODO: issue a warning and bubble it up\n        lock.release()\n        if args:\n            return {key: data[key] for key in args if key in data}\n    return data\n\nload_json_dict(filename='/home/XXX/.plotly/.config', args=())", "Selected Statement": "with open(filename, \"r\") as f:", "Function Input": {"filename": "'/home/XXX/.plotly/.config'", "args": "()"}, "Variable Values Before Statement": {"filename": "'/home/XXX/.plotly/.config'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"filename": [[1, "'/home/XXX/.plotly/.config'"]], "args": [[1, "()"]], "data": [[3.0, "{}"], [8.0, "{'plotly_domain': 'https://plot.ly', 'plotly_streaming_domain': 'stream.plot.ly', 'plotly_api_domain': 'https://api.plot.ly', 'plotly_ssl_verification': True, 'plotly_proxy_authorization': False, 'world_readable': True, 'sharing': 'public', 'auto_open': True}"]], "f": [[6.0, "<_io.TextIOWrapper name='/home/XXX/.plotly/.config' mode='r' encoding='UTF-8'>"]]}, "Program Information": "Project Name: plotly+plotly.py", "idx": 304, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "with open(file_path, \"w\") as f:", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"file_path": "'/tmp/tmp6qrrn_j9'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 252, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def transform_path_to_dotted(sys_path, module_path):\n    \"\"\"\n    Returns the dotted path inside a sys.path as a list of names. e.g.\n\n    >>> transform_path_to_dotted([str(Path(\"/foo\").absolute())], Path('/foo/bar/baz.py').absolute())\n    (('bar', 'baz'), False)\n\n    Returns (None, False) if the path doesn't really resolve to anything.\n    The second return part is if it is a package.\n    \"\"\"\n    # First remove the suffix.\n    module_path = remove_python_path_suffix(module_path)\n    if module_path.name.startswith('.'):\n        return None, False\n\n    # Once the suffix was removed we are using the files as we know them. This\n    # means that if someone uses an ending like .vim for a Python file, .vim\n    # will be part of the returned dotted part.\n\n    is_package = module_path.name == '__init__'\n    if is_package:\n        module_path = module_path.parent\n\n    def iter_potential_solutions():\n        for p in sys_path:\n            if str(module_path).startswith(p):\n                # Strip the trailing slash/backslash\n                rest = str(module_path)[len(p):]\n                # On Windows a path can also use a slash.\n                if rest.startswith(os.path.sep) or rest.startswith('/'):\n                    # Remove a slash in cases it's still there.\n                    rest = rest[1:]\n\n                if rest:\n                    split = rest.split(os.path.sep)\n                    if not all(split):\n                        # This means that part of the file path was empty, this\n                        # is very strange and is probably a file that is called\n                        # `.py`.\n                        return\n                    # Stub folders for foo can end with foo-stubs. Just remove\n                    # it.\n                    yield tuple(re.sub(r'-stubs$', '', s) for s in split)\n\n    potential_solutions = tuple(iter_potential_solutions())\n    if not potential_solutions:\n        return None, False\n    # Try to find the shortest path, this makes more sense usually, because the\n    # user usually has venvs somewhere. This means that a path like\n    # .tox/py37/lib/python3.7/os.py can be normal for a file. However in that\n    # case we definitely want to return ['os'] as a path and not a crazy\n    # ['.tox', 'py37', 'lib', 'python3.7', 'os']. Keep in mind that this is a\n    # heuristic and there's now ay to \"always\" do it right.\n    return sorted(potential_solutions, key=lambda p: len(p))[0], is_package\n\ntransform_path_to_dotted(sys_path=['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg'], module_path=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py'))", "Selected Statement": "module_path = remove_python_path_suffix(module_path)", "Function Input": {"sys_path": "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg']", "module_path": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"}, "Variable Values Before Statement": {"module_path": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"}, "Value After Statement Execution": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example')", "Variable States During Runtime": {"sys_path": [[1, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg']"]], "module_path": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"], [12.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example')"]], "is_package": [[20.0, "False"]], "iter_potential_solutions": [[24.0, "<function transform_path_to_dotted.<locals>.iter_potential_solutions at 0x7f5855feec10>"]], "potential_solutions": [[45.0, "(('example',), ('logs', 'self_collected', 'tried', 'davidhalter+jedi', 'davidhalter+jedi', 'example'))"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 254, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def config_dict(configuration_tuple):\n    config_dict = {}\n\n    config_file = configuration_tuple._asdict().get('CFG')\n    if config_file is None:\n        config_file = configfile.get_config_path(configuration_tuple)\n\n    if config_file is not None:\n        config_dict = utils.filter_fields(configfile.read_config(config_file), configuration_tuple)\n        config_dict = utils.type_correct_with(config_dict, configuration_tuple)\n\n    return config_dict\n\nconfig_dict(configuration_tuple={})", "Selected Statement": "config_dict = utils.type_correct_with(config_dict, configuration_tuple)", "Function Input": {"configuration_tuple": "{}"}, "Variable Values Before Statement": {"config_dict": "{'bar': '42'}", "configuration_tuple": "{}"}, "Value After Statement Execution": "{'bar': 42}", "Variable States During Runtime": {"configuration_tuple": [[1, "{}"]], "config_dict": [[2.0, "{}"], [9.0, "{'bar': '42'}"], [10.0, "{'bar': 42}"]], "config_file": [[4.0, "None"], [6.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 274, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def secrets_dir(env=os.getenv('D2_ENVIRONMENT', None),\n                basedir=os.getenv('D2_SECRETS_BASEDIR', None)):\n    if env is not None:\n        env_str = str(env)\n    else:\n        cwd = os.getcwd()\n        default_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(default_file):\n            with open(default_file, 'r') as f:\n                env_str = f.read().strip()\n        else:\n            env_str = os.path.basename(cwd)\n    if basedir is None:\n        basedir = os.path.join(\n                HOME,\n                'secrets' if sys.platform.startswith('win') else '.secrets')\n    return os.path.join(basedir, env_str)\n\nsecrets_dir(env=None, basedir=None)", "Selected Statement": "default_file = os.path.join(cwd, '.python_secrets_environment')", "Function Input": {"env": "None", "basedir": "None"}, "Variable Values Before Statement": {"cwd": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'", "Variable States During Runtime": {"env": [[1, "None"]], "basedir": [[1, "None"], [14.0, "'/home/XXX/.secrets'"]], "cwd": [[6.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "default_file": [[7.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]], "env_str": [[12.0, "'davedittrich+python_secrets'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 159, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def glob_absolute_paths(file: Union[str, Path]) -> List[Path]:\n            path = Path(file)\n            if not path.is_absolute():\n                path = base / path\n            return sorted(path.parent.glob(path.name), key=lambda p: p.stem)\n\nglob_absolute_paths(file='aggrid.js', base=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements'))", "Selected Statement": "path = Path(file)", "Function Input": {"file": "'aggrid.js'", "base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"}, "Variable Values Before Statement": {"file": "'aggrid.js'"}, "Value After Statement Execution": "PosixPath('aggrid.js')", "Variable States During Runtime": {"file": [[1, "'aggrid.js'"]], "base": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"]], "path": [[2.0, "PosixPath('aggrid.js')"], [4.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 349, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def format_filename(filename, shorten=False):\n    \"\"\"Formats a filename for user display.  The main purpose of this\n    function is to ensure that the filename can be displayed at all.  This\n    will decode the filename to unicode if necessary in a way that it will\n    not fail.  Optionally, it can shorten the filename to not include the\n    full path to the filename.\n\n    :param filename: formats a filename for UI display.  This will also convert\n                     the filename into unicode without failing.\n    :param shorten: this optionally shortens the filename to strip of the\n                    path that leads up to it.\n    \"\"\"\n    if shorten:\n        filename = os.path.basename(filename)\n    return filename_to_ui(filename)\n\nformat_filename(filename='/x/foo.txt', shorten=True)", "Selected Statement": "filename = os.path.basename(filename)", "Function Input": {"filename": "'/x/foo.txt'", "shorten": "True"}, "Variable Values Before Statement": {"filename": "'/x/foo.txt'"}, "Value After Statement Execution": "'foo.txt'", "Variable States During Runtime": {"filename": [[1, "'/x/foo.txt'"], [14.0, "'foo.txt'"]], "shorten": [[1, "True"]]}, "Program Information": "Project Name: MrTango+click", "idx": 211, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def random_port():\n        port = helper.random_port()\n        while port in generated_ports:\n            port = helper.random_port()\n        generated_ports.add(port)\n        return port\n\nrandom_port(generated_ports=set())", "Selected Statement": "generated_ports.add(port)", "Function Input": {"generated_ports": "set()"}, "Variable Values Before Statement": {"port": "56663"}, "Value After Statement Execution": "{56663}", "Variable States During Runtime": {"generated_ports": [[1, "set()"], [5.0, "{56663}"]], "port": [[2.0, "56663"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 222, "quantized value": "Non-Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def class_to_tg(sub_class: str):\n    trans = {\"Online\": \"_online\", \"Offline\": \"_offline\"}\n\n    for upper, lower in trans.items():\n        sub_class = sub_class.replace(upper, lower)\n\n    return sub_class.lower()\n\nclass_to_tg(sub_class='YYeTsOffline')", "Selected Statement": "sub_class = sub_class.replace(upper, lower)", "Function Input": {"sub_class": "'YYeTsOffline'"}, "Variable Values Before Statement": {"upper": "'Offline'", "lower": "'_offline'"}, "Value After Statement Execution": "'YYeTs_offline'", "Variable States During Runtime": {"sub_class": [[1, "'YYeTsOffline'"], [5.0, "'YYeTs_offline'"]], "trans": [[2.0, "{'Online': '_online', 'Offline': '_offline'}"]], "upper": [[4.0, "'Online'"], [4.0, "'Offline'"]], "lower": [[4.0, "'_online'"], [4.0, "'_offline'"]]}, "Program Information": "Project Name: tgbot-collection+YYeTsBot", "idx": 399, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def contains_sublist(list_: List[Any], sublist: List[Any]) -> bool:\n    \"\"\"Determine if a `list` contains a `sublist`.\n\n    :param list_:\n        list to search for the `sublist` in.\n    :param sublist:\n        Sub list to search for.\n\n    :return:\n        True if `list` contains `sublist`.\n\n    \"\"\"\n    # Adapted from: https://stackoverflow.com/a/12576755\n    if not sublist:\n        return False\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return True\n    return False\n\ncontains_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "for i in range(len(list_)):", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"list_": "[1, 2, 3, 4]"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[16.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 341, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def elapsed_text(seconds, precise, prefix=''):\n    seconds = round(seconds, 1 if precise else 0)\n    if seconds < 60.:\n        return '{}{:{}f}s'.format(prefix, seconds, .1 if precise else .0)\n\n    minutes, seconds = divmod(seconds, 60.)\n    if minutes < 60.:\n        return '{}{:.0f}:{:0{}f}'.format(prefix, minutes, seconds, 4.1 if precise else 2.0)\n\n    hours, minutes = divmod(minutes, 60.)\n    return '{}{:.0f}:{:02.0f}:{:0{}f}'.format(prefix, hours, minutes, seconds,\n                                              4.1 if precise else 2.0)\n\nelapsed_text(seconds=1.23, precise=True, prefix='')", "Selected Statement": "seconds = round(seconds, 1 if precise else 0)", "Function Input": {"seconds": "1.23", "precise": "True", "prefix": "''"}, "Variable Values Before Statement": {"seconds": "1.23"}, "Value After Statement Execution": "1.2", "Variable States During Runtime": {"seconds": [[1, "1.23"], [2.0, "1.2"]], "precise": [[1, "True"]], "prefix": [[1, "''"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 219, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def bounded_product(sequence, n=None, seed=None):\n    \"\"\"\n    Returns a shuffled, bounded cartesian product of the input sequence.\n    Designed to cover as wide a range of permutations as possible with a limited number of iterations.\n    Will manifest the whole list in memory, so not suitable for super large sequences.\n\n    :param sequence: iterable\n    :param n: length of returned list\n    :param seed: random seed for reproducibility\n    :return: list\n    \"\"\"\n    p = list(itertools.product(*sequence))\n    if seed is not None:\n        random.seed(seed)\n    random.shuffle(p)\n    return p if n is None else p[:n]\n\nbounded_product(sequence=([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]]), n=50, seed=None)", "Selected Statement": "random.shuffle(p)", "Function Input": {"sequence": "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])", "n": "50", "seed": "None"}, "Variable Values Before Statement": {"p": "[([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis... True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False])]"}, "Value After Statement Execution": "[([0, 1, 1], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, '...abled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True])]", "Variable States During Runtime": {"sequence": [[1, "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])"]], "n": [[1, "50"]], "seed": [[1, "None"]], "p": [[12.0, "[([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis... True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False])]"], [15.0, "[([0, 1, 1], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, '...abled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True])]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 343, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_random_image(img_dir, recursive):\n    \"\"\"Pick a random image file from a directory.\"\"\"\n    if recursive:\n        images, current_wall = get_image_dir_recursive(img_dir)\n    else:\n        images, current_wall = get_image_dir(img_dir)\n\n    if len(images) > 2 and current_wall in images:\n        images.remove(current_wall)\n\n    elif not images:\n        logging.error(\"No images found in directory.\")\n        sys.exit(1)\n\n    random.shuffle(images)\n    return os.path.join(img_dir if not recursive else \"\", images[0])\n\nget_random_image(img_dir='tests/test_files', recursive=False)", "Selected Statement": "random.shuffle(images)", "Function Input": {"img_dir": "'tests/test_files'", "recursive": "False"}, "Variable Values Before Statement": {"images": "['test2.jpg', 'test.png']"}, "Value After Statement Execution": "['test.png', 'test2.jpg']", "Variable States During Runtime": {"img_dir": [[1, "'tests/test_files'"]], "recursive": [[1, "False"]], "images": [[6.0, "['test2.jpg', 'test.jpg', 'test.png']"], [9.0, "['test2.jpg', 'test.png']"], [15.0, "['test.png', 'test2.jpg']"]], "current_wall": [[6.0, "'test.jpg'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 240, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def move_is_sublist(letter_list_1, letter_list_2):\n    letter_counter_1 = collections.Counter(letter_list_1)\n    letter_counter_2 = collections.Counter(letter_list_2)\n    for letter, cardinality in letter_counter_1.items():\n        if cardinality > letter_counter_2[letter]:\n            # print('Not enough {} tiles in rack.'.format(letter))\n            return False\n\n    return True\n\nmove_is_sublist(letter_list_1=[1, 2, 3], letter_list_2=[1, 2, 3, 4])", "Selected Statement": "letter_counter_2 = collections.Counter(letter_list_2)", "Function Input": {"letter_list_1": "[1, 2, 3]", "letter_list_2": "[1, 2, 3, 4]"}, "Variable Values Before Statement": {"letter_list_2": "[1, 2, 3, 4]"}, "Value After Statement Execution": "Counter({1: 1, 2: 1, 3: 1, 4: 1})", "Variable States During Runtime": {"letter_list_1": [[1, "[1, 2, 3]"]], "letter_list_2": [[1, "[1, 2, 3, 4]"]], "letter_counter_1": [[2.0, "Counter({1: 1, 2: 1, 3: 1})"]], "letter_counter_2": [[3.0, "Counter({1: 1, 2: 1, 3: 1, 4: 1})"]], "letter": [[4.0, "1"], [4.0, "2"], [4.0, "3"]], "cardinality": [[4.0, "1"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 325, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def create_request_parameters(parent, request_model, params=None, index=None):\n    \"\"\"\n    Handle request parameters that can be filled in from identifiers,\n    resource data members or constants.\n\n    By passing ``params``, you can invoke this method multiple times and\n    build up a parameter dict over time, which is particularly useful\n    for reverse JMESPath expressions that append to lists.\n\n    :type parent: ServiceResource\n    :param parent: The resource instance to which this action is attached.\n    :type request_model: :py:class:`~boto3.resources.model.Request`\n    :param request_model: The action request model.\n    :type params: dict\n    :param params: If set, then add to this existing dict. It is both\n                   edited in-place and returned.\n    :type index: int\n    :param index: The position of an item within a list\n    :rtype: dict\n    :return: Pre-filled parameters to be sent to the request operation.\n    \"\"\"\n    if params is None:\n        params = {}\n\n    for param in request_model.params:\n        source = param.source\n        target = param.target\n\n        if source == 'identifier':\n            # Resource identifier, e.g. queue.url\n            value = getattr(parent, xform_name(param.name))\n        elif source == 'data':\n            # If this is a data member then it may incur a load\n            # action before returning the value.\n            value = get_data_member(parent, param.path)\n        elif source in ['string', 'integer', 'boolean']:\n            # These are hard-coded values in the definition\n            value = param.value\n        elif source == 'input':\n            # This is provided by the user, so ignore it here\n            continue\n        else:\n            raise NotImplementedError(f'Unsupported source type: {source}')\n\n        build_param_structure(params, target, value, index)\n\n    return params\n\ncreate_request_parameters(parent=dynamodb.Table(name='MyTable'), request_model={_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}, params=None, index=None)", "Selected Statement": "build_param_structure(params, target, value, index)", "Function Input": {"parent": "dynamodb.Table(name='MyTable')", "request_model": "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}", "params": "None", "index": "None"}, "Variable Values Before Statement": {"params": "{}", "target": "'TableName'", "value": "'MyTable'", "index": "None"}, "Value After Statement Execution": "{'TableName': 'MyTable'}", "Variable States During Runtime": {"parent": [[1, "dynamodb.Table(name='MyTable')"]], "request_model": [[1, "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}"]], "params": [[1, "None"], [23.0, "{}"], [45.0, "{'TableName': 'MyTable'}"]], "index": [[1, "None"]], "param": [[25.0, "{target='TableName', source='identifier', name='Name', path=None, value=None}"]], "source": [[26.0, "'identifier'"]], "target": [[27.0, "'TableName'"]], "value": [[31.0, "'MyTable'"]]}, "Program Information": "Project Name: boto+boto3", "idx": 333, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_server_preprocess_ndarray_image(image_uri, size):\n    d1 = Document(uri=image_uri)\n    d1.load_uri_to_blob()\n    d2 = Document(uri=image_uri)\n    d2.load_uri_to_image_tensor()\n\n    t1 = _transform_blob(size)(d1.blob).numpy()\n    t2 = _transform_ndarray(size)(d2.tensor).numpy()\n    assert t1.shape == t2.shape\n\ntest_server_preprocess_ndarray_image(image_uri='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg', size=224)", "Selected Statement": "t2 = _transform_ndarray(size)(d2.tensor).numpy()", "Function Input": {"image_uri": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg'", "size": "224"}, "Variable Values Before Statement": {"size": "224"}, "Value After Statement Execution": "array([[[-1.8293927 ,  0.99326   ,  1.218778  , ..., -0.76831955,         -0.69819516, -0.6261791 ],        [-1.871253  ,  0.83835363,  1.1161801 , ..., -0.71867406,         -0.66353786, -0.5779885 ],        [-1.8495831 ,  0.3691529 ,  1.0339135 , ..., -0.60506105,         -0.5474743 , -0.5001206 ],        ...,        [-1.8324506 ,  0.46106532,  0.7589506 , ..., -1.3229892 ,         -1.4584173 , -1.509373  ],        [-1.8534997 ,  0.37634084,  0.6575078 , ..., -1.3002565 ,         -1.4684434 , -1.5584292 ],        [-1.8524398 ,  0.32740185,  0.56791097, ..., -1.275775  ,         -1.4632285 , -1.5475469 ]],       [[-1.8205297 ,  1.0893543 ,  1.31915   , ..., -0.27816093,         -0.18627533, -0.11378706],        [-1.8304325 ,  0.9543234 ,  1.2362387 , ..., -0.30391544,         -0.20329967, -0.11902631],        [-1.8111343 ,  0.4697153 ,  1.1526138 , ..., -0.29344058,         -0.21467075, -0.16618787],        ...,        [-1.6441311 ,  0.7576508 ,  1.1757797 , ..., -1.7395262 ,         -1.7533139 , -1.7488168 ],        [-1.5793352 ,  0.84063566,  1.2314364 , ..., -1.6973344 ,         -1.7601075 , -1.7529469 ],        [-1.4979699 ,  0.8915888 ,  1.2598896 , ..., -1.6417253 ,         -1.7217588 , -1.75764   ]],       [[-1.3964468 ,  1.3654916 ,  1.5833169 , ...,  0.11189864,          0.14282744,  0.18943931],        [-1.4222968 ,  1.2280223 ,  1.4979748 , ...,  0.10506461,          0.13882811,  0.19719559],        [-1.3639748 ,  0.79668385,  1.4436656 , ...,  0.11625384,          0.14236891,  0.16509578],        ...,        [-1.539558  ,  0.6254223 ,  0.88010895, ..., -1.4571475 ,         -1.4812293 , -1.4754997 ],        [-1.5454704 ,  0.67148876,  0.92816603, ..., -1.4164418 ,         -1.4880763 , -1.4814891 ],        [-1.4934982 ,  0.72418857,  0.94967735, ..., -1.371076  ,         -1.4606231 , -1.4841652 ]]], dtype", "Variable States During Runtime": {"image_uri": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg'"]], "size": [[1, "224"]], "d1": [[2.0, "<Document ('id', 'mime_type', 'uri') at 3b1f02f040a677b8a7dfd83176b52d78>"], [3.0, "<Document ('id', 'blob', 'mime_type', 'uri') at 3b1f02f040a677b8a7dfd83176b52d78>"]], "d2": [[4.0, "<Document ('id', 'mime_type', 'uri') at eee52bb275edc026b2fb333d7656e3c6>"], [5.0, "<Document ('id', 'tensor', 'mime_type', 'uri') at eee52bb275edc026b2fb333d7656e3c6>"]], "t1": [[7.0, "array([[[-1.7922626 ,  0.99603695,  1.2296118 , ..., -0.7703726 ,         -0.6973805 , -0.6243884 ],        [-1.7922626 ,  0.8354542 ,  1.1274228 , ..., -0.72657734,         -0.6681836 , -0.5805931 ],        [-1.7922626 ,  0.36830464,  1.0252337 , ..., -0.59519154,         -0.5367978 , -0.50760096],        ...,        [-1.7922626 ,  0.4704936 ,  0.76246214, ..., -1.3251129 ,         -1.4564987 , -1.5148925 ],        [-1.7922626 ,  0.38290307,  0.6456747 , ..., -1.2959161 ,         -1.4710971 , -1.5586877 ],        [-1.7922626 ,  0.32450938,  0.5726826 , ..., -1.2813176 ,         -1.4710971 , -1.5440893 ]],       [[-1.7520971 ,  1.0843711 ,  1.3244953 , ..., -0.2813358 ,         -0.1912892 , -0.11625037],        [-1.7520971 ,  0.9493012 ,  1.2344488 , ..., -0.31135136,         -0.20629698, -0.11625037],        [-1.7520971 ,  0.46905264,  1.1444021 , ..., -0.29634356,         -0.20629698, -0.16127367],        ...,        [-1.6320349 ,  0.7542002 ,  1.1744177 , ..., -1.7370893 ,         -1.7520971 , -1.7520971 ],        [-1.5720038 ,  0.8442468 ,  1.2344488 , ..., -1.7070738 ,         -1.7520971 , -1.7520971 ],        [-1.496965  ,  0.8892701 ,  1.2494565 , ..., -1.6320349 ,         -1.7220815 , -1.7520971 ]],       [[-1.3948994 ,  1.3637935 ,  1.5770944 , ...,  0.11242763,          0.14086775,  0.18352796],        [-1.4233395 ,  1.2358129 ,  1.4917741 , ...,  0.09820756,          0.14086775,  0.19774802],        [-1.3664593 ,  0.7949909 ,  1.4491138 , ...,  0.11242763,          0.14086775,  0.16930789],        ...,        [-1.4802198 ,  0.6243501 ,  0.88031125, ..., -1.4517797 ,         -1.4802198 , -1.4802198 ],        [-1.4802198 ,  0.6670103 ,  0.93719155, ..., -1.4233395 ,         -1.4802198 , -1.4802198 ],        [-1.4802198 ,  0.72389054,  0.9514116 , ..., -1.3806794 ,         -1.4659997 , -1.4802198 ]]], dtype=float32)"]], "t2": [[8.0, "array([[[-1.8293927 ,  0.99326   ,  1.218778  , ..., -0.76831955,         -0.69819516, -0.6261791 ],        [-1.871253  ,  0.83835363,  1.1161801 , ..., -0.71867406,         -0.66353786, -0.5779885 ],        [-1.8495831 ,  0.3691529 ,  1.0339135 , ..., -0.60506105,         -0.5474743 , -0.5001206 ],        ...,        [-1.8324506 ,  0.46106532,  0.7589506 , ..., -1.3229892 ,         -1.4584173 , -1.509373  ],        [-1.8534997 ,  0.37634084,  0.6575078 , ..., -1.3002565 ,         -1.4684434 , -1.5584292 ],        [-1.8524398 ,  0.32740185,  0.56791097, ..., -1.275775  ,         -1.4632285 , -1.5475469 ]],       [[-1.8205297 ,  1.0893543 ,  1.31915   , ..., -0.27816093,         -0.18627533, -0.11378706],        [-1.8304325 ,  0.9543234 ,  1.2362387 , ..., -0.30391544,         -0.20329967, -0.11902631],        [-1.8111343 ,  0.4697153 ,  1.1526138 , ..., -0.29344058,         -0.21467075, -0.16618787],        ...,        [-1.6441311 ,  0.7576508 ,  1.1757797 , ..., -1.7395262 ,         -1.7533139 , -1.7488168 ],        [-1.5793352 ,  0.84063566,  1.2314364 , ..., -1.6973344 ,         -1.7601075 , -1.7529469 ],        [-1.4979699 ,  0.8915888 ,  1.2598896 , ..., -1.6417253 ,         -1.7217588 , -1.75764   ]],       [[-1.3964468 ,  1.3654916 ,  1.5833169 , ...,  0.11189864,          0.14282744,  0.18943931],        [-1.4222968 ,  1.2280223 ,  1.4979748 , ...,  0.10506461,          0.13882811,  0.19719559],        [-1.3639748 ,  0.79668385,  1.4436656 , ...,  0.11625384,          0.14236891,  0.16509578],        ...,        [-1.539558  ,  0.6254223 ,  0.88010895, ..., -1.4571475 ,         -1.4812293 , -1.4754997 ],        [-1.5454704 ,  0.67148876,  0.92816603, ..., -1.4164418 ,         -1.4880763 , -1.4814891 ],        [-1.4934982 ,  0.72418857,  0.94967735, ..., -1.371076  ,         -1.4606231 , -1.4841652 ]]], dtype=float32)"]], "@py_assert1": [[9.0, "None"]], "@py_assert5": [[9.0, "None"]], "@py_assert3": [[9.0, "None"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 224, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def compute_loc(idx, shape):\n    loc = [0] * len(shape)\n    for i in range(len(shape)):\n        prod = int(np.prod(shape[i + 1:]))\n        loc[i] = idx // prod\n        idx = idx % prod\n    return tuple(loc)\n\ncompute_loc(idx=0, shape=(2, 4))", "Selected Statement": "loc = [0] * len(shape)", "Function Input": {"idx": "0", "shape": "(2, 4)"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[0, 0]", "Variable States During Runtime": {"idx": [[1, "0"]], "shape": [[1, "(2, 4)"]], "loc": [[2.0, "[0, 0]"]], "i": [[3.0, "0"], [3.0, "1"]], "prod": [[4.0, "4"], [4.0, "1"]]}, "Program Information": "Project Name: Cjkkkk+Pyflow", "idx": 465, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def __str__(self):\n        self.reduce()\n        sign = '-' if self.integer < 0 else ''\n        integer_array = list(str(abs(self.integer)).rjust(self.decimals, '0'))\n        index = len(integer_array) - self.decimals\n        if index == 0:\n            item = '0.'\n        elif self.decimals < 0:\n            item = '0' * (-self.decimals)\n        elif self.decimals == 0:\n            item = ''\n        else:\n            item = '.'\n        integer_array.insert(index, item)\n        return sign + ''.join(integer_array)\n\n__str__(self=Precise(1393.938), self.base=10, self.decimals=3, self.integer=1393938)", "Selected Statement": "index = len(integer_array) - self.decimals", "Function Input": {"self": "Precise(1393.938)", "self.base": "10", "self.decimals": "3", "self.integer": "1393938"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "4", "Variable States During Runtime": {"self": [[1, "Precise(1393.938)"]], "self.base": [[1, "10"]], "self.decimals": [[1, "3"]], "self.integer": [[1, "1393938"]], "sign": [[3.0, "''"]], "integer_array": [[4.0, "['1', '3', '9', '3', '9', '3', '8']"], [14.0, "['1', '3', '9', '3', '.', '9', '3', '8']"]], "index": [[5.0, "4"]], "item": [[13.0, "'.'"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 468, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _from_timetuple(self, t):\n        self.days_from_epoch = calendar.timegm(t) // Date.DAY\n\n_from_timetuple(self=Date(0), t=time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1))", "Selected Statement": "self.days_from_epoch = calendar.timegm(t) // Date.DAY", "Function Input": {"self": "Date(0)", "t": "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "19816", "Variable States During Runtime": {"self": [[1, "Date(0)"], [2.0, "Date(19816)"]], "t": [[1, "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"]], "self.days_from_epoch": [[2.0, "19816"]]}, "Program Information": "Project Name: ArunTejCh+python-driver", "idx": 425, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "filename_regex = path_prefix_regex + basename_regex", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"path_prefix_regex": "'((/)?to/)?'", "basename_regex": "'img(\\\\.ext)?'"}, "Value After Statement Execution": "'((/)?to/)?img(\\\\.ext)?'", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 430, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def create_dummy_func(func, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a function is not available, create a dummy function which throws\n    ImportError when used.\n\n    Args:\n        func (str): name of the function.\n        dependency (str or list[str]): name(s) of the dependency.\n        message: extra message to print\n    Returns:\n        function: a function object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, func)\n    if message:\n        err = err + \" \" + message\n\n    if isinstance(dependency, (list, tuple)):\n        dependency = \",\".join(dependency)\n\n    def _dummy(*args, **kwargs):\n        raise ImportError(err)\n\n    return _dummy\n\ncreate_dummy_func(func='deform_conv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"func": "'deform_conv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"func": [[1, "'deform_conv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_dummy": [[20.0, "<function create_dummy_func.<locals>._dummy at 0x7f3337cdfd30>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 414, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def generate_samples_loguniform(low, high, step, base, size=1):\n    \"\"\"Generate sample for (discrete)uniform density.\"\"\"\n\n    samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))\n    if step:\n        samples = step * np.floor(samples / step)\n    return samples\n\ngenerate_samples_loguniform(low=5.8884365535558836e-08, high=2.6977394324449206e-07, step=None, base=10, size=100000)", "Selected Statement": "samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))", "Function Input": {"low": "5.8884365535558836e-08", "high": "2.6977394324449206e-07", "step": "None", "base": "10", "size": "100000"}, "Variable Values Before Statement": {"base": "10"}, "Value After Statement Execution": "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])", "Variable States During Runtime": {"low": [[1, "5.8884365535558836e-08"]], "high": [[1, "2.6977394324449206e-07"]], "step": [[1, "None"]], "base": [[1, "10"]], "size": [[1, "100000"]], "samples": [[4.0, "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 476, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def calculate_r_wheels(tyre_dimensions):\n    \"\"\"\n    Calculates the radius of the wheels [m] from the tyre dimensions.\n\n    :param tyre_dimensions:\n        Tyre dimensions.\n\n        .. note:: The fields are : use, nominal_section_width, aspect_ratio,\n           carcass, diameter, load_index, speed_rating, and additional_marks.\n    :type tyre_dimensions: dict\n\n    :return:\n        Radius of the wheels [m].\n    :rtype: float\n    \"\"\"\n    if 'diameter' in tyre_dimensions:\n        if tyre_dimensions['code'] == 'pax':\n            return tyre_dimensions['diameter'] / 2000  # Diameter is in mm.\n        return tyre_dimensions['diameter'] * 0.0254  # Diameter is in inches.\n    a = tyre_dimensions['aspect_ratio'] / 100  # Aspect ratio is Height/Width.\n    w = tyre_dimensions['nominal_section_width']\n    if tyre_dimensions.get('code', 'iso') == 'iso':\n        w /= 1000  # Width is in mm.\n    else:\n        w *= 0.0254  # Width is in inches.\n\n    dr = tyre_dimensions['rim_diameter'] * 0.0254  # Rim is in inches.\n    return a * w + dr / 2\n\ncalculate_r_wheels(tyre_dimensions={'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0})", "Selected Statement": "a = tyre_dimensions['aspect_ratio'] / 100  # Aspect ratio is Height/Width.", "Function Input": {"tyre_dimensions": "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "0.75", "Variable States During Runtime": {"tyre_dimensions": [[1, "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"]], "a": [[20.0, "0.75"]], "w": [[21.0, "265.0"], [23.0, "0.265"]], "dr": [[27.0, "0.381"]]}, "Program Information": "Project Name: JRCSTU+co2mpas-ta", "idx": 412, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def format_pair(prefix, arg, value):\n    if arg is _arg_source_missing:\n        arg_lines = []\n        value_prefix = prefix\n    else:\n        arg_lines = indented_lines(prefix, arg)\n        value_prefix = arg_lines[-1] + ': '\n\n    looksLikeAString = value[0] + value[-1] in [\"''\", '\"\"']\n    if looksLikeAString:  # Align the start of multiline strings.\n        value = prefixLinesAfterFirst(' ', value)\n\n    value_lines = indented_lines(value_prefix, value)\n    lines = arg_lines[:-1] + value_lines\n    return '\\n'.join(lines)\n\nformat_pair(prefix='    ', arg='multilineStr', value=\"'line1\\nline2'\")", "Selected Statement": "value_prefix = arg_lines[-1] + ': '", "Function Input": {"prefix": "'    '", "arg": "'multilineStr'", "value": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'    multilineStr: '", "Variable States During Runtime": {"prefix": [[1, "'    '"]], "arg": [[1, "'multilineStr'"]], "value": [[1, "\"'line1\\nline2'\""], [11.0, "\"'line1\\n line2'\""]], "arg_lines": [[6.0, "['    multilineStr']"]], "value_prefix": [[7.0, "'    multilineStr: '"]], "looksLikeAString": [[9.0, "True"]], "value_lines": [[13.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]], "lines": [[14.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 415, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _pad_conserve_grads(phi):\n    # pad by conserving the edge gradients\n    ndim = np.ndim(phi)\n    pw = [1, 1]\n    pp = np.pad(phi, [tuple(pw)]*ndim, mode=\"constant\")\n    for dim in range(ndim):\n        # get the indices first\n        idx_pad0_l = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))\n        idx_pad0 = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_fill = _get_idx(ndim, dim, slice(None, pw[0], None))\n        idx_pad1_l = _get_idx(ndim, dim, slice(-pw[1]-2, -pw[1]-1, None))\n        idx_pad1_r = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1 = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1_fill = _get_idx(ndim, dim, slice(-pw[1], None, None))\n\n        # now get the padded values\n        grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)\n        grad1 = pp[idx_pad1_r] - pp[idx_pad1_l]\n        pad_arange0 = np.arange(-pw[0],0) # (1, ..., ndim=pw[i], ..., 1)\n        pad_arange1 = np.arange(1,pw[0]+1)\n        pad0 = pad_arange0 * grad0 + pp[idx_pad0] # (n0,...,ndim=pw[i],...,nd1)\n        pad1 = pad_arange1 * grad1 + pp[idx_pad1]\n        pp[idx_pad0_fill] = pad0\n        pp[idx_pad1_fill] = pad1\n\n    return pp\n\n_pad_conserve_grads(phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)", "Function Input": {"phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([0.])", "Variable States During Runtime": {"phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "ndim": [[3.0, "1"]], "pw": [[4.0, "[1, 1]"]], "pp": [[5.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "dim": [[6.0, "0"]], "idx_pad0_l": [[8.0, "(slice(1, 2, None),)"]], "idx_pad0_r": [[9.0, "(slice(2, 3, None),)"]], "idx_pad0": [[10.0, "(slice(1, 2, None),)"]], "idx_pad0_fill": [[11.0, "(slice(None, 1, None),)"]], "idx_pad1_l": [[12.0, "(slice(-3, -2, None),)"]], "idx_pad1_r": [[13.0, "(slice(-2, -1, None),)"]], "idx_pad1": [[14.0, "(slice(-2, -1, None),)"]], "idx_pad1_fill": [[15.0, "(slice(-1, None, None),)"]], "grad0": [[18.0, "array([0.])"]], "grad1": [[19.0, "array([0.])"]], "pad_arange0": [[20.0, "array([-1])"]], "pad_arange1": [[21.0, "array([1])"]], "pad0": [[22.0, "array([0.])"]], "pad1": [[23.0, "array([0.])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 450, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_forward_nd_quad_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is quadratic on all dimension, so the target will be scaled\n    # source on all dimension by (1+B)\n    B = 1.0\n    scale = 1 + B\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = 0.5*B*xs_sq\n    target = sb.forward(source, phi)\n\n    target_calc = (scale**-ndim)*np.exp(-xs_sq / (2*(sigma*scale)**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_quad_pot(n=100, ndim=1, abs=None)", "Selected Statement": "x = np.arange(n) - n / 2.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [19.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "B": [[8.0, "1.0"]], "scale": [[9.0, "2.0"]], "sigma": [[10.0, "3.3333333333333335"]], "source": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[12.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[13.0, "array([1.2500e+03, 1.2005e+03, 1.1520e+03, 1.1045e+03, 1.0580e+03,       1.0125e+03, 9.6800e+02, 9.2450e+02, 8.8200e+02, 8.4050e+02,       8.0000e+02, 7.6050e+02, 7.2200e+02, 6.8450e+02, 6.4800e+02,       6.1250e+02, 5.7800e+02, 5.4450e+02, 5.1200e+02, 4.8050e+02,       4.5000e+02, 4.2050e+02, 3.9200e+02, 3.6450e+02, 3.3800e+02,       3.1250e+02, 2.8800e+02, 2.6450e+02, 2.4200e+02, 2.2050e+02,       2.0000e+02, 1.8050e+02, 1.6200e+02, 1.4450e+02, 1.2800e+02,       1.1250e+02, 9.8000e+01, 8.4500e+01, 7.2000e+01, 6.0500e+01,       5.0000e+01, 4.0500e+01, 3.2000e+01, 2.4500e+01, 1.8000e+01,       1.2500e+01, 8.0000e+00, 4.5000e+00, 2.0000e+00, 5.0000e-01,       0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03])"]], "target": [[14.0, "array([3.05096834e-13, 1.53620093e-12, 2.76730504e-12, 1.28535587e-11,       2.29398124e-11, 9.83671882e-11, 1.73794564e-10, 6.88577891e-10,       1.20336122e-09, 4.40917555e-09, 7.61498987e-09, 2.58279429e-08,       4.40408960e-08, 1.38413341e-07, 2.32785786e-07, 6.78656885e-07,       1.12452798e-06, 3.04464007e-06, 4.96475215e-06, 1.24987004e-05,       2.00326487e-05, 4.69534144e-05, 7.38741801e-05, 1.61425945e-04,       2.48977711e-04, 5.07941525e-04, 7.66905340e-04, 1.46291267e-03,       2.15892000e-03, 3.85670914e-03, 5.55449827e-03, 9.30760160e-03,       1.30607049e-02, 2.05640432e-02, 2.80673814e-02, 4.15963220e-02,       5.51252627e-02, 7.70373061e-02, 9.89493495e-02, 1.30637792e-01,       1.62326234e-01, 2.02851181e-01, 2.43376128e-01, 2.88432267e-01,       3.33488405e-01, 3.75561756e-01, 4.17635106e-01, 4.47816923e-01,       4.77998741e-01, 4.88999370e-01, 5.00000000e-01, 4.88999370e-01,       4.77998741e-01, 4.47816923e-01, 4.17635106e-01, 3.75561756e-01,       3.33488405e-01, 2.88432267e-01, 2.43376128e-01, 2.02851181e-01,       1.62326234e-01, 1.30637792e-01, 9.89493495e-02, 7.70373061e-02,       5.51252627e-02, 4.15963220e-02, 2.80673814e-02, 2.05640432e-02,       1.30607049e-02, 9.30760160e-03, 5.55449827e-03, 3.85670914e-03,       2.15892000e-03, 1.46291267e-03, 7.66905340e-04, 5.07941525e-04,       2.48977711e-04, 1.61425945e-04, 7.38741801e-05, 4.69534144e-05,       2.00326487e-05, 1.24987004e-05, 4.96475215e-06, 3.04464007e-06,       1.12452798e-06, 6.78656885e-07, 2.32785786e-07, 1.38413341e-07,       4.40408960e-08, 2.58279429e-08, 7.61498987e-09, 4.40917555e-09,       1.20336122e-09, 6.88577891e-10, 1.73794564e-10, 9.83671882e-11,       2.29398124e-11, 1.28535587e-11, 2.76730504e-12, 1.53620093e-12])"]], "target_calc": [[16.0, "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"]], "@py_assert3": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert1": [[20.0, "None"]], "@py_assert4": [[23.0, "None"]], "@py_assert6": [[23.0, "None"]], "@py_assert8": [[26.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 453, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def get_load(ba_name, **kwargs):\n    # get data\n    c = client_factory(ba_name)\n    data = c.get_load(**kwargs)\n    \n    # log\n    if len(data) == 0:\n        msg = '%s: No load data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),\n                                                    kwargs)\n        logger.warn(msg)\n    \n    # return\n    return data\n\nget_load(ba_name='PJM', kwargs={'latest': True})", "Selected Statement": "msg = '%s: No load data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),", "Function Input": {"ba_name": "'PJM'", "kwargs": "{'latest': True}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "\"PJM: No load data at 2024-04-03T22:47:45.327834 with args {'latest': True}\"", "Variable States During Runtime": {"ba_name": [[1, "'PJM'"]], "kwargs": [[1, "{'latest': True}"]], "c": [[3.0, "{options={}, NAME='PJM'}"], [4.0, "{options={'data': 'load', 'latest': True, 'start_at': None, 'end_at': None, 'forecast': False, 'sliceable': False}, NAME='PJM', session=<requests.sessions.Session object at 0x7fcc37745f10>}"]], "data": [[4.0, "[]"]], "msg": [[8.0, "\"PJM: No load data at 2024-04-03T22:47:45.327834 with args {'latest': True}\""]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 408, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parzen_estimator_build_posterior_parameter(parameter, observations):\n    \"\"\"TPE algorith transform a prior parameter into a posterior parameters using observations\n    to build posterior.\n    \"\"\"\n    posterior_parameter = None\n    parameter_values = [observation.sample[parameter.name] for observation in observations]\n    search_space = parameter.search_space\n    if parameter.category == \"categorical\":\n        \"\"\" TODO Compare mean (current implem) vs hyperopt approach.\"\"\"\n        prior_probabilities = np.array(search_space[\"probabilities\"])\n        posterior_probabilities = prior_probabilities\n        if len(parameter_values) != 0:\n            observed_probabilities = np.array([parameter_values.count(value)\n                                               for value in search_space[\"values\"]])\n            observed_probabilities = observed_probabilities / np.sum(observed_probabilities)\n            posterior_probabilities += observed_probabilities\n        posterior_probabilities /= sum(posterior_probabilities)\n\n        # Build param\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"categorical\",\n                \"search_space\": {\n                    \"values\": search_space[\"values\"],\n                    \"probabilities\": list(posterior_probabilities),\n                }\n            }\n        )\n\n    if parameter.category in (\"uniform\", \"normal\", \"loguniform\", \"lognormal\"):\n        if parameter.category in (\"uniform\", \"loguniform\"):\n            prior_mu = 0.5 * (search_space[\"high\"] + search_space[\"low\"])\n            prior_sigma = (search_space[\"high\"] - search_space[\"low\"])\n        elif parameter.category in (\"normal\", \"lognormal\"):\n            prior_mu = search_space[\"mu\"]\n            prior_sigma = search_space[\"sigma\"]\n\n        # Mus\n        mus = np.sort(parameter_values + [prior_mu])\n\n        # Sigmas\n        # Trick to get for each mu the greater distance from left and right neighbor\n        # when low and high are not defined we use inf to get the only available distance\n        # (right neighbor for sigmas[0] and left for sigmas[-1])\n        tmp = np.concatenate(\n            (\n                [search_space.get(\"low\", np.inf)],\n                mus,\n                [search_space.get(\"high\", -np.inf)],\n            )\n        )\n        sigmas = np.maximum(tmp[1:-1] - tmp[0:-2], tmp[2:] - tmp[1:-1])\n\n        # Use formulas from hyperopt to clip sigmas\n        sigma_max_value = prior_sigma\n        sigma_min_value = prior_sigma / min(100.0, (1.0 + len(mus)))\n        sigmas = np.clip(sigmas, sigma_min_value, sigma_max_value)\n\n        # Fix prior sigma with correct value\n        sigmas[np.where(mus == prior_mu)[0]] = prior_sigma\n\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"mixture\",\n                \"search_space\": {\n                    \"parameters\": [\n                        {\n                            \"category\": \"normal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space.get(\"step\", None)\n                            }\n                        } if parameter.category[:3] != \"log\" else\n                        {\n                            \"category\": \"lognormal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space[\"step\"],\n                                \"base\": search_space[\"base\"],\n                            }\n                        } for mu, sigma in zip(mus, sigmas)\n                    ],\n                    \"weights\": [1 / len(mus) for _ in range(len(mus))]\n                }\n            }\n        )\n\n    return posterior_parameter\n\nparzen_estimator_build_posterior_parameter(parameter=x, observations=[])", "Selected Statement": "prior_mu = 0.5 * (search_space[\"high\"] + search_space[\"low\"])", "Function Input": {"parameter": "x", "observations": "[]"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "1.5707963267948966", "Variable States During Runtime": {"parameter": [[1, "x"]], "observations": [[1, "[]"]], "posterior_parameter": [[5.0, "None"], [63.0, "x"]], "parameter_values": [[6.0, "[]"]], "search_space": [[7.0, "{'low': 0, 'high': 3.141592653589793, 'step': None}"]], "prior_mu": [[33.0, "1.5707963267948966"]], "prior_sigma": [[34.0, "3.141592653589793"]], "mus": [[40.0, "array([1.57079633])"]], "tmp": [[46.0, "array([0.        , 1.57079633, 3.14159265])"]], "sigmas": [[53.0, "array([1.57079633])"], [61.0, "array([3.14159265])"]], "sigma_max_value": [[56.0, "3.141592653589793"]], "sigma_min_value": [[57.0, "1.5707963267948966"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 477, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def find_original_update_blocks(content, fence=DEFAULT_FENCE):\n    # make sure we end with a newline, otherwise the regex will miss <<UPD on the last line\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    pieces = re.split(split_re, content)\n\n    pieces.reverse()\n    processed = []\n\n    # Keep using the same filename in cases where GPT produces an edit block\n    # without a filename.\n    current_filename = None\n    try:\n        while pieces:\n            cur = pieces.pop()\n\n            if cur in (DIVIDER, UPDATED):\n                processed.append(cur)\n                raise ValueError(f\"Unexpected {cur}\")\n\n            if cur.strip() != HEAD:\n                processed.append(cur)\n                continue\n\n            processed.append(cur)  # original_marker\n\n            filename = strip_filename(processed[-2].splitlines()[-1], fence)\n            try:\n                if not filename:\n                    filename = strip_filename(processed[-2].splitlines()[-2], fence)\n                if not filename:\n                    if current_filename:\n                        filename = current_filename\n                    else:\n                        raise ValueError(missing_filename_err)\n            except IndexError:\n                if current_filename:\n                    filename = current_filename\n                else:\n                    raise ValueError(missing_filename_err)\n\n            current_filename = filename\n\n            original_text = pieces.pop()\n            processed.append(original_text)\n\n            divider_marker = pieces.pop()\n            processed.append(divider_marker)\n            if divider_marker.strip() != DIVIDER:\n                raise ValueError(f\"Expected `{DIVIDER}` not {divider_marker.strip()}\")\n\n            updated_text = pieces.pop()\n            processed.append(updated_text)\n\n            updated_marker = pieces.pop()\n            processed.append(updated_marker)\n            if updated_marker.strip() != UPDATED:\n                raise ValueError(f\"Expected `{UPDATED}` not `{updated_marker.strip()}\")\n\n            yield filename, original_text, updated_text\n    except ValueError as e:\n        processed = \"\".join(processed)\n        err = e.args[0]\n        raise ValueError(f\"{processed}\\n^^^ {err}\")\n    except IndexError:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Incomplete SEARCH/REPLACE block.\")\n    except Exception:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Error parsing SEARCH/REPLACE block.\")\n\nfind_original_update_blocks(content='ok', fence=('<source>', '</source>'))", "Selected Statement": "content = content + \"\\n\"", "Function Input": {"content": "'ok'", "fence": "('<source>', '</source>')"}, "Variable Values Before Statement": {"content": "'ok'"}, "Value After Statement Execution": "'ok\\n'", "Variable States During Runtime": {"content": [[1, "'ok'"], [4.0, "'ok\\n'"]], "fence": [[1, "('<source>', '</source>')"]], "pieces": [[6.0, "['ok\\n']"], [16.0, "[]"]], "processed": [[9.0, "[]"], [23.0, "['ok\\n']"]], "current_filename": [[13.0, "None"]], "cur": [[16.0, "'ok\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 438, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _insert(self, key, value):\n        flat_key = self._serialize_key(key)\n        i = self._index.get(flat_key, -1)\n        if i >= 0:\n            self._items[i] = (key, value)\n        else:\n            self._items.append((key, value))\n            self._index[flat_key] = len(self._items) - 1\n\n_insert(self=OrderedMapSerializedKey([]), key='\u307fbob', value=199)", "Selected Statement": "self._index[flat_key] = len(self._items) - 1", "Function Input": {"self": "OrderedMapSerializedKey([])", "key": "'\u307fbob'", "value": "199"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "199", "Variable States During Runtime": {"self": [[1, "OrderedMapSerializedKey([])"], [7.0, "OrderedMapSerializedKey([('\u307fbob', 199)])"]], "key": [[1, "'\u307fbob'"]], "value": [[1, "199"]], "flat_key": [[2.0, "b'\\xe3\\x81\\xbfbob'"]], "i": [[3.0, "-1"]], "self['\u307fbob']": [[8.0, "199"]]}, "Program Information": "Project Name: YugaByte+cassandra-python-driver", "idx": 473, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _merge(a, aux, lo, mid, hi):\n        i = lo\n        j = mid + 1\n\n        for k in range(lo, hi + 1):\n            aux[k] = a[k]\n\n        for k in range(lo, hi + 1):\n            if i > mid:\n                a[k] = aux[j]\n                j += 1\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge(a=[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, mid=3, hi=7)", "Selected Statement": "j = mid + 1", "Function Input": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Variable Values Before Statement": {"mid": "3"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"a": [[1, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "mid": [[1, "3"]], "hi": [[1, "7"]], "i": [[2.0, "0"], [17.0, "1"], [17.0, "2"], [17.0, "3"], [17.0, "4"]], "j": [[3.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"], [11.0, "8"]], "k": [[5.0, "0"], [5.0, "1"], [5.0, "2"], [5.0, "3"], [5.0, "4"], [5.0, "5"], [5.0, "6"], [5.0, "7"], [8.0, "0"], [8.0, "1"], [8.0, "2"], [8.0, "3"], [8.0, "4"], [8.0, "5"], [8.0, "6"], [8.0, "7"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 418, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def test_generate(monkeypatch, generated, stop_tokens, expected):\n    import chat.base as chat\n    import generate.base as generate\n\n    input_idx = torch.tensor([5, 3])\n    max_returned_tokens = len(input_idx) + 8\n    model = MagicMock()\n    model.config.block_size = 100\n    model.max_seq_length = 100\n    it = iter(generated)\n\n    def multinomial(*_, **__):\n        out = next(it)\n        return torch.tensor([out])\n\n    monkeypatch.setattr(generate, \"multinomial_num_samples_1\", multinomial)\n    actual = chat.generate(model, input_idx, max_returned_tokens, stop_tokens=stop_tokens)\n    actual = list(actual)\n\n    assert len(actual) == len(expected)\n    if not actual:\n        assert actual == expected\n    else:\n        for t in actual:\n            assert t.dtype == torch.long\n        assert torch.cat(actual).tolist() == expected\n\ntest_generate(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, generated=repeat(1), stop_tokens=(), expected=[1, 1, 1, 1, 1, 1, 1, 1])", "Selected Statement": "max_returned_tokens = len(input_idx) + 8", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "generated": "repeat(1)", "stop_tokens": "()", "expected": "[1, 1, 1, 1, 1, 1, 1, 1]"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "10", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [16.0, "{_setattr=[(<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>, 'multinomial_num_samples_1', <function multinomial_num_samples_1 at 0x7f805238a160>)], _setitem=[], _cwd=None, _savesyspath=None}"]], "generated": [[1, "repeat(1)"]], "stop_tokens": [[1, "()"]], "expected": [[1, "[1, 1, 1, 1, 1, 1, 1, 1]"]], "chat": [[2.0, "<module 'chat.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/chat/base.py'>"]], "generate": [[3.0, "<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>"]], "input_idx": [[5.0, "tensor([5, 3])"]], "max_returned_tokens": [[6.0, "10"]], "model": [[7.0, "<MagicMock id='140188337253248'>"]], "it": [[10.0, "repeat(1)"]], "multinomial": [[12.0, "<function test_generate.<locals>.multinomial at 0x7f7fd0f7e430>"]], "actual": [[17.0, "<generator object generate at 0x7f803c55ff90>"], [18.0, "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"]], "@py_assert2": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "t": [[24.0, "tensor([1])"]], "@py_assert1": [[25.0, "None"]], "@py_assert5": [[25.0, "None"]], "@py_assert3": [[25.0, "None"]], "@py_assert6": [[26.0, "None"]], "@py_assert8": [[26.0, "None"]], "@py_assert10": [[26.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 461, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "2", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 436, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_grad2_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    gu = np.zeros(tuple([n-2]*ndim))\n    gu2 = gu + 2.0\n    for i in range(ndim):\n        for j in range(ndim):\n            if i == j:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu2)\n            else:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad2_nd(n=32, ndim=1)", "Selected Statement": "coords = [np.arange(n)] * ndim", "Function Input": {"n": "32", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]", "Variable States During Runtime": {"n": [[1, "32"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "u": [[6.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ucopy": [[7.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "gu": [[10.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "gu2": [[11.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "i": [[12.0, "0"]], "j": [[13.0, "0"]], "@py_assert2": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]], "@py_assert11": [[15.0, "None"]], "@py_assert6": [[15.0, "None"]], "@py_assert1": [[20.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 446, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def fill_gaps(L, rows=None, cols=None, padding_value=\"\"):\n    \"\"\"Fill gaps in a list of lists.\n    e.g.,::\n\n        >>> L = [\n        ... [1, 2, 3],\n        ... ]\n        >>> fill_gaps(L, 2, 4)\n        [\n            [1, 2, 3, \"\"],\n            [\"\", \"\", \"\", \"\"]\n        ]\n\n    :param L: List of lists to fill gaps in.\n    :param rows: Number of rows to fill.\n    :param cols: Number of columns to fill.\n    :param padding_value: Default value to fill gaps with.\n\n    :type L: list[list[T]]\n    :type rows: int\n    :type cols: int\n    :type padding_value: T\n\n    :return: List of lists with gaps filled.\n    :rtype: list[list[T]]:\n    \"\"\"\n    try:\n        max_cols = max(len(row) for row in L) if cols is None else cols\n        max_rows = len(L) if rows is None else rows\n\n        pad_rows = max_rows - len(L)\n\n        if pad_rows:\n            L = L + ([[]] * pad_rows)\n\n        return [rightpad(row, max_cols, padding_value=padding_value) for row in L]\n    except ValueError:\n        return []\n\nfill_gaps(L=[['', 'Dummy']], rows=None, cols=None, padding_value='')", "Selected Statement": "pad_rows = max_rows - len(L)", "Function Input": {"L": "[['', 'Dummy']]", "rows": "None", "cols": "None", "padding_value": "''"}, "Variable Values Before Statement": {"max_rows": "1"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"L": [[1, "[['', 'Dummy']]"]], "rows": [[1, "None"]], "cols": [[1, "None"]], "padding_value": [[1, "''"]], "max_cols": [[28.0, "2"]], "max_rows": [[29.0, "1"]], "pad_rows": [[31.0, "0"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 463, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def stringified_dict_contains_value(key, value, str_dict):\n    \"\"\"Checks if dict in for of string like \"{'test': 5}\" contains\n    key/value pair. This works faster, then creating actual dict\n    from string since this operation is called for each task in case\n    of kwargs search.\"\"\"\n    if not str_dict:\n        return False\n    value = str(value)\n    try:\n        # + 3 for key right quote, one for colon and one for space\n        key_index = str_dict.index(key) + len(key) + 3\n    except ValueError:\n        return False\n    try:\n        comma_index = str_dict.index(',', key_index)\n    except ValueError:\n        # last value in dict\n        comma_index = str_dict.index('}', key_index)\n    return str(value) == str_dict[key_index:comma_index].strip('\"\\'')\n\nstringified_dict_contains_value(key='test', value=5, str_dict=\"{'test': 5}\")", "Selected Statement": "key_index = str_dict.index(key) + len(key) + 3", "Function Input": {"key": "'test'", "value": "5", "str_dict": "\"{'test': 5}\""}, "Variable Values Before Statement": {}, "Value After Statement Execution": "9", "Variable States During Runtime": {"key": [[1, "'test'"]], "value": [[1, "5"], [8.0, "'5'"]], "str_dict": [[1, "\"{'test': 5}\""]], "key_index": [[11.0, "9"]], "comma_index": [[18.0, "10"]]}, "Program Information": "Project Name: mher+flower", "idx": 427, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def forward(source, phi):\n    \"\"\"\n    Obtain the target density distribution given the source distribution and\n    the mapping potential, phi.\n    The mapping from source coordinate, $x$, to the target coordinate, $y$, is\n    given by:\n\n    $$\n    y = x + \\nabla phi(x).\n    $$\n\n    The coordinate in i-th dimension is given by `np.arange(source.shape[i])`.\n\n    Parameters\n    ----------\n    * `source` : numpy.ndarray\n        The source density distribution in n-dimensional array.\n    * `phi` : numpy.ndarray\n        The mapping potential given above. It must have the same shape as\n        `source`.\n\n    Returns\n    -------\n    * numpy.ndarray\n        The target density distribution in n-dimensional array.\n    \"\"\"\n    # convert to np.ndarray\n    source = np.asarray(source)\n    phi = np.asarray(phi)\n    # check the shapes of inputs\n    if source.shape != phi.shape:\n        raise ValueError(\"The source and phi must have the same shape.\")\n\n    # calculate the total potential so that $y = \\nabla u(x)$\n    u0, u, phi_pad = _get_full_potential(phi)\n    ndim = np.ndim(phi)\n\n    # calculate the determinant of the hessian\n    det_hess_s = det_hess(u)\n\n    # get the displacement in (n x D) format\n    x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n    y = np.array([grad(u , axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n\n    # interpolate the values\n    interp = lambda s: griddata(y, s.flatten(), x, \"linear\").reshape(s.shape)\n    target_s = source / det_hess_s\n    target = interp(target_s)\n\n    # fill nan values with zeros\n    target[np.isnan(target)] = 0.0\n    return target\n\nforward(source=array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06]), phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "target_s = source / det_hess_s", "Function Input": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "det_hess_s": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"}, "Value After Statement Execution": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "Variable States During Runtime": {"source": [[1, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "phi_pad": [[35.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "u": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "u0": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "ndim": [[36.0, "1"]], "det_hess_s": [[39.0, "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]], "x": [[42.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "y": [[43.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "interp": [[46.0, "<function forward.<locals>.<lambda> at 0x7fab7f2e3700>"]], "target_s": [[47.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "target": [[48.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 448, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _remove_command(text, command, keep_text=False):\n  \"\"\"Removes '\\\\command{*}' from the string 'text'.\n\n  Regex `base_pattern` used to match balanced parentheses taken from:\n  https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses/35271017#35271017\n  \"\"\"\n  base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'\n  # Loops in case of nested commands that need to retain text, e.g.,\n  # \\red{hello \\red{world}}.\n  while True:\n    all_substitutions = []\n    has_match = False\n    for match in regex.finditer(base_pattern, text):\n      # In case there are only spaces or nothing up to the following newline,\n      # adds a percent, not to alter the newlines.\n      has_match = True\n      new_substring = (\n          ''\n          if not keep_text\n          else text[match.span()[0] + len(command) + 2 : match.span()[1] - 1]\n      )\n      if match.span()[1] < len(text):\n        next_newline = text[match.span()[1] :].find('\\n')\n        if next_newline != -1:\n          text_until_newline = text[\n              match.span()[1] : match.span()[1] + next_newline\n          ]\n          if (\n              not text_until_newline or text_until_newline.isspace()\n          ) and not keep_text:\n            new_substring = '%'\n      all_substitutions.append(\n          (match.span()[0], match.span()[1], new_substring)\n      )\n\n    for start, end, new_substring in reversed(all_substitutions):\n      text = text[:start] + new_substring + text[end:]\n\n    if not keep_text or not has_match:\n      break\n\n  return text\n\n_remove_command(text='A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}', command='todo', keep_text=False)", "Selected Statement": "base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'", "Function Input": {"text": "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'", "command": "'todo'", "keep_text": "False"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'", "Variable States During Runtime": {"text": [[1, "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'"], [37.0, "'AD\\nE\\n\\\\end{document}'"]], "command": [[1, "'todo'"]], "keep_text": [[1, "False"]], "base_pattern": [[7.0, "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'"]], "all_substitutions": [[11.0, "[]"], [32.0, "[(1, 11, '')]"]], "has_match": [[12.0, "False"], [16.0, "True"]], "match": [[13.0, "<regex.Match object; span=(1, 11), match='\\\\todo{B\\nC}'>"]], "new_substring": [[17.0, "''"]], "next_newline": [[23.0, "1"]], "text_until_newline": [[25.0, "'D'"]], "start": [[36.0, "1"]], "end": [[36.0, "11"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 429, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def rolling_mean_by_h(x, h, w, name):\n    \"\"\"Compute a rolling mean of x, after first aggregating by h.\n\n    Right-aligned. Computes a single mean for each unique value of h. Each\n    mean is over at least w samples.\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling mean of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    df2 = (\n        df.groupby('h').agg(['sum', 'count']).reset_index().sort_values('h')\n    )\n    xs = df2['x']['sum'].values\n    ns = df2['x']['count'].values\n    hs = df2.h.values\n\n    trailing_i = len(df2) - 1\n    x_sum = 0\n    n_sum = 0\n    # We don't know output size but it is bounded by len(df2)\n    res_x = np.empty(len(df2))\n\n    # Start from the right and work backwards\n    for i in range(len(df2) - 1, -1, -1):\n        x_sum += xs[i]\n        n_sum += ns[i]\n        while n_sum >= w:\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise weight the mean by the difference\n            excess_n = n_sum - w\n            excess_x = excess_n * xs[i] / ns[i]\n            res_x[trailing_i] = (x_sum - excess_x)/ w\n            x_sum -= xs[trailing_i]\n            n_sum -= ns[trailing_i]\n            trailing_i -= 1\n\n    res_h = hs[(trailing_i + 1):]\n    res_x = res_x[(trailing_i + 1):]\n\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_mean_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "trailing_i = len(df2) - 1", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "9", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[19.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "df2": [[20.0, "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"]], "xs": [[23.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "ns": [[24.0, "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]], "hs": [[25.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "trailing_i": [[27.0, "9"], [45.0, "8"], [45.0, "7"], [45.0, "6"], [45.0, "5"], [45.0, "4"], [45.0, "3"], [45.0, "2"], [45.0, "1"], [45.0, "0"], [45.0, "-1"]], "x_sum": [[28.0, "0"], [35.0, "9"], [43.0, "0"], [35.0, "8"], [43.0, "0"], [35.0, "7"], [43.0, "0"], [35.0, "6"], [43.0, "0"], [35.0, "5"], [43.0, "0"], [35.0, "4"], [43.0, "0"], [35.0, "3"], [43.0, "0"], [35.0, "2"], [43.0, "0"], [35.0, "1"], [43.0, "0"]], "n_sum": [[29.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"]], "res_x": [[31.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 4.4e-323])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 4.0e+000, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.e+000, 5.e-324, 1.e-323, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0.e+000, 5.e-324, 2.e+000, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"]], "i": [[34.0, "9"], [34.0, "8"], [34.0, "7"], [34.0, "6"], [34.0, "5"], [34.0, "4"], [34.0, "3"], [34.0, "2"], [34.0, "1"], [34.0, "0"]], "excess_n": [[40.0, "0"]], "excess_x": [[41.0, "0.0"]], "res_h": [[47.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 456, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def generate(resource_types=()):\n    resource_defs = {}\n    definitions = {\n        'resources': resource_defs,\n        'string_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\"type\": \"string\"},\n            },\n        },\n        'basic_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    'oneOf': [\n                        {\"type\": \"string\"},\n                        {\"type\": \"boolean\"},\n                        {\"type\": \"number\"},\n                    ],\n                }\n            },\n        },\n        'iam-statement': {\n            'additionalProperties': False,\n            'type': 'object',\n            'properties': {\n                'Sid': {'type': 'string'},\n                'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']},\n                'Principal': {'anyOf': [\n                    {'type': 'string'},\n                    {'type': 'object'}, {'type': 'array'}]},\n                'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]},\n                'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Condition': {'type': 'object'}\n            },\n            'required': ['Sid', 'Effect'],\n            'oneOf': [\n                {'required': ['Principal', 'Action', 'Resource']},\n                {'required': ['NotPrincipal', 'Action', 'Resource']},\n                {'required': ['Principal', 'NotAction', 'Resource']},\n                {'required': ['NotPrincipal', 'NotAction', 'Resource']},\n                {'required': ['Principal', 'Action', 'NotResource']},\n                {'required': ['NotPrincipal', 'Action', 'NotResource']},\n                {'required': ['Principal', 'NotAction', 'NotResource']},\n                {'required': ['NotPrincipal', 'NotAction', 'NotResource']}\n            ]\n        },\n        'actions': {},\n        'filters': {\n            'value': ValueFilter.schema,\n            'event': EventFilter.schema,\n            'age': AgeFilter.schema,\n            'reduce': ReduceFilter.schema,\n            # Shortcut form of value filter as k=v\n            'valuekv': {\n                'type': 'object',\n                'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'},\n                    {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]},\n                'minProperties': 1,\n                'maxProperties': 1},\n        },\n        'filters_common': {\n            'list_item_attrs': _get_attr_schema(),\n            'comparison_operators': {\n                'enum': list(OPERATORS.keys())},\n            'value_types': {'enum': VALUE_TYPES},\n            'value_from': ValuesFrom.schema,\n            'value': {'oneOf': [\n                {'type': 'array'},\n                {'type': 'string'},\n                {'type': 'boolean'},\n                {'type': 'number'},\n                {'type': 'null'}]},\n        },\n        'policy': {\n            'type': 'object',\n            'required': ['name', 'resource'],\n            'additionalProperties': False,\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'pattern': \"^[A-z][A-z0-9]*(-[A-z0-9]+)*$\"},\n                'conditions': {\n                    'type': 'array',\n                    'items': {'anyOf': [\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'or': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'not': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'and': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'$ref': '#/definitions/filters/value'},\n                        {'$ref': '#/definitions/filters/event'},\n                        {'$ref': '#/definitions/filters/valuekv'}]}},\n                # these should be deprecated for conditions\n                'region': {'type': 'string'},\n                'tz': {'type': 'string'},\n                'start': {'format': 'date-time'},\n                'end': {'format': 'date-time'},\n                'resource': {'oneOf': [\n                    {'type': 'string'},\n                    {'type': 'array', 'items': {'type': 'string'}}]},\n                'max-resources': {'anyOf': [\n                    {'type': 'integer', 'minimum': 1},\n                    {'$ref': '#/definitions/max-resources-properties'}\n                ]},\n                'max-resources-percent': {'type': 'number', 'minimum': 0, 'maximum': 100},\n                'comment': {'type': 'string'},\n                'comments': {'type': 'string'},\n                'description': {'type': 'string'},\n                'tags': {'type': 'array', 'items': {'type': 'string'}},\n                'metadata': {'type': 'object'},\n                'mode': {'$ref': '#/definitions/policy-mode'},\n                'source': {'enum': list(sources.keys())},\n                'actions': {\n                    'type': 'array',\n                },\n                'filters': {\n                    'type': 'array'\n                },\n                #\n                # TODO: source queries should really move under\n                # source. This was initially used for describe sources\n                # to expose server side query mechanisms, however its\n                # important to note it also prevents resource cache\n                # utilization between policies that have different\n                # queries.\n                'query': {\n                    'type': 'array', 'items': {'type': 'object'}}\n\n            },\n        },\n        'policy-mode': {\n            'anyOf': [e.schema for _, e in execution.items()],\n        },\n        'max-resources-properties': {\n            'type': 'object',\n            'additionalProperties': False,\n            'properties': {\n                'amount': {\"type\": 'integer', 'minimum': 1},\n                'op': {'enum': ['or', 'and']},\n                'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}\n            }\n        }\n    }\n\n    resource_refs = []\n    for cloud_name, cloud_type in sorted(clouds.items()):\n        for type_name, resource_type in sorted(cloud_type.resources.items()):\n            r_type_name = \"%s.%s\" % (cloud_name, type_name)\n            if resource_types and r_type_name not in resource_types:\n                if not resource_type.type_aliases:\n                    continue\n                elif not {\"%s.%s\" % (cloud_name, ralias) for ralias\n                        in resource_type.type_aliases}.intersection(\n                        resource_types):\n                    continue\n\n            aliases = []\n            if resource_type.type_aliases:\n                aliases.extend([\"%s.%s\" % (cloud_name, a) for a in resource_type.type_aliases])\n                # aws gets legacy aliases with no cloud prefix\n                if cloud_name == 'aws':\n                    aliases.extend(resource_type.type_aliases)\n\n            # aws gets additional alias for default name\n            if cloud_name == 'aws':\n                aliases.append(type_name)\n\n            resource_refs.append(\n                process_resource(\n                    r_type_name,\n                    resource_type,\n                    resource_defs,\n                    aliases,\n                    definitions,\n                    cloud_name\n                ))\n\n    schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        'id': 'http://schema.cloudcustodian.io/v0/custodian.json',\n        'definitions': definitions,\n        'type': 'object',\n        'required': ['policies'],\n        'additionalProperties': False,\n        'properties': {\n            'vars': {'type': 'object'},\n            'policies': {\n                'type': 'array',\n                'additionalItems': False,\n                'items': {'anyOf': resource_refs}\n            }\n        }\n    }\n\n    # allow empty policies with lazy load\n    if not resource_refs:\n        schema['properties']['policies']['items'] = {'type': 'object'}\n    return schema\n\ngenerate(resource_types=())", "Selected Statement": "r_type_name = \"%s.%s\" % (cloud_name, type_name)", "Function Input": {"resource_types": "()"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'gcp.region'", "Variable States During Runtime": {"resource_types": [[1, "()"]], "resource_defs": [[2.0, "{}"], [177.0, "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}"]], "definitions": [[3.0, "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"], [177.0, "{'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"]], "resource_refs": [[153.0, "[]"], [176.0, "[{'$ref': '#/definitions/resources/gcp.region/policy'}]"]], "cloud_type": [[154.0, "<class 'c7n.resources.aws.AWS'>"], [154.0, "<class 'c7n_gcp.provider.GoogleCloud'>"]], "cloud_name": [[154.0, "'aws'"], [154.0, "'gcp'"]], "type_name": [[155.0, "'region'"]], "resource_type": [[155.0, "<class 'c7n_gcp.region.Region'>"]], "r_type_name": [[156.0, "'gcp.region'"]], "aliases": [[165.0, "[]"]], "schema": [[186.0, "{'$schema': 'http://json-schema.org/draft-07/schema#', 'id': 'http://schema.cloudcustodian.io/v0/custodian.json', 'definitions': {'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv'...ype': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}, 'type': 'object', 'required': ['policies'], 'additionalProperties': False, 'properties': {'vars': {'type': 'object'}, 'policies': {'type': 'array', 'additionalItems': False, 'items': {'anyOf': [{'$ref': '#/definitions/resources/gcp.region/policy'}]}}}}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 432, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def ios_screenshot(args: list = None) -> None:\n    \"\"\"\n        Take an iOS screenshot.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios ui screenshot <local png destination>', bold=True)\n        return\n\n    destination = args[0]\n\n    if not destination.endswith('.png'):\n        destination = destination + '.png'\n\n    api = state_connection.get_api()\n    png = api.ios_ui_screenshot()\n\n    with open(destination, 'wb') as f:\n        f.write(png)\n\n    click.secho('Screenshot saved to: {0}'.format(destination), fg='green')\n\nios_screenshot(args=['foo'])", "Selected Statement": "destination = destination + '.png'", "Function Input": {"args": "['foo']"}, "Variable Values Before Statement": {"destination": "'foo'"}, "Value After Statement Execution": "'foo.png'", "Variable States During Runtime": {"args": [[1, "['foo']"]], "destination": [[13.0, "'foo'"], [16.0, "'foo.png'"]], "api": [[18.0, "<MagicMock name='get_api()' id='140041828273504'>"]], "png": [[19.0, "b'\\x00'"]], "f": [[21.0, "<MagicMock name='open().__enter__()' id='140041828431664'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 459, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "file_lines[line - 1] = content + \"\\n\"", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"content": "'new second line'"}, "Value After Statement Execution": "['first line\\n', 'new second line\\n', 'third line']", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 431, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_grad_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    slices = tuple([slice(1,-1,None)] * ndim)\n    for i in range(ndim):\n        assert grad(u, axis=i) == pytest.approx(2*xc[i][slices])\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad_nd(n=92, ndim=1)", "Selected Statement": "coords = [np.arange(n)] * ndim", "Function Input": {"n": "92", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]", "Variable States During Runtime": {"n": [[1, "92"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "u": [[6.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "ucopy": [[7.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "slices": [[10.0, "(slice(1, -1, None),)"]], "i": [[11.0, "0"]], "@py_assert3": [[12.0, "None"]], "@py_assert7": [[12.0, "None"]], "@py_assert9": [[12.0, "None"]], "@py_assert11": [[12.0, "None"]], "@py_assert13": [[12.0, "None"]], "@py_assert14": [[12.0, "None"]], "@py_assert5": [[12.0, "None"]], "@py_assert1": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 444, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def base64url_decode(input: Union[bytes, str]) -> bytes:\n    input_bytes = force_bytes(input)\n\n    rem = len(input_bytes) % 4\n\n    if rem > 0:\n        input_bytes += b\"=\" * (4 - rem)\n\n    return base64.urlsafe_b64decode(input_bytes)\n\nbase64url_decode(input='hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg')", "Selected Statement": "rem = len(input_bytes) % 4", "Function Input": {"input": "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "3", "Variable States During Runtime": {"input": [[1, "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"]], "input_bytes": [[2.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"], [7.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg='"]], "rem": [[4.0, "3"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 475, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def set_bbox(self, bbox: Rect) -> None:\n        (x0, y0, x1, y1) = bbox\n        self.x0 = x0\n        self.y0 = y0\n        self.x1 = x1\n        self.y1 = y1\n        self.width = x1 - x0\n        self.height = y1 - y0\n        self.bbox = bbox\n\nset_bbox(self=REPR FAILED, bbox=[0, 100, 0, 100])", "Selected Statement": "self.width = x1 - x0", "Function Input": {"self": "REPR FAILED", "bbox": "[0, 100, 0, 100]"}, "Variable Values Before Statement": {"x1": "0", "x0": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "REPR FAILED"], [9.0, "<LTContainer 0.000,100.000,0.000,100.000>"]], "bbox": [[1, "[0, 100, 0, 100]"]], "x0": [[2.0, "0"]], "y0": [[2.0, "100"]], "x1": [[2.0, "0"]], "y1": [[2.0, "100"]], "self.x0": [[3.0, "0"]], "self.y0": [[4.0, "100"]], "self.x1": [[5.0, "0"]], "self.y1": [[6.0, "100"]], "self.width": [[7.0, "0"]], "self.height": [[8.0, "0"]], "self.bbox": [[9.0, "[0, 100, 0, 100]"]]}, "Program Information": "Project Name: pdfminer+pdfminer.six", "idx": 422, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parse_access_method(access_method: str):\n    num_workers = 0\n    scheduler = \"threaded\"\n    download = access_method.startswith(\"download\")\n    local = access_method.startswith(\"local\")\n    if download or local:\n        split = access_method.split(\":\")\n        if len(split) == 1:\n            split.extend((\"threaded\", \"0\"))\n        elif len(split) == 2:\n            split.append(\"threaded\" if split[1].isnumeric() else \"0\")\n        elif len(split) >= 3:\n            num_integers = sum(1 for i in split if i.isnumeric())\n            if num_integers != 1 or len(split) > 3:\n                raise ValueError(\n                    \"Invalid access_method format. Expected format is one of the following: {download, download:scheduler, download:num_workers, download:scheduler:num_workers, download:num_workers:scheduler}\"\n                )\n\n        access_method = \"download\" if download else \"local\"\n        num_worker_index = 1 if split[1].isnumeric() else 2\n        scheduler_index = 3 - num_worker_index\n        num_workers = int(split[num_worker_index])\n        scheduler = split[scheduler_index]\n    return access_method, num_workers, scheduler\n\nparse_access_method(access_method='download')", "Selected Statement": "scheduler_index = 3 - num_worker_index", "Function Input": {"access_method": "'download'"}, "Variable Values Before Statement": {"num_worker_index": "2"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"access_method": [[1, "'download'"]], "num_workers": [[2.0, "0"]], "scheduler": [[3.0, "'threaded'"]], "download": [[4.0, "True"]], "local": [[5.0, "False"]], "split": [[7.0, "['download']"], [9.0, "['download', 'threaded', '0']"]], "num_worker_index": [[20.0, "2"]], "scheduler_index": [[21.0, "1"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 454, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_forward_nd_slanted_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is slanted on the first dimension, so the target will be shifted\n    # source on the first dimension by A\n    A = n / 6.0\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = xs[0] * A\n    target = sb.forward(source, phi)\n\n    xs2 = np.copy(xs)\n    xs2[0] -= A\n    xs2_sq = reduce(lambda x,y:x+y*y, xs2, 0.0)\n    target_calc = np.exp(-xs2_sq / (2*sigma**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_slanted_pot(n=100, ndim=1, abs=None)", "Selected Statement": "x = np.arange(n) - n / 2.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [21.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "A": [[8.0, "16.666666666666668"]], "sigma": [[9.0, "3.3333333333333335"]], "source": [[10.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[12.0, "array([-833.33333333, -816.66666667, -800.        , -783.33333333,       -766.66666667, -750.        , -733.33333333, -716.66666667,       -700.        , -683.33333333, -666.66666667, -650.        ,       -633.33333333, -616.66666667, -600.        , -583.33333333,       -566.66666667, -550.        , -533.33333333, -516.66666667,       -500.        , -483.33333333, -466.66666667, -450.        ,       -433.33333333, -416.66666667, -400.        , -383.33333333,       -366.66666667, -350.        , -333.33333333, -316.66666667,       -300.        , -283.33333333, -266.66666667, -250.        ,       -233.33333333, -216.66666667, -200.        , -183.33333333,       -166.66666667, -150.        , -133.33333333, -116.66666667,       -100.        ,  -83.33333333,  -66.66666667,  -50.        ,        -33.33333333,  -16.66666667,    0.        ,   16.66666667,         33.33333333,   50.        ,   66.66666667,   83.33333333,        100.        ,  116.66666667,  133.33333333,  150.        ,        166.66666667,  183.33333333,  200.        ,  216.66666667,        233.33333333,  250.        ,  266.66666667,  283.33333333,        300.        ,  316.66666667,  333.33333333,  350.        ,        366.66666667,  383.33333333,  400.        ,  416.66666667,        433.33333333,  450.        ,  466.66666667,  483.33333333,        500.        ,  516.66666667,  533.33333333,  550.        ,        566.66666667,  583.33333333,  600.        ,  616.66666667,        633.33333333,  650.        ,  666.66666667,  683.33333333,        700.        ,  716.66666667,  733.33333333,  750.        ,        766.66666667,  783.33333333,  800.        ,  816.66666667])"]], "target": [[13.0, "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 4.06920181e-48, 3.20724834e-46, 2.31075854e-44,       1.52188819e-42, 9.16273954e-41, 5.04302641e-39, 2.53740658e-37,       1.16716481e-35, 4.90827418e-34, 1.88708742e-32, 6.63337857e-31,       2.13192075e-29, 6.26492385e-28, 1.68339106e-26, 4.13614560e-25,       9.29322466e-24, 1.90948503e-22, 3.58811078e-21, 6.16647454e-20,       9.69287214e-19, 1.39359494e-17, 1.83279714e-16, 2.20501882e-15,       2.42693184e-14, 2.44387199e-13, 2.25166580e-12, 1.89829483e-11,       1.46449459e-10, 1.03396690e-09, 6.68114154e-09, 3.95139172e-08,       2.13911719e-07, 1.06006637e-06, 4.80920541e-06, 1.99747687e-05,       7.59596517e-05, 2.64484047e-04, 8.43240507e-04, 2.46182046e-03,       6.58155885e-03, 1.61131343e-02, 3.61258608e-02, 7.41733503e-02,       1.39466583e-01, 2.40149955e-01, 3.78685730e-01, 5.46827108e-01,       7.23074611e-01, 8.75512635e-01, 9.70664988e-01, 9.85332494e-01,       9.15755058e-01, 7.79172411e-01, 6.06901959e-01, 4.32718993e-01,       2.82401211e-01, 1.68682641e-01, 9.22119378e-02, 4.61303118e-02,       2.11172721e-02, 8.84527769e-03, 3.38983023e-03, 1.18852559e-03,       3.81219734e-04, 1.11854006e-04, 3.00200330e-05, 7.36935486e-06,       1.65456117e-06, 3.39741645e-07, 6.37978546e-08, 1.09555606e-08,       1.72034467e-09, 2.47019294e-10, 3.24312866e-11, 3.89313794e-12,       4.27290433e-13, 4.28766413e-14, 3.93350717e-15, 3.29905094e-16,       2.52951417e-17, 1.77302216e-18, 1.13608506e-19, 6.65454790e-21])"]], "xs2": [[15.0, "array([[-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,        -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,        -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,        -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,         -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,          5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,         16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,         27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,         38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,         49.]])"], [16.0, "array([[-66.66666667, -65.66666667, -64.66666667, -63.66666667,        -62.66666667, -61.66666667, -60.66666667, -59.66666667,        -58.66666667, -57.66666667, -56.66666667, -55.66666667,        -54.66666667, -53.66666667, -52.66666667, -51.66666667,        -50.66666667, -49.66666667, -48.66666667, -47.66666667,        -46.66666667, -45.66666667, -44.66666667, -43.66666667,        -42.66666667, -41.66666667, -40.66666667, -39.66666667,        -38.66666667, -37.66666667, -36.66666667, -35.66666667,        -34.66666667, -33.66666667, -32.66666667, -31.66666667,        -30.66666667, -29.66666667, -28.66666667, -27.66666667,        -26.66666667, -25.66666667, -24.66666667, -23.66666667,        -22.66666667, -21.66666667, -20.66666667, -19.66666667,        -18.66666667, -17.66666667, -16.66666667, -15.66666667,        -14.66666667, -13.66666667, -12.66666667, -11.66666667,        -10.66666667,  -9.66666667,  -8.66666667,  -7.66666667,         -6.66666667,  -5.66666667,  -4.66666667,  -3.66666667,         -2.66666667,  -1.66666667,  -0.66666667,   0.33333333,          1.33333333,   2.33333333,   3.33333333,   4.33333333,          5.33333333,   6.33333333,   7.33333333,   8.33333333,          9.33333333,  10.33333333,  11.33333333,  12.33333333,         13.33333333,  14.33333333,  15.33333333,  16.33333333,         17.33333333,  18.33333333,  19.33333333,  20.33333333,         21.33333333,  22.33333333,  23.33333333,  24.33333333,         25.33333333,  26.33333333,  27.33333333,  28.33333333,         29.33333333,  30.33333333,  31.33333333,  32.33333333]])"]], "xs2_sq": [[17.0, "array([4.44444444e+03, 4.31211111e+03, 4.18177778e+03, 4.05344444e+03,       3.92711111e+03, 3.80277778e+03, 3.68044444e+03, 3.56011111e+03,       3.44177778e+03, 3.32544444e+03, 3.21111111e+03, 3.09877778e+03,       2.98844444e+03, 2.88011111e+03, 2.77377778e+03, 2.66944444e+03,       2.56711111e+03, 2.46677778e+03, 2.36844444e+03, 2.27211111e+03,       2.17777778e+03, 2.08544444e+03, 1.99511111e+03, 1.90677778e+03,       1.82044444e+03, 1.73611111e+03, 1.65377778e+03, 1.57344444e+03,       1.49511111e+03, 1.41877778e+03, 1.34444444e+03, 1.27211111e+03,       1.20177778e+03, 1.13344444e+03, 1.06711111e+03, 1.00277778e+03,       9.40444444e+02, 8.80111111e+02, 8.21777778e+02, 7.65444444e+02,       7.11111111e+02, 6.58777778e+02, 6.08444444e+02, 5.60111111e+02,       5.13777778e+02, 4.69444444e+02, 4.27111111e+02, 3.86777778e+02,       3.48444444e+02, 3.12111111e+02, 2.77777778e+02, 2.45444444e+02,       2.15111111e+02, 1.86777778e+02, 1.60444444e+02, 1.36111111e+02,       1.13777778e+02, 9.34444444e+01, 7.51111111e+01, 5.87777778e+01,       4.44444444e+01, 3.21111111e+01, 2.17777778e+01, 1.34444444e+01,       7.11111111e+00, 2.77777778e+00, 4.44444444e-01, 1.11111111e-01,       1.77777778e+00, 5.44444444e+00, 1.11111111e+01, 1.87777778e+01,       2.84444444e+01, 4.01111111e+01, 5.37777778e+01, 6.94444444e+01,       8.71111111e+01, 1.06777778e+02, 1.28444444e+02, 1.52111111e+02,       1.77777778e+02, 2.05444444e+02, 2.35111111e+02, 2.66777778e+02,       3.00444444e+02, 3.36111111e+02, 3.73777778e+02, 4.13444444e+02,       4.55111111e+02, 4.98777778e+02, 5.44444444e+02, 5.92111111e+02,       6.41777778e+02, 6.93444444e+02, 7.47111111e+02, 8.02777778e+02,       8.60444444e+02, 9.20111111e+02, 9.81777778e+02, 1.04544444e+03])"]], "target_calc": [[18.0, "array([1.38389653e-87, 5.33736937e-85, 1.88132746e-82, 6.06059172e-80,       1.78434636e-77, 4.80127724e-75, 1.18072268e-72, 2.65370429e-70,       5.45093048e-68, 1.02329831e-65, 1.75568810e-63, 2.75299848e-61,       3.94528221e-59, 5.16729996e-57, 6.18532849e-55, 6.76667568e-53,       6.76552418e-51, 6.18217132e-49, 5.16290482e-47, 3.94058498e-45,       2.74878501e-43, 1.75240444e-41, 1.02103685e-39, 5.43703314e-38,       2.64603779e-36, 1.17691094e-34, 4.78414856e-33, 1.77737558e-31,       6.03486081e-30, 1.87270255e-28, 5.31109225e-27, 1.37661464e-25,       3.26102718e-24, 7.06008534e-23, 1.39694394e-21, 2.52616378e-20,       4.17501006e-19, 6.30618989e-18, 8.70542662e-17, 1.09831413e-15,       1.26641655e-14, 1.33456608e-13, 1.28533723e-12, 1.13137762e-11,       9.10147076e-11, 6.69158609e-10, 4.49634946e-09, 2.76124246e-08,       1.54975314e-07, 7.94939362e-07, 3.72665317e-06, 1.59667839e-05,       6.25215038e-05, 2.23745794e-04, 7.31802419e-04, 2.18749112e-03,       5.97602290e-03, 1.49207861e-02, 3.40474547e-02, 7.10053537e-02,       1.35335283e-01, 2.35746077e-01, 3.75311099e-01, 5.46074427e-01,       7.26149037e-01, 8.82496903e-01, 9.80198673e-01, 9.95012479e-01,       9.23116346e-01, 7.82704538e-01, 6.06530660e-01, 4.29557358e-01,       2.78037300e-01, 1.64474457e-01, 8.89216175e-02, 4.39369336e-02,       1.98410947e-02, 8.18870101e-03, 3.08871541e-03, 1.06476624e-03,       3.35462628e-04, 9.65934137e-05, 2.54193465e-05, 6.11356797e-06,       1.34381228e-06, 2.69957850e-07, 4.95640532e-08, 8.31670246e-09,       1.27540763e-09, 1.78755887e-10, 2.28973485e-11, 2.68054764e-12,       2.86797501e-13, 2.80440474e-14, 2.50622189e-15, 2.04697171e-16,       1.52797997e-17, 1.04240618e-18, 6.49934797e-20, 3.70353198e-21])"]], "@py_assert3": [[22.0, "None"]], "@py_assert7": [[22.0, "None"]], "@py_assert1": [[22.0, "None"]], "@py_assert4": [[25.0, "None"]], "@py_assert6": [[25.0, "None"]], "@py_assert8": [[28.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 452, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def __build_func(verb, args, kwargs={}):\n        params = ['self']\n        params += ['%s' % stringcase.snakecase(k) for k in args]\n        params += ['%s=%s' % (stringcase.snakecase(k), v) for k, v in kwargs.items()]\n        largs = list(args) + list(kwargs.keys())\n        return eval(\n            'lambda %s: self._%s(%s)' % (\n                ','.join(params), verb, ','.join(['%s=%s' % (k, stringcase.snakecase(k)) for k in largs])\n            )\n        )\n\n__build_func(verb='get', args=[], kwargs={})", "Selected Statement": "largs = list(args) + list(kwargs.keys())", "Function Input": {"verb": "'get'", "args": "[]", "kwargs": "{}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"verb": [[1, "'get'"]], "args": [[1, "[]"]], "kwargs": [[1, "{}"]], "params": [[2.0, "['self']"]], "largs": [[5.0, "[]"]]}, "Program Information": "Project Name: alisaifee+pyutrack", "idx": 466, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _add_notice_to_docstring(doc, no_doc_str, notice):\n    \"\"\"Adds a deprecation notice to a docstring.\"\"\"\n    if not doc:\n        lines = [no_doc_str]\n\n    else:\n        lines = _normalize_docstring(doc).splitlines()\n\n    notice = [''] + notice\n\n    if len(lines) > 1:\n        # Make sure that we keep our distance from the main body\n        if lines[1].strip():\n            notice.append('')\n\n        lines[1:1] = notice\n    else:\n        lines += notice\n\n    return '\\n'.join(lines)\n\n_add_notice_to_docstring(doc=None, no_doc_str='DEPRECATED FUNCTION', notice=['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        '])", "Selected Statement": "notice = [''] + notice", "Function Input": {"doc": "None", "no_doc_str": "'DEPRECATED FUNCTION'", "notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Variable Values Before Statement": {"notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Value After Statement Execution": "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']", "Variable States During Runtime": {"doc": [[1, "None"]], "no_doc_str": [[1, "'DEPRECATED FUNCTION'"]], "notice": [[1, "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"], [9.0, "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]], "lines": [[4.0, "['DEPRECATED FUNCTION']"], [18.0, "['DEPRECATED FUNCTION', '', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 411, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def client_factory(client_name, **kwargs):\n    \"\"\"Return a client for an external data set\"\"\"\n    # set up\n    dir_name = os.path.dirname(os.path.abspath(__file__))\n    error_msg = 'No client found for name %s' % client_name\n    client_key = client_name.upper()\n\n    # find client\n    try:\n        client_vals = BALANCING_AUTHORITIES[client_key]\n        module_name = client_vals['module']\n\n        class_name = client_vals['class']\n    except KeyError:\n        raise ValueError(error_msg)\n\n    # find module\n    try:\n        fp, pathname, description = imp.find_module(module_name, [dir_name])\n    except ImportError:\n        raise ValueError(error_msg)\n\n    # load\n    try:\n        mod = imp.load_module(module_name, fp, pathname, description)\n    finally:\n        # Since we may exit via an exception, close fp explicitly.\n        if fp:\n            fp.close()\n\n    # instantiate class\n    try:\n        client_inst = getattr(mod, class_name)(**kwargs)\n    except AttributeError:\n        raise ValueError(error_msg)\n\n    # set name\n    client_inst.NAME = client_name\n\n    return client_inst\n\nclient_factory(client_name='MISO', kwargs={})", "Selected Statement": "error_msg = 'No client found for name %s' % client_name", "Function Input": {"client_name": "'MISO'", "kwargs": "{}"}, "Variable Values Before Statement": {"client_name": "'MISO'"}, "Value After Statement Execution": "'No client found for name MISO'", "Variable States During Runtime": {"client_name": [[1, "'MISO'"]], "kwargs": [[1, "{}"]], "dir_name": [[4.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso'"]], "error_msg": [[5.0, "'No client found for name MISO'"]], "client_key": [[6.0, "'MISO'"]], "client_vals": [[10.0, "{'module': 'miso', 'class': 'MISOClient'}"]], "module_name": [[11.0, "'miso'"]], "class_name": [[13.0, "'MISOClient'"]], "fp": [[19.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py' mode='r' encoding='utf-8'>"]], "pathname": [[19.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py'"]], "description": [[19.0, "('.py', 'r', 1)"]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 406, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def rowcol_to_a1(row, col):\n    \"\"\"Translates a row and column cell address to A1 notation.\n\n    :param row: The row of the cell to be converted.\n        Rows start at index 1.\n    :type row: int, str\n\n    :param col: The column of the cell to be converted.\n        Columns start at index 1.\n    :type row: int, str\n\n    :returns: a string containing the cell's coordinates in A1 notation.\n\n    Example:\n\n    >>> rowcol_to_a1(1, 1)\n    A1\n\n    \"\"\"\n    row = int(row)\n    col = int(col)\n\n    if row < 1 or col < 1:\n        raise IncorrectCellLabel(\"({}, {})\".format(row, col))\n\n    div = col\n    column_label = \"\"\n\n    while div:\n        (div, mod) = divmod(div, 26)\n        if mod == 0:\n            mod = 26\n            div -= 1\n        column_label = chr(mod + MAGIC_NUMBER) + column_label\n\n    label = \"{}{}\".format(column_label, row)\n\n    return label\n\nrowcol_to_a1(row=4, col=4)", "Selected Statement": "column_label = chr(mod + MAGIC_NUMBER) + column_label", "Function Input": {"row": "4", "col": "4"}, "Variable Values Before Statement": {"column_label": "''"}, "Value After Statement Execution": "'D'", "Variable States During Runtime": {"row": [[1, "4"]], "col": [[1, "4"]], "div": [[26.0, "4"], [30.0, "0"]], "column_label": [[27.0, "''"], [34.0, "'D'"]], "mod": [[30.0, "4"]], "label": [[36.0, "'D4'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 462, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _get_channels(self, mode, width_mult):\n        if mode == \"small\":\n            channels = [16, 16, 24, 48, 576]\n        else:\n            channels = [16, 24, 40, 112, 960]\n        channels = [\n            3,\n        ] + [_make_divisible(x * width_mult) for x in channels]\n        return tuple(channels)\n\n_get_channels(self=MobileNetV3Encoder(), mode='large', width_mult=0.75, self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._depth=3, self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._mode='large', self._modules=OrderedDict(), self._non_persistent_buffers_set=set(), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.training=True)", "Selected Statement": "channels = [", "Function Input": {"self": "MobileNetV3Encoder()", "mode": "'large'", "width_mult": "0.75", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._depth": "3", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._mode": "'large'", "self._modules": "OrderedDict()", "self._non_persistent_buffers_set": "set()", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.training": "True"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[3, 16, 24, 32, 88, 720]", "Variable States During Runtime": {"self": [[1, "MobileNetV3Encoder()"]], "mode": [[1, "'large'"]], "width_mult": [[1, "0.75"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._depth": [[1, "3"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._mode": [[1, "'large'"]], "self._modules": [[1, "OrderedDict()"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.training": [[1, "True"]], "channels": [[5.0, "[16, 24, 40, 112, 960]"], [6.0, "[3, 16, 24, 32, 88, 720]"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 470, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "bots = [None]*4", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[None, None, None, None]", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 433, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def serialize_chunkids(version: str, arr: np.ndarray) -> memoryview:\n    \"\"\"Serializes chunk ID encoders into a single byte stream. This is how the encoders will be written to the storage provider.\n\n    Args:\n        version: (str) Version of deeplake library.\n        arr: (np.ndarray) Encoded chunk ids from a `ChunkIdEncoder` instance.\n\n    Returns:\n        Serialized chunk ids as memoryview.\n    \"\"\"\n    len_version = len(version)\n    write_dtype = version_compare(version, \"2.7.6\") >= 0\n    flatbuff = bytearray(1 + int(write_dtype) + len_version + arr.nbytes)\n\n    # Write version\n    len_version = len(version)\n    flatbuff[0] = len_version\n    flatbuff[1 : 1 + len_version] = version.encode(\"ascii\")\n    offset = 1 + len_version\n\n    # write encoder dtype\n    if write_dtype:\n        dtype = arr.dtype\n        num_bytes = int(dtype.itemsize)\n        flatbuff[offset] = num_bytes\n        offset += 1\n\n    # Write ids\n    flatbuff[offset : offset + arr.nbytes] = arr.tobytes()\n    offset += arr.nbytes\n    return memoryview(flatbuff)\n\nserialize_chunkids(version='3.8.18', arr=array([], shape=(0, 2), dtype=uint64))", "Selected Statement": "offset = 1 + len_version", "Function Input": {"version": "'3.8.18'", "arr": "array([], shape=(0, 2), dtype=uint64)"}, "Variable Values Before Statement": {"len_version": "6"}, "Value After Statement Execution": "7", "Variable States During Runtime": {"version": [[1, "'3.8.18'"]], "arr": [[1, "array([], shape=(0, 2), dtype=uint64)"]], "len_version": [[11.0, "6"]], "write_dtype": [[12.0, "True"]], "flatbuff": [[13.0, "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [17.0, "bytearray(b'\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [18.0, "bytearray(b'\\x063.8.18\\x00')"], [25.0, "bytearray(b'\\x063.8.18\\x08')"]], "offset": [[19.0, "7"], [26.0, "8"]], "dtype": [[23.0, "dtype('uint64')"]], "num_bytes": [[24.0, "8"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 455, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "coeff_name = \" \" * 12", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'            '", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 420, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def aes(text, key):\n    pad = 16 - len(text) % 16\n    text = text + bytearray([pad] * pad)\n    encryptor = AES.new(key, 2, b\"0102030405060708\")\n    ciphertext = encryptor.encrypt(text)\n    return base64.b64encode(ciphertext)\n\naes(text=b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}', key=b'0CoJUm6Qyw8W8jud')", "Selected Statement": "pad = 16 - len(text) % 16", "Function Input": {"text": "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'", "key": "b'0CoJUm6Qyw8W8jud'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "15", "Variable States During Runtime": {"text": [[1, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'"], [3.0, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f'"]], "key": [[1, "b'0CoJUm6Qyw8W8jud'"]], "pad": [[2.0, "15"]], "encryptor": [[4.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>, <bound method CbcMode.decrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"], [5.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"]], "ciphertext": [[5.0, "b'}8(\\n\\x91;\\xe9\\xca\\x03\\x0b+\\xc3\\xb6\\xb5\\xef\\xc2\\x06\\x0e\\xae?i\\xd3\\x1d\\xd2b\\x9d\\x1c\\xea\\x80\\xf9v\\x1c\\xac{\\x06\\xa2YS*\\xfd\\xbc\\xf6*\\x8fZS\\x12\\xec\\xe8yZ\\x06\\x19d\\x96\\xb6E`\\x11G\\x01V\\xcf\\xa7\\xcf\\xbd\\x90{VxT\\xe3\\x1c\\xc4!\\x96,p3\\xffK\\xc7g\\x17\\xfc\\x0c\\x11\\xdf\\\\\\xff\\xa8\\x84,\\x85j\\x12'"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 460, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def nautical(kilometers=0, meters=0, miles=0, feet=0):\n    \"\"\"\n    Convert distance to nautical miles.\n    \"\"\"\n    ret = 0.\n    if feet:\n        kilometers += feet / ft(1.)\n    if miles:\n        kilometers += km(miles=miles)\n    if meters:\n        kilometers += meters / 1000.\n    ret += kilometers / 1.852\n    return ret\n\nnautical(kilometers=1.0, meters=0, miles=0, feet=0)", "Selected Statement": "ret = 0.", "Function Input": {"kilometers": "1.0", "meters": "0", "miles": "0", "feet": "0"}, "Variable Values Before Statement": {"Constant": "0."}, "Value After Statement Execution": "0.", "Variable States During Runtime": {"kilometers": [[1, "1.0"]], "meters": [[1, "0"]], "miles": [[1, "0"]], "feet": [[1, "0"]], "ret": [[5.0, "0.0"], [12.0, "0.5399568034557235"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 481, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def driver():\n    TEST_BROWSER = os.environ.get(\"TEST_BROWSER\", \"chrome\").lower()\n\n    if TEST_BROWSER == \"chrome\":\n        options = webdriver.ChromeOptions()\n        options.headless = True\n        capabilities = DesiredCapabilities.CHROME\n        capabilities[\"goog:loggingPrefs\"] = {\"browser\": \"ALL\"}\n\n        if platform.system() == \"Windows\":\n            options.binary_location = \"C:/Program Files/Google/Chrome/Application/chrome.exe\"\n\n        driver = webdriver.Chrome(\n            ChromeDriverManager().install(),\n            options=options,\n            desired_capabilities=capabilities,\n            service_log_path=os.path.devnull,\n        )\n\n    # Firefox doesn't currently supported pulling JavaScript console logs, which we currently scan to affirm that\n    # JS/Python can communicate in some places. So for now, we can't really use firefox/geckodriver during testing.\n    # This may be added in the future: https://github.com/mozilla/geckodriver/issues/284\n\n    # elif TEST_BROWSER == \"firefox\":\n    #     options = webdriver.FirefoxOptions()\n    #     options.headless = True\n    #     capabilities = DesiredCapabilities.FIREFOX\n    #     capabilities['loggingPrefs'] = {\"browser\": \"ALL\"}\n    #\n    #     driver = webdriver.Firefox(options=options, capabilities=capabilities, service_log_path=os.path.devnull)\n\n    else:\n        raise ValueError(f\"Unsupported browser for testing: {TEST_BROWSER}\")\n\n    with mock.patch(\"eel.browsers.open\"):\n        yield driver\n\ndriver()", "Selected Statement": "options.headless = True", "Function Input": {}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"TEST_BROWSER": [[2.0, "'chrome'"]], "options": [[5.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None}"], [6.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None, headless=True}"]], "capabilities": [[7.0, "{'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}}"]]}, "Program Information": "Project Name: python-eel+Eel", "idx": 489, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def count_messages_tokens(messages=[], model=None):\n    \"\"\"\n    Count the number of tokens in a list of messages\n    \"\"\"\n    try:\n        tokens_used = 0\n\n        for message in messages:\n            if isinstance(message, str):\n                tokens_used += count_tokens(message, model=model)\n            elif \"message\" in message:\n                tokens_used += count_tokens(message[\"message\"], model=model)\n\n                if \"code\" in message:\n                    tokens_used += count_tokens(message[\"code\"], model=model)\n\n                if \"output\" in message:\n                    tokens_used += count_tokens(message[\"output\"], model=model)\n\n        prompt_cost = token_cost(tokens_used, model=model)\n\n        return (tokens_used, prompt_cost)\n    except:\n        # Non-essential feature\n        return (0, 0)\n\ncount_messages_tokens(messages=[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], model='gpt-3.5-turbo')", "Selected Statement": "tokens_used = 0", "Function Input": {"messages": "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]", "model": "'gpt-3.5-turbo'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"messages": [[1, "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]"]], "model": [[1, "'gpt-3.5-turbo'"]], "tokens_used": [[6.0, "0"], [12.0, "360"]], "message": [[8.0, "{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}"]], "prompt_cost": [[20.0, "0.00054"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 486, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_air_quality(city):\n    \"\"\"\n    \u901a\u8fc7\u57ce\u5e02\u540d\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\n    \u5b98\u7f51\uff1ahttp://aqicn.org/here/\n    token \u7533\u8bf7\u5730\u5740\uff1ahttp://aqicn.org/data-platform/token/#/\n    :param city: \u57ce\u5e02\n    :return:\n    \"\"\"\n\n    if not city or not city.strip():\n        return\n    print('\u83b7\u53d6 {} \u7684\u7a7a\u6c14\u8d28\u91cf...'.format(city))\n    try:\n\n        url = 'http://api.waqi.info/feed/{city}/?token={token}'.format(city=city, token=AQICN_TOKEN)\n        resp = requests.get(url)\n        if resp.status_code == 200:\n            # print(resp.text)\n            content_dict = resp.json()\n            if content_dict.get('status') == 'ok':\n                data_dict = content_dict['data']\n                aqi = data_dict['aqi']\n                air_status = '\u4e25\u91cd\u6c61\u67d3'\n                for key in sorted(AIR_STATUS_DICT):\n                    if key >= aqi:\n                        air_status = AIR_STATUS_DICT[key]\n                        break\n                aqi_info = '{city} PM2.5\uff1a{aqi} {air_status}'.format(city=city, aqi=aqi, air_status=air_status)\n                # print(aqi_info)\n                return aqi_info\n            else:\n                print('\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\u5931\u8d25:{}'.format(content_dict['data']))\n                return None\n        print('\u83b7\u53d6\u7a7a\u6c14\u8d28\u91cf\u5931\u8d25\u3002')\n    except Exception as exception:\n        print(str(exception))\n    return None\n\nget_air_quality(city='\u6842\u6797')", "Selected Statement": "air_status = '\u4e25\u91cd\u6c61\u67d3'", "Function Input": {"city": "'\u6842\u6797'"}, "Variable Values Before Statement": {"Constant": "'\u4e25\u91cd\u6c61\u67d3'"}, "Value After Statement Execution": "'\u4e25\u91cd\u6c61\u67d3'", "Variable States During Runtime": {"city": [[1, "'\u6842\u6797'"]], "url": [[15.0, "'http://api.waqi.info/feed/\u6842\u6797/?token=6382db85ef321ae81f316486de0b5b8aa6c84f62'"]], "resp": [[16.0, "<Response [200]>"]], "content_dict": [[19.0, "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"]], "data_dict": [[21.0, "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (\u5e7f\u897f\u58ee\u65cf\u81ea\u6cbb\u533a\u73af\u5883\u4fdd\u62a4\u5385)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (\u6842\u6797)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}"]], "aqi": [[22.0, "50"]], "air_status": [[23.0, "'\u4e25\u91cd\u6c61\u67d3'"], [26.0, "'\u4f18'"]], "key": [[24.0, "50"]], "aqi_info": [[28.0, "'\u6842\u6797 PM2.5\uff1a50 \u4f18'"]]}, "Program Information": "Project Name: sfyc23+EverydayWechat", "idx": 509, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def initial_positions(walls):\n    \"\"\"Calculate initial positions.\n\n    Given the list of walls, returns the free positions that are closest to the\n    bottom left and top right corner. The algorithm starts searching from\n    (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n    for judging what is closest. On equal distances, a smaller distance in the\n    x value is preferred.\n    \"\"\"\n    width = max(walls)[0] + 1\n    height = max(walls)[1] + 1\n\n    left_start = (1, height - 2)\n    left = []\n    right_start = (width - 2, 1)\n    right = []\n\n    dist = 0\n    while len(left) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (left_start[0] + x_dist, left_start[1] - y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                left.append(pos)\n\n            if len(left) == 2:\n                break\n\n        dist += 1\n\n    dist = 0\n    while len(right) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (right_start[0] - x_dist, right_start[1] + y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                right.append(pos)\n\n            if len(right) == 2:\n                break\n\n        dist += 1\n\n    # lower indices start further away\n    left.reverse()\n    right.reverse()\n    return [left[0], right[0], left[1], right[1]]\n\ninitial_positions(walls=[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "Selected Statement": "dist = 0", "Function Input": {"walls": "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"walls": [[1, "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"]], "width": [[10.0, "8"]], "height": [[11.0, "4"]], "left_start": [[13.0, "(1, 2)"]], "left": [[14.0, "[]"], [32.0, "[(1, 2)]"], [32.0, "[(1, 2), (1, 1)]"], [61.0, "[(1, 1), (1, 2)]"]], "right_start": [[15.0, "(6, 1)"]], "right": [[16.0, "[]"], [53.0, "[(6, 1)]"], [53.0, "[(6, 1), (6, 2)]"], [62.0, "[(6, 2), (6, 1)]"]], "dist": [[18.0, "0"], [37.0, "1"], [37.0, "2"], [39.0, "0"], [58.0, "1"], [58.0, "2"]], "x_dist": [[21.0, "0"]], "y_dist": [[22.0, "0"], [22.0, "1"], [43.0, "0"], [43.0, "1"]], "pos": [[23.0, "(1, 2)"], [23.0, "(1, 1)"], [44.0, "(6, 1)"], [44.0, "(6, 2)"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 508, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _pntcoord(sol, i, n, m, distances, prec):\n    \"\"\"\n    Generate coordinates for point i in constellation to points m and n.\n\n    Check if these coordinates are valid with all other points in the solution.\n    \"\"\"\n    tmppnt = []\n\n    state = 1\n\n    pntscount = len(sol)\n\n    # if no distances known, return empty result and the unknown-state\n    if distances[i, n] < -0.5 or distances[i, m] < -0.5:\n        return tmppnt, state\n\n    # if the Triangle inequality is not fullfilled give a contradiction\n    if distances[i, n] + distances[i, m] < _dist(sol[n], sol[m]):\n        state = 2\n        return tmppnt, state\n\n    # generate the affine rotation to bring the points in the right place\n    g = _affinef(*_invtranmat(*_tranmat(sol[n], sol[m])))\n\n    # generate the coordinates\n    x = _xvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n    y1, y2 = _yvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n\n    # generate the possible positons\n    pos1 = g(np.array([x, y1]))\n    pos2 = g(np.array([x, y2]))\n\n    valid1 = True\n    valid2 = True\n\n    # check if the possible positions are valid\n    for k in range(pntscount):\n        if np.ndim(sol[k]) != 0 and distances[i, k] > -0.5:\n            valid1 &= abs(_dist(sol[k], pos1) - distances[i, k]) < prec\n            valid2 &= abs(_dist(sol[k], pos2) - distances[i, k]) < prec\n\n    # if any position is valid, add it to the result\n    if valid1 or valid2:\n        state = 0\n        same = abs(y1 - y2) < prec / 4.0\n        if valid1:\n            tmppnt.append(dcopy(pos1))\n        if valid2 and not same:\n            tmppnt.append(dcopy(pos2))\n    # if the positions are not valid, give a contradiction\n    else:\n        state = 2\n\n    return tmppnt, state\n\n_pntcoord(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, n=0, m=1, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "state = 1", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "n": "0", "m": "1", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"Constant": "1"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "n": [[1, "0"]], "m": [[1, "1"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "tmppnt": [[7.0, "[]"], [47.0, "[array([3.5       , 1.93649167])]"], [49.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[9.0, "1"], [44.0, "0"]], "pntscount": [[11.0, "4"]], "g": [[23.0, "<function _affinef.<locals>.func at 0x7f9d2f5dc9d0>"]], "x": [[26.0, "3.5"]], "y1": [[27.0, "1.9364916731037083"]], "y2": [[27.0, "-1.9364916731037083"]], "pos1": [[30.0, "array([3.5       , 1.93649167])"]], "pos2": [[31.0, "array([ 3.5       , -1.93649167])"]], "valid1": [[33.0, "True"]], "valid2": [[34.0, "True"]], "k": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"]], "same": [[45.0, "False"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 518, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def strip(tokens):\n        output = \"\"\n        for type_, value in tokens:\n            if type_ == TokenType.TEXT:\n                output += value\n        return output\n\nstrip(tokens=[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')])", "Selected Statement": "output = \"\"", "Function Input": {"tokens": "[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')]"}, "Variable Values Before Statement": {"Constant": "\"\""}, "Value After Statement Execution": "\"\"", "Variable States During Runtime": {"tokens": [[1, "[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')]"]], "output": [[2.0, "''"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}\\n'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}\\n{exception}'"]], "type_": [[3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "3"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "3"], [3.0, "1"], [3.0, "4"], [3.0, "1"]], "value": [[3.0, "''"], [3.0, "'\\x1b[32m'"], [3.0, "''"], [3.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' | '"], [3.0, "None"], [3.0, "''"], [3.0, "'{level: <8}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' | '"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{name}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "':'"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{function}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "':'"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{line}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' - '"], [3.0, "None"], [3.0, "''"], [3.0, "'{message}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "'\\n'"], [3.0, "'{exception}'"]]}, "Program Information": "Project Name: Delgan+loguru", "idx": 499, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def unauthorized(message):\n    response = jsonify({'error': 'unauthorized', 'message': message})\n    response.status_code = 401\n    return response\n\nunauthorized(message='Invalid credentials')", "Selected Statement": "response.status_code = 401", "Function Input": {"message": "'Invalid credentials'"}, "Variable Values Before Statement": {"Constant": "401"}, "Value After Statement Execution": "401", "Variable States During Runtime": {"message": [[1, "'Invalid credentials'"]], "response": [[2.0, "<Response 67 bytes [200 OK]>"], [3.0, "<Response 67 bytes [401 UNAUTHORIZED]>"]]}, "Program Information": "Project Name: miguelgrinberg+flasky", "idx": 513, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _check(self) -> None:\n        \"\"\"Check the syntax of the expression.\n\n        :raises ValueError:\n            If the expression is incomplete.  This error is aimed at debugging\n            the expression so it is very verbose.\n        \"\"\"\n        stack_size = 0\n        for i, token_ in enumerate(self._tokens):\n            stack_size -= token_.pops\n            if stack_size < 0:\n                raise ValueError(\n                    self._format_syntax_error(\n                        f\"'{token_}' takes {token_.pops} argument(s) but the stack\"\n                        f\" will only have {stack_size + token_.pops} element(s)\",\n                        i,\n                    )\n                )\n            stack_size += token_.puts\n        if stack_size == 0:\n            raise ValueError(\n                self._format_syntax_error(\"expression does not produce a result\")\n            )\n        if stack_size > 1:\n            raise ValueError(\n                self._format_syntax_error(\n                    f\"expression produces too many results ({stack_size}), \"\n                    \"expected 1\"\n                )\n            )\n\n_check(self=CompleteExpression([Literal(1)]), self[0]=Literal(1))", "Selected Statement": "stack_size = 0", "Function Input": {"self": "CompleteExpression([Literal(1)])", "self[0]": "Literal(1)"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "CompleteExpression([Literal(1)])"]], "self[0]": [[1, "Literal(1)"]], "stack_size": [[8.0, "0"], [19.0, "1"]], "i": [[9.0, "0"]], "token_": [[9.0, "Literal(1)"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 525, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def format_decimal(self, altitude=None):\n        \"\"\"\n        Format decimal degrees with altitude::\n\n            >>> p = Point(41.5, -81.0, 12.3)\n            >>> p.format_decimal()\n            '41.5, -81.0, 12.3km'\n            >>> p = Point(41.5, 0, 0)\n            >>> p.format_decimal()\n            '41.5, 0.0'\n\n        :param bool altitude: Whether to include ``altitude`` value.\n            By default it is automatically included if it is non-zero.\n        \"\"\"\n        coordinates = [str(self.latitude), str(self.longitude)]\n\n        if altitude is None:\n            altitude = bool(self.altitude)\n        if altitude:\n            if not isinstance(altitude, str):\n                altitude = 'km'\n            coordinates.append(self.format_altitude(altitude))\n\n        return \", \".join(coordinates)\n\nformat_decimal(self=Point(41.5, 81.0, 2.5), altitude=None, self.altitude=2.5, self.latitude=41.5, self.longitude=81.0)", "Selected Statement": "altitude = 'km'", "Function Input": {"self": "Point(41.5, 81.0, 2.5)", "altitude": "None", "self.altitude": "2.5", "self.latitude": "41.5", "self.longitude": "81.0"}, "Variable Values Before Statement": {"Constant": "'km'"}, "Value After Statement Execution": "'km'", "Variable States During Runtime": {"self": [[1, "Point(41.5, 81.0, 2.5)"]], "altitude": [[1, "None"], [18.0, "True"], [21.0, "'km'"]], "self.altitude": [[1, "2.5"]], "self.latitude": [[1, "41.5"]], "self.longitude": [[1, "81.0"]], "coordinates": [[15.0, "['41.5', '81.0']"], [22.0, "['41.5', '81.0', '2.5km']"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 482, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def can_file_be_synced_on_current_platform(path):\n    \"\"\"\n    Check if the given path can be synced locally.\n\n    Check if it makes sense to sync the file at the given path on the current\n    platform.\n    For now we don't sync any file in the ~/Library folder on GNU/Linux.\n    There might be other exceptions in the future.\n\n    Args:\n        (str): Path to the file or folder to check. If relative, prepend it\n               with the home folder.\n               'abc' becomes '~/abc'\n               '/def' stays '/def'\n\n    Returns:\n        (bool): True if given file can be synced\n    \"\"\"\n    can_be_synced = True\n\n    # If the given path is relative, prepend home\n    fullpath = os.path.join(os.environ[\"HOME\"], path)\n\n    # Compute the ~/Library path on macOS\n    # End it with a slash because we are looking for this specific folder and\n    # not any file/folder named LibrarySomething\n    library_path = os.path.join(os.environ[\"HOME\"], \"Library/\")\n\n    if platform.system() == constants.PLATFORM_LINUX:\n        if fullpath.startswith(library_path):\n            can_be_synced = False\n\n    return can_be_synced\n\ncan_file_be_synced_on_current_platform(path='some/file')", "Selected Statement": "can_be_synced = True", "Function Input": {"path": "'some/file'"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"path": [[1, "'some/file'"]], "can_be_synced": [[19.0, "True"]], "fullpath": [[22.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/some/file'"]], "library_path": [[27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/'"]]}, "Program Information": "Project Name: lra+mackup", "idx": 491, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "coeff_name = \" \" * 12", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {"Constant": "\" \" * 12"}, "Value After Statement Execution": "\" \" * 12", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 495, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_args(input_args=None):\n    parser = argparse.ArgumentParser()\n    group = parser.add_argument_group(title=\"input data\")\n    group.add_argument(\n        \"--input\",\n        type=str,\n        required=True,\n        help=\"Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated \"\n        \"list\",\n    )\n    group.add_argument(\n        \"--jsonl-keys\",\n        nargs=\"+\",\n        default=[\"text\"],\n        help=\"space separate listed of keys to extract from jsonl. Defa\",\n    )\n    group.add_argument(\n        \"--num-docs\",\n        default=None,\n        help=\"Optional: Number of documents in the input data (if known) for an accurate progress bar.\",\n        type=int,\n    )\n    group = parser.add_argument_group(title=\"tokenizer\")\n    group.add_argument(\n        \"--tokenizer-type\",\n        type=str,\n        required=True,\n        choices=[\n            \"HFGPT2Tokenizer\",\n            \"HFTokenizer\",\n            \"GPT2BPETokenizer\",\n            \"CharLevelTokenizer\",\n            \"TiktokenTokenizer\",\n            \"SPMTokenizer\",\n        ],\n        help=\"What type of tokenizer to use.\",\n    )\n    group.add_argument(\n        \"--vocab-file\", type=str, default=None, help=\"Path to the vocab file\"\n    )\n    group.add_argument(\n        \"--merge-file\",\n        type=str,\n        default=None,\n        help=\"Path to the BPE merge file (if necessary).\",\n    )\n    group.add_argument(\n        \"--append-eod\",\n        action=\"store_true\",\n        help=\"Append an <eod> token to the end of a document.\",\n    )\n    group.add_argument(\"--ftfy\", action=\"store_true\", help=\"Use ftfy to clean text\")\n    group = parser.add_argument_group(title=\"output data\")\n    group.add_argument(\n        \"--output-prefix\",\n        type=str,\n        required=True,\n        help=\"Path to binary output file without suffix\",\n    )\n    group.add_argument(\n        \"--dataset-impl\",\n        type=str,\n        default=\"mmap\",\n        choices=[\"lazy\", \"cached\", \"mmap\"],\n        help=\"Dataset implementation to use. Default: mmap\",\n    )\n\n    group = parser.add_argument_group(title=\"runtime\")\n    group.add_argument(\n        \"--workers\", type=int, default=1, help=\"Number of worker processes to launch\"\n    )\n    group.add_argument(\n        \"--log-interval\",\n        type=int,\n        default=100,\n        help=\"Interval between progress updates\",\n    )\n    args = parser.parse_args(input_args)\n    args.keep_empty = False\n\n    # some default/dummy values for the tokenizer\n    args.rank = 0\n    args.make_vocab_size_divisible_by = 128\n    args.model_parallel_size = 1\n\n    return args\n\nget_args(input_args=['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])", "Selected Statement": "args.keep_empty = False", "Function Input": {"input_args": "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"input_args": [[1, "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"]], "parser": [[2.0, "ArgumentParser(prog='__main__.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)"]], "group": [[3.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[]}"], [4.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)]}"], [11.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)]}"], [17.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)]}"], [23.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[]}"], [24.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)]}"], [38.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)]}"], [41.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)]}"], [47.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)]}"], [52.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)]}"], [53.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[]}"], [54.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)]}"], [60.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)]}"], [68.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[]}"], [69.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)]}"], [72.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), '--log-interval': _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)]}"]], "args": [[78.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100)"], [79.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False)"], [82.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0)"], [83.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128)"], [84.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1)"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 528, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "path_prefix_regex = ''", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"Constant": "''"}, "Value After Statement Execution": "''", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 505, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _remove_command(text, command, keep_text=False):\n  \"\"\"Removes '\\\\command{*}' from the string 'text'.\n\n  Regex `base_pattern` used to match balanced parentheses taken from:\n  https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses/35271017#35271017\n  \"\"\"\n  base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'\n  # Loops in case of nested commands that need to retain text, e.g.,\n  # \\red{hello \\red{world}}.\n  while True:\n    all_substitutions = []\n    has_match = False\n    for match in regex.finditer(base_pattern, text):\n      # In case there are only spaces or nothing up to the following newline,\n      # adds a percent, not to alter the newlines.\n      has_match = True\n      new_substring = (\n          ''\n          if not keep_text\n          else text[match.span()[0] + len(command) + 2 : match.span()[1] - 1]\n      )\n      if match.span()[1] < len(text):\n        next_newline = text[match.span()[1] :].find('\\n')\n        if next_newline != -1:\n          text_until_newline = text[\n              match.span()[1] : match.span()[1] + next_newline\n          ]\n          if (\n              not text_until_newline or text_until_newline.isspace()\n          ) and not keep_text:\n            new_substring = '%'\n      all_substitutions.append(\n          (match.span()[0], match.span()[1], new_substring)\n      )\n\n    for start, end, new_substring in reversed(all_substitutions):\n      text = text[:start] + new_substring + text[end:]\n\n    if not keep_text or not has_match:\n      break\n\n  return text\n\n_remove_command(text='A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}', command='todo', keep_text=False)", "Selected Statement": "has_match = False", "Function Input": {"text": "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'", "command": "'todo'", "keep_text": "False"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"text": [[1, "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'"], [37.0, "'AD\\nE\\n\\\\end{document}'"]], "command": [[1, "'todo'"]], "keep_text": [[1, "False"]], "base_pattern": [[7.0, "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'"]], "all_substitutions": [[11.0, "[]"], [32.0, "[(1, 11, '')]"]], "has_match": [[12.0, "False"], [16.0, "True"]], "match": [[13.0, "<regex.Match object; span=(1, 11), match='\\\\todo{B\\nC}'>"]], "new_substring": [[17.0, "''"]], "next_newline": [[23.0, "1"]], "text_until_newline": [[25.0, "'D'"]], "start": [[36.0, "1"]], "end": [[36.0, "11"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 502, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_targets_from_csv(csv_filename):\n        '''Returns list of Target objects parsed from CSV file.'''\n        targets = []\n        import csv\n        with open(csv_filename, 'r') as csvopen:\n            lines = []\n            for line in csvopen:\n                line = line.replace('\\0', '')\n                lines.append(line)\n            csv_reader = csv.reader(lines,\n                    delimiter=',',\n                    quoting=csv.QUOTE_ALL,\n                    skipinitialspace=True,\n                    escapechar='\\\\')\n\n            hit_clients = False\n            for row in csv_reader:\n                # Each 'row' is a list of fields for a target/client\n\n                if len(row) == 0: continue\n\n                if row[0].strip() == 'BSSID':\n                    # This is the 'header' for the list of Targets\n                    hit_clients = False\n                    continue\n\n                elif row[0].strip() == 'Station MAC':\n                    # This is the 'header' for the list of Clients\n                    hit_clients = True\n                    continue\n\n                if hit_clients:\n                    # The current row corresponds to a 'Client' (computer)\n                    try:\n                        client = Client(row)\n                    except (IndexError, ValueError) as e:\n                        # Skip if we can't parse the client row\n                        continue\n\n                    if 'not associated' in client.bssid:\n                        # Ignore unassociated clients\n                        continue\n\n                    # Add this client to the appropriate Target\n                    for t in targets:\n                        if t.bssid == client.bssid:\n                            t.clients.append(client)\n                            break\n\n                else:\n                    # The current row corresponds to a 'Target' (router)\n                    try:\n                        target = Target(row)\n                        targets.append(target)\n                    except Exception:\n                        continue\n\n        return targets\n\nget_targets_from_csv(csv_filename='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv')", "Selected Statement": "hit_clients = False", "Function Input": {"csv_filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"csv_filename": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"]], "targets": [[3.0, "[]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>, <wifite.model.target.Target object at 0x7ff2ae4e2af0>]"]], "csv": [[4.0, "<module 'csv' from '/local/rcs/XXX/miniforge3/envs/derv82+wifite2/lib/python3.9/csv.py'>"]], "csvopen": [[5.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv' mode='r' encoding='UTF-8'>"]], "lines": [[6.0, "[]"], [9.0, "['\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n', '\\n']"]], "line": [[7.0, "'\\n'"], [7.0, "'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n'"], [7.0, "'\\n'"], [7.0, "'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n'"], [7.0, "'\\n'"]], "csv_reader": [[10.0, "REPR FAILED"]], "hit_clients": [[16.0, "False"], [29.0, "True"]], "row": [[17.0, "[]"], [17.0, "['BSSID', 'First time seen', 'Last time seen', 'channel', 'Speed', 'Privacy', 'Cipher', 'Authentication', 'Power', '# beacons', '# IV', 'LAN IP', 'ID-length', 'ESSID', 'Key']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:21:23', '2018-04-06 18:21:24', '10', '54', 'WPA2', 'CCMP', 'PSK', '-34', '5', '0', '0.  0.  0.  0', '24', 'Comma, no trailing space', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:19:17', '2018-04-06 18:19:19', '10', '54', 'WPA2', 'CCMP', 'PSK', '-35', '18', '0', '0.  0.  0.  0', '20', '\"Quoted ESSID, Comma, no trailing spaces.   \"', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:35:29', '2018-04-06 18:35:30', '10', '54', 'WPA2', 'CCMP', 'PSK', '-31', '12', '0', '0.  0.  0.  0', '22', 'Comma, Trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:22:45', '2018-04-06 18:22:46', '10', '54', 'WPA2', 'CCMP', 'PSK', '-29', '15', '0', '0.  0.  0.  0', '30', '\"quote\" comma, trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:50:11', '2018-04-06 18:50:17', '10', '54', 'WPA2', 'CCMP', 'PSK', '-20', '43', '0', '0.  0.  0.  0', '19', 'x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00', '']"], [17.0, "[]"], [17.0, "['Station MAC', 'First time seen', 'Last time seen', 'Power', '# packets', 'BSSID', 'Probed ESSIDs']"], [17.0, "[]"]], "target": [[53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=66, beacons=5, ivs=0, essid_known=True, essid_len=24, essid='Comma, no trailing space', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=65, beacons=18, ivs=0, essid_known=True, essid_len=20, essid='\"Quoted ESSID, Comma, no trailing spaces.   \"', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=69, beacons=12, ivs=0, essid_known=True, essid_len=22, essid='Comma, Trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=71, beacons=15, ivs=0, essid_known=True, essid_len=30, essid='\"quote\" comma, trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=80, beacons=43, ivs=0, essid_known=False, essid_len=19, essid=None, wps=3, decloaked=False, clients=[]}"]]}, "Program Information": "Project Name: derv82+wifite2", "idx": 543, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _solequal(sol1, sol2, prec):\n    \"\"\"\n    Compare two different solutions with a given precicion.\n\n    Return True if they equal.\n    \"\"\"\n    res = True\n\n    for sol_1, sol_2 in zip(sol1, sol2):\n        if np.ndim(sol_1) != 0 and np.ndim(sol_2) != 0:\n            res &= _dist(sol_1, sol_2) < prec\n        elif np.ndim(sol_1) != 0 and np.ndim(sol_2) == 0:\n            return False\n        elif np.ndim(sol_1) == 0 and np.ndim(sol_2) != 0:\n            return False\n\n    return res\n\n_solequal(sol1=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])], sol2=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])], prec=0.1)", "Selected Statement": "res = True", "Function Input": {"sol1": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]", "sol2": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]", "prec": "0.1"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"sol1": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]"]], "sol2": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]"]], "prec": [[1, "0.1"]], "res": [[7.0, "True"], [11.0, "False"]], "sol_1": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([ 0.16666667, -0.9860133 ])"]], "sol_2": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([0.16666667, 0.9860133 ])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 519, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def is_process_running(process_name):\n    \"\"\"\n    Check if a process with the given name is running.\n\n    Args:\n        (str): Process name, e.g. \"Sublime Text\"\n\n    Returns:\n        (bool): True if the process is running\n    \"\"\"\n    is_running = False\n\n    # On systems with pgrep, check if the given process is running\n    if os.path.isfile(\"/usr/bin/pgrep\"):\n        dev_null = open(os.devnull, \"wb\")\n        returncode = subprocess.call([\"/usr/bin/pgrep\", process_name], stdout=dev_null)\n        is_running = bool(returncode == 0)\n\n    return is_running\n\nis_process_running(process_name='a*')", "Selected Statement": "is_running = False", "Function Input": {"process_name": "'a*'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"process_name": [[1, "'a*'"]], "is_running": [[11.0, "False"], [17.0, "True"]], "dev_null": [[15.0, "<_io.BufferedWriter name='/dev/null'>"]], "returncode": [[16.0, "0"]]}, "Program Information": "Project Name: lra+mackup", "idx": 492, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _ParseFn(args):\n    \"\"\"Parses the list of `args` into (varargs, kwargs), remaining_args.\"\"\"\n    kwargs, remaining_kwargs, remaining_args = _ParseKeywordArgs(\n        args, all_args, fn_spec.varkw)\n\n    # Note: _ParseArgs modifies kwargs.\n    parsed_args, kwargs, remaining_args, capacity = _ParseArgs(\n        fn_spec.args, fn_spec.defaults, num_required_args, kwargs,\n        remaining_args, metadata)\n\n    if fn_spec.varargs or fn_spec.varkw:\n      # If we're allowed *varargs or **kwargs, there's always capacity.\n      capacity = True\n\n    extra_kw = set(kwargs) - set(fn_spec.kwonlyargs)\n    if fn_spec.varkw is None and extra_kw:\n      raise FireError('Unexpected kwargs present:', extra_kw)\n\n    missing_kwonly = set(required_kwonly) - set(kwargs)\n    if missing_kwonly:\n      raise FireError('Missing required flags:', missing_kwonly)\n\n    # If we accept *varargs, then use all remaining arguments for *varargs.\n    if fn_spec.varargs is not None:\n      varargs, remaining_args = remaining_args, []\n    else:\n      varargs = []\n\n    for index, value in enumerate(varargs):\n      varargs[index] = _ParseValue(value, None, None, metadata)\n\n    varargs = parsed_args + varargs\n    remaining_args += remaining_kwargs\n\n    consumed_args = args[:len(args) - len(remaining_args)]\n    return (varargs, kwargs), consumed_args, remaining_args, capacity\n\n_ParseFn(args=['x'], all_args=[], fn_spec={args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}, metadata={'ACCEPTS_POSITIONAL_ARGS': False}, num_required_args=0, required_kwonly=set())", "Selected Statement": "capacity = True", "Function Input": {"args": "['x']", "all_args": "[]", "fn_spec": "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}", "metadata": "{'ACCEPTS_POSITIONAL_ARGS': False}", "num_required_args": "0", "required_kwonly": "set()"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"args": [[1, "['x']"]], "all_args": [[1, "[]"]], "fn_spec": [[1, "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}"]], "metadata": [[1, "{'ACCEPTS_POSITIONAL_ARGS': False}"]], "num_required_args": [[1, "0"]], "required_kwonly": [[1, "set()"]], "kwargs": [[3.0, "{}"]], "remaining_kwargs": [[3.0, "[]"]], "remaining_args": [[3.0, "['x']"]], "parsed_args": [[7.0, "[]"]], "capacity": [[7.0, "False"], [13.0, "True"]], "extra_kw": [[15.0, "set()"]], "missing_kwonly": [[19.0, "set()"]], "varargs": [[27.0, "[]"]], "consumed_args": [[35.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 511, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "start = False", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 507, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def find_diffs(content):\n    # We can always fence with triple-quotes, because all the udiff content\n    # is prefixed with +/-/space.\n\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    lines = content.splitlines(keepends=True)\n    line_num = 0\n    edits = []\n    while line_num < len(lines):\n        while line_num < len(lines):\n            line = lines[line_num]\n            if line.startswith(\"```diff\"):\n                line_num, these_edits = process_fenced_block(lines, line_num + 1)\n                edits += these_edits\n                break\n            line_num += 1\n\n    # For now, just take 1!\n    # edits = edits[:1]\n\n    return edits\n\nfind_diffs(content='\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n')", "Selected Statement": "line_num = 0", "Function Input": {"content": "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"content": [[1, "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"]], "lines": [[8.0, "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"]], "line_num": [[9.0, "0"], [18.0, "1"], [18.0, "2"], [18.0, "3"], [15.0, "10"]], "edits": [[10.0, "[]"], [16.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]], "line": [[13.0, "'\\n'"], [13.0, "'Some text...\\n'"], [13.0, "'\\n'"], [13.0, "'```diff\\n'"]], "these_edits": [[15.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 515, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def layer_template(layer_name: str, idx: int) -> Tuple[str, int]:\n    split = layer_name.split(\".\")\n    number = int(split[idx])\n    split[idx] = \"{}\"\n    from_name = \".\".join(split)\n    return from_name, number\n\nlayer_template(layer_name='model.layers.0.self_attn.q_proj.weight', idx=2)", "Selected Statement": "split[idx] = \"{}\"", "Function Input": {"layer_name": "'model.layers.0.self_attn.q_proj.weight'", "idx": "2"}, "Variable Values Before Statement": {"Constant": "\"{}\""}, "Value After Statement Execution": "\"{}\"", "Variable States During Runtime": {"layer_name": [[1, "'model.layers.0.self_attn.q_proj.weight'"]], "idx": [[1, "2"]], "split": [[2.0, "['model', 'layers', '0', 'self_attn', 'q_proj', 'weight']"], [4.0, "['model', 'layers', '{}', 'self_attn', 'q_proj', 'weight']"]], "number": [[3.0, "0"]], "from_name": [[5.0, "'model.layers.{}.self_attn.q_proj.weight'"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 535, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def rowcol_to_a1(row, col):\n    \"\"\"Translates a row and column cell address to A1 notation.\n\n    :param row: The row of the cell to be converted.\n        Rows start at index 1.\n    :type row: int, str\n\n    :param col: The column of the cell to be converted.\n        Columns start at index 1.\n    :type row: int, str\n\n    :returns: a string containing the cell's coordinates in A1 notation.\n\n    Example:\n\n    >>> rowcol_to_a1(1, 1)\n    A1\n\n    \"\"\"\n    row = int(row)\n    col = int(col)\n\n    if row < 1 or col < 1:\n        raise IncorrectCellLabel(\"({}, {})\".format(row, col))\n\n    div = col\n    column_label = \"\"\n\n    while div:\n        (div, mod) = divmod(div, 26)\n        if mod == 0:\n            mod = 26\n            div -= 1\n        column_label = chr(mod + MAGIC_NUMBER) + column_label\n\n    label = \"{}{}\".format(column_label, row)\n\n    return label\n\nrowcol_to_a1(row=4, col=4)", "Selected Statement": "column_label = \"\"", "Function Input": {"row": "4", "col": "4"}, "Variable Values Before Statement": {"Constant": "\"\""}, "Value After Statement Execution": "\"\"", "Variable States During Runtime": {"row": [[1, "4"]], "col": [[1, "4"]], "div": [[26.0, "4"], [30.0, "0"]], "column_label": [[27.0, "''"], [34.0, "'D'"]], "mod": [[30.0, "4"]], "label": [[36.0, "'D4'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 536, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_route_template(template):\n    rbuilder = [\"^\"]\n    fbuilder = []\n    position = 0\n    schema = {}\n\n    for match in template_var_re_finditer(template):\n        param_name = match.group(\"name\")\n        param_type = match.group(\"type\") or \"id\"\n        # TODO: Handle KeyError, maybe we want to use a custom error here.\n        param_formatchar, param_re, param_schema = _schema_map[param_type]\n        schema[param_name] = param_schema\n\n        rbuilder.append(re.escape(template[position:match.start()]))\n        rbuilder.append(param_re.format(param_name))\n\n        fbuilder.append(template[position:match.start()])\n        fbuilder.append(\"{\")\n        fbuilder.append(param_name)\n        fbuilder.append(\":\")\n        fbuilder.append(param_formatchar)\n        fbuilder.append(\"}\")\n\n        position = match.end()\n\n    rbuilder.append(re.escape(template[position:]))\n    rbuilder.append(\"$\")\n    fbuilder.append(template[position:])\n\n    return (valid.Schema(schema),\n            re.compile(\"\".join(rbuilder)),\n            u\"\".join(fbuilder).format)\n\nparse_route_template(template='get/{variable}')", "Selected Statement": "position = 0", "Function Input": {"template": "'get/{variable}'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"template": [[1, "'get/{variable}'"]], "rbuilder": [[2.0, "['^']"], [14.0, "['^', 'get/']"], [15.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)']"], [26.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '']"], [27.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '', '$']"]], "fbuilder": [[3.0, "[]"], [17.0, "['get/']"], [18.0, "['get/', '{']"], [19.0, "['get/', '{', 'variable']"], [20.0, "['get/', '{', 'variable', ':']"], [21.0, "['get/', '{', 'variable', ':', 's']"], [22.0, "['get/', '{', 'variable', ':', 's', '}']"], [28.0, "['get/', '{', 'variable', ':', 's', '}', '']"]], "position": [[4.0, "0"], [24.0, "14"]], "schema": [[5.0, "{}"], [12.0, "{'variable': And(<class 'str'>, <function Match at 0x7f0c58d64940>)}"]], "match": [[7.0, "<re.Match object; span=(4, 14), match='{variable}'>"]], "param_name": [[8.0, "'variable'"]], "param_type": [[9.0, "'id'"]], "param_formatchar": [[11.0, "'s'"]], "param_re": [[11.0, "'(?P<{}>[_a-zA-Z][_\\\\w]*)'"]], "param_schema": [[11.0, "And(<class 'str'>, <function Match at 0x7f0c58d64940>)"]]}, "Program Information": "Project Name: aperezdc+omni", "idx": 478, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def rolling_mean_by_h(x, h, w, name):\n    \"\"\"Compute a rolling mean of x, after first aggregating by h.\n\n    Right-aligned. Computes a single mean for each unique value of h. Each\n    mean is over at least w samples.\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling mean of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    df2 = (\n        df.groupby('h').agg(['sum', 'count']).reset_index().sort_values('h')\n    )\n    xs = df2['x']['sum'].values\n    ns = df2['x']['count'].values\n    hs = df2.h.values\n\n    trailing_i = len(df2) - 1\n    x_sum = 0\n    n_sum = 0\n    # We don't know output size but it is bounded by len(df2)\n    res_x = np.empty(len(df2))\n\n    # Start from the right and work backwards\n    for i in range(len(df2) - 1, -1, -1):\n        x_sum += xs[i]\n        n_sum += ns[i]\n        while n_sum >= w:\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise weight the mean by the difference\n            excess_n = n_sum - w\n            excess_x = excess_n * xs[i] / ns[i]\n            res_x[trailing_i] = (x_sum - excess_x)/ w\n            x_sum -= xs[trailing_i]\n            n_sum -= ns[trailing_i]\n            trailing_i -= 1\n\n    res_h = hs[(trailing_i + 1):]\n    res_x = res_x[(trailing_i + 1):]\n\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_mean_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "x_sum = 0", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[19.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "df2": [[20.0, "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"]], "xs": [[23.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "ns": [[24.0, "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]], "hs": [[25.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "trailing_i": [[27.0, "9"], [45.0, "8"], [45.0, "7"], [45.0, "6"], [45.0, "5"], [45.0, "4"], [45.0, "3"], [45.0, "2"], [45.0, "1"], [45.0, "0"], [45.0, "-1"]], "x_sum": [[28.0, "0"], [35.0, "9"], [43.0, "0"], [35.0, "8"], [43.0, "0"], [35.0, "7"], [43.0, "0"], [35.0, "6"], [43.0, "0"], [35.0, "5"], [43.0, "0"], [35.0, "4"], [43.0, "0"], [35.0, "3"], [43.0, "0"], [35.0, "2"], [43.0, "0"], [35.0, "1"], [43.0, "0"]], "n_sum": [[29.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"]], "res_x": [[31.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 4.4e-323])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 4.0e+000, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.e+000, 5.e-324, 1.e-323, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0.e+000, 5.e-324, 2.e+000, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"]], "i": [[34.0, "9"], [34.0, "8"], [34.0, "7"], [34.0, "6"], [34.0, "5"], [34.0, "4"], [34.0, "3"], [34.0, "2"], [34.0, "1"], [34.0, "0"]], "excess_n": [[40.0, "0"]], "excess_x": [[41.0, "0.0"]], "res_h": [[47.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 523, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def check_just_one_not_none(*value_refname):\n    nones=0\n    for a_tuple in value_refname:\n        if a_tuple[0] is not None:\n            nones += 1\n    if nones != 1:\n        raise ValueError(error_message_for_non_compatible_references([a_tuple[1] for a_tuple in value_refname]))\n\ncheck_just_one_not_none(value_refname=((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint')))", "Selected Statement": "nones=0", "Function Input": {"value_refname": "((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint'))"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"value_refname": [[1, "((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint'))"]], "nones": [[2.0, "0"], [5.0, "1"]], "a_tuple": [[3.0, "(None, 'graph_file_input')"], [3.0, "(None, 'graph_list_of_files_input')"], [3.0, "('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph')"], [3.0, "(None, 'url_input')"], [3.0, "(None, 'list_of_url_input')"], [3.0, "(None, 'url_endpoint')"]]}, "Program Information": "Project Name: DaniFdezAlvarez+shexerp3", "idx": 530, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def dump_all(args: list) -> None:\n    \"\"\"\n        Dump memory from the currently injected process.\n        Loosely based on:\n            https://github.com/Nightbringer21/fridump\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: memory dump all <local destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    destination = args[0]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Continue, appending to the file?'):\n            return\n\n    # access type used when enumerating ranges\n    access = 'rw-'\n\n    api = state_connection.get_api()\n    ranges = api.memory_list_ranges(access)\n\n    total_size = sum([x['size'] for x in ranges])\n    click.secho('Will dump {0} {1} images, totalling {2}'.format(\n        len(ranges), access, sizeof_fmt(total_size)), fg='green', dim=True)\n\n    with click.progressbar(ranges) as bar:\n        for image in bar:\n            dump = bytearray()\n            bar.label = 'Dumping {0} from base: {1}'.format(sizeof_fmt(image['size']), hex(int(image['base'], 16)))\n\n            # catch and exception thrown while dumping.\n            # this could for a few reasons like if the protection\n            # changes or the range is reallocated\n            try:\n                # grab the (size) bytes starting at the (base_address) in chunks of BLOCK_SIZE\n                chunks = _get_chunks(int(image['base'], 16), int(image['size']), BLOCK_SIZE)\n                for chunk in chunks:\n                    dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n            except Exception as e:\n                continue\n\n            # append the results to the destination file\n            with open(destination, 'ab') as f:\n                f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_all(args=['/foo'])", "Selected Statement": "access = 'rw-'", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"Constant": "'rw-'"}, "Value After Statement Execution": "'rw-'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "destination": [[16.0, "'/foo'"]], "access": [[25.0, "'rw-'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041837128480'>"]], "ranges": [[28.0, "[{'size': 100, 'base': '0x7fff90800000'}]"]], "total_size": [[30.0, "100"]], "bar": [[34.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"], [37.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='Dumping 100.0 B from base: 0x7fff90800000', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"]], "image": [[35.0, "{'size': 100, 'base': '0x7fff90800000'}"]], "dump": [[36.0, "bytearray(b'')"], [46.0, "bytearray(b'\\x00')"]], "chunks": [[44.0, "[(140735617695744, 100)]"]], "chunk": [[45.0, "(140735617695744, 100)"]], "f": [[52.0, "<MagicMock name='open().__enter__()' id='140041837437520'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 533, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def run_train_test(monkeypatch, overwrite_values: dict):\n    max_train_iters = 32\n    checkpoint_args = {\"train_iters\": max_train_iters}\n    overwrite_values = checkpoint_args\n    input_args = [\"train.py\", \"tests/config/test_setup.yml\"]\n    deepspeed_main_args = simulate_deepy_env(monkeypatch, input_args)\n\n    # Train model, whilst patching collect_loss_for_unit_test to track model loss at each step\n    loss_per_iteration = []\n    with patch(\n        \"megatron.training.collect_loss_for_unit_test\",\n        side_effect=lambda x: loss_per_iteration.append(x),\n    ):\n        train.main(input_args=deepspeed_main_args, overwrite_values=overwrite_values)\n        assert (\n            len(loss_per_iteration) == max_train_iters\n        ), \"patching should have collected loss values from each train step\"\n\n        # loss should have decreased by now (otherwise increasing the max_steps parameter could have the testcase pass)\n        assert min(loss_per_iteration) < loss_per_iteration[0], (\n            \"training loss should improve within \" + str(max_train_iters) + \" steps\"\n        )\n\nrun_train_test(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, overwrite_values={'pos_emb': 'rpe'})", "Selected Statement": "max_train_iters = 32", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "overwrite_values": "{'pos_emb': 'rpe'}"}, "Variable Values Before Statement": {"Constant": "32"}, "Value After Statement Execution": "32", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [6.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/7', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_...*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%5', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/7', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'EleutherAI+gpt-neox', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin/python', 'TORCH_CUDA_ARCH_LIST': '', 'KMP_DUPLICATE_LIB_OK': 'True', 'KMP_INIT_AT_FORK': 'FALSE', 'CUDA_MODULE_LOADING': 'LAZY', 'PYTEST_CURRENT_TEST': 'tests/model/test_model_train.py::test_model_training_options[pos_emb-rpe] (call)', 'WORLD_SIZE': '1', 'RANK': '0'}), 'RANK', <notset>)], _cwd=None, _savesyspath=None}"]], "overwrite_values": [[1, "{'pos_emb': 'rpe'}"], [4.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "max_train_iters": [[2.0, "32"]], "checkpoint_args": [[3.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "input_args": [[5.0, "['train.py', 'tests/config/test_setup.yml']"]], "deepspeed_main_args": [[6.0, "['--hostfile', 'None', '--include', 'localhost:1', 'train.py', '--deepspeed_config', 'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', '--megatron_config', 'eyJob3N0ZmlsZSI6ICJOb25lIiwgImluY2x1ZGUiOiAibG9jYWxob3N0OjEiLCAidHJhaW5fYmF0Y2hfc2l6ZSI6IDQsICJ0cmFpbl9taWNyb19iYXRjaF9zaXplX3Blcl9ncHUiOiA0LCAib3B0aW1pemVyIjogeyJ0eXBlIjogInNtMyIsICJwYXJhbXMiOiB7fX0sICJmcDE2IjogeyJ0eXBlIjogImZwMTYiLCAiZW5hYmxlZCI6IHRydWV9LCAiemVyb19vcHRpbWl6YXRpb24iOiB7InN0YWdlIjogMCwgImFsbGdhdGhlcl9wYXJ0aXRpb25zIjogdHJ1ZSwgInJlZHVjZV9zY2F0dGVyIjogdHJ1ZSwgImFsbGdhdGhlcl9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgIm92ZXJsYXBfY29tbSI6IGZhbHNlLCAicmVkdWNlX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAiY29udGlndW91c19ncmFkaWVudHMiOiBmYWxzZX0sICJ3YWxsX2Nsb2NrX2JyZWFrZG93biI6IHRydWUsICJkZWVwc3BlZWRfZXh0cmFfYXJncyI6IHsiY29tbXNfbG9nZ2VyIjogeyJlbmFibGVkIjogdHJ1ZSwgInZlcmJvc2UiOiB0cnVlLCAicHJvZl9hbGwiOiB0cnVlLCAiZGVidWciOiBmYWxzZX19LCAicHJlY2lzaW9uIjogImZwMTYiLCAibnVtX2xheWVycyI6IDIsICJoaWRkZW5fc2l6ZSI6IDgsICJudW1fYXR0ZW50aW9uX2hlYWRzIjogNCwgInNlcV9sZW5ndGgiOiAxMDI0LCAibWF4X3Bvc2l0aW9uX2VtYmVkZGluZ3MiOiAxMDI0LCAicG9zX2VtYiI6ICJyb3RhcnkiLCAibm9fd2VpZ2h0X3R5aW5nIjogdHJ1ZSwgImF0dGVudGlvbl9jb25maWciOiBbImdsb2JhbCIsICJnbG9iYWwiXSwgInNwYXJzaXR5X2NvbmZpZyI6IHt9LCAiaW5pdF9tZXRob2QiOiAic21hbGxfaW5pdCIsICJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2QiOiAid2FuZ19pbml0IiwgImxyX2RlY2F5X3N0eWxlIjogImNvc2luZSIsICJscl9kZWNheV9pdGVycyI6IDIwLCAib3B0aW1pemVyX3R5cGUiOiAic20zIiwgInplcm9fc3RhZ2UiOiAwLCAiemVyb19yZWR1Y2Vfc2NhdHRlciI6IHRydWUsICJ6ZXJvX2NvbnRpZ3VvdXNfZ3JhZGllbnRzIjogZmFsc2UsICJ6ZXJvX3JlZHVjZV9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgInplcm9fYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAibHIiOiAwLjAwMSwgImRhdGFfcGF0aCI6ICJkYXRhL2Vud2lrOC9lbndpazhfdGV4dF9kb2N1bWVudCIsICJkYXRhX2ltcGwiOiAibW1hcCIsICJjb25maWdfZmlsZXMiOiB7InRlc3Rfc2V0dXAueW1sIjogIiMgMTlNIHBhcmFtZXRlciBtb2RlbCwgJiBsb2NhbCBzZXR1cCB3aXRoIHNvbWUgYWRkaXRpb25hbCBzaW1wbGlmaWNhdGlvbnNcbntcbiAgIyBTZXR0aW5ncyB0byBtYWtlIHRoZSB0ZXN0IHNldHVwIGFzIGxpZ2h0d2VpZ2h0IGFzIHBvc3NpYmxlXG4gIFwiZGF0YV9wYXRoXCI6IFwiZGF0YS9lbndpazgvZW53aWs4X3RleHRfZG9jdW1lbnRcIixcbiAgXCJ2b2NhYl9maWxlXCI6IFwiZGF0YS9ncHQyLXZvY2FiLmpzb25cIixcbiAgXCJtZXJnZV9maWxlXCI6IFwiZGF0YS9ncHQyLW1lcmdlcy50eHRcIixcbiAgXCJscl9kZWNheV9pdGVyc1wiOiAyMCxcbiAgXCJ0cmFpbl9pdGVyc1wiOiAyMCxcbiAgXCJob3N0ZmlsZVwiOiBcIk5vbmVcIixcbiAgXCJpbmNsdWRlXCI6IFwibG9jYWxob3N0OjFcIixcbiAgXCJ1c2Vfd2FuZGJcIjogRmFsc2UsXG5cbiAgIyBTZXR0aW5ncyBjb3BpZWQgZnJvbSAxOU0gcGFyYW1ldGVyIGNvbmZpZyAoc29tZSBtb2RpZmljYXRpb25zIGFib3ZlLCBtZWFuaW5nIHdlIGNhbid0IHVzZSBjb25maWdzLzE5TS55bWwgZGlyZWN0bHkpXG4gIFwicGlwZV9wYXJhbGxlbF9zaXplXCI6IDEsXG4gIFwibW9kZWxfcGFyYWxsZWxfc2l6ZVwiOiAxLFxuXG4gICMgbW9kZWwgc2V0dGluZ3NcbiAgXCJudW1fbGF5ZXJzXCI6IDIsXG4gIFwiaGlkZGVuX3NpemVcIjogOCxcbiAgXCJudW1fYXR0ZW50aW9uX2hlYWRzXCI6IDQsXG4gIFwic2VxX2xlbmd0aFwiOiAxMDI0LFxuICBcIm1heF9wb3NpdGlvbl9lbWJlZGRpbmdzXCI6IDEwMjQsXG4gIFwicG9zX2VtYlwiOiBcInJvdGFyeVwiLFxuICBcIm5vX3dlaWdodF90eWluZ1wiOiB0cnVlLFxuICBcImdwdF9qX3Jlc2lkdWFsXCI6IGZhbHNlLFxuICBcIm91dHB1dF9sYXllcl9wYXJhbGxlbGlzbVwiOiBcImNvbHVtblwiLFxuXG4gIFwic2NhbGVkX3VwcGVyX3RyaWFuZ19tYXNrZWRfc29mdG1heF9mdXNpb25cIjogZmFsc2UsXG4gIFwiYmlhc19nZWx1X2Z1c2lvblwiOiBmYWxzZSxcbiAgXCJyb3BlX2Z1c2lvblwiOiBmYWxzZSxcblxuICAjIE9wdGltaXplclxuICBcIm9wdGltaXplclwiOiB7XG4gICAgXCJ0eXBlXCI6IFwic20zXCIsXG4gICAgXCJwYXJhbXNcIjoge30sXG4gIH0sXG5cbiAgIyBwcmVjaXNpb25cbiAgXCJwcmVjaXNpb25cIjogXCJmcDE2XCIsXG5cbiAgIyBpbml0IG1ldGhvZHNcbiAgXCJpbml0X21ldGhvZFwiOiBcInNtYWxsX2luaXRcIixcbiAgXCJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2RcIjogXCJ3YW5nX2luaXRcIixcblxuICBcInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdVwiOiA0LFxuICBcImdhc1wiOiAxLFxuICBcImRhdGFfaW1wbFwiOiBcIm1tYXBcIixcbiAgXCJudW1fd29ya2Vyc1wiOiAxLFxuXG4gICMgYWN0aXZhdGlvbiBjaGVja3BvaW50aW5nXG4gIFwiY2hlY2twb2ludF9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcImNoZWNrcG9pbnRfbnVtX2xheWVyc1wiOiAxLFxuICBcInBhcnRpdGlvbl9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcInN5bmNocm9uaXplX2VhY2hfbGF5ZXJcIjogdHJ1ZSxcblxuICAjIHJlZ3VsYXJpemF0aW9uXG4gIFwiZ3JhZGllbnRfY2xpcHBpbmdcIjogMS4wLFxuICBcIndlaWdodF9kZWNheVwiOiAwLjEsXG4gIFwiaGlkZGVuX2Ryb3BvdXRcIjogMCxcbiAgXCJhdHRlbnRpb25fZHJvcG91dFwiOiAwLFxuXG4gIFwiZGlzdHJpYnV0ZWRfYmFja2VuZFwiOiBcIm5jY2xcIixcbiAgXCJscl9kZWNheV9zdHlsZVwiOiBcImNvc2luZVwiLFxuICBcIndhcm11cFwiOiAwLjAxLFxuICBcImNoZWNrcG9pbnRfZmFjdG9yXCI6IDEwMDAsXG4gIFwiZXZhbF9pbnRlcnZhbFwiOiAxMDAwMDAsXG4gIFwiZXZhbF9pdGVyc1wiOiAxMCxcblxuICBcImxvZ19pbnRlcnZhbFwiOiAxMCxcbiAgXCJzdGVwc19wZXJfcHJpbnRcIjogMTAsXG4gIFwid2FsbF9jbG9ja19icmVha2Rvd25cIjogdHJ1ZSxcblxuICAjIGFkZGl0aW9uYWwgZGVlcHNwZWVkIGFyZ3Mgbm90IHNwZWNpZmllZCBhYm92ZVxuICBcImRlZXBzcGVlZF9leHRyYV9hcmdzXCI6IHtcbiAgICBcImNvbW1zX2xvZ2dlclwiOiB7XG4gICAgICAgIFwiZW5hYmxlZFwiOiB0cnVlLFxuICAgICAgICBcInZlcmJvc2VcIjogdHJ1ZSxcbiAgICAgICAgXCJwcm9mX2FsbFwiOiB0cnVlLFxuICAgICAgICBcImRlYnVnXCI6IGZhbHNlXG4gICAgfSxcbiAgfVxufVxuIn0sICJjaGVja3BvaW50X2ZhY3RvciI6IDEwMDAsICJiYXRjaF9zaXplIjogNCwgInRyYWluX2l0ZXJzIjogMjAsICJldmFsX2l0ZXJzIjogMTAsICJldmFsX2ludGVydmFsIjogMTAwMDAwLCAidm9jYWJfZmlsZSI6ICJkYXRhL2dwdDItdm9jYWIuanNvbiIsICJtZXJnZV9maWxlIjogImRhdGEvZ3B0Mi1tZXJnZXMudHh0IiwgIm51bV93b3JrZXJzIjogMSwgImNoZWNrcG9pbnRfYWN0aXZhdGlvbnMiOiB0cnVlLCAic3luY2hyb25pemVfZWFjaF9sYXllciI6IHRydWUsICJwYXJ0aXRpb25fYWN0aXZhdGlvbnMiOiB0cnVlLCAiZ2FzIjogMSwgImR5bmFtaWNfbG9zc19zY2FsZSI6IHRydWUsICJwaXBlX3BhcmFsbGVsX3NpemUiOiAxLCAid29ybGRfc2l6ZSI6IDEsICJpc19waXBlX3BhcmFsbGVsIjogdHJ1ZSwgInVzZV93YW5kYiI6IGZhbHNlLCAibG9nX2ludGVydmFsIjogMTAsICJ0ZXh0X2dlbl90eXBlIjogInVuY29uZGl0aW9uYWwiLCAibG9jYWxfcmFuayI6IDAsICJyYW5rIjogMCwgInVzZXJfc2NyaXB0IjogInRyYWluLnB5IiwgInNhdmVfaXRlcnMiOiBbXSwgImdsb2JhbF9udW1fZ3B1cyI6IDF9']"]], "loss_per_iteration": [[9.0, "[]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 527, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_config():\n    \"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    # cfg.style = \"pep440-micro\"\n    # cfg.style = \"pep440-develop\"\n    cfg.style = \"pep440-auto\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"milo/_version.py\"\n    cfg.verbose = False\n    return cfg\n\nget_config()", "Selected Statement": "cfg.VCS = \"git\"", "Function Input": {}, "Variable Values Before Statement": {"Constant": "\"git\""}, "Value After Statement Execution": "\"git\"", "Variable States During Runtime": {"cfg": [[5.0, "{}"], [6.0, "{VCS='git'}"], [9.0, "{VCS='git', style='pep440-auto'}"], [10.0, "{VCS='git', style='pep440-auto', tag_prefix=''}"], [11.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix=''}"], [12.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix='', versionfile_source='milo/_version.py'}"], [13.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix='', versionfile_source='milo/_version.py', verbose=False}"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 539, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def cd(args: list) -> None:\n    \"\"\"\n        Change the current working directory of the device.\n\n        While this method does not actually change any directories,\n        it simply updates the value in the file_manager_state property\n        that keeps record of the current directory.\n\n        Before changing directories though, some checks are performed\n        on the device to at least ensure that the destination directory\n        exists.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: cd <destination directory>', bold=True)\n        return\n\n    path = args[0]\n    current_dir = pwd()\n\n    # nothing to do\n    if path == '.':\n        return\n\n    # moving one directory back\n    if path == '..':\n\n        split_path = os.path.split(current_dir)\n\n        # nothing to do if we are already at root\n        if len(split_path) == 1:\n            return\n\n        new_path = ''.join(split_path[:-1])\n        click.secho(new_path, fg='green', bold=True)\n\n        file_manager_state.cwd = new_path\n\n        return\n\n    # if we got an absolute path, check if the path\n    # actually exists, and then cd to it if we can\n    if os.path.isabs(path):\n\n        # assume the path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(path, fg='green', bold=True)\n\n            file_manager_state.cwd = path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(path), fg='red')\n\n    # directory is not absolute, tack it on at the end and\n    # see if its legit.\n    else:\n\n        proposed_path = device_state.platform.path_separator.join([current_dir, path])\n\n        # assume the proposed_path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(proposed_path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(proposed_path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(proposed_path, fg='green', bold=True)\n\n            file_manager_state.cwd = proposed_path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(proposed_path), fg='red')\n\ncd(args=['/foo/bar/baz'])", "Selected Statement": "does_exist = False", "Function Input": {"args": "['/foo/bar/baz']"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"args": [[1, "['/foo/bar/baz']"]], "path": [[21.0, "'/foo/bar/baz'"]], "current_dir": [[22.0, "'/foo'"]], "does_exist": [[49.0, "False"], [56.0, "True"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 532, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def num_parameters(module: nn.Module, requires_grad: Optional[bool] = None) -> int:\n    total = 0\n    for p in module.parameters():\n        if requires_grad is None or p.requires_grad == requires_grad:\n            if hasattr(p, \"quant_state\"):\n                # bitsandbytes 4bit layer support\n                total += math.prod(p.quant_state[1])\n            else:\n                total += p.numel()\n    return total\n\nnum_parameters(module=GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  )), requires_grad=True)", "Selected Statement": "total = 0", "Function Input": {"module": "GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  ))", "requires_grad": "True"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"module": [[1, "GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  ))"]], "requires_grad": [[1, "True"]], "total": [[2.0, "0"], [9.0, "4"], [9.0, "84"], [9.0, "88"], [9.0, "168"]], "p": [[3.0, "Parameter containing:tensor([[ 2.5051e-01,  7.4097e-02,  2.7177e-01, -5.9998e-02,  8.6356e-02,         -1.3355e-01,  1.0265e-01, -2.0430e-01],        [ 1.4669e-01,  7.2689e-03, -3.2900e-01,  1.0448e-01,  3.4156e-01,          2.7166e-01,  2.9204e-04,  2.8477e-01],        [ 1.3237e-01, -3.6001e-02, -1.9379e-01, -3.1665e-01, -1.9673e-02,          1.4157e-01, -1.6257e-01, -5.8137e-02],        [-3.2136e-01,  2.8897e-01, -1.4786e-01, -9.7668e-02, -9.4666e-02,          7.1392e-02,  3.3215e-02,  6.9191e-02],        [-7.4534e-02,  9.6344e-02, -1.4053e-01,  2.9236e-01, -2.3084e-01,          4.0563e-02, -1.0258e-01,  5.0443e-02],        [ 2.3882e-02, -2.4875e-01,  1.6451e-01,  2.4647e-01, -1.9841e-01,         -2.1787e-01,  4.3476e-02,  1.9028e-01],        [ 2.8256e-01, -3.3064e-01, -2.7154e-01, -3.1312e-02,  1.0199e-01,          2.0320e-01,  2.8572e-01, -3.3013e-01],        [-2.5533e-01,  3.0206e-01,  2.6309e-01, -1.9970e-01, -8.5685e-02,         -3.3387e-01, -1.4620e-01,  3.2047e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.1873, -1.6913,  1.5322, -0.2604,  0.4374, -0.5390,  0.9018, -1.3492],        [-1.4882, -0.2612,  0.2189, -2.1828,  0.2255,  0.0258,  0.5657, -0.1797],        [-0.3868,  1.8613,  1.2576,  1.1665, -1.1363,  1.3796,  0.1255, -0.7521],        [ 0.6191, -0.9324,  0.2700, -0.7107, -1.0066,  1.0416, -3.4774, -0.1996],        [-1.7366, -0.0246,  0.6478, -1.6823,  0.1165, -0.1131,  0.4057,  1.6760],        [-0.7652, -0.2967, -1.4861, -1.5751,  0.7827, -1.4315,  1.1021,  0.5113],        [ 0.7950, -1.5534, -0.1290,  0.8270, -0.6565, -1.5686, -0.7948, -0.1648],        [-0.6128, -0.9582, -1.6231, -0.1747, -0.1636, -0.4679, -0.8446,  1.3419]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[[[0.],          [0.],          [0.],          [0.]]]], device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([[ 0.0889, -0.3279,  0.2429,  0.3349, -0.2547,  0.1056,  0.0371,  0.0550],        [-0.3137,  0.1619,  0.0387,  0.0756, -0.0591, -0.1266,  0.0611,  0.3441],        [-0.1166,  0.2823, -0.3208,  0.0186, -0.1165, -0.2267, -0.0338,  0.2221],        [-0.3125,  0.1147,  0.2699, -0.2272, -0.0160, -0.1895,  0.0019, -0.0198],        [-0.2552,  0.1120, -0.0457,  0.0870, -0.1699, -0.1785, -0.3484,  0.0587],        [-0.0898, -0.0517,  0.3024,  0.1719,  0.3463, -0.2257, -0.0244,  0.1555],        [-0.1015, -0.0824,  0.3325,  0.2130, -0.0858, -0.0207, -0.2525, -0.0335],        [ 0.3278, -0.3148, -0.2676,  0.0028,  0.1150, -0.1644, -0.0803,  0.0623],        [-0.1135,  0.0017,  0.2326, -0.3266,  0.1867, -0.1497, -0.1363,  0.1261],        [-0.2058, -0.1160,  0.3138,  0.3512, -0.1568,  0.0579,  0.0548, -0.1624],        [ 0.3081, -0.2280, -0.0806,  0.2820,  0.0546, -0.2091, -0.1894,  0.2444],        [ 0.0360,  0.2564,  0.1636,  0.0356, -0.0698, -0.1037,  0.0326, -0.2676],        [ 0.1189, -0.0244, -0.2023,  0.2153, -0.2056, -0.1485, -0.3513, -0.1187],        [-0.2108, -0.0278,  0.3477, -0.1904, -0.0801,  0.0428, -0.3516, -0.3473],        [ 0.1788,  0.0423,  0.0529, -0.1381, -0.3178, -0.1098,  0.3002,  0.1866],        [-0.2771,  0.2207, -0.0026,  0.2869, -0.1001,  0.1216, -0.3239, -0.2597],        [-0.1869,  0.0867, -0.2462,  0.1342,  0.2113,  0.0029, -0.0490, -0.0770],        [ 0.3244, -0.1292, -0.1739, -0.1651, -0.1083, -0.0072,  0.1775, -0.3086],        [ 0.1697,  0.2032, -0.0511,  0.2873,  0.0381, -0.2395, -0.1862, -0.1513],        [ 0.1337, -0.1641, -0.0019, -0.2364,  0.1892,  0.2240,  0.0864,  0.0927],        [-0.2440, -0.2606, -0.0284,  0.3234, -0.0603, -0.1891,  0.1467, -0.1607],        [-0.3067,  0.1486,  0.1116,  0.0019, -0.2838,  0.2787, -0.1030, -0.1641],        [ 0.1315,  0.2802, -0.1638, -0.1215,  0.1974,  0.2127,  0.1907,  0.2682],        [-0.2875, -0.2310, -0.0783,  0.1118,  0.3227,  0.0332,  0.1439,  0.1362]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0483,  0.1167, -0.1721,  0.0502,  0.0559, -0.1433, -0.1171, -0.2256,         0.0282,  0.2646, -0.1805,  0.3409, -0.2160, -0.1443,  0.0172,  0.3150,        -0.2517,  0.2375, -0.1676,  0.1738, -0.2091, -0.0480, -0.1426, -0.1139],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.1029, -0.0955, -0.0887,  0.2959,  0.1897,  0.0878, -0.1921, -0.2629],        [-0.2350,  0.0745,  0.0712,  0.1219,  0.3308,  0.0990, -0.3520,  0.0619],        [ 0.2752, -0.3393, -0.0875,  0.1873,  0.0478,  0.0844,  0.2223, -0.3004],        [ 0.0932,  0.1875, -0.2115, -0.1469, -0.0138,  0.3032,  0.0168,  0.0173],        [ 0.2179, -0.2037, -0.1758,  0.2727, -0.0537, -0.3480, -0.2911,  0.1600],        [ 0.0678,  0.0497, -0.1150, -0.1721,  0.2346, -0.3202, -0.1367, -0.2492],        [-0.2869, -0.1534,  0.1284, -0.1534, -0.0133,  0.1076, -0.3000, -0.1015],        [-0.0978, -0.2756,  0.2477, -0.2701,  0.2655, -0.1373,  0.3460, -0.3477]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.0784,  0.1758, -0.0545, -0.1572, -0.2092, -0.1891, -0.3255, -0.1430],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 1.7841,  0.7119, -0.2547, -0.1439,  0.3325, -1.1003, -0.8118,  0.7950],        [ 0.8451,  0.6136, -0.4437, -0.5741,  0.8692,  0.7644,  0.3517, -0.5187],        [ 0.1640,  0.7780, -1.4086, -1.6044,  2.2455, -0.3546,  0.6550,  1.1929],        [-0.6591,  0.3522,  0.9287,  0.5068,  0.1667,  0.0170,  0.2055, -0.6080],        [ 0.7926,  1.4860, -0.6619,  0.0146,  1.3542, -1.1758, -0.2057,  0.3901],        [-0.3752, -1.3377, -0.0463,  0.2028, -0.4402,  1.7848, -0.1331, -0.2884],        [-0.3826, -0.1052,  0.4611, -0.9059, -2.0166,  0.2997,  1.2361, -0.4174],        [-2.1430, -0.8734,  0.5893,  0.2488, -0.2177,  0.6726,  1.1039,  1.0060],        [ 0.5812, -0.8599, -0.3468, -0.1275, -0.4766, -0.1236,  0.8605,  1.0199],        [ 0.9441,  0.3637, -1.8332,  0.1539,  0.7132,  0.0950,  0.8609, -0.9934]],       device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 6.5893e-02,  2.1358e-02,  1.4805e-01, -2.8966e-01, -9.9211e-02,         -4.0558e-02, -1.8081e-01, -1.7177e-01],        [ 1.0934e-01, -1.5795e-02, -2.1638e-01, -2.0584e-01, -2.4286e-01,         -1.9081e-01,  2.9576e-01, -1.6553e-01],        [-3.4252e-02,  6.3052e-04,  8.0188e-02, -1.1135e-01, -3.0725e-01,          2.4029e-01,  5.6000e-02,  1.8650e-01],        [-1.5190e-01, -2.3332e-01, -1.5083e-01, -8.7328e-04,  1.0818e-01,          2.6141e-01,  3.3466e-01,  6.6952e-02],        [-9.4581e-02,  2.2194e-02,  6.9640e-02, -1.8661e-01,  1.0973e-01,         -7.1523e-02,  1.0354e-01,  2.3308e-01],        [-3.3942e-01,  3.4300e-01, -3.4288e-01, -9.3225e-02,  3.4878e-01,         -2.8878e-01,  2.5149e-01, -9.0007e-03],        [-1.6085e-01,  3.5229e-01,  1.6255e-01,  3.3887e-02, -7.4003e-02,         -3.3468e-01,  2.3890e-01, -2.3619e-01],        [ 7.8607e-02, -2.8461e-01,  5.0856e-02,  8.1235e-02,  1.0375e-01,         -3.0794e-01, -6.7361e-02,  3.3582e-01],        [ 4.5722e-02, -1.1111e-02, -1.7835e-01,  1.1545e-01,  6.1457e-02,         -9.7693e-02,  1.0451e-02,  9.6269e-02],        [ 1.8339e-01,  4.3673e-02,  4.5492e-03, -1.3804e-01, -3.1340e-01,          2.9526e-01,  2.3653e-01,  2.7255e-01],        [ 8.2121e-02, -1.4972e-01, -2.2425e-01,  3.7039e-02, -2.2301e-01,         -1.5539e-01, -5.0423e-02,  2.3112e-01],        [-7.5777e-02, -2.9300e-01, -2.1856e-01,  6.8585e-02, -3.2383e-01,          2.3423e-02, -2.2967e-01, -6.8076e-02],        [ 4.8495e-02, -2.5661e-01,  2.1968e-01,  3.3006e-01,  3.2420e-01,          3.0799e-01,  6.8646e-03, -1.5422e-02],        [ 2.1354e-01,  2.3493e-01, -1.5334e-01, -3.2478e-01,  1.2354e-01,          1.9622e-01,  1.3425e-01,  4.7188e-02],        [ 2.9492e-01, -6.1003e-02, -3.3010e-01, -2.0462e-01,  1.7078e-04,         -8.6789e-03, -4.8258e-02,  1.4198e-01],        [-6.6475e-02, -1.8329e-01, -1.8995e-02,  1.3849e-01, -6.0820e-03,          2.8869e-01,  2.6644e-01,  8.7311e-03],        [ 2.7676e-01, -8.9596e-02, -1.2223e-01, -6.2885e-02, -3.0729e-01,         -2.0378e-01, -2.6045e-01,  3.4084e-01],        [ 5.7260e-02, -1.7303e-02, -1.3779e-01, -3.2510e-01,  2.3286e-01,         -1.5465e-01,  2.8172e-01,  8.2384e-02],        [ 2.1787e-01, -1.9439e-01,  2.8290e-01, -9.9440e-02,  7.4783e-03,         -1.4567e-02,  1.0209e-02,  2.4470e-01],        [ 5.9790e-02,  2.4915e-02,  2.7909e-01,  1.0035e-02, -9.5062e-02,          1.5389e-01,  1.5549e-01, -7.9868e-02],        [-3.4455e-01,  1.3742e-01, -8.2051e-02, -2.4700e-01,  1.1334e-01,         -2.1086e-02, -3.1369e-01, -3.3946e-01],        [-1.9585e-01, -2.9069e-01,  2.4966e-01, -2.0562e-01,  7.9724e-02,          2.5096e-01, -3.3514e-01, -1.1402e-01],        [-4.5188e-02, -2.8768e-01,  5.2162e-02,  2.8394e-01,  3.3272e-01,         -1.6050e-01, -2.3109e-01, -2.6183e-01],        [-2.7715e-01, -2.8243e-01,  1.6490e-01, -1.6387e-01, -1.5267e-01,         -3.0654e-01, -2.8063e-01, -3.3728e-01],        [ 3.2159e-01, -2.4516e-01, -3.2917e-01,  7.4709e-02, -2.4596e-01,         -2.8767e-01, -1.2852e-01, -2.3774e-01],        [ 3.2401e-01,  2.0746e-01, -1.3909e-01, -2.0924e-01,  1.7289e-01,          3.8450e-02,  7.6429e-02,  2.8703e-01],        [ 1.3821e-01, -1.8876e-01, -2.6919e-01,  4.1932e-02, -8.8940e-02,          7.4909e-02,  2.9936e-01, -2.3437e-01],        [-2.2846e-01, -2.4945e-01,  1.4291e-01, -2.2226e-01,  1.0372e-01,         -1.4193e-01, -1.3718e-01, -1.2027e-01],        [-1.6028e-01,  6.6377e-02, -9.3952e-03, -4.8865e-02, -2.1320e-01,          2.8190e-01, -2.0719e-01, -2.0863e-01],        [-2.7065e-01,  1.8744e-01,  1.2356e-01,  3.2627e-01,  2.4614e-01,          2.2572e-01, -3.4430e-01, -2.1322e-01],        [-1.4362e-01, -2.2222e-01, -8.3469e-02,  2.3390e-02, -9.5809e-02,         -2.0266e-01,  9.1512e-02, -3.3260e-01],        [-2.3665e-01, -8.1854e-02, -7.1756e-02, -2.0481e-01,  1.4672e-01,         -6.3378e-03,  1.8597e-01,  3.4100e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0693,  0.2328, -0.3503, -0.0378,  0.1455,  0.0200, -0.2220,  0.2883,        -0.2709,  0.3166,  0.1389,  0.2205, -0.2029, -0.0817, -0.2797,  0.0571,        -0.1136,  0.2654, -0.2372, -0.1622, -0.1799, -0.1930, -0.2183,  0.1699,         0.3248, -0.2964,  0.1801, -0.0725, -0.2218,  0.2408,  0.3513,  0.3329],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 0.1464, -0.1129, -0.1095,  0.0893, -0.0108,  0.0392, -0.1013,  0.1532,         -0.0124, -0.0246, -0.0638,  0.0769, -0.0466,  0.1481, -0.1124, -0.1066,          0.1097, -0.0430,  0.1103,  0.0872, -0.0830, -0.1511,  0.0976, -0.1090,         -0.1143,  0.0950,  0.0169,  0.1524,  0.1067,  0.0817, -0.1558, -0.1167],        [ 0.0678, -0.0146, -0.0236, -0.0889,  0.0744,  0.1361,  0.1742,  0.0300,          0.1640, -0.0186, -0.0069,  0.0699, -0.0886, -0.0880, -0.0809, -0.1162,          0.0180, -0.0298, -0.0644, -0.0384,  0.1001,  0.0490, -0.0310,  0.0793,          0.1296, -0.0868,  0.1352, -0.1328,  0.0058, -0.0982, -0.0983,  0.0562],        [-0.0575, -0.1710,  0.0355,  0.0555,  0.1724,  0.1425, -0.1615,  0.0378,          0.0080,  0.0751,  0.0394,  0.0116,  0.1137,  0.0739,  0.1725, -0.1086,         -0.0499, -0.0003,  0.0761,  0.1660,  0.1478,  0.1040,  0.1278, -0.1004,          0.0874,  0.0074, -0.1071, -0.0941,  0.0095,  0.0029, -0.0933,  0.0892],        [ 0.1076,  0.1318, -0.0689, -0.1594, -0.1509,  0.1761,  0.0723, -0.1281,         -0.1371,  0.1327, -0.0402,  0.0059, -0.0757,  0.1747, -0.0517,  0.1047,          0.0622,  0.0326,  0.0693, -0.0956,  0.0566,  0.0313,  0.0325,  0.0752,          0.0816,  0.0069,  0.0740,  0.0214, -0.0984, -0.1176, -0.0274, -0.0270],        [ 0.0759, -0.1526, -0.0286,  0.0397,  0.1753, -0.1487,  0.0796,  0.1656,          0.1386,  0.0964,  0.0936,  0.0950,  0.0939,  0.0756, -0.1343, -0.0172,          0.0196,  0.1410,  0.0824,  0.0994, -0.1293, -0.1566, -0.0153, -0.0324,          0.0465,  0.0688,  0.0656,  0.1234,  0.0673, -0.0274,  0.0552, -0.0089],        [ 0.0893, -0.0488, -0.1571,  0.1645,  0.0521,  0.0308,  0.1059,  0.0814,         -0.0626,  0.0728, -0.0717, -0.0808, -0.1219,  0.1207,  0.1472,  0.0665,          0.0720, -0.1299, -0.1581, -0.0593, -0.0114, -0.1422,  0.1361, -0.0292,         -0.1632,  0.0262,  0.0508,  0.0982, -0.1500, -0.0014,  0.1566,  0.0981],        [ 0.0735, -0.0155, -0.1155,  0.1348, -0.0813,  0.0454, -0.0755,  0.0277,         -0.0910,  0.1395,  0.0935, -0.1120, -0.0277, -0.0918, -0.0529,  0.0062,         -0.1562,  0.1040, -0.1699, -0.1419, -0.1301, -0.1144, -0.0618, -0.0108,         -0.0460,  0.0686, -0.1263, -0.0370,  0.1667,  0.1585,  0.1256, -0.0375],        [-0.0112,  0.0668, -0.1109,  0.0616, -0.0958, -0.0099, -0.0839,  0.0191,         -0.0971, -0.1085,  0.1118, -0.0774, -0.0070,  0.0122,  0.0954, -0.1193,          0.0114, -0.1147, -0.0314,  0.1747,  0.0346, -0.0840,  0.0391, -0.0541,         -0.1091, -0.0645,  0.0696, -0.1561,  0.1208, -0.0191, -0.1513, -0.1428]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0323, -0.1023,  0.0092, -0.0543,  0.0628,  0.1554,  0.1386,  0.1144],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[[[0.],          [0.],          [0.],          [0.]]]], device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([[ 0.3404, -0.0784, -0.2037,  0.2218, -0.0007,  0.1675,  0.1265, -0.2665],        [ 0.1137, -0.2400, -0.1582,  0.0319,  0.0463, -0.0668, -0.1449, -0.0193],        [-0.1495,  0.1699, -0.0677,  0.0785, -0.1401, -0.3277, -0.0493,  0.2157],        [-0.2634, -0.3281,  0.3506, -0.3214,  0.1807,  0.3403, -0.3308, -0.3356],        [ 0.1668,  0.1837,  0.1467, -0.0405,  0.2801, -0.0171, -0.0484,  0.0961],        [ 0.2353, -0.0604, -0.0708, -0.2719,  0.2399,  0.2501,  0.0848,  0.3235],        [ 0.3000,  0.2217, -0.1636, -0.2605,  0.1227, -0.2346, -0.2952,  0.0467],        [-0.1680, -0.3223,  0.0317,  0.2811, -0.1306,  0.2391, -0.0291,  0.3324],        [-0.1472, -0.2807, -0.0162,  0.1179, -0.0733, -0.1747, -0.3524, -0.1365],        [-0.1992, -0.0492, -0.3342,  0.0430,  0.0751,  0.0572, -0.3215, -0.1702],        [ 0.1430,  0.1289, -0.1294,  0.0013, -0.2896,  0.3294, -0.1515,  0.0263],        [-0.1950,  0.1204,  0.1324,  0.3293, -0.3097,  0.0476,  0.0084,  0.0343],        [ 0.1137, -0.2344, -0.1993, -0.0210, -0.2179,  0.0066, -0.3235, -0.1004],        [-0.3300, -0.3260,  0.2415, -0.3090,  0.0729, -0.1025,  0.2328,  0.0191],        [ 0.2150, -0.3134,  0.0762, -0.1156, -0.1841, -0.0109,  0.1217,  0.1615],        [-0.2518, -0.0740, -0.3067,  0.1081,  0.3030,  0.3289, -0.3526,  0.2631],        [ 0.0603, -0.1945,  0.3530,  0.0670,  0.3311,  0.1793, -0.3446,  0.3345],        [ 0.2503,  0.2751, -0.2760,  0.0078,  0.2025, -0.0548,  0.1079, -0.1133],        [-0.1582, -0.2716, -0.1800, -0.3301, -0.2902, -0.1650, -0.3153,  0.2391],        [ 0.0342, -0.1090, -0.2687, -0.0358,  0.0786, -0.1517,  0.1254,  0.0957],        [ 0.2575,  0.1834, -0.0470, -0.0204, -0.2808, -0.0673, -0.0558,  0.0008],        [ 0.1258, -0.2072,  0.0555, -0.2077,  0.1351, -0.0566,  0.3471,  0.1228],        [ 0.3349, -0.1774, -0.0522,  0.2082, -0.0324,  0.2381,  0.2848,  0.1482],        [-0.0430,  0.0106,  0.3237, -0.0044,  0.2087, -0.2612,  0.0164,  0.0838]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0530, -0.0763, -0.0028,  0.1085, -0.3189, -0.1606, -0.1181, -0.1334,         0.2640, -0.1576, -0.2550,  0.0455, -0.0787,  0.0398,  0.1590, -0.1556,         0.0225, -0.0938, -0.2418,  0.0467,  0.0833, -0.1870,  0.3066, -0.3505],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.0839,  0.0659,  0.2793,  0.1647, -0.0542,  0.2126,  0.1493, -0.0943],        [ 0.1107,  0.3330, -0.1780, -0.3524, -0.0611, -0.2709,  0.1982, -0.0123],        [ 0.0282, -0.3372, -0.2035,  0.0192,  0.0389,  0.3252,  0.1040, -0.2365],        [ 0.2659,  0.0564,  0.1125, -0.1685, -0.1637,  0.0264,  0.0199,  0.2551],        [ 0.3084,  0.1416,  0.0470,  0.2403, -0.0901, -0.3014, -0.3301, -0.1559],        [ 0.3133,  0.3529, -0.3407, -0.0382, -0.0358, -0.1787, -0.0387, -0.1373],        [-0.1918,  0.0755,  0.3417,  0.1268, -0.3168, -0.0384,  0.2844, -0.1642],        [-0.2773,  0.2255,  0.1545, -0.3410, -0.2755,  0.2318, -0.3153,  0.2691]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.2181,  0.2350, -0.2638,  0.2656, -0.1387,  0.3444,  0.0198, -0.1788],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 1.1537,  1.4106,  1.5544, -1.0306, -1.3801,  0.2603, -0.6515,  1.5445],        [-0.1275, -0.6874, -0.6158, -0.8035, -0.0088, -1.2591,  0.3704,  1.4032],        [-1.0058,  0.0532,  0.4710,  1.2358,  0.1716, -0.8462,  0.8084, -1.2172],        [ 1.7788,  0.7106, -1.3180, -2.5337, -0.5739, -1.1140,  1.0843,  0.3369],        [ 0.3764, -1.4538,  1.3136, -0.0065,  0.3045, -1.1442, -0.2558,  1.2981],        [ 0.0188, -0.3169, -1.2457,  1.2154,  0.2243,  1.8292, -2.1265, -1.7702],        [-0.4025,  0.5508, -1.0771,  0.8800, -0.4297,  0.6837, -1.3463, -0.7835],        [-0.0045,  1.1033, -1.2160, -0.4731,  0.8819,  0.0372,  0.7367,  0.3115],        [-0.5226,  0.3311, -0.0913,  0.7536,  1.3422, -0.2453, -0.9801,  0.5688],        [-0.2757,  1.6502,  0.6107,  1.4373, -0.5155,  0.7005, -1.1838,  0.8372]],       device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[-1.3732e-01, -2.3332e-01, -1.6029e-01, -3.3240e-01, -4.2077e-02,         -8.1405e-02, -2.2076e-01,  5.6473e-02],        [-6.9899e-02,  7.1788e-02,  2.3753e-02,  6.6103e-02, -3.4360e-01,          2.1811e-01, -2.5904e-01, -3.1350e-01],        [-1.0057e-01,  2.1701e-01, -4.4901e-02,  2.4451e-02,  2.3035e-01,         -2.5810e-01,  1.2159e-01, -1.6353e-01],        [ 3.3067e-02, -2.4335e-01,  2.1367e-01, -2.7855e-01, -9.4848e-02,         -2.1932e-01,  2.0793e-01, -8.0509e-02],        [ 1.2841e-01, -7.9310e-02, -3.3849e-01, -1.0480e-01,  2.1637e-01,          5.6048e-02,  9.2525e-02, -3.5254e-01],        [ 2.7111e-01, -2.2776e-01,  3.1415e-01,  6.6136e-02,  3.3047e-01,         -2.1541e-02, -2.3139e-01,  2.8371e-01],        [ 3.3119e-01, -2.2968e-01, -1.3497e-01,  1.0050e-01, -9.7787e-02,          1.0685e-01, -1.5194e-01,  3.0975e-02],        [ 1.8377e-01, -2.4812e-01,  1.7400e-02, -1.9171e-01, -3.4704e-01,         -2.3089e-01, -2.8404e-01, -2.6585e-01],        [-4.0592e-02,  3.2437e-01, -6.2993e-02,  7.5329e-02,  2.7870e-01,          2.7401e-01,  2.7759e-01, -2.3725e-01],        [-2.6910e-01, -2.8936e-01, -1.3322e-01,  3.1138e-01,  1.9009e-01,          3.0851e-01,  3.4273e-01, -3.6591e-02],        [ 9.4119e-02, -9.1043e-02, -4.0021e-02,  1.9836e-01,  3.0940e-04,         -1.8952e-01,  1.1122e-01,  1.8951e-01],        [-3.2792e-01,  3.2173e-01,  2.2076e-01, -2.3394e-01,  2.2487e-01,         -1.2898e-01, -8.4961e-02, -1.5538e-01],        [ 2.0375e-01, -4.0108e-02, -1.0112e-01,  2.7968e-02, -2.8452e-02,         -3.0800e-01, -2.7689e-01, -7.3817e-02],        [ 1.3027e-01,  9.0503e-02,  2.8481e-01, -3.0312e-01, -3.1633e-01,          2.6214e-01,  1.8745e-01, -2.6924e-01],        [ 1.3722e-01, -1.1742e-01,  2.4721e-02, -2.7830e-01,  3.3598e-01,         -3.3192e-01, -1.7417e-01,  2.3394e-01],        [-2.3660e-01, -1.7402e-01, -3.2918e-01, -2.9007e-01, -2.7806e-02,          2.9714e-01,  1.3426e-01, -7.9150e-02],        [ 1.7340e-01,  2.1998e-01, -6.6770e-02,  5.8768e-02,  1.8551e-02,         -3.3554e-02, -2.8439e-01, -9.2082e-02],        [ 8.6543e-02, -1.3679e-01,  1.9206e-01,  3.4259e-01, -2.4001e-01,          2.4259e-01,  1.1591e-01, -2.5047e-03],        [-2.3748e-01, -1.3318e-01, -1.2024e-01, -8.3167e-02, -1.7073e-01,         -1.0206e-01, -3.1937e-01, -2.0122e-01],        [-2.1916e-02,  2.5703e-01,  7.3084e-02, -6.3421e-02,  1.5156e-01,         -7.8713e-02,  3.3370e-01,  7.9817e-02],        [-3.5000e-01,  1.4815e-01, -2.9351e-01, -1.9803e-01, -3.5240e-01,          1.7256e-01, -3.2106e-02,  2.3932e-01],        [-2.9592e-01,  3.0265e-01,  1.3891e-01,  3.2459e-01,  3.0302e-01,          2.8832e-02, -3.5200e-02, -3.0984e-02],        [ 2.8873e-01,  2.4445e-01, -5.7766e-02,  2.9249e-01, -3.0069e-01,         -7.8974e-02,  3.3308e-01, -1.8910e-01],        [ 1.9461e-01, -2.2685e-01,  1.0647e-01, -3.4326e-01, -2.9526e-01,          2.4968e-01, -2.4847e-01, -3.5818e-03],        [-2.2206e-01, -2.2976e-01, -1.1552e-01, -5.3808e-02, -8.3601e-02,          2.0537e-01, -3.4641e-01,  1.4962e-01],        [ 3.3328e-01, -3.3841e-01,  2.2180e-01, -1.7589e-01,  8.9045e-02,         -2.8206e-01,  3.3939e-01, -1.4631e-01],        [ 2.6775e-01,  2.0620e-01, -3.2241e-01, -1.0405e-01, -1.8671e-01,         -2.1127e-01,  9.8313e-03,  6.5414e-02],        [-1.7894e-01, -2.7265e-01, -1.5433e-01, -1.4552e-01,  2.6358e-01,         -9.3848e-02,  1.3530e-02, -1.0751e-02],        [-1.4177e-01,  2.8125e-01, -3.0068e-01, -2.9215e-01, -2.7913e-02,          2.7730e-01,  2.1517e-01, -3.4198e-01],        [ 2.7883e-01, -1.2303e-01, -1.3842e-01,  1.9788e-01, -2.4735e-01,          7.9309e-02, -1.7941e-02, -2.5372e-01],        [-3.1383e-01,  1.6512e-01, -6.6150e-03, -3.2212e-01, -1.6698e-01,         -2.5484e-01, -1.3594e-01,  1.1862e-01],        [ 2.0073e-01, -1.3519e-01,  1.3472e-01,  2.8381e-01,  3.0003e-01,          1.5058e-01, -2.9155e-01, -1.5276e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.0230,  0.2693, -0.1822,  0.1215,  0.0237,  0.0995,  0.3511, -0.0494,        -0.1502,  0.1793,  0.2525, -0.0892, -0.2716, -0.1036, -0.1978, -0.0045,        -0.0400,  0.2644,  0.1202, -0.2093, -0.1216, -0.0320, -0.2973,  0.3021,         0.1840, -0.1094,  0.3364, -0.2633,  0.2542,  0.0856,  0.1225,  0.2950],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 3.2091e-02, -1.0682e-01, -1.3673e-01, -6.4852e-02, -1.5851e-01,         -1.4597e-02, -3.4998e-02, -1.7307e-02, -3.1298e-02,  1.3823e-01,          8.6090e-02,  1.6641e-02, -5.0713e-02,  9.0618e-02,  1.2002e-01,          1.0725e-01, -1.2712e-01, -1.4069e-01,  4.4547e-02,  1.4398e-01,          2.2691e-02, -1.6055e-01, -1.0734e-01,  1.2551e-01, -9.9248e-02,         -1.3766e-01,  2.7332e-02,  6.6128e-02,  1.4520e-01, -6.3990e-02,         -8.8924e-02,  1.6574e-01],        [-8.5860e-02,  1.6455e-01,  5.5703e-03, -7.5762e-03, -5.8784e-02,          8.7587e-02,  1.7518e-01, -1.2245e-01, -1.6567e-01,  1.5311e-01,          1.3423e-01,  1.5241e-01,  1.6841e-01,  1.1972e-01, -4.9093e-02,         -4.3115e-02,  4.8810e-02, -1.3533e-01,  4.2802e-02, -9.4440e-02,          6.5721e-02, -1.2723e-01,  2.0516e-02,  1.1529e-01, -6.3554e-02,          3.7811e-02, -7.6571e-02, -4.0653e-02, -3.6779e-03, -1.3432e-01,         -7.0104e-02, -1.6757e-01],        [ 3.1871e-02,  9.5419e-02,  2.4403e-02, -7.4098e-02,  3.5393e-02,         -1.2427e-01,  8.2556e-02, -4.0956e-02,  1.1842e-01, -2.6363e-02,         -1.5294e-01, -1.2758e-01,  4.8718e-02, -1.7604e-01,  7.0715e-02,         -1.4409e-01,  4.9713e-02,  1.0302e-01,  1.6939e-01,  5.8464e-02,         -1.2441e-01, -6.2853e-02,  4.0320e-02, -1.2951e-01, -6.3597e-02,          7.8169e-02, -1.1068e-01, -1.4177e-01,  1.1039e-01, -1.4397e-02,         -1.0798e-01,  1.2992e-01],        [-6.8907e-02,  6.8767e-02,  1.2048e-01, -9.3299e-02, -9.3412e-02,          1.4834e-01,  1.3076e-01,  8.3786e-02,  5.0215e-02,  7.6105e-02,          9.1665e-02, -1.7451e-01,  1.7482e-01,  4.2569e-02, -1.7710e-02,         -5.2226e-02,  4.1657e-03, -8.9350e-02, -1.6638e-01, -3.4854e-02,          1.1221e-01,  5.0713e-02,  1.4936e-01,  9.5436e-02, -1.8535e-02,         -1.5881e-01, -1.4284e-01,  5.2121e-02,  1.5759e-02, -1.0651e-01,         -1.1450e-01, -3.8950e-02],        [ 6.4010e-02,  4.1832e-02, -1.7165e-02,  1.5794e-02, -1.3269e-01,          7.4074e-02, -1.3031e-01,  8.5265e-02, -6.7803e-02, -1.9770e-03,         -5.1846e-02, -1.1780e-01,  7.4514e-04,  4.0716e-02, -1.4831e-01,          1.6150e-01,  1.7425e-01,  7.8152e-02,  1.5945e-01,  2.6147e-02,         -2.3951e-02,  1.2115e-01,  3.7625e-02, -6.1239e-02, -1.2143e-01,         -1.0947e-01,  7.2787e-02,  1.4134e-01,  7.7765e-02,  1.1258e-01,         -3.1872e-02,  2.5150e-02],        [-7.7370e-02,  1.5542e-01, -1.4555e-01, -1.2390e-01, -1.1911e-01,         -2.1942e-02,  1.5837e-01, -1.5696e-01,  5.3065e-02, -3.7610e-02,          1.2573e-02,  3.9276e-02, -1.0505e-01, -1.0437e-01, -1.3930e-01,          9.3889e-02, -5.2252e-02, -1.0276e-02, -9.2492e-02,  1.0355e-01,         -1.5270e-01,  1.1641e-01, -5.1292e-02, -5.1706e-02, -1.7213e-01,          1.2448e-01,  4.8178e-03,  6.7001e-02, -1.3091e-01, -1.3727e-01,          1.0331e-01, -5.4297e-02],        [-9.6762e-02, -8.1677e-02, -1.3128e-01,  7.4091e-02, -1.2999e-01,          5.5845e-05,  6.3019e-02,  1.5693e-01,  2.6206e-02,  1.4452e-01,          1.5972e-01, -1.1917e-01,  1.7290e-01,  1.6383e-01, -1.6653e-01,          1.5148e-01, -5.6980e-02, -2.2292e-02, -9.6283e-03, -7.7248e-02,          6.7019e-02, -9.5227e-02, -1.3011e-01,  1.2579e-01,  2.6667e-02,          7.3271e-02,  2.2565e-02,  1.1339e-01,  7.8180e-02,  1.0898e-01,          7.3876e-02,  1.3928e-01],        [ 4.6086e-02, -1.7529e-01, -1.6908e-01, -4.2175e-02,  1.4678e-01,         -4.8583e-02,  2.5431e-02, -9.0840e-02,  6.5542e-02, -1.2747e-01,          1.0576e-01, -1.2599e-01,  1.0223e-02, -1.5799e-01,  9.4894e-02,         -1.7279e-01,  1.7128e-01,  7.1158e-02, -1.6636e-01,  3.0011e-02,         -3.8756e-02, -6.6649e-02, -1.0032e-01, -9.6605e-02, -1.0353e-01,         -4.9014e-02,  3.7320e-02, -6.4673e-02, -1.6552e-01,  1.3066e-01,         -2.5382e-02, -4.8320e-02]], device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0858, -0.1672, -0.0081, -0.1258,  0.1006,  0.0445,  0.0299,  0.0104],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 534, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def bytes_from_int(val: int) -> bytes:\n    remaining = val\n    byte_length = 0\n\n    while remaining != 0:\n        remaining >>= 8\n        byte_length += 1\n\n    return val.to_bytes(byte_length, \"big\", signed=False)\n\nbytes_from_int(val=0)", "Selected Statement": "byte_length = 0", "Function Input": {"val": "0"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"val": [[1, "0"]], "remaining": [[2.0, "0"]], "byte_length": [[3.0, "0"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 542, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def convert_type(ty, default=None):\n    \"\"\"Converts a callable or python ty into the most appropriate param\n    ty.\n    \"\"\"\n    guessed_type = False\n    if ty is None and default is not None:\n        if isinstance(default, tuple):\n            ty = tuple(map(type, default))\n        else:\n            ty = type(default)\n        guessed_type = True\n\n    if isinstance(ty, tuple):\n        return Tuple(ty)\n    if isinstance(ty, ParamType):\n        return ty\n    if ty is text_type or ty is str or ty is None:\n        return STRING\n    if ty is int:\n        return INT\n    # Booleans are only okay if not guessed.  This is done because for\n    # flags the default value is actually a bit of a lie in that it\n    # indicates which of the flags is the one we want.  See get_default()\n    # for more information.\n    if ty is bool and not guessed_type:\n        return BOOL\n    if ty is float:\n        return FLOAT\n    if guessed_type:\n        return STRING\n\n    # Catch a common mistake\n    if __debug__:\n        try:\n            if issubclass(ty, ParamType):\n                raise AssertionError('Attempted to use an uninstantiated '\n                                     'parameter type (%s).' % ty)\n        except TypeError:\n            pass\n    return FuncParamType(ty)\n\nconvert_type(ty=None, default=None)", "Selected Statement": "guessed_type = False", "Function Input": {"ty": "None", "default": "None"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"ty": [[1, "None"]], "default": [[1, "None"]], "guessed_type": [[5.0, "False"]]}, "Program Information": "Project Name: MrTango+click", "idx": 496, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def fixed_litellm_completions(**params):\n    \"\"\"\n    Just uses a dummy API key, since we use litellm without an API key sometimes.\n    Hopefully they will fix this!\n    \"\"\"\n\n    # Run completion\n    first_error = None\n    try:\n        yield from litellm.completion(**params)\n    except Exception as e:\n        # Store the first error\n        first_error = e\n        # LiteLLM can fail if there's no API key,\n        # even though some models (like local ones) don't require it.\n\n        if \"api key\" in str(first_error).lower() and \"api_key\" not in params:\n            print(\n                \"LiteLLM requires an API key. Please set a dummy API key to prevent this message. (e.g `interpreter --api_key x` or `interpreter.llm.api_key = 'x'`)\"\n            )\n\n        # So, let's try one more time with a dummy API key:\n        params[\"api_key\"] = \"x\"\n\n        try:\n            yield from litellm.completion(**params)\n        except:\n            # If the second attempt also fails, raise the first error\n            raise first_error\n\nfixed_litellm_completions(params={'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with \u2014 \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]})", "Selected Statement": "params[\"api_key\"] = \"x\"", "Function Input": {"params": "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with \u2014 \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]}"}, "Variable Values Before Statement": {"Constant": "\"x\""}, "Value After Statement Execution": "\"x\"", "Variable States During Runtime": {"params": [[1, "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with \u2014 \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]}"], [23.0, "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with \u2014 \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}], 'api_key': 'x'}"]], "first_error": [[8.0, "None"], [13.0, "APIError('OpenAIException - The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable')"]], "e": [[11.0, "APIError('OpenAIException - The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable')"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 485, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def make_default_short_help(help, max_length=45):\n    words = help.split()\n    total_length = 0\n    result = []\n    done = False\n\n    for word in words:\n        if word[-1:] == '.':\n            done = True\n        new_length = result and 1 + len(word) or len(word)\n        if total_length + new_length > max_length:\n            result.append('...')\n            done = True\n        else:\n            if result:\n                result.append(' ')\n            result.append(word)\n        if done:\n            break\n        total_length += new_length\n\n    return ''.join(result)\n\nmake_default_short_help(help='Hello World!', max_length=45)", "Selected Statement": "total_length = 0", "Function Input": {"help": "'Hello World!'", "max_length": "45"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"help": [[1, "'Hello World!'"]], "max_length": [[1, "45"]], "words": [[2.0, "['Hello', 'World!']"]], "total_length": [[3.0, "0"], [20.0, "5"], [20.0, "12"]], "result": [[4.0, "[]"], [17.0, "['Hello']"], [16.0, "['Hello', ' ']"], [17.0, "['Hello', ' ', 'World!']"]], "done": [[5.0, "False"]], "word": [[7.0, "'Hello'"], [7.0, "'World!'"]], "new_length": [[10.0, "5"], [10.0, "7"]]}, "Program Information": "Project Name: MrTango+click", "idx": 497, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_access_method(access_method: str):\n    num_workers = 0\n    scheduler = \"threaded\"\n    download = access_method.startswith(\"download\")\n    local = access_method.startswith(\"local\")\n    if download or local:\n        split = access_method.split(\":\")\n        if len(split) == 1:\n            split.extend((\"threaded\", \"0\"))\n        elif len(split) == 2:\n            split.append(\"threaded\" if split[1].isnumeric() else \"0\")\n        elif len(split) >= 3:\n            num_integers = sum(1 for i in split if i.isnumeric())\n            if num_integers != 1 or len(split) > 3:\n                raise ValueError(\n                    \"Invalid access_method format. Expected format is one of the following: {download, download:scheduler, download:num_workers, download:scheduler:num_workers, download:num_workers:scheduler}\"\n                )\n\n        access_method = \"download\" if download else \"local\"\n        num_worker_index = 1 if split[1].isnumeric() else 2\n        scheduler_index = 3 - num_worker_index\n        num_workers = int(split[num_worker_index])\n        scheduler = split[scheduler_index]\n    return access_method, num_workers, scheduler\n\nparse_access_method(access_method='download')", "Selected Statement": "num_workers = 0", "Function Input": {"access_method": "'download'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"access_method": [[1, "'download'"]], "num_workers": [[2.0, "0"]], "scheduler": [[3.0, "'threaded'"]], "download": [[4.0, "True"]], "local": [[5.0, "False"]], "split": [[7.0, "['download']"], [9.0, "['download', 'threaded', '0']"]], "num_worker_index": [[20.0, "2"]], "scheduler_index": [[21.0, "1"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 521, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def test_speech_extraction(sample_rate, start_seconds):\n    parser = GenericSubtitleParser(start_seconds=start_seconds)\n    extractor = SubtitleSpeechTransformer(\n        sample_rate=sample_rate, start_seconds=start_seconds\n    )\n    pipe = make_pipeline(parser, extractor)\n    bitstring = pipe.fit_transform(BytesIO(fake_srt)).astype(bool)\n    bitstring_shifted_left = np.append(bitstring[1:], [False])\n    bitstring_shifted_right = np.append([False], bitstring[:-1])\n    bitstring_cumsum = np.cumsum(bitstring)\n    consec_ones_end_pos = np.nonzero(\n        bitstring_cumsum\n        * (bitstring ^ bitstring_shifted_left)\n        * (bitstring_cumsum != np.cumsum(bitstring_shifted_right))\n    )[0]\n    prev = 0\n    for pos, sub in zip(consec_ones_end_pos, parser.subs_):\n        start = int(round(sub.start.total_seconds() * sample_rate))\n        duration = sub.end.total_seconds() - sub.start.total_seconds()\n        stop = start + int(round(duration * sample_rate))\n        assert bitstring_cumsum[pos] - prev == stop - start\n        prev = bitstring_cumsum[pos]\n\ntest_speech_extraction(sample_rate=10, start_seconds=0)", "Selected Statement": "prev = 0", "Function Input": {"sample_rate": "10", "start_seconds": "0"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"sample_rate": [[1, "10"]], "start_seconds": [[1, "0"]], "parser": [[2.0, "{subs_=None, sub_format='srt', encoding='infer', caching=False, fit_fname=None, detected_encoding_=None, max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"], [7.0, "{subs_=<ffsubsync.generic_subtitles.GenericSubtitlesFile object at 0x7fb01543e5e0>, sub_format='srt', encoding='infer', caching=False, fit_fname=<_io.BytesIO object at 0x7fb014da3310>, detected_encoding_='ASCII', max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"]], "extractor": [[3.0, "{sample_rate=10, start_seconds=0, framerate_ratio=1.0, subtitle_speech_results_=None, max_time_=None}"], [7.0, "{sample_rate=10, start_seconds=0, framerate_ratio=1.0, subtitle_speech_results_=array([0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0.]), max_time_=6.062, start_frame_=2, end_frame_=60}"]], "pipe": [[6.0, "{steps=[('genericsubtitleparser', <ffsubsync.subtitle_parser.GenericSubtitleParser object at 0x7fb01543ef40>), ('subtitlespeechtransformer', <ffsubsync.speech_transformers.SubtitleSpeechTransformer object at 0x7fb01543e6a0>)], verbose=False}"]], "bitstring": [[7.0, "array([False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True, False, False, False,       False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,       False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True, False])"]], "bitstring_shifted_left": [[8.0, "array([False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True, False, False, False, False,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True, False,       False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True, False, False])"]], "bitstring_shifted_right": [[9.0, "array([False, False, False,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True, False, False,       False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True, False, False,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True])"]], "bitstring_cumsum": [[10.0, "array([ 0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,       16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 23, 24, 25, 26, 27, 28,       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 39, 40, 41, 42, 43,       44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 53])"]], "consec_ones_end_pos": [[11.0, "array([23, 44, 60])"]], "prev": [[16.0, "0"], [22.0, "22"], [22.0, "39"], [22.0, "53"]], "pos": [[17.0, "23"], [17.0, "44"], [17.0, "60"]], "sub": [[17.0, "{start=datetime.timedelta(microseconds=178000), end=datetime.timedelta(seconds=2, microseconds=416000), inner=Subtitle(index=1, start=datetime.timedelta(microseconds=178000), end=datetime.timedelta(seconds=2, microseconds=416000), content='<i>Previously on \"Your favorite TV show...\"</i>', proprietary='')}"], [17.0, "{start=datetime.timedelta(seconds=2, microseconds=828000), end=datetime.timedelta(seconds=4, microseconds=549000), inner=Subtitle(index=2, start=datetime.timedelta(seconds=2, microseconds=828000), end=datetime.timedelta(seconds=4, microseconds=549000), content='Oh hi, Mark.', proprietary='')}"], [17.0, "{start=datetime.timedelta(seconds=4, microseconds=653000), end=datetime.timedelta(seconds=6, microseconds=62000), inner=Subtitle(index=3, start=datetime.timedelta(seconds=4, microseconds=653000), end=datetime.timedelta(seconds=6, microseconds=62000), content='You are tearing me apart, Lisa!', proprietary='')}"]], "start": [[18.0, "2"], [18.0, "28"], [18.0, "47"]], "duration": [[19.0, "2.238"], [19.0, "1.7210000000000005"], [19.0, "1.4090000000000007"]], "stop": [[20.0, "24"], [20.0, "45"], [20.0, "61"]], "@py_assert0": [[21.0, "None"]], "@py_assert3": [[21.0, "None"]], "@py_assert7": [[21.0, "None"]], "@py_assert4": [[21.0, "None"]]}, "Program Information": "Project Name: smacke+ffsubsync", "idx": 483, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def feet(kilometers=0, meters=0, miles=0, nautical=0):\n    \"\"\"\n    Convert distance to feet.\n    \"\"\"\n    ret = 0.\n    if nautical:\n        kilometers += nautical / nm(1.)\n    if meters:\n        kilometers += meters / 1000.\n    if kilometers:\n        miles += mi(kilometers=kilometers)\n    ret += miles * 5280\n    return ret\n\nfeet(kilometers=1.0, meters=0, miles=0, nautical=0)", "Selected Statement": "ret = 0.", "Function Input": {"kilometers": "1.0", "meters": "0", "miles": "0", "nautical": "0"}, "Variable Values Before Statement": {"Constant": "0."}, "Value After Statement Execution": "0.", "Variable States During Runtime": {"kilometers": [[1, "1.0"]], "meters": [[1, "0"]], "miles": [[1, "0"], [11.0, "0.621371192237334"]], "nautical": [[1, "0"]], "ret": [[5.0, "0.0"], [12.0, "3280.839895013123"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 480, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def patch_terminal_size(monkeypatch):\n    term_width = '250'\n    term_height = '60'\n    monkeypatch.setitem(os.environ, 'COLUMNS', term_width)\n    monkeypatch.setitem(os.environ, 'LINES', term_height)\n\npatch_terminal_size(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None})", "Selected Statement": "term_width = '250'", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"}, "Variable Values Before Statement": {"Constant": "'250'"}, "Value After Statement Execution": "'250'", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [4.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250'}), 'COLUMNS', <notset>)], _cwd=None, _savesyspath=None}"], [5.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'V...deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250', 'LINES': '60'}), 'LINES', <notset>)], _cwd=None, _savesyspath=None}"]], "term_width": [[2.0, "'250'"]], "term_height": [[3.0, "'60'"]]}, "Program Information": "Project Name: AmmsA+Githeat", "idx": 545, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _check_if_valid_subspec(spec: Union[dict, core.SchemaBase], classname: str) -> None:\n    \"\"\"Check if the spec is a valid sub-spec.\n\n    If it is not, then raise a ValueError\n    \"\"\"\n    err = (\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )\n\n    if not isinstance(spec, (core.SchemaBase, dict)):\n        raise ValueError(\"Only chart objects can be used in {0}.\".format(classname))\n    for attr in TOPLEVEL_ONLY_KEYS:\n        if isinstance(spec, core.SchemaBase):\n            val = getattr(spec, attr, Undefined)\n        else:\n            val = spec.get(attr, Undefined)\n        if val is not Undefined:\n            raise ValueError(err.format(attr, classname))\n\n_check_if_valid_subspec(spec=alt.Chart(...), classname='LayerChart')", "Selected Statement": "err = (", "Function Input": {"spec": "alt.Chart(...)", "classname": "'LayerChart'"}, "Variable Values Before Statement": {"Constant": "( # [STATE] err = 'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.' [/STATE]\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )"}, "Value After Statement Execution": "( # [STATE] err = 'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.' [/STATE]\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )", "Variable States During Runtime": {"spec": [[1, "alt.Chart(...)"]], "classname": [[1, "'LayerChart'"]], "err": [[6.0, "'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.'"]], "attr": [[13.0, "'autosize'"], [13.0, "'background'"], [13.0, "'$schema'"], [13.0, "'config'"], [13.0, "'padding'"]], "val": [[15.0, "Undefined"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 487, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
