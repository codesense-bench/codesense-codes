{"idx": 0, "code": "    public String addBinary(String num1, String num2) {\\n        boolean carry = false;\\n        int size1 = num1.length() - 1;\\n        int size2 = num2.length() - 1;\\n        String sum = \\\"\\\";\\n        \\n        if (size2 > size1) {\\n            String s = num1;\\n            num1 = num2;\\n            num2 = s;\\n            int n = size1;\\n            size1 = size2;\\n            size2 = n;\\n        }\\n        \\n        for (; size2 >= 0 ; size1--, size2--) {\\n            if (num1.charAt(size1) == '0' && num2.charAt(size2) == '0') {\\n                if (!carry)\\n                    sum = \\\"0\\\" + sum;\\n                else\\n                    sum = \\\"1\\\" + sum;\\n                carry = false;\\n            } else if (num1.charAt(size1) == '1' && num2.charAt(size2) == '0') {\\n                if (!carry)\\n                    sum = \\\"1\\\" + sum;\\n                else {\\n                    sum = \\\"0\\\" + sum;\\n                    carry = true;\\n                }\\n            } else if (num1.charAt(size1) == '0' && num2.charAt(size2) == '1') {\\n                if (!carry)\\n                    sum = \\\"1\\\" + sum;\\n                else {\\n                    sum = \\\"0\\\" + sum;\\n                    carry = true;\\n                }\\n            } else if (num1.charAt(size1) == '1' && num2.charAt(size2) == '1') {\\n                if (!carry)\\n                    sum = \\\"0\\\" + sum;\\n                else\\n                    sum = \\\"1\\\" + sum;\\n                carry = true;\\n            }\\n        }\\n        \\n        for (; size1 >= 0 ; size1--) {\\n            if (num1.charAt(size1) == '0') {\\n                if (!carry)\\n                    sum = \\\"0\\\" + sum;\\n                else\\n                    sum = \\\"1\\\" + sum;\\n                carry = false;\\n            } else if (num1.charAt(size1) == '1') {\\n                if (!carry)\\n                    sum = \\\"1\\\" + sum;\\n                else {\\n                    sum = \\\"0\\\" + sum;\\n                    carry = true;\\n                }\\n            }\\n        }\\n        \\n        if (carry)\\n            sum = \\\"1\\\" + sum;\\n        \\n        return sum;\\n    }", "basic_input": [{"name": "num1", "type": "java.lang.String", "value": "1"}, {"name": "num2", "type": "java.lang.String", "value": "0"}], "output": [{"name": "sum", "type": "java.lang.String", "value": "\"1\""}], "cyclomatic_complexity": 17, "code_length": 67, "category": "Hard"}
{"idx": 1, "code": "    private String getNetmask(String binaryIP){\\n        String invertedIPPrefix = \\\"\\\";\\n        for (int i = 0; i < MAXPREFIX; i++){\\n            if (binaryIP.charAt(i) == '0')\\n                invertedIPPrefix += \\\"1\\\";\\n            else\\n                invertedIPPrefix += \\\"0\\\";\\n        }\\n        return invertedIPPrefix;\\n    }\\n", "basic_input": [{"name": "binaryIP", "type": "java.lang.String", "value": "''"}], "output": [{"name": "invertedIPPrefix", "type": "java.lang.String", "value": "\"\""}], "cyclomatic_complexity": 3, "code_length": 10, "category": "Medium"}
{"idx": 2, "code": "    private String convert(String binaryIP){\\n        String outputIP = \\\"\\\";\\n        String reassembler = \\\"\\\";\\n        for (int i = 0; i < binaryIP.length(); i++){\\n            reassembler += binaryIP.charAt(i);\\n            fullReassembler += binaryIP.charAt(i);\\n            if (i == semiCol){\\n                if (isIPv4){\\n                    outputIP += Integer.parseInt(reassembler, 2);\\n                    reassembler = \\\"\\\";\\n                } else if (isIPv6) {\\n                    outputIP += Integer.toHexString(Integer.parseInt(\\n                            reassembler, 2));\\n                    reassembler = \\\"\\\";\\n                }\\n                \\n                if (i != (binaryIP.length() - 1))\\n                    outputIP += DELIMITER;\\n                semiCol = semiCol + lengthOfToken;\\n            }\\n        }\\n        return outputIP;\\n    }\\n", "basic_input": [{"name": "binaryIP", "type": "java.lang.String", "value": "1"}], "output": [{"name": "outputIP", "type": "java.lang.String", "value": "\"\""}], "cyclomatic_complexity": 6, "code_length": 23, "category": "Hard"}
{"idx": 3, "code": "\tprivate double modfloor(double f, double t) {\\n\\tt = Math.abs(t);\\n\\t\\treturn (Math.floor(f/t)*t);\\n\\t}\\n", "basic_input": [{"name": "f", "type": "double", "value": "1065.3917804433"}, {"name": "t", "type": "double", "value": "1065.3917804433"}], "output": [{"name": "f", "type": "double", "value": "1065.3917804433"}], "cyclomatic_complexity": 1, "code_length": 4, "category": "Easy"}
{"idx": 4, "code": "\tprivate double modceil(double f, double t) {\\n\\tt = Math.abs(t);\\n\\t\\treturn (Math.ceil(f/t)*t);\\n\\t}\\n", "basic_input": [{"name": "f", "type": "double", "value": "0.0"}, {"name": "t", "type": "double", "value": "100.0"}], "output": [{"name": "f", "type": "double", "value": "0.0"}], "cyclomatic_complexity": 1, "code_length": 4, "category": "Easy"}
{"idx": 5, "code": "    public static int Normalize(int id) {\\n        if((id < 0) || (id >= translations.length) || (translations[id] == null)) {\\n            return defaultId;\\n        } else {\\n            return id;\\n        }\\n    }\\n", "basic_input": [{"name": "id", "type": "int", "value": "-882"}], "output": [{"name": "defaultId", "type": "int", "value": "0"}], "cyclomatic_complexity": 2, "code_length": 7, "category": "Medium"}
{"idx": 7, "code": "    public static String GetTableName(String insertQuery) {\n        StringTokenizer st = new StringTokenizer(insertQuery, \"( \");\n        String dummy = st.nextToken();\n        dummy = st.nextToken();\n        return st.nextToken();\n    }\n", "basic_input": [{"name": "insertQuery", "type": "java.lang.String", "value": "Start \\tCreation Time \\tIndex \\tCreate Time String\\tQuery"}], "output": [{"name": "dummy", "type": "java.lang.String", "value": "\"\\tCreation\""}], "cyclomatic_complexity": 1, "code_length": 6, "category": "Easy"}
{"idx": 8, "code": "    public static String IntMaxString(int value) {\\n    \\treturn (value == Integer.MAX_VALUE) ? \\\"\\\" : \\\"\\\" + value;\\n    }\\n", "basic_input": [{"name": "value", "type": "int", "value": "2147483647"}], "output": [{"name": "value", "type": "int", "value": "2147483647"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 9, "code": "    public static String NormalizeString(String str) {\\n    \\treturn str != null ? str : \\\"\\\";\\n    }\\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "str", "type": "java.lang.String", "value": "\"\""}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 10, "code": "    public static int StringCompare(String lhs, String rhs) {\\n    \\treturn NormalizeString(lhs).compareTo(NormalizeString(rhs));\\n    }\\n", "basic_input": [{"name": "lhs", "type": "java.lang.String", "value": "\"\""}, {"name": "rhs", "type": "java.lang.String", "value": "0.0"}], "output": [{"name": "unknown", "type": "integer", "value": "-1"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 11, "code": "\tpublic static boolean StringIsEmpty(String str) {\\n\\t\\treturn str == null || str.length() == 0;\\n\\t}\\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "unknown", "type": "boolean", "value": true}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 12, "code": "    public static int StringCompareIgnCase(String lhs, String rhs) {\\n    \\treturn NormalizeString(lhs).compareToIgnoreCase(NormalizeString(rhs));\\n    }\\n", "basic_input": [{"name": "lhs", "type": "java.lang.String", "value": "-2990"}, {"name": "rhs", "type": "java.lang.String", "value": "com.ib.client.Util"}], "output": [{"name": "unknown", "type": "integer", "value": -1}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 13, "code": "    public static String DoubleMaxString(double value) {\\n    \\treturn (value == Double.MAX_VALUE) ? \"\" : \"\" + value;\\n    }\\n", "basic_input": [{"name": "value", "type": "double", "value": "0.0"}], "output": [{"name": "value", "type": "double", "value": "0.0"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 14, "code": "\tprivate static boolean IsEmpty(String str) {\\n\\t\\treturn Util.StringIsEmpty(str);\\n\\t}\\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "1"}], "output": [{"name": "unknown", "type": "boolean", "value": false}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 15, "code": "    static public String accountDownloadEnd(String accountName) {\\n    \\treturn \"accountDownloadEnd: \" + accountName;\\n    }\\n", "basic_input": [{"name": "accountName", "type": "java.lang.String", "value": null}], "output": [{"name": "accountName", "type": "java.lang.String", "value": null}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 16, "code": "    public static String getField( int tickType) {\\n        switch( tickType) {\\n            case BID_SIZE:                    return \"bidSize\";\\n            case BID:                         return \"bidPrice\";\\n            case ASK:                         return \"askPrice\";\\n            case ASK_SIZE:                    return \"askSize\";\\n            case LAST:                        return \"lastPrice\";\\n            case LAST_SIZE:                   return \"lastSize\";\\n            case HIGH:                        return \"high\";\\n            case LOW:                         return \"low\";\\n            case VOLUME:                      return \"volume\";\\n            case CLOSE:                       return \"close\";\\n            case BID_OPTION:                  return \"bidOptComp\";\\n            case ASK_OPTION:                  return \"askOptComp\";\\n            case LAST_OPTION:                 return \"lastOptComp\";\\n            case MODEL_OPTION:                return \"modelOptComp\";\\n            case OPEN:                        return \"open\";\\n            case LOW_13_WEEK:                 return \"13WeekLow\";\\n            case HIGH_13_WEEK:                return \"13WeekHigh\";\\n            case LOW_26_WEEK:                 return \"26WeekLow\";\\n            case HIGH_26_WEEK:                return \"26WeekHigh\";\\n            case LOW_52_WEEK:                 return \"52WeekLow\";\\n            case HIGH_52_WEEK:                return \"52WeekHigh\";\\n            case AVG_VOLUME:                  return \"AvgVolume\";\\n            case OPEN_INTEREST:               return \"OpenInterest\";\\n            case OPTION_HISTORICAL_VOL:       return \"OptionHistoricalVolatility\";\\n            case OPTION_IMPLIED_VOL:          return \"OptionImpliedVolatility\";\\n            case OPTION_BID_EXCH:             return \"OptionBidExchStr\";\\n            case OPTION_ASK_EXCH:             return \"OptionAskExchStr\";\\n            case OPTION_CALL_OPEN_INTEREST:   return \"OptionCallOpenInterest\";\\n            case OPTION_PUT_OPEN_INTEREST:    return \"OptionPutOpenInterest\";\\n            case OPTION_CALL_VOLUME:          return \"OptionCallVolume\";\\n            case OPTION_PUT_VOLUME:           return \"OptionPutVolume\";\\n            case INDEX_FUTURE_PREMIUM:        return \"IndexFuturePremium\";\\n            case BID_EXCH:                    return \"bidExch\";\\n            case ASK_EXCH:                    return \"askExch\";\\n            case AUCTION_VOLUME:              return \"auctionVolume\";\\n            case AUCTION_PRICE:               return \"auctionPrice\";\\n            case AUCTION_IMBALANCE:           return \"auctionImbalance\";\\n            case MARK_PRICE:                  return \"markPrice\";\\n            case BID_EFP_COMPUTATION:         return \"bidEFP\";\\n            case ASK_EFP_COMPUTATION:         return \"askEFP\";\\n            case LAST_EFP_COMPUTATION:        return \"lastEFP\";\\n            case OPEN_EFP_COMPUTATION:        return \"openEFP\";\\n            case HIGH_EFP_COMPUTATION:        return \"highEFP\";\\n            case LOW_EFP_COMPUTATION:         return \"lowEFP\";\\n            case CLOSE_EFP_COMPUTATION:       return \"closeEFP\";\\n            case LAST_TIMESTAMP:              return \"lastTimestamp\";\\n            case SHORTABLE:                   return \"shortable\";\\n            case FUNDAMENTAL_RATIOS:          return \"fundamentals\";\\n            case RT_VOLUME:                   return \"RTVolume\";\\n            case HALTED:                      return \"halted\";\\n            default:                          return \"unknown\";\\n        }\\n    }\\n", "basic_input": [{"name": "tickType", "type": "int", "value": "1069"}], "output": [{"name": "unknown", "type": "string", "value": "unknown"}], "cyclomatic_complexity": 52, "code_length": 55, "category": "Hard"}
{"idx": 17, "code": "    static public String tickGeneric(int tickerId, int tickType, double value) {\\n    \\treturn \"id=\" + tickerId + \"  \" + TickType.getField( tickType) + \"=\" + value;\\n    }\\n", "basic_input": [{"name": "tickType", "type": "int", "value": "1069"}, {"name": "tickerId", "type": "int", "value": "597"}, {"name": "value", "type": "double", "value": "-1189.0"}], "output": [{"name": "unknown", "type": "int", "value": "id=597  int=-1189.0"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 18, "code": "    static public String contractDetailsEnd(int reqId) {\\n    \\treturn \"reqId = \" + reqId + \" =============== end ===============\";\\n    }\\n", "basic_input": [{"name": "reqId", "type": "int", "value": "13"}], "output": [{"name": "unknwon", "type": "string", "value": "reqId = 13 =============== end ==============="}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 19, "code": "    static public String fundamentalData(int reqId, String data) {\\n\\t\\treturn \"id  = \" + reqId + \" len = \" + data.length() + '\\n' + data;\\n    }\\n", "basic_input": [{"name": "data", "type": "java.lang.String", "value": "h%(4&9G\"Gv|cT"}, {"name": "reqId", "type": "int", "value": "0"}], "output": [{"name": "unknown", "type": "string", "value": "id  = 0 len = 12\\nh%(4&9G\"Gv|cT"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 20, "code": "\tstatic public String tickPrice( int tickerId, int field, double price, int canAutoExecute) {\\n    \\treturn \"id=\" + tickerId + \"  \" + TickType.getField( field) + \"=\" + price + \" \" + \\n        ((canAutoExecute != 0) ? \" canAutoExecute\" : \" noAutoExecute\");\\n    }\\n", "basic_input": [{"name": "canAutoExecute", "type": "int", "value": "-2099"}, {"name": "field", "type": "int", "value": "-2099"}, {"name": "price", "type": "double", "value": "-2099.0"}, {"name": "tickerId", "type": "int", "value": "-2099"}], "output": [{"name": "unknown", "type": "string", "value": "id=-2099  unknown=-2099.0 canAutoExecute"}], "cyclomatic_complexity": 1, "code_length": 4, "category": "Easy"}
{"idx": 21, "code": "    static public String nextValidId( int orderId) {\n    \treturn \"Next Valid Order ID: \" + orderId;\n    }\n", "basic_input": [{"name": "orderId", "type": "int", "value": "10"}], "output": [{"name": "unknown", "type": "string", "value": "New Valid Order ID: 10"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 22, "code": "static public String updateAccountValue(String key, String value, String currency, String accountName) {\n    return \"updateAccountValue: \" + key + \" \" + value + \" \" + currency + \" \" + accountName;\n}", "basic_input": [{"name": "accountName", "type": "java.lang.String", "value": ""}, {"name": "currency", "type": "java.lang.String", "value": "com.ib.client.AnyWrapperMsgGenerator"}, {"name": "key", "type": "java.lang.String", "value": null}, {"name": "value", "type": "java.lang.String", "value": ""}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "updateAccountValue: null  com.ib.client.AnyWrapperMsgGenerator "}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 23, "code": "static public String tickString(int tickerId, int tickType, String value) {\n    return \"id=\" + tickerId + \"  \" + TickType.getField( tickType) + \"=\" + value;\n}", "basic_input": [{"name": "tickType", "type": "int", "value": 1288}, {"name": "tickerId", "type": "int", "value": 0}, {"name": "value", "type": "java.lang.String", "value": ""}], "output": [{"name": "unknown", "type": "string", "value": "id=0  unknown="}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 24, "code": "static public String updateNewsBulletin( int msgId, int msgType, String message, String origExchange) {\n    return \"MsgId=\" + msgId + \" :: MsgType=\" + msgType +  \" :: Origin=\" + origExchange + \" :: Message=\" + message;\n}", "basic_input": [{"name": "message", "type": "java.lang.String", "value": "$mXBj;n\"#XC/"}, {"name": "msgId", "type": "int", "value": -1496}, {"name": "msgType", "type": "int", "value": 0}, {"name": "origExchange", "type": "java.lang.String", "value": null}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "MsgId=-1496 :: MsgType=0 :: Origin=null :: Message=\"\"$mXBj;n\"#XC/\""}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 26, "code": "    static public String bondContractDetails(int reqId, ContractDetails contractDetails) {\n        Contract contract = contractDetails.m_summary;\n        String msg = \"reqId = \" + reqId + \" ===================================\\n\"\t\n        + \" ---- Bond Contract Details begin ----\\n\"\n        + \"symbol = \" + contract.m_symbol + \"\\n\"\n        + \"secType = \" + contract.m_secType + \"\\n\"\n        + \"cusip = \" + contractDetails.m_cusip + \"\\n\"\n        + \"coupon = \" + contractDetails.m_coupon + \"\\n\"\n        + \"maturity = \" + contractDetails.m_maturity + \"\\n\"\n        + \"issueDate = \" + contractDetails.m_issueDate + \"\\n\"\n        + \"ratings = \" + contractDetails.m_ratings + \"\\n\"\n        + \"bondType = \" + contractDetails.m_bondType + \"\\n\"\n        + \"couponType = \" + contractDetails.m_couponType + \"\\n\"\n        + \"convertible = \" + contractDetails.m_convertible + \"\\n\"\n        + \"callable = \" + contractDetails.m_callable + \"\\n\"\n        + \"putable = \" + contractDetails.m_putable + \"\\n\"\n        + \"descAppend = \" + contractDetails.m_descAppend + \"\\n\"\n        + \"exchange = \" + contract.m_exchange + \"\\n\"\n        + \"currency = \" + contract.m_currency + \"\\n\"\n        + \"marketName = \" + contractDetails.m_marketName + \"\\n\"\n        + \"tradingClass = \" + contractDetails.m_tradingClass + \"\\n\"\n        + \"conid = \" + contract.m_conId + \"\\n\"\n        + \"minTick = \" + contractDetails.m_minTick + \"\\n\"\n        + \"orderTypes = \" + contractDetails.m_orderTypes + \"\\n\"\n        + \"validExchanges = \" + contractDetails.m_validExchanges + \"\\n\"\n        + \"nextOptionDate = \" + contractDetails.m_nextOptionDate + \"\\n\"\n        + \"nextOptionType = \" + contractDetails.m_nextOptionType + \"\\n\"\n        + \"nextOptionPartial = \" + contractDetails.m_nextOptionPartial + \"\\n\"\n        + \"notes = \" + contractDetails.m_notes + \"\\n\"\n        + \"longName = \" + contractDetails.m_longName + \"\\n\"\n        + \" ---- Bond Contract Details End ----\\n\";\n        return msg;\n    }", "basic_input": [{"name": "contractDetails", "type": "com.ib.client.ContractDetails", "value": "\"com.ib.client.ContractDetails@2\""}, {"name": "reqId", "type": "int", "value": "0"}], "output": [{"name": "msg", "type": "java.lang.String", "value": "\"reqId = 0 ===================================\n ---- Bond Contract Details begin ----\nsymbol = null\nsecType = null\ncusip = null\ncoupon = 0.0\nmaturity = null\nissueDate = null\nratings = null\nbondType = null\ncouponType = null\nconvertible = false\ncallable = false\nputable = false\ndescAppend = null\nexchange = null\ncurrency = null\nmarketName = null\ntradingClass = null\nconid = 0\nminTick = 0.0\norderTypes = Error - \nvalidExchanges =  open=\nnextOptionDate = null\nnextOptionType = null\nnextOptionPartial = false\nnotes = null\nlongName = vCSC$xa;[\n ---- Bond Contract Details End ----\n\""}], "cyclomatic_complexity": 1, "code_length": 33, "category": "Easy"}
{"idx": 27, "code": "    static public String scannerParameters(String xml) {\n    \treturn SCANNER_PARAMETERS + \"\\n\" + xml;\n    }", "basic_input": [{"name": "xml", "type": "java.lang.String", "value": "%}&l`I"}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "\"SCANNER PARAMETERS:\"\\n\"\"\"%}&l`I\""}, {"name": "FINANCIAL_ADVISOR", "type": "java.lang.String", "value": "\"FA:\""}, {"name": "SCANNER_PARAMETERS", "type": "java.lang.String", "value": "\"SCANNER PARAMETERS:\""}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 28, "code": "    static public String execDetailsEnd(int reqId) {\n    \treturn \"reqId = \" + reqId + \" =============== end ===============\";\n    }", "basic_input": [{"name": "reqId", "type": "int", "value": "0"}], "output": [{"name": "unknown", "type": "string", "value": "reqId = 0 =============== end ==============="}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 29, "code": "    static public String execDetails( int reqId, Contract contract, Execution execution) {\n        String msg = \" ---- Execution Details begin ----\\n\"\n        + \"reqId = \" + reqId + \"\\n\"\n        + \"orderId = \" + execution.m_orderId + \"\\n\"\n        + \"clientId = \" + execution.m_clientId + \"\\n\"\n        + \"symbol = \" + contract.m_symbol + \"\\n\"\n        + \"secType = \" + contract.m_secType + \"\\n\"\n        + \"expiry = \" + contract.m_expiry + \"\\n\"\n        + \"strike = \" + contract.m_strike + \"\\n\"\n        + \"right = \" + contract.m_right + \"\\n\"\n        + \"contractExchange = \" + contract.m_exchange + \"\\n\"\n        + \"currency = \" + contract.m_currency + \"\\n\"\n        + \"localSymbol = \" + contract.m_localSymbol + \"\\n\"\n        + \"execId = \" + execution.m_execId + \"\\n\"\n        + \"time = \" + execution.m_time + \"\\n\"\n        + \"acctNumber = \" + execution.m_acctNumber + \"\\n\"\n        + \"executionExchange = \" + execution.m_exchange + \"\\n\"\n        + \"side = \" + execution.m_side + \"\\n\"\n        + \"shares = \" + execution.m_shares + \"\\n\"\n        + \"price = \" + execution.m_price + \"\\n\"\n        + \"permId = \" + execution.m_permId + \"\\n\"\n        + \"liquidation = \" + execution.m_liquidation + \"\\n\"\n        + \"cumQty = \" + execution.m_cumQty + \"\\n\"\n        + \"avgPrice = \" + execution.m_avgPrice + \"\\n\"\n        + \" ---- Execution Details end ----\\n\";\n        return msg;\n    }", "basic_input": [{"name": "contract", "type": "com.ib.client.Contract", "value": "\"com.ib.client.Contract@1\""}, {"name": "execution", "type": "com.ib.client.Execution", "value": "\"com.ib.client.Execution@3\""}, {"name": "reqId", "type": "int", "value": "-2942"}], "output": [{"name": "msg", "type": "java.lang.String", "value": "\" ---- Execution Details begin ----\nreqId = -2942\norderId = 0\nclientId = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\ncontractExchange = null\ncurrency = null\nlocalSymbol = null\nexecId = Q~]l-2C+TZJT0@\u007f\u007f\ntime = FA: null id=2145310180  unknown=2.14531018E9  canAutoExecute\nacctNumber = #54I>t\nexecutionExchange =  ?r.k'ywgbV>e-~\nside = null\nshares = -1073741824\nprice = 0.0\npermId = -877\nliquidation = 13\ncumQty = 3\navgPrice = 3614.83\n ---- Execution Details end ----\n\""}], "cyclomatic_complexity": 1, "code_length": 27, "category": "Easy"}
{"idx": 30, "code": "    static public String currentTime(long time) {\n\t\treturn \"current time = \" + time +\n\t\t\" (\" + DateFormat.getDateTimeInstance().format(new Date(time * 1000)) + \")\";\n    }", "basic_input": [{"name": "time", "type": "long", "value": "1"}], "output": [{"name": "unknown", "type": "string", "value": "current time = 1 (Jan 1, 1970, 12:00:01 AM)"}], "cyclomatic_complexity": 1, "code_length": 4, "category": "Easy"}
{"idx": 31, "code": "    static public String contractDetails(int reqId, ContractDetails contractDetails) {\n    \tContract contract = contractDetails.m_summary;\n    \tString msg = \"reqId = \" + reqId + \" ===================================\\n\"\n    \t\t+ \" ---- Contract Details begin ----\\n\"\n    \t\t+ contractMsg(contract) + contractDetailsMsg(contractDetails)\n    \t\t+ \" ---- Contract Details End ----\\n\";\n    \treturn msg;\n    }", "basic_input": [{"name": "contractDetails", "type": "com.ib.client.ContractDetails", "value": "\"com.ib.client.ContractDetails@2\""}, {"name": "reqId", "type": "int", "value": "2039"}], "output": [{"name": "msg", "type": "java.lang.String", "value": "\"reqId = 2039 ===================================\\n ---- Contract Details begin ----\\nconid = 0\\nsymbol = null\\nsecType = null\\nexpiry = null\\nstrike = 0.0\\nright = null\\nmultiplier = null\\nexchange = null\\nprimaryExch = null\\ncurrency = null\\nlocalSymbol = null\\nmarketName = null\\ntradingClass = null\\nminTick = 0.0\\nprice magnifier = 0\\norderTypes = null\\nvalidExchanges = null\\nunderConId = 0\\nlongName = null\\ncontractMonth = null\\nindustry = null\\ncategory = null\\nsubcategory = null\\ntimeZoneId = null\\ntradingHours = null\\nliquidHours = null\\n ---- Contract Details End ----\\n\""}], "cyclomatic_complexity": 1, "code_length": 8, "category": "Easy"}
{"idx": 32, "code": "\tpublic static String faMsgTypeName(int faDataType) {\n\t\tswitch (faDataType) {\n\t\tcase GROUPS:\n\t\t\treturn \"GROUPS\";\n\t\tcase PROFILES:\n\t\t\treturn \"PROFILES\";\n\t\tcase ALIASES:\n\t\t\treturn \"ALIASES\";\n\t\t}\n\t\treturn null;\n\t}", "basic_input": [{"name": "faDataType", "type": "int", "value": "-1496"}], "output": [{"name": "unknown", "type": "string", "value": "null"}], "cyclomatic_complexity": 5, "code_length": 11, "category": "Hard"}
{"idx": 33, "code": "    static public String receiveFA(int faDataType, String xml) {\n    \treturn FINANCIAL_ADVISOR + \" \" + EClientSocket.faMsgTypeName(faDataType) + \" \" + xml;\n    }", "basic_input": [{"name": "faDataType", "type": "int", "value": "-1496"}, {"name": "xml", "type": "java.lang.String", "value": null}], "output": [{"name": "unknown", "type": "string", "value": "FA: null null"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 34, "code": "    static public String updateAccountTime(String timeStamp) {\n    \treturn \"updateAccountTime: \" + timeStamp;\n    }", "basic_input": [{"name": "timeStamp", "type": "java.lang.String", "value": " algoStrategy="}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "updateAccountTime: \" algoStrategy=\""}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 35, "code": "    static public String deltaNeutralValidation(int reqId, UnderComp underComp) {\n    \treturn \"id = \" + reqId\n    \t+ \" underComp.conId =\" + underComp.m_conId\n    \t+ \" underComp.delta =\" + underComp.m_delta\n    \t+ \" underComp.price =\" + underComp.m_price;\n    }", "basic_input": [{"name": "reqId", "type": "int", "value": "0"}, {"name": "underComp", "type": "com.ib.client.UnderComp", "value": "\"com.ib.client.UnderComp@1\""}], "output": [{"name": "unknown", "type": "string", "value": "id = 0 underComp.conId=null underComp.delta=null underComp.price=null"}], "cyclomatic_complexity": 1, "code_length": 6, "category": "Easy"}
{"idx": 36, "code": "    static public String managedAccounts( String accountsList) {\n    \treturn \"Connected : The list of managed accounts are : [\" + accountsList + \"]\";\n    }\n", "basic_input": [{"name": "accountsList", "type": "java.lang.String", "value": "bW`;?_&A1*p1Nu"}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "Connected : The list of managed accounts are : [bW`;?_&A1*p1Nu]"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 37, "code": "    static public String tickSize( int tickerId, int field, int size) {\n    \treturn \"id=\" + tickerId + \"  \" + TickType.getField( field) + \"=\" + size;\n    }\n", "basic_input": [{"name": "field", "type": "int", "value": "0"}, {"name": "size", "type": "int", "value": "1637"}, {"name": "tickerId", "type": "int", "value": "3068"}], "output": [{"name": "unknown", "type": "string", "value": "id=3068  FIELD=1637"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 38, "code": "    static public String scannerDataEnd(int reqId) {\n    \treturn \"id = \" + reqId + \" =============== end ===============\";\n    }\n", "basic_input": [{"name": "reqId", "type": "int", "value": "2865"}], "output": [{"name": "unknown", "type": "string", "value": "id = 2865 =============== end ==============="}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 39, "code": "    static public String tickSnapshotEnd(int tickerId) {\n    \treturn \"id=\" + tickerId + \" =============== end ===============\";\n    }\n", "basic_input": [{"name": "tickerId", "type": "int", "value": "2072"}], "output": [{"name": "unknown", "type": "string", "value": "id=2072 =============== end ==============="}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 40, "code": "  private static double distanceInMiles(double lat1, double lat2, double lon1, double lon2){\n    double theta = lon1 - lon2;\n    double dist = Math.sin(Math.toRadians(lat1)) * Math.sin(Math.toRadians(lat2))\n    + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.cos(Math.toRadians(theta));\n    dist = Math.acos(dist);\n    dist = Math.toDegrees(dist);\n    return dist * MAGIC_NUMBER;\n  }\n", "basic_input": [{"name": "lat1", "type": "double", "value": "-1.0"}, {"name": "lat2", "type": "double", "value": "-1.0"}, {"name": "lon1", "type": "double", "value": "-3763.25168"}, {"name": "lon2", "type": "double", "value": "-3763.25168"}], "output": [{"name": "unknown", "type": "double", "value": "0.0"}], "cyclomatic_complexity": 1, "code_length": 8, "category": "Easy"}
{"idx": 41, "code": "  private static double distanceHaversineForumla(double lat1, double lat2, double lon1, double lon2){\n    double dLat = Math.toRadians(lat2 - lat1);\n    double dLon = Math.toRadians(lon2 - lon1);\n    double a = Math.pow(Math.sin(dLat/2d), 2) +\n               Math.cos(lat1) * Math.cos(lat2) * \n               Math.pow(Math.sin(dLon/2d), 2);\n    double c = 2d * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return EARTH_RADIUS * c;\n  }\n", "basic_input": [{"name": "lat1", "type": "double", "value": "-1.0"}, {"name": "lat2", "type": "double", "value": "-1.0"}, {"name": "lon1", "type": "double", "value": "-3763.25168"}, {"name": "lon2", "type": "double", "value": "-3763.25168"}], "output": [{"name": "EARTH_RADIUS", "type": "double", "value": "6371.0"}], "cyclomatic_complexity": 1, "code_length": 9, "category": "Easy"}
{"idx": 42, "code": "\tstatic public boolean isBlank(String value) {\n\t\treturn (value.equals(\"\"));\n\t}\n", "basic_input": [{"name": "value", "type": "java.lang.String", "value": "= VD2`1|`0"}], "output": [{"name": "unknown", "type": "boolean", "value": "false"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 43, "code": "    private static double bygreesToRadians(int value) {\n        return value * Math.PI / 128;\n    }\n", "basic_input": [{"name": "value", "type": "int", "value": "0"}], "output": [{"name": "unknown", "type": "double", "value": "0.0"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 44, "code": "    private static double radiansToDegrees(double radians) {\n        return radians * 180 / Math.PI;\n    }\n", "basic_input": [{"name": "radians", "type": "double", "value": "0.0"}], "output": [{"name": "unknown", "type": "double", "value": "0.0"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 45, "code": "    private static double bygreeToRadians(int bygrees) {\n        return (bygrees - 64) * RADIANS_PER_BYGREE;\n    }\n", "basic_input": [{"name": "bygrees", "type": "int", "value": "0"}], "output": [{"name": "unknown", "type": "double", "value": "-1.57"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 46, "code": "    private static int radiansToBygrees(double radians) {\n        return (int) Math.round(64 + (radians * BYGREES_PER_RADIANS)) & BYGREE_MASK;\n    }\n", "basic_input": [{"name": "radians", "type": "double", "value": "4.71238898038469"}], "output": [{"name": "unknown", "type": "int", "value": "0"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 47, "code": "  protected String add_escapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "retval", "type": "java.lang.StringBuffer", "value": "\"\""}], "cyclomatic_complexity": 13, "code_length": 44, "category": "Hard"}
{"idx": 48, "code": "   protected static final String addEscapes(String str) {\n      StringBuffer retval = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case 0 :\n              continue;\n           case '\\b':\n              retval.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              retval.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              retval.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              retval.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              retval.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              retval.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              retval.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              retval.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 retval.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 retval.append(ch);\n              }\n              continue;\n        }\n      }\n      return retval.toString();\n   }\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "Li~QH[-K61]>5*jLf"}], "output": [{"name": "retval", "type": "java.lang.StringBuffer", "value": "\"Li~QH[-K61]>5*jLf\""}], "cyclomatic_complexity": 13, "code_length": 44, "category": "Hard"}
{"idx": 49, "code": "   protected static String LexicalError(boolean EOFSeen, int lexState, int errorLine, int errorColumn, String errorAfter, char curChar) {\n      return(\"Lexical error at line \" +\n           errorLine + \", column \" +\n           errorColumn + \".  Encountered: \" +\n           (EOFSeen ? \"<EOF> \" : (\"\\\"\" + addEscapes(String.valueOf(curChar)) + \"\\\"\") + \" (\" + (int)curChar + \"), \") +\n           \"after : \\\"\" + addEscapes(errorAfter) + \"\\\"\");\n   }\n", "basic_input": [{"name": "EOFSeen", "type": "boolean", "value": "true"}, {"name": "curChar", "type": "char", "value": "y"}, {"name": "errorAfter", "type": "java.lang.String", "value": "Li~QH[-K61]>5*jLf"}, {"name": "errorColumn", "type": "int", "value": "-3205"}, {"name": "errorLine", "type": "int", "value": "803"}, {"name": "lexState", "type": "int", "value": "803"}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "Lexical error at line 803, column -3205.  Encountered: <EOF> after : \"Li~QH[-K61]>5*jLf\""}], "cyclomatic_complexity": 1, "code_length": 7, "category": "Easy"}
{"idx": 50, "code": "    public static String analyze(String filename) {\n\n        /**\n         * implement placeholder implementations of Parser and Analyzer\n         *       Reader rdr = new FileReader (new File (filename));\n         *       ASTNode rootNode = new JMCAParser().parse(rdr);\n         *       output = new JMCAAnalyzer().analyze(rootNode);\n         */\n        if (filename != null && !filename.equals(\"\")) {\n            Reader rdr = null;\n            try {\n                rdr = new FileReader(new File(filename));\n            } catch (IOException ie) {\n                System.err.println(ie.getMessage());\n            }\n            /**\n             * call parser\n             */\n            // ASTNode rootNode = new DummyParser().parse(rdr);\n            ASTNode rootNode = new JMCAParser().parse(rdr);\n            if (DEVELOPMENT && rootNode != null)  showTree(rootNode, filename);\n            /**\n             * call analyzer\n             */\n            //  Analyzer analyzer = new UILayoutDisplayAnalyzer();\n            Analyzer analyzer = new JMCAAnalyzer();\n            analyzer.setFileName(filename);\n            return analyzer.analyze(rootNode);\n        }\n\n        return new String(\"ERROR: Filename not entered.\");\n\n    } //end analyze()\n", "basic_input": [{"name": "filename", "type": "java.lang.String", "value": null}], "output": [{"name": "unknown", "type": "java.lang.String", "value": "ERROR: Filename not entered."}], "cyclomatic_complexity": 4, "code_length": 33, "category": "Hard"}
{"idx": 51, "code": "    final private boolean jj_scan_token(int kind) {\n        if (jj_scanpos == jj_lastpos) {\n            jj_la--;\n            if (jj_scanpos.next == null) {\n                jj_lastpos = jj_scanpos = jj_scanpos.next =\n                        token_source.getNextToken();\n            } else {\n                jj_lastpos = jj_scanpos = jj_scanpos.next;\n            }\n        } else {\n            jj_scanpos = jj_scanpos.next;\n        }\n        if (jj_scanpos.kind != kind) {\n            return true;\n        }\n        if (jj_la == 0 && jj_scanpos == jj_lastpos) {\n            throw jj_ls;\n        }\n        return false;\n    }\n", "basic_input": [{"name": "kind", "type": "int", "value": "77"}], "output": [{"name": "unknown", "type": "boolean", "value": "true"}], "cyclomatic_complexity": 5, "code_length": 20, "category": "Hard"}
{"idx": 52, "code": "    final private boolean jj_2_20(int xla) {\n        jj_la = xla;\n        jj_lastpos = jj_scanpos = token;\n        try {\n            return!jj_3_20();\n        } catch (LookaheadSuccess ls) {\n            return true;\n        }\n    }\n", "basic_input": [{"name": "xla", "type": "int", "value": "2147483647"}], "output": [{"name": "unknown", "type": "boolean", "value": "true"}], "cyclomatic_complexity": 2, "code_length": 9, "category": "Medium"}
{"idx": 53, "code": "    public String encodeString(String searchTerm) {\n        try {\n            searchTerm = URLEncoder.encode(searchTerm, \"UTF-8\");\n        } catch (UnsupportedEncodingException ue) {\n            //    log.debug(\"Encoding Scheme isn't available\");\n            searchTerm = URLEncoder.encode(searchTerm);\n        }\n        return searchTerm;\n    }\n", "basic_input": [{"name": "searchTerm", "type": "java.lang.String", "value": "~xpm7Q@F$rlXU]rq+N"}], "output": [{"name": "searchTerm", "type": "java.lang.String", "value": "\"%7Expm7Q%40F%24rlXU%5Drq%2BN\""}], "cyclomatic_complexity": 2, "code_length": 9, "category": "Medium"}
{"idx": 54, "code": "    public String AddtoCart(String ASIN, String quantity) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=add&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&Asin.\");\n        buffer.append(ASIN);\n        buffer.append(\"=\");\n        buffer.append(quantity);\n        return new String(buffer);\n    }\n", "basic_input": [{"name": "ASIN", "type": "java.lang.String", "value": "TzYjM~@_ 'H{U$U$f"}, {"name": "quantity", "type": "java.lang.String", "value": null}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=add&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Asin.TzYjM~@_ 'H{U$U$f=null\""}], "cyclomatic_complexity": 1, "code_length": 14, "category": "Easy"}
{"idx": 55, "code": "    public String SearchQueryGenerator(String searchType, String searchTerm, String mode, String type, String page, String offer) {\n//      log.debug(\"SearchQueryGenerator - in\");\n        StringBuffer buffer = new StringBuffer();\n\n        searchTerm = jawsUtil.encodeString(searchTerm);\n\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&\");\n        buffer.append(\"dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&\");\n        buffer.append(searchType);\n        buffer.append(\"=\");\n        buffer.append(searchTerm);\n        buffer.append(\"&\");\n        buffer.append(\"mode=\");\n        buffer.append(mode);\n        buffer.append(\"&\");\n        buffer.append(\"type=\");\n        buffer.append(type);\n        buffer.append(\"&\");\n        buffer.append(\"page=\");\n        buffer.append(page);\n        buffer.append(\"&\");\n        buffer.append(\"offer=\");\n        buffer.append(offer);\n        buffer.append(\"&\");\n        buffer.append(\"f=xml\");\n//     log.debug(\"SearchQueryGenerator - out\");\n        return new String(buffer);\n    }\n", "basic_input": [{"name": "mode", "type": "java.lang.String", "value": "null"}, {"name": "offer", "type": "java.lang.String", "value": "all"}, {"name": "page", "type": "java.lang.String", "value": "X7N3u}=,~{xO\""}, {"name": "searchTerm", "type": "java.lang.String", "value": "\"\""}, {"name": "searchType", "type": "java.lang.String", "value": "\"UpcSearch\""}, {"name": "type", "type": "java.lang.String", "value": "\"lite\""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?t=popcornmonste2-20&dev-t=DSB0XDDW1GQ3S&UpcSearch=&mode=null&type=lite&page=X7N3u}=,~{xO&offer=all&f=xml\""}], "cyclomatic_complexity": 1, "code_length": 34, "category": "Easy"}
{"idx": 56, "code": "    public String ModifyCart(String itemId, String quantity, String cartId, String hmac) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=modify&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&Item.\");\n        buffer.append(itemId);\n        buffer.append(\"=\");\n        buffer.append(quantity);\n        buffer.append(\"&CartId=\");\n        buffer.append(cartId);\n        buffer.append(\"&Hmac=\");\n        buffer.append(jawsUtil.encodeString(hmac));\n        return new String(buffer);\n        /*\n          http://xml.amazon.com/onca/xml3?ShoppingCart=modify\n          &f=xml& dev-t=[ [developer's token goes here]\n          &t=[associates ID goes here]\n          &Item.[itemID goes here]=[quantity goes here]\n          &CartId=[cart ID goes here]\n          &Hmac=[HMAC goes here]\n        */\n    }\n", "basic_input": [{"name": "cartId", "type": "java.lang.String", "value": "\"*Q.9c_rgmK*\""}, {"name": "hmac", "type": "java.lang.String", "value": "\"M;\""}, {"name": "itemId", "type": "java.lang.String", "value": "\"Theatre Release Date - \""}, {"name": "quantity", "type": "java.lang.String", "value": "\"Theatre Release Date - \""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=modify&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Item.Theatre Release Date - =Theatre Release Date - &CartId=*Q.9c_rgmK*&Hmac=M%3B\""}], "cyclomatic_complexity": 1, "code_length": 26, "category": "Easy"}
{"idx": 57, "code": "    public String GetItemsFromCart(String cartId, String hmac) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=get&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&CartId=\");\n        buffer.append(cartId);\n        buffer.append(\"&Hmac=\");\n        buffer.append(jawsUtil.encodeString(hmac));\n        return new String(buffer);\n        /*\n          http://xml.amazon.com/onca/xml3?ShoppingCart=get\n          &f=xml& dev-t=[ [developer's token goes here]\n          &t=[associates ID goes here]\n          &CartId=[cart ID goes here]\n          &Hmac=[HMAC goes here]\n        */\n    }\n", "basic_input": [{"name": "cartId", "type": "java.lang.String", "value": "\"W`E2s\""}, {"name": "hmac", "type": "java.lang.String", "value": "\"W`E2s\""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=get&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&CartId=W`E2s&Hmac=W%60E2s\""}], "cyclomatic_complexity": 1, "code_length": 21, "category": "Easy"}
{"idx": 58, "code": "    public String AddToExistingCart(String ASIN, String quantity, String cartId, String hmac) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=add&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&Asin.\");\n        buffer.append(ASIN);\n        buffer.append(\"=\");\n        buffer.append(quantity);\n        buffer.append(\"&CartId=\");\n        buffer.append(cartId);\n        buffer.append(\"&Hmac=\");\n        buffer.append(jawsUtil.encodeString(hmac));\n        return new String(buffer);\n        /*\n          http://xml.amazon.com/onca/xml3?ShoppingCart=add&f=xml&\n          dev-t=[ [developer's token goes here]\n          &t=[associates ID goes here]\n          &Asin.[ASIN goes here]=[quantity goes here]\n          &CartId=[cart ID goes here] &Hmac=[HMAC goes here]\n        */\n    }\n", "basic_input": [{"name": "ASIN", "type": "java.lang.String", "value": "\"Mode = \""}, {"name": "cartId", "type": "java.lang.String", "value": null}, {"name": "hmac", "type": "java.lang.String", "value": "\"Theatre Release Date - \""}, {"name": "quantity", "type": "java.lang.String", "value": "\"MPAA Rating - \""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=add&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Asin.Mode = =MPAA Rating - &CartId=null&Hmac=Theatre+Release+Date+-+\""}], "cyclomatic_complexity": 1, "code_length": 25, "category": "Easy"}
{"idx": 59, "code": "    public String RemoveFromCart(String itemId, String cartId, String hmac) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=remove&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&Item.\");\n        buffer.append(itemId);\n        buffer.append(\"&CartId=\");\n        buffer.append(cartId);\n        buffer.append(\"&Hmac=\");\n        buffer.append(jawsUtil.encodeString(hmac));\n        return new String(buffer);\n        /*\n          http://xml.amazon.com/onca/xml3?ShoppingCart=remove\n          &CartId=CART\n          &Hmac=HMAC=\n          &Item.17120277375791359165\n          &Item.1813019710362345961\n          &dev-t=TOKEN&t=test&f=xml&type=lite\n        */\n    }\n", "basic_input": [{"name": "cartId", "type": "java.lang.String", "value": "\"\""}, {"name": "hmac", "type": "java.lang.String", "value": "\"\""}, {"name": "itemId", "type": "java.lang.String", "value": "\"{P5 q|Gz;'.0\""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=remove&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&Item.{P5 q|Gz;'.0&CartId=&Hmac=\""}], "cyclomatic_complexity": 1, "code_length": 24, "category": "Easy"}
{"idx": 60, "code": "    public String ClearCart(String cartId, String hmac) {\n        StringBuffer buffer = new StringBuffer();\n        buffer.append(serverURL);\n        buffer.append(\"?\");\n        buffer.append(\"ShoppingCart=clear&f=xml&dev-t=\");\n        buffer.append(token);\n        buffer.append(\"&t=\");\n        buffer.append(associatesID);\n        buffer.append(\"&CartId=\");\n        buffer.append(cartId);\n        buffer.append(\"&Hmac=\");\n        buffer.append(jawsUtil.encodeString(hmac));\n        return new String(buffer);\n        /*\n          http://xml.amazon.com/onca/xml3?ShoppingCart=clear\n          &f=xml& dev-t=[ [developer's token goes here]\n          &t=[associates ID goes here]\n          &CartId=[cart ID goes here]\n          &Hmac=[HMAC goes here]\n        */\n    }\n", "basic_input": [{"name": "cartId", "type": "java.lang.String", "value": "\"Mode = \""}, {"name": "hmac", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "buffer", "type": "java.lang.StringBuffer", "value": "\"http://xml.amazon.net/onca/xml3?ShoppingCart=clear&f=xml&dev-t=DSB0XDDW1GQ3S&t=popcornmonste2-20&CartId=Mode = &Hmac=\""}], "cyclomatic_complexity": 1, "code_length": 21, "category": "Easy"}
{"idx": 61, "code": "    public String stripString(String allowedChars, String string) {\n        StringBuffer returnString = new StringBuffer();\n        String validString = allowedChars;\n        char checkChar;\n        for (int x = 0; x < string.length(); x++) {\n            checkChar = string.charAt(x);\n            if (validString.indexOf(checkChar) != -1) {\n                returnString.append(checkChar);\n            }\n        }\n        return returnString.toString();\n    }\n", "basic_input": [{"name": "allowedChars", "type": "java.lang.String", "value": "\".0123456789\""}, {"name": "string", "type": "java.lang.String", "value": "\"XeF;(0\""}], "output": [{"name": "returnString", "type": "java.lang.StringBuffer", "value": "\"0\""}], "cyclomatic_complexity": 3, "code_length": 12, "category": "Medium"}
{"idx": 62, "code": "    public BigDecimal getPrice(String price) {\n        String strippedString = null;\n        String allowedString = \".0123456789\";\n        strippedString = stripString(allowedString, price);\n\n        try {\n            BigDecimal intPrice = new BigDecimal(Double.parseDouble(strippedString));\n            intPrice = intPrice.setScale(2, BigDecimal.ROUND_HALF_UP);\n            return intPrice;\n        } catch (Exception e) {\n            // log.error(\"error = \" + e.toString());\n            return new BigDecimal(0.00);\n        }\n\n    }\n", "basic_input": [{"name": "price", "type": "java.lang.String", "value": "\"XeF;(0\""}], "output": [{"name": "unknown", "type": "BigDecimal", "value": "BigDecimal(\"0.00\")"}], "cyclomatic_complexity": 2, "code_length": 15, "category": "Medium"}
{"idx": 63, "code": "    protected String extractDataUrls(String css, ArrayList preservedTokens) {\n\n    \tint maxIndex = css.length() - 1;\n        int appendIndex = 0;\n\n    \tStringBuffer sb = new StringBuffer();\n\n        Pattern p = Pattern.compile(\"url\\\\(\\\\s*([\\\"']?)data\\\\:\");\n        Matcher m = p.matcher(css);\n        \n        /* \n         * Since we need to account for non-base64 data urls, we need to handle \n         * ' and ) being part of the data string. Hence switching to indexOf,\n         * to determine whether or not we have matching string terminators and\n         * handling sb appends directly, instead of using matcher.append* methods.\n         */\n\n        while (m.find()) {\n\n        \tint startIndex = m.start() + 4;  \t// \"url(\".length()\n    \t\tString terminator = m.group(1);     // ', \" or empty (not quoted)\n    \t\t\n    \t\tif (terminator.length() == 0) {\n    \t\t \tterminator = \")\";\n    \t\t}\n\n    \t\tboolean foundTerminator = false;\n\n    \t\tint endIndex = m.end() - 1;\n    \t\twhile(foundTerminator == false && endIndex+1 <= maxIndex) {\n    \t\t\tendIndex = css.indexOf(terminator, endIndex+1);\n\n    \t\t\tif ((endIndex > 0) && (css.charAt(endIndex-1) != '\\\\')) {\n    \t\t\t\tfoundTerminator = true;\n    \t\t\t\tif (!\")\".equals(terminator)) {\n    \t\t\t\t\tendIndex = css.indexOf(\")\", endIndex); \n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n\n    \t\t// Enough searching, start moving stuff over to the buffer\n\t\t\tsb.append(css.substring(appendIndex, m.start()));\n\n    \t\tif (foundTerminator) {\n    \t\t\tString token = css.substring(startIndex, endIndex);\n    \t\t\ttoken = token.replaceAll(\"\\\\s+\", \"\");\n\t    \t\tpreservedTokens.add(token);\n\n\t    \t\tString preserver = \"url(___YUICSSMIN_PRESERVED_TOKEN_\" + (preservedTokens.size() - 1) + \"___)\";\n\t    \t\tsb.append(preserver);\n\n\t    \t\tappendIndex = endIndex + 1;\n    \t\t} else {\n    \t\t\t// No end terminator found, re-add the whole match. Should we throw/warn here?\n    \t\t\tsb.append(css.substring(m.start(), m.end()));\n    \t\t\tappendIndex = m.end();\n    \t\t}\n        }\n\n        sb.append(css.substring(appendIndex));\n\n        return sb.toString();\n    }\n", "basic_input": [{"name": "css", "type": "java.lang.String", "value": "\"PoeW\""}, {"name": "preservedTokens", "type": "java.util.ArrayList", "value": "\"[]\""}], "output": [{"name": "sb", "type": "java.lang.StringBuffer", "value": "\"PoeW\""}], "cyclomatic_complexity": 8, "code_length": 63, "category": "Hard"}
{"idx": 64, "code": " public static int OperantNum (String op){\n      \n      if (op.equalsIgnoreCase(\"not\") || op.equalsIgnoreCase(\"floor\") || op.equalsIgnoreCase(\"ceil\"))\n        return 1;\n      else\n        return 2;\n }\n", "basic_input": [{"name": "op", "type": "java.lang.String", "value": "\"floor\""}, {"name": "fail", "type": "boolean", "value": "false"}], "output": [{"name": "unknown", "type": "int", "value": "1"}], "cyclomatic_complexity": 2, "code_length": 7, "category": "Medium"}
{"idx": 65, "code": "    public boolean is(String s) {\n        return s.startsWith((mname.isEmpty() ? \"\" : \"-\") + mname + (mhasArg ? mdelim : \"\")) && !misSet;\n    }\n", "basic_input": [{"name": "s", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "unknown", "type": "boolean", "value": "true"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 66, "code": "    private int count(char c) {\n        int result = 0;\n        for (int i = 0; i < values.length; i++) {\n            if (values[i] == c) {\n                result++;\n            }\n        }\n        return result;\n    }\n", "basic_input": [{"name": "c", "type": "char", "value": "\u0000"}], "output": [{"name": "result", "type": "int", "value": "0"}], "cyclomatic_complexity": 3, "code_length": 9, "category": "Medium"}
{"idx": 67, "code": "    public boolean isFalse(int a, int b) {\n        for (int i = a; i <= b; i++) {\n            if (werte[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n", "basic_input": [{"name": "a", "type": "int", "value": "0"}, {"name": "b", "type": "int", "value": "0"}], "output": [{"name": "unknown", "type": "boolean", "value": "true"}], "cyclomatic_complexity": 3, "code_length": 8, "category": "Medium"}
{"idx": 68, "code": "    public boolean contains(String obj){return tempList.contains(obj);}\n", "basic_input": [{"name": "obj", "type": "java.lang.String", "value": "\"Fv Rj ~\"zn{\u007fS&\""}], "output": [{"name": "unknown", "type": "boolean", "value": "true"}], "cyclomatic_complexity": 1, "code_length": 1, "category": "Easy"}
{"idx": 69, "code": "    public String get(int index){\n        return tempList.get(index);\n    }\n", "basic_input": [{"name": "index", "type": "int", "value": "0"}], "output": [{"name": "tempList", "type": "java.util.ArrayList", "value": "null"}], "cyclomatic_complexity": 1, "code_length": 3, "category": "Easy"}
{"idx": 70, "code": "    public static String removeStrings(String in, String[] strings){\n        \n        if (in==null || strings==null) return null;\n        \n        StringBuffer buff = new StringBuffer(in.trim());\n        \n        int pos1, length;\n                \n        for (int i=0; i<strings.length; i++){\n\n        \n            pos1 = buff.toString().indexOf(strings[i]);                   \n            length = strings[i].length();\n            \n            while (pos1!=-1){\n                buff.delete(pos1, pos1+length);\n                pos1 = buff.toString().indexOf(strings[i]);\n            } \n        }\n        \n        String tempStr = buff.toString();     \n        \n        return tempStr;        \n                \n    }\n", "basic_input": [{"name": "in", "type": "java.lang.String", "value": null}, {"name": "strings", "type": "java.lang.String[]", "value": "[null, null, null, \"\", null, null, \"\"]"}, {"name": "count", "type": "int", "value": "0"}, {"name": "length", "type": "int", "value": "0"}], "output": [{"name": "tmpstr", "type": "java.lang.String", "value": null}], "cyclomatic_complexity": 4, "code_length": 25, "category": "Hard"}
{"idx": 71, "code": "    public static String[] searchStrings(String[] strings, String fragment){\n        \n        String[] tempArray=null;\n     \n        if (strings!=null && fragment!=null){\n            \n            String tempStr, tempStr2;\n            StringList hold = new StringList();\n            \n            for (int i=0; i<strings.length; i++) {\n                        \n                tempStr2 = strings[i].toLowerCase();\n                tempStr = fragment.toLowerCase();\n                                                \n                if (tempStr2.indexOf(tempStr)!=-1){                    \n                    hold.add(strings[i]);\n                }\n            }\n            \n            if (!hold.isEmpty()) tempArray=hold.toArray();\n        }\n        \n        return tempArray;\n    }\n", "basic_input": [{"name": "fragment", "type": "java.lang.String", "value": null}, {"name": "strings", "type": "java.lang.String[]", "value": "[null, null, null, \"\", null, null, \"\"]"}], "output": [{"name": "tempArray", "type": "java.lang.String[]", "value": null}], "cyclomatic_complexity": 5, "code_length": 24, "category": "Hard"}
{"idx": 72, "code": "\tstatic int addUnique(String[] list, String str, int last) {\n\t\tint i;\n\t\tfor (i = 0; i < last; i++)\n\t\t\tif (list[i].equals(str))\n\t\t\t\tbreak;\n\t\tif (i == last)\n\t\t\tlist[last++] = str;\n\t\treturn last;\n\t}\n", "basic_input": [{"name": "last", "type": "int", "value": "419"}, {"name": "list", "type": "java.lang.String[]", "value": "[\"\", \"not directory\", null, null, null, null, null, null, null]"}, {"name": "str", "type": "java.lang.String", "value": "\"not directory\""}], "output": [{"name": "last", "type": "int", "value": "419"}], "cyclomatic_complexity": 4, "code_length": 9, "category": "Hard"}
{"idx": 73, "code": "\tpublic static String[] spaceSplit(String str) {\n\t\tif( str==null || str.length()<=0 )return null;\n\t\t\n\t\tint l = 0, r, cnt = 0;\n\t\tString[] list = new String[str.length() / 2];\n\t\tboolean lastIsQuoted = false;\n\t\tstr = str.trim();\n\t\twhile ((r = str.indexOf(' ', l)) >= 0) {\n\t\t\tif (str.charAt(l) == '\"') {\n\t\t\t\tl += 1;\n\t\t\t\tr = str.indexOf('\"', l);\n\t\t\t\tif (r == -1)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\tString name = str.substring(l, r);\n\t\t\tif (name.endsWith(File.separator))\n\t\t\t\tname = name.substring(0, name.length() - 1);\n\t\t\tlist[cnt++] = name;\n\n\t\t\tl = r;\n\t\t\tdo {\n\t\t\t\tl++;\n\t\t\t\tif (l == str.length()) {\n\t\t\t\t\tlastIsQuoted = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} while (str.charAt(l) == ' ');\n\t\t}\n\n\t\tif (!lastIsQuoted) {\n\t\t\tif (str.charAt(l) == '\"') {\n\t\t\t\tl += 1;\n\t\t\t\tr = str.indexOf('\"', l);\n\t\t\t\tif (r == -1)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\tString name = str.substring(l);\n\t\t\tif (name.endsWith(File.separator))\n\t\t\t\tname = name.substring(0, name.length() - 1);\n\t\t\tlist[cnt++] = name;\n\t\t}\n\n\t\tfor (int i = 0; i < cnt; i++) {\n\t\t\tif (list[i].endsWith(\"\\\"\")) {\n\t\t\t\tlist[i] = list[i].substring(0, list[i].length() - 1);\n\t\t\t}\n\t\t}\n\n\t\tString[] tmp = list;\n\t\tlist = new String[cnt];\n\t\tSystem.arraycopy(tmp, 0, list, 0, cnt);\n\n\t\treturn list;\n\t}\n", "basic_input": [{"name": "str", "type": "java.lang.String", "value": "\"\""}], "output": [{"name": "list", "type": "string[]", "value": null}], "cyclomatic_complexity": 15, "code_length": 54, "category": "Hard"}
{"idx": 74, "code": "\tpublic static String[] starExpand(String[] fileList, String curDir) {\n\t\tint i, j, n, cnt = 0;\n\t\tString[] newList = new String[4096]; // !!! Ouch...\n\t\tString[] curDirList = (new File(curDir)).list();\n\t\tString path, curFile;\n\n\t\tfor (i = 0; i < fileList.length; i++) {\n\t\t\tcurFile = fileList[i];\n\t\t\tpath = \"\";\n\t\t\tn = curFile.indexOf('*');\n\t\t\tif (n == -1) {\n\t\t\t\tcnt = addUnique(newList, curFile, cnt);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString[] dirList;\n\t\t\tFile f = new File(curFile);\n\t\t\tif (!f.isAbsolute()) {\n\t\t\t\tdirList = curDirList;\n\t\t\t} else {\n\t\t\t\tString dir = f.getParent();\n\t\t\t\tif (dir == null)\n\t\t\t\t\tdir = new String(File.separator); // !!! Ouch...\n\t\t\t\tdirList = (new File(dir)).list();\n\t\t\t\tcurFile = f.getName();\n\t\t\t\tpath = dir + File.separator;\n\t\t\t\tn = curFile.indexOf('*');\n\t\t\t}\n\n\t\t\tString pre = curFile.substring(0, n);\n\t\t\tString post = curFile.substring(n + 1);\n\t\t\tfor (j = 0; j < dirList.length; j++) {\n\t\t\t\tString name = dirList[j];\n\t\t\t\tif (name.startsWith(pre) && name.endsWith(post)) {\n\t\t\t\t\tcnt = addUnique(newList, path + name, cnt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString[] tmp = newList;\n\t\tnewList = new String[cnt];\n\t\tSystem.arraycopy(tmp, 0, newList, 0, cnt);\n\t\treturn newList;\n\t}\n", "basic_input": [{"name": "curDir", "type": "java.lang.String", "value": "\"Nqj\u007f0<Jj!(kITir;$5\""}, {"name": "fileList", "type": "java.lang.String[]", "value": "[]"}], "output": [{"name": "newList", "type": "java.lang.String[]", "value": "[]"}], "cyclomatic_complexity": 7, "code_length": 42, "category": "Hard"}
{"idx": 76, "code": "    private static String getDisplayableCommand(String[] command) {\n        StringBuilder displayable = new StringBuilder();\n        for (int i = 0; i < command.length; ++i) {\n            displayable.append(command[i]);\n            if (i + 1 < command.length)\n                displayable.append(' ');\n        }\n        return displayable.toString();\n    }\n", "basic_input": [{"name": "command", "type": "java.lang.String[]", "value": "[\"dot\", \"-V\"]"}], "output": [{"name": "displayable", "type": "java.lang.StringBuilder", "value": "\"dot -V\""}], "cyclomatic_complexity": 3, "code_length": 9, "category": "Medium"}
