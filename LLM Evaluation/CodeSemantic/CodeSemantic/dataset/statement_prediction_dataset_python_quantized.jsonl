{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def client_factory(client_name, **kwargs):\n    \"\"\"Return a client for an external data set\"\"\"\n    # set up\n    dir_name = os.path.dirname(os.path.abspath(__file__))\n    error_msg = 'No client found for name %s' % client_name\n    client_key = client_name.upper()\n\n    # find client\n    try:\n        client_vals = BALANCING_AUTHORITIES[client_key]\n        module_name = client_vals['module']\n\n        class_name = client_vals['class']\n    except KeyError:\n        raise ValueError(error_msg)\n\n    # find module\n    try:\n        fp, pathname, description = imp.find_module(module_name, [dir_name])\n    except ImportError:\n        raise ValueError(error_msg)\n\n    # load\n    try:\n        mod = imp.load_module(module_name, fp, pathname, description)\n    finally:\n        # Since we may exit via an exception, close fp explicitly.\n        if fp:\n            fp.close()\n\n    # instantiate class\n    try:\n        client_inst = getattr(mod, class_name)(**kwargs)\n    except AttributeError:\n        raise ValueError(error_msg)\n\n    # set name\n    client_inst.NAME = client_name\n\n    return client_inst\n\nclient_factory(client_name='MISO', kwargs={})", "Selected Statement": "error_msg = 'No client found for name %s' % client_name", "Function Input": {"client_name": "'MISO'", "kwargs": "{}"}, "Variable Values Before Statement": {"client_name": "'MISO'"}, "Value After Statement Execution": "'No client found for name MISO'", "Variable States During Runtime": {"client_name": [[1, "'MISO'"]], "kwargs": [[1, "{}"]], "dir_name": [[4.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso'"]], "error_msg": [[5.0, "'No client found for name MISO'"]], "client_key": [[6.0, "'MISO'"]], "client_vals": [[10.0, "{'module': 'miso', 'class': 'MISOClient'}"]], "module_name": [[11.0, "'miso'"]], "class_name": [[13.0, "'MISOClient'"]], "fp": [[19.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py' mode='r' encoding='utf-8'>"]], "pathname": [[19.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py'"]], "description": [[19.0, "('.py', 'r', 1)"]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 1, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def exchange(a, i, j):\n    temp = a[i]\n    a[i] = a[j]\n    a[j] = temp\n\nexchange(a=[0, 100, 200, 0, 0, 0, 0, 0, 0, 0], i=2, j=1)", "Selected Statement": "temp = a[i]", "Function Input": {"a": "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]", "i": "2", "j": "1"}, "Variable Values Before Statement": {"a": "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]", "i": "2"}, "Value After Statement Execution": "200", "Variable States During Runtime": {"a": [[1, "[0, 100, 200, 0, 0, 0, 0, 0, 0, 0]"], [3.0, "[0, 100, 100, 0, 0, 0, 0, 0, 0, 0]"], [4.0, "[0, 200, 100, 0, 0, 0, 0, 0, 0, 0]"]], "i": [[1, "2"]], "j": [[1, "1"]], "temp": [[2.0, "200"]]}, "Program Information": "Project Name: chen0040+pycompressor", "idx": 2, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def xldate_as_tuple(xldate, datemode):\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n    if xldate == 0.00:\n        return (0, 0, 0, 0, 0, 0)\n    if xldate < 0.00:\n        raise XLDateNegative(xldate)\n    xldays = int(xldate)\n    frac = xldate - xldays\n    seconds = int(round(frac * 86400.0))\n    assert 0 <= seconds <= 86400\n    if seconds == 86400:\n        hour = minute = second = 0\n        xldays += 1\n    else:\n        # second = seconds % 60; minutes = seconds // 60\n        minutes, second = divmod(seconds, 60)\n        # minute = minutes % 60; hour    = minutes // 60\n        hour, minute = divmod(minutes, 60)\n    if xldays >= _XLDAYS_TOO_LARGE[datemode]:\n        raise XLDateTooLarge(xldate)\n\n    if xldays == 0:\n        return (0, 0, 0, hour, minute, second)\n\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(xldate)\n\n    jdn = xldays + _JDN_delta[datemode]\n    yreg = (ifd(ifd(jdn * 4 + 274277, 146097) * 3, 4) + jdn + 1363) * 4 + 3\n    mp = ifd(yreg % 1461, 4) * 535 + 333\n    d = ifd(mp % 16384, 535) + 1\n    # mp /= 16384\n    mp >>= 14\n    if mp >= 10:\n        return (ifd(yreg, 1461) - 4715, mp - 9, d, hour, minute, second)\n    else:\n        return (ifd(yreg, 1461) - 4716, mp + 3, d, hour, minute, second)\n\nxldate_as_tuple(xldate=2741.0, datemode=0)", "Selected Statement": "frac = xldate - xldays", "Function Input": {"xldate": "2741.0", "datemode": "0"}, "Variable Values Before Statement": {"xldate": "2741.0", "xldays": "2741"}, "Value After Statement Execution": "0.0", "Variable States During Runtime": {"xldate": [[1, "2741.0"]], "datemode": [[1, "0"]], "xldays": [[8.0, "2741"]], "frac": [[9.0, "0.0"]], "seconds": [[10.0, "0"]], "second": [[17.0, "0"]], "minutes": [[17.0, "0"]], "hour": [[19.0, "0"]], "minute": [[19.0, "0"]], "jdn": [[29.0, "2417760"]], "yreg": [[30.0, "9676699"]], "mp": [[31.0, "66673"], [34.0, "4"]], "d": [[32.0, "3"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 3, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def xldate_from_date_tuple(date_tuple, datemode):\n    \"\"\"Create an excel date from a tuple of (year, month, day)\"\"\"\n    year, month, day = date_tuple\n\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n\n    if year == 0 and month == 0 and day == 0:\n        return 0.00\n\n    if not (1900 <= year <= 9999):\n        raise XLDateBadTuple(\"Invalid year: %r\" % ((year, month, day),))\n    if not (1 <= month <= 12):\n        raise XLDateBadTuple(\"Invalid month: %r\" % ((year, month, day),))\n    if  day < 1 \\\n    or (day > _days_in_month[month] and not(day == 29 and month == 2 and _leap(year))):\n        raise XLDateBadTuple(\"Invalid day: %r\" % ((year, month, day),))\n\n    Yp = year + 4716\n    M = month\n    if M <= 2:\n        Yp = Yp - 1\n        Mp = M + 9\n    else:\n        Mp = M - 3\n    jdn = ifd(1461 * Yp, 4) + ifd(979 * Mp + 16, 32) + \\\n        day - 1364 - ifd(ifd(Yp + 184, 100) * 3, 4)\n    xldays = jdn - _JDN_delta[datemode]\n    if xldays <= 0:\n        raise XLDateBadTuple(\"Invalid (year, month, day): %r\" % ((year, month, day),))\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(\"Before 1900-03-01: %r\" % ((year, month, day),))\n    return float(xldays)\n\nxldate_from_date_tuple(date_tuple=(1907, 7, 3), datemode=0)", "Selected Statement": "Yp = year + 4716", "Function Input": {"date_tuple": "(1907, 7, 3)", "datemode": "0"}, "Variable Values Before Statement": {"year": "1907"}, "Value After Statement Execution": "6623", "Variable States During Runtime": {"date_tuple": [[1, "(1907, 7, 3)"]], "datemode": [[1, "0"]], "year": [[3.0, "1907"]], "month": [[3.0, "7"]], "day": [[3.0, "3"]], "Yp": [[19.0, "6623"]], "M": [[20.0, "7"]], "Mp": [[25.0, "4"]], "jdn": [[26.0, "2417760"]], "xldays": [[28.0, "2741"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 4, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _add_notice_to_docstring(doc, no_doc_str, notice):\n    \"\"\"Adds a deprecation notice to a docstring.\"\"\"\n    if not doc:\n        lines = [no_doc_str]\n\n    else:\n        lines = _normalize_docstring(doc).splitlines()\n\n    notice = [''] + notice\n\n    if len(lines) > 1:\n        # Make sure that we keep our distance from the main body\n        if lines[1].strip():\n            notice.append('')\n\n        lines[1:1] = notice\n    else:\n        lines += notice\n\n    return '\\n'.join(lines)\n\n_add_notice_to_docstring(doc=None, no_doc_str='DEPRECATED FUNCTION', notice=['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        '])", "Selected Statement": "lines = [no_doc_str]", "Function Input": {"doc": "None", "no_doc_str": "'DEPRECATED FUNCTION'", "notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Variable Values Before Statement": {"no_doc_str": "'DEPRECATED FUNCTION'"}, "Value After Statement Execution": "['DEPRECATED FUNCTION']", "Variable States During Runtime": {"doc": [[1, "None"]], "no_doc_str": [[1, "'DEPRECATED FUNCTION'"]], "notice": [[1, "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"], [9.0, "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]], "lines": [[4.0, "['DEPRECATED FUNCTION']"], [18.0, "['DEPRECATED FUNCTION', '', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 5, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def make_version_tuple(vstr=None):\n    if vstr is None:\n        vstr = __version__\n    if vstr[0] == \"v\":\n        vstr = vstr[1:]\n    components = []\n    for component in vstr.split(\"+\")[0].split(\".\"):\n        try:\n            components.append(int(component))\n        except ValueError:\n            break\n    return tuple(components)\n\nmake_version_tuple(vstr='v0.1.1')", "Selected Statement": "vstr = vstr[1:]", "Function Input": {"vstr": "'v0.1.1'"}, "Variable Values Before Statement": {"vstr": "'v0.1.1'"}, "Value After Statement Execution": "'0.1.1'", "Variable States During Runtime": {"vstr": [[1, "'v0.1.1'"], [5.0, "'0.1.1'"]], "components": [[6.0, "[]"], [9.0, "[0]"], [9.0, "[0, 1]"], [9.0, "[0, 1, 1]"]], "component": [[7.0, "'0'"], [7.0, "'1'"]]}, "Program Information": "Project Name: smacke+ffsubsync", "idx": 6, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def calculate_r_wheels(tyre_dimensions):\n    \"\"\"\n    Calculates the radius of the wheels [m] from the tyre dimensions.\n\n    :param tyre_dimensions:\n        Tyre dimensions.\n\n        .. note:: The fields are : use, nominal_section_width, aspect_ratio,\n           carcass, diameter, load_index, speed_rating, and additional_marks.\n    :type tyre_dimensions: dict\n\n    :return:\n        Radius of the wheels [m].\n    :rtype: float\n    \"\"\"\n    if 'diameter' in tyre_dimensions:\n        if tyre_dimensions['code'] == 'pax':\n            return tyre_dimensions['diameter'] / 2000  # Diameter is in mm.\n        return tyre_dimensions['diameter'] * 0.0254  # Diameter is in inches.\n    a = tyre_dimensions['aspect_ratio'] / 100  # Aspect ratio is Height/Width.\n    w = tyre_dimensions['nominal_section_width']\n    if tyre_dimensions.get('code', 'iso') == 'iso':\n        w /= 1000  # Width is in mm.\n    else:\n        w *= 0.0254  # Width is in inches.\n\n    dr = tyre_dimensions['rim_diameter'] * 0.0254  # Rim is in inches.\n    return a * w + dr / 2\n\ncalculate_r_wheels(tyre_dimensions={'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0})", "Selected Statement": "w = tyre_dimensions['nominal_section_width']", "Function Input": {"tyre_dimensions": "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"}, "Variable Values Before Statement": {"tyre_dimensions": "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"}, "Value After Statement Execution": "265.0", "Variable States During Runtime": {"tyre_dimensions": [[1, "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"]], "a": [[20.0, "0.75"]], "w": [[21.0, "265.0"], [23.0, "0.265"]], "dr": [[27.0, "0.381"]]}, "Program Information": "Project Name: JRCSTU+co2mpas-ta", "idx": 7, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def create_dummy_class(klass, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a class is not available, create a dummy class which throws ImportError\n    when used.\n\n    Args:\n        klass (str): name of the class.\n        dependency (str): name of the dependency.\n        message: extra message to print\n    Returns:\n        class: a class object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, klass)\n    if message:\n        err = err + \" \" + message\n\n    class _DummyMetaClass(type):\n        # throw error on class attribute access\n        def __getattr__(_, __):  # noqa: B902\n            raise ImportError(err)\n\n    class _Dummy(object, metaclass=_DummyMetaClass):\n        # throw error on constructor\n        def __init__(self, *args, **kwargs):\n            raise ImportError(err)\n\n    return _Dummy\n\ncreate_dummy_class(klass='DeformConv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"klass": "'DeformConv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"klass": [[1, "'DeformConv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_DummyMetaClass": [[17.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._DummyMetaClass'>"]], "_Dummy": [[22.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._Dummy'>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 8, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def create_dummy_func(func, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a function is not available, create a dummy function which throws\n    ImportError when used.\n\n    Args:\n        func (str): name of the function.\n        dependency (str or list[str]): name(s) of the dependency.\n        message: extra message to print\n    Returns:\n        function: a function object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, func)\n    if message:\n        err = err + \" \" + message\n\n    if isinstance(dependency, (list, tuple)):\n        dependency = \",\".join(dependency)\n\n    def _dummy(*args, **kwargs):\n        raise ImportError(err)\n\n    return _dummy\n\ncreate_dummy_func(func='deform_conv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"func": "'deform_conv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"func": [[1, "'deform_conv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_dummy": [[20.0, "<function create_dummy_func.<locals>._dummy at 0x7f3337cdfd30>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 9, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def normalize_url(url):\n    \"\"\"Return url after stripping trailing .json and trailing slashes.\"\"\"\n    if url.endswith('.json'):\n        url = url[:-5]\n    if url.endswith('/'):\n        url = url[:-1]\n    return url\n\nnormalize_url(url='https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json')", "Selected Statement": "url = url[:-5]", "Function Input": {"url": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"}, "Variable Values Before Statement": {"url": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"}, "Value After Statement Execution": "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1'", "Variable States During Runtime": {"url": [[1, "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1.json'"], [4.0, "'https://www.reddit.com/r/CollegeBasketball/comments/31owr1'"]]}, "Program Information": "Project Name: Aareon+rtv", "idx": 10, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_logger(name: str) -> logging.Logger:\n    if name.startswith(\"electrum.\"):\n        name = name[9:]\n    return electrum_logger.getChild(name)\n\nget_logger(name='electrum.logging')", "Selected Statement": "name = name[9:]", "Function Input": {"name": "'electrum.logging'"}, "Variable Values Before Statement": {"name": "'electrum.logging'"}, "Value After Statement Execution": "'logging'", "Variable States During Runtime": {"name": [[1, "'electrum.logging'"], [3.0, "'logging'"]]}, "Program Information": "Project Name: spesmilo+electrum", "idx": 11, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def format_pair(prefix, arg, value):\n    if arg is _arg_source_missing:\n        arg_lines = []\n        value_prefix = prefix\n    else:\n        arg_lines = indented_lines(prefix, arg)\n        value_prefix = arg_lines[-1] + ': '\n\n    looksLikeAString = value[0] + value[-1] in [\"''\", '\"\"']\n    if looksLikeAString:  # Align the start of multiline strings.\n        value = prefixLinesAfterFirst(' ', value)\n\n    value_lines = indented_lines(value_prefix, value)\n    lines = arg_lines[:-1] + value_lines\n    return '\\n'.join(lines)\n\nformat_pair(prefix='    ', arg='multilineStr', value=\"'line1\\nline2'\")", "Selected Statement": "lines = arg_lines[:-1] + value_lines", "Function Input": {"prefix": "'    '", "arg": "'multilineStr'", "value": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {"value_lines": "[\"    multilineStr: 'line1\", \"                   line2'\"]"}, "Value After Statement Execution": "[\"    multilineStr: 'line1\", \"                   line2'\"]", "Variable States During Runtime": {"prefix": [[1, "'    '"]], "arg": [[1, "'multilineStr'"]], "value": [[1, "\"'line1\\nline2'\""], [11.0, "\"'line1\\n line2'\""]], "arg_lines": [[6.0, "['    multilineStr']"]], "value_prefix": [[7.0, "'    multilineStr: '"]], "looksLikeAString": [[9.0, "True"]], "value_lines": [[13.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]], "lines": [[14.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 12, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def prefixLinesAfterFirst(prefix, s):\n    lines = s.splitlines(True)\n\n    for i in range(1, len(lines)):\n        lines[i] = prefix + lines[i]\n\n    return ''.join(lines)\n\nprefixLinesAfterFirst(prefix=' ', s=\"'line1\\nline2'\")", "Selected Statement": "lines[i] = prefix + lines[i]", "Function Input": {"prefix": "' '", "s": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {"prefix": "' '"}, "Value After Statement Execution": "[\"'line1\\n\", \" line2'\"]", "Variable States During Runtime": {"prefix": [[1, "' '"]], "s": [[1, "\"'line1\\nline2'\""]], "lines": [[2.0, "[\"'line1\\n\", \"line2'\"]"], [5.0, "[\"'line1\\n\", \" line2'\"]"]], "i": [[4.0, "1"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 13, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def call_on_comment(*args, **kwargs):\n    global events\n    repo_full_name = kwargs[\"repo_full_name\"]\n    pr_id = kwargs[\"pr_number\"]\n    key = f\"{repo_full_name}-{pr_id}\"\n\n    # Check if a previous process exists for the same key, cancel it\n    thread = events.get(key, None)\n    if thread:\n        terminate_thread(thread)\n\n    thread = threading.Thread(target=run_comment, args=args, kwargs=kwargs)\n    events[key] = thread\n    thread.start()\n\ncall_on_comment(args=(), kwargs={'repo_full_name': 'exampleRepo', 'pr_number': 1})", "Selected Statement": "repo_full_name = kwargs[\"repo_full_name\"]", "Function Input": {"args": "()", "kwargs": "{'repo_full_name': 'exampleRepo', 'pr_number': 1}"}, "Variable Values Before Statement": {"kwargs": "{'repo_full_name': 'exampleRepo', 'pr_number': 1}"}, "Value After Statement Execution": "'exampleRepo'", "Variable States During Runtime": {"args": [[1, "()"]], "kwargs": [[1, "{'repo_full_name': 'exampleRepo', 'pr_number': 1}"]], "repo_full_name": [[3.0, "'exampleRepo'"]], "pr_id": [[4.0, "1"]], "key": [[5.0, "'exampleRepo-1'"]], "thread": [[8.0, "None"], [12.0, "<Thread(Thread-1, initial)>"], [14.0, "<Thread(Thread-1, started 140445971379776)>"]]}, "Program Information": "Project Name: sweepai+sweep", "idx": 14, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def find_csv_columns(csv, column_separator):\n    lines = csv.strip().split('\\n')\n    numeric_lines = [line for line in lines if column_separator in line and numeric_start.search(line)]\n    n_columns = list(set([len(line.split(column_separator)) for line in numeric_lines]))\n    if len(n_columns) != 1:\n        raise CsvParseError('Numeric lines have different number of columns')\n    n_columns = n_columns[0]\n    for line in lines:\n        if not numeric_start.search(line) and len(line.split(column_separator)) == n_columns:\n            return [cell.strip() for cell in line.split(column_separator)]\n\nfind_csv_columns(csv='20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0', column_separator='\\t')", "Selected Statement": "n_columns = n_columns[0]", "Function Input": {"csv": "'20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0'", "column_separator": "'\\t'"}, "Variable Values Before Statement": {"n_columns": "[3]"}, "Value After Statement Execution": "3", "Variable States During Runtime": {"csv": [[1, "'20.000\\t68.334\\t0\\n20.250\\t68.335\\t0\\n19998.498\\t27.402\\t0'"]], "column_separator": [[1, "'\\t'"]], "lines": [[2.0, "['20.000\\t68.334\\t0', '20.250\\t68.335\\t0', '19998.498\\t27.402\\t0']"]], "numeric_lines": [[3.0, "['20.000\\t68.334\\t0', '20.250\\t68.335\\t0', '19998.498\\t27.402\\t0']"]], "n_columns": [[4.0, "[3]"], [7.0, "3"]], "line": [[8.0, "'20.000\\t68.334\\t0'"], [8.0, "'20.250\\t68.335\\t0'"], [8.0, "'19998.498\\t27.402\\t0'"]]}, "Program Information": "Project Name: jaakkopasanen+AutoEq", "idx": 15, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def exchange(a, i, j):\n    tmp = a[j]\n    a[j] = a[i]\n    a[i] = tmp\n\nexchange(a=[1, 2, 13, 22, 123], i=0, j=1)", "Selected Statement": "tmp = a[j]", "Function Input": {"a": "[1, 2, 13, 22, 123]", "i": "0", "j": "1"}, "Variable Values Before Statement": {"a": "[1, 2, 13, 22, 123]", "j": "1"}, "Value After Statement Execution": "2", "Variable States During Runtime": {"a": [[1, "[1, 2, 13, 22, 123]"], [3.0, "[1, 1, 13, 22, 123]"], [4.0, "[2, 1, 13, 22, 123]"]], "i": [[1, "0"]], "j": [[1, "1"]], "tmp": [[2.0, "2"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 16, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _merge(a, aux, lo, mid, hi):\n        i = lo\n        j = mid + 1\n\n        for k in range(lo, hi + 1):\n            aux[k] = a[k]\n\n        for k in range(lo, hi + 1):\n            if i > mid:\n                a[k] = aux[j]\n                j += 1\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge(a=[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, mid=3, hi=7)", "Selected Statement": "j = mid + 1", "Function Input": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Variable Values Before Statement": {"mid": "3"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"a": [[1, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "mid": [[1, "3"]], "hi": [[1, "7"]], "i": [[2.0, "0"], [17.0, "1"], [17.0, "2"], [17.0, "3"], [17.0, "4"]], "j": [[3.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"], [11.0, "8"]], "k": [[5.0, "0"], [5.0, "1"], [5.0, "2"], [5.0, "3"], [5.0, "4"], [5.0, "5"], [5.0, "6"], [5.0, "7"], [8.0, "0"], [8.0, "1"], [8.0, "2"], [8.0, "3"], [8.0, "4"], [8.0, "5"], [8.0, "6"], [8.0, "7"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 17, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def execute(self, entry):\n        directives = []\n        for i, word in enumerate(entry.words()):\n            def append(resolvable):\n                directives.append((resolvable.directivevalue, i))\n                raise self.Enough\n            try:\n                self.getresolvables(word.cat(), append)\n            except (AttributeError, CatNotSupportedException, self.Enough):\n                pass\n        if 1 != len(directives):\n            raise UnsupportedEntryException(\"Expected 1 directive but %s found: %s\" % (directives, entry))\n        d, i = directives[0]\n        d(entry.subentry(0, i), entry.phrase(i + 1), self)\n\nexecute(self=Context(SuperContext(), False), entry=Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')]), self.islist=False, self.parent=SuperContext(), self.resolvables=OrderedDict([('here', Text('/tmp'))]))", "Selected Statement": "d, i = directives[0]", "Function Input": {"self": "Context(SuperContext(), False)", "entry": "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])", "self.islist": "False", "self.parent": "SuperContext()", "self.resolvables": "OrderedDict([('here', Text('/tmp'))])"}, "Variable Values Before Statement": {"directives": "[(<aridimpl.directives.Equals object at 0x7fe13ba8cd60>, 2)]"}, "Value After Statement Execution": "{}", "Variable States During Runtime": {"self": [[1, "Context(SuperContext(), False)"]], "entry": [[1, "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])"]], "self.islist": [[1, "False"]], "self.parent": [[1, "SuperContext()"]], "self.resolvables": [[1, "OrderedDict([('here', Text('/tmp'))])"], [14.0, "OrderedDict([('here', Text('/tmp')), ('ns', Context(Context(SuperContext(), False), False))])"]], "directives": [[2.0, "[]"], [8.0, "[(<aridimpl.directives.Equals object at 0x7fe13ba8cd60>, 2)]"]], "word": [[3.0, "Text('ns')"], [3.0, "Text('woo')"], [3.0, "Text('=')"], [3.0, "Text('yay')"]], "i": [[3.0, "0"], [3.0, "1"], [3.0, "2"], [3.0, "3"], [13.0, "2"]], "append": [[4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b030d0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b035e0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"]], "d": [[13.0, "{}"]]}, "Program Information": "Project Name: combatopera+aridity", "idx": 18, "quantized value": "Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def check_head_methods(system, m_time, path=None):\n    \"\"\"\n    Tests head methods.\n\n    args:\n        io_object (pycosio._core.io_system.SystemBase subclass):\n            Object to test\n    \"\"\"\n    path = path or 'directory/file'\n    assert system.getmtime(path) == pytest.approx(m_time, 1)\n    assert system.getsize(path) == SIZE\n\ncheck_head_methods(system={_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}, m_time=1712175490.9806323, path=None)", "Selected Statement": "path = path or 'directory/file'", "Function Input": {"system": "{_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}", "m_time": "1712175490.9806323", "path": "None"}, "Variable Values Before Statement": {"path": "None"}, "Value After Statement Execution": "'directory/file'", "Variable States During Runtime": {"system": [[1, "{_storage_parameters={}, _unsecure=False, _client=None, _roots=('http://', 'https://')}"], [10.0, "{_storage_parameters={}, _unsecure=False, _client=<tests.test_http.test_http_raw_io.<locals>.Session object at 0x7ffa22ae3bb0>, _roots=('http://', 'https://')}"]], "m_time": [[1, "1712175490.9806323"]], "path": [[1, "None"], [9.0, "'directory/file'"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 19, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def set_bbox(self, bbox: Rect) -> None:\n        (x0, y0, x1, y1) = bbox\n        self.x0 = x0\n        self.y0 = y0\n        self.x1 = x1\n        self.y1 = y1\n        self.width = x1 - x0\n        self.height = y1 - y0\n        self.bbox = bbox\n\nset_bbox(self=REPR FAILED, bbox=[0, 100, 0, 100])", "Selected Statement": "self.width = x1 - x0", "Function Input": {"self": "REPR FAILED", "bbox": "[0, 100, 0, 100]"}, "Variable Values Before Statement": {"x1": "0", "x0": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "REPR FAILED"], [9.0, "<LTContainer 0.000,100.000,0.000,100.000>"]], "bbox": [[1, "[0, 100, 0, 100]"]], "x0": [[2.0, "0"]], "y0": [[2.0, "100"]], "x1": [[2.0, "0"]], "y1": [[2.0, "100"]], "self.x0": [[3.0, "0"]], "self.y0": [[4.0, "100"]], "self.x1": [[5.0, "0"]], "self.y1": [[6.0, "100"]], "self.width": [[7.0, "0"]], "self.height": [[8.0, "0"]], "self.bbox": [[9.0, "[0, 100, 0, 100]"]]}, "Program Information": "Project Name: pdfminer+pdfminer.six", "idx": 20, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def task_succeeded_events(worker, id=None, name=None, runtime=0.1234, retries=0, eta=None):\n    id = id or uuid()\n    name = name or 'sometask'\n    return [Event('task-received', uuid=id, name=name,\n                  args='(2, 2)', kwargs=\"{'foo': 'bar'}\",\n                  retries=retries, eta=eta, hostname=worker),\n            Event('task-started', uuid=id, hostname=worker),\n            Event('task-succeeded', uuid=id, result='4',\n                  runtime=runtime, hostname=worker)]\n\ntask_succeeded_events(worker='worker1', id=None, name=None, runtime=0.1234, retries=0, eta=None)", "Selected Statement": "name = name or 'sometask'", "Function Input": {"worker": "'worker1'", "id": "None", "name": "None", "runtime": "0.1234", "retries": "0", "eta": "None"}, "Variable Values Before Statement": {"name": "None"}, "Value After Statement Execution": "'sometask'", "Variable States During Runtime": {"worker": [[1, "'worker1'"]], "id": [[1, "None"], [2.0, "'95b9f5c5-3693-4723-a64a-acb161eab235'"]], "name": [[1, "None"], [3.0, "'sometask'"]], "runtime": [[1, "0.1234"]], "retries": [[1, "0"]], "eta": [[1, "None"]]}, "Program Information": "Project Name: mher+flower", "idx": 21, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def apply_env_options():\n    \"apply options passed through environment variables\"\n    env_options = filter(is_flower_envvar, os.environ)\n    for env_var_name in env_options:\n        name = env_var_name.replace(ENV_VAR_PREFIX, '', 1).lower()\n        value = os.environ[env_var_name]\n        try:\n            option = options._options[name]  # pylint: disable=protected-access\n        except KeyError:\n            option = options._options[name.replace('_', '-')]  # pylint: disable=protected-access\n        if option.multiple:\n            value = [option.type(i) for i in value.split(',')]\n        else:\n            if option.type is bool:\n                value = bool(strtobool(value))\n            else:\n                value = option.type(value)\n        setattr(options, name, value)\n\napply_env_options()", "Selected Statement": "value = os.environ[env_var_name]", "Function Input": {}, "Variable Values Before Statement": {"env_var_name": "'FLOWER_AUTO_REFRESH'"}, "Value After Statement Execution": "'false'", "Variable States During Runtime": {"env_options": [[3.0, "REPR FAILED"]], "env_var_name": [[4.0, "'FLOWER_AUTO_REFRESH'"]], "name": [[5.0, "'auto_refresh'"]], "value": [[6.0, "'false'"], [15.0, "False"]], "option": [[10.0, "{name='auto_refresh', help='refresh workerss', metavar=None, multiple=False, file_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', group_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', callback=None, default=True, _value=<object object at 0x7fc8330cff40>}"], [18.0, "{name='auto_refresh', help='refresh workerss', metavar=None, multiple=False, file_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', group_name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/mher+flower/mher+flower/flower/options.py', callback=None, default=True, _value=False}"]]}, "Program Information": "Project Name: mher+flower", "idx": 22, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def task_failed_events(worker, id=None, name=None):\n    id = id or uuid()\n    name = name or 'sometask'\n    return [Event('task-received', uuid=id, name=name,\n                  args='(2, 2)', kwargs=\"{'foo': 'bar'}\",\n                  retries=0, eta=None, hostname=worker),\n            Event('task-started', uuid=id, hostname=worker),\n            Event('task-failed', uuid=id, exception=\"KeyError('foo')\",\n                  traceback='line 1 at main', hostname=worker)]\n\ntask_failed_events(worker='worker3', id=None, name=None)", "Selected Statement": "name = name or 'sometask'", "Function Input": {"worker": "'worker3'", "id": "None", "name": "None"}, "Variable Values Before Statement": {"name": "None"}, "Value After Statement Execution": "'sometask'", "Variable States During Runtime": {"worker": [[1, "'worker3'"]], "id": [[1, "None"], [2.0, "'74ab0138-27c4-4571-9127-2f5241170ad8'"]], "name": [[1, "None"], [3.0, "'sometask'"]]}, "Program Information": "Project Name: mher+flower", "idx": 23, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def file(input_file, light=False):\n    \"\"\"Import colorscheme from json file.\"\"\"\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/light/\"))\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/dark/\"))\n\n    theme_name = \".\".join((input_file, \"json\"))\n    bri = \"light\" if light else \"dark\"\n\n    user_theme_file = os.path.join(CONF_DIR, \"colorschemes\", bri, theme_name)\n    theme_file = os.path.join(MODULE_DIR, \"colorschemes\", bri, theme_name)\n\n    # Find the theme file.\n    if input_file in (\"random\", \"random_dark\"):\n        theme_file = get_random_theme()\n\n    elif input_file == \"random_light\":\n        theme_file = get_random_theme(light)\n\n    elif input_file == \"random_user\":\n        theme_file = get_random_theme_user()\n\n    elif os.path.isfile(user_theme_file):\n        theme_file = user_theme_file\n\n    elif os.path.isfile(input_file):\n        theme_file = input_file\n\n    # Parse the theme file.\n    if os.path.isfile(theme_file):\n        logging.info(\"Set theme to \\033[1;37m%s\\033[0m.\",\n                     os.path.basename(theme_file))\n        util.save_file(os.path.basename(theme_file),\n                       os.path.join(CACHE_DIR, \"last_used_theme\"))\n        return parse(theme_file)\n\n    logging.error(\"No %s colorscheme file found.\", bri)\n    logging.error(\"Try adding   '-l' to set light themes.\")\n    logging.error(\"Try removing '-l' to set dark themes.\")\n    sys.exit(1)\n\nfile(input_file='tests/test_files/test_file.json', light=False)", "Selected Statement": "bri = \"light\" if light else \"dark\"", "Function Input": {"input_file": "'tests/test_files/test_file.json'", "light": "False"}, "Variable Values Before Statement": {"light": "False"}, "Value After Statement Execution": "'dark'", "Variable States During Runtime": {"input_file": [[1, "'tests/test_files/test_file.json'"]], "light": [[1, "False"]], "theme_name": [[6.0, "'tests/test_files/test_file.json.json'"]], "bri": [[7.0, "'dark'"]], "user_theme_file": [[9.0, "'/home/XXX/.config/wal/colorschemes/dark/tests/test_files/test_file.json.json'"]], "theme_file": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/pywal/colorschemes/dark/tests/test_files/test_file.json.json'"], [26.0, "'tests/test_files/test_file.json'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 24, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _find_and_replace_patterns(content, patterns_and_insertions):\n  r\"\"\"content: str\n\n  patterns_and_insertions: List[Dict]\n\n  Example for patterns_and_insertions:\n\n      [\n          {\n              \"pattern\" :\n              r\"(?:\\\\figcompfigures{\\s*)(?P<first>.*?)\\s*}\\s*{\\s*(?P<second>.*?)\\s*}\\s*{\\s*(?P<third>.*?)\\s*}\",\n              \"insertion\" :\n              r\"\\parbox[c]{{{second}\\linewidth}}{{\\includegraphics[width={third}\\linewidth]{{figures/{first}}}}}}\",\n              \"description\": \"Replace figcompfigures\"\n          },\n      ]\n  \"\"\"\n  for pattern_and_insertion in patterns_and_insertions:\n    pattern = pattern_and_insertion['pattern']\n    insertion = pattern_and_insertion['insertion']\n    description = pattern_and_insertion['description']\n    logging.info('Processing pattern: %s.', description)\n    p = regex.compile(pattern)\n    m = p.search(content)\n    while m is not None:\n      local_insertion = insertion.format(**m.groupdict())\n      if pattern_and_insertion.get('strip_whitespace', True):\n        local_insertion = strip_whitespace(local_insertion)\n      logging.info(f'Found {content[m.start():m.end()]:<70}')\n      logging.info(f'Replacing with {local_insertion:<30}')\n      content = content[: m.start()] + local_insertion + content[m.end() :]\n      m = p.search(content)\n    logging.info('Finished pattern: %s.', description)\n  return content\n\n_find_and_replace_patterns(content='& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}', patterns_and_insertions=[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}])", "Selected Statement": "pattern = pattern_and_insertion['pattern']", "Function Input": {"content": "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'", "patterns_and_insertions": "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"}, "Variable Values Before Statement": {"pattern_and_insertion": "{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}"}, "Value After Statement Execution": "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'", "Variable States During Runtime": {"content": [[1, "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]], "patterns_and_insertions": [[1, "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"]], "pattern_and_insertion": [[18.0, "{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}"]], "pattern": [[19.0, "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'"]], "insertion": [[20.0, "'\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} '"]], "description": [[21.0, "'Replace figcompfigures'"]], "p": [[23.0, "regex.Regex('(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', flags=regex.V0)"]], "m": [[24.0, "<regex.Match object; span=(2, 49), match='\\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}'>"], [32.0, "<regex.Match object; span=(89, 126), match='\\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'>"], [32.0, "None"]], "local_insertion": [[26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}'"], [26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image2.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 25, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def merge_args_into_config(args, config_params):\n  final_args = copy.deepcopy(config_params)\n  config_keys = config_params.keys()\n  for key, value in args.items():\n    if key in config_keys:\n      if any([isinstance(value, t) for t in [str, bool, float, int]]):\n        # Overwrites config value with args value.\n        final_args[key] = value\n      elif isinstance(value, list):\n        # Appends args values to config values.\n        final_args[key] = value + config_params[key]\n      elif isinstance(value, dict):\n        # Updates config params with args params.\n        final_args[key].update(**value)\n    else:\n      final_args[key] = value\n  return final_args\n\nmerge_args_into_config(args={'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}, config_params={'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'})", "Selected Statement": "final_args[key] = value + config_params[key]", "Function Input": {"args": "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}", "config_params": "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"}, "Variable Values Before Statement": {"value": "'foo/bar/tikz'"}, "Value After Statement Execution": "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}", "Variable States During Runtime": {"args": [[1, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_params": [[1, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"]], "final_args": [[2.0, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [14.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [11.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_keys": [[3.0, "dict_keys(['input_folder', 'resize_images', 'im_size', 'compress_pdf', 'pdf_im_resolution', 'images_allowlist', 'commands_to_delete', 'use_external_tikz'])"]], "key": [[4.0, "'input_folder'"], [4.0, "'resize_images'"], [4.0, "'im_size'"], [4.0, "'compress_pdf'"], [4.0, "'pdf_im_resolution'"], [4.0, "'images_allowlist'"], [4.0, "'commands_to_delete'"], [4.0, "'use_external_tikz'"]], "value": [[4.0, "'foo/bar'"], [4.0, "False"], [4.0, "500"], [4.0, "False"], [4.0, "500"], [4.0, "{'path1/': 1000}"], [4.0, "['\\\\todo1']"], [4.0, "'foo/bar/tikz'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 26, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "filename_regex = path_prefix_regex + basename_regex", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"path_prefix_regex": "'((/)?to/)?'", "basename_regex": "'img(\\\\.ext)?'"}, "Value After Statement Execution": "'((/)?to/)?img(\\\\.ext)?'", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 27, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "operation = change[\"operation\"]", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"change": "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"}, "Value After Statement Execution": "'Replace'", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 28, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_code(code_lines, start_pos, end_pos):\n    # Get relevant lines.\n    lines = code_lines[start_pos[0] - 1:end_pos[0]]\n    # Remove the parts at the end of the line.\n    lines[-1] = lines[-1][:end_pos[1]]\n    # Remove first line indentation.\n    lines[0] = lines[0][start_pos[1]:]\n    return ''.join(lines)\n\n_get_code(code_lines=['\\n', 'import json\\n', 'json.lo'], start_pos=(3, 0), end_pos=(3, 5))", "Selected Statement": "lines = code_lines[start_pos[0] - 1:end_pos[0]]", "Function Input": {"code_lines": "['\\n', 'import json\\n', 'json.lo']", "start_pos": "(3, 0)", "end_pos": "(3, 5)"}, "Variable Values Before Statement": {"code_lines": "['\\n', 'import json\\n', 'json.lo']"}, "Value After Statement Execution": "['json.lo']", "Variable States During Runtime": {"code_lines": [[1, "['\\n', 'import json\\n', 'json.lo']"]], "start_pos": [[1, "(3, 0)"]], "end_pos": [[1, "(3, 5)"]], "lines": [[3.0, "['json.lo']"], [5.0, "['json.']"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 29, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def parse_layout(layout_str):\n    \"\"\"Parse a layout string\n\n    Return a dict\n        {'walls': list_of_wall_coordinates,\n         'food' : list_of_food_coordinates,\n         'bot'  : list_of_4_bot_coordinate}\n\n    A layout string is composed of wall characters '#', food characters '.', and\n    bot characters '0', '1', '2', and '3'.\n\n    Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n\n     ########\n     #0  .  #\n     #2    1#\n     #  .  3#\n     ########\n\n\n    If items are overlapping, several layout strings can be concateneted:\n     ########\n     #0  .  #\n     #     1#\n     #  .  3#\n     ########\n     ########\n     #2  .  #\n     #     1#\n     #  .  3#\n     ########\n\n     In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n    \"\"\"\n    layout_list = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # ignore emptylines\n            continue\n        if not start:\n            # start a new layout\n            # check that row is a valid opening string\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n            current_layout = [row]\n            start = True\n            continue\n        # we are in the middle of a layout, just append to the current\n        # layout unless we detect the closing string\n        current_layout.append(row)\n        if row.count('#') == len(row):\n            # this is a closing string\n            # append the layout to tha layout list\n            layout_list.append('\\n'.join(current_layout))\n            start = False\n\n    if start:\n        # the last layout has not been closed, complain here!\n        raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n\n    # initialize walls, food and bots from the first layout\n    out = parse_single_layout(layout_list.pop(0))\n    for layout in layout_list:\n        items = parse_layout(layout)\n        # walls should always be the same\n        if items['walls'] != out['walls']:\n            raise ValueError('Walls are not equal in all layouts!')\n        # add the food, removing duplicates\n        out['food'] = list(set(out['food'] + items['food']))\n        # add the bots\n        for bot_idx, bot_pos in enumerate(items['bots']):\n            if bot_pos:\n                # this bot position is not None, overwrite whatever we had before\n                out['bots'][bot_idx] = bot_pos\n\n    return out\n\nparse_layout(layout_str='\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "Selected Statement": "current_layout = [row]", "Function Input": {"layout_str": "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"}, "Variable Values Before Statement": {"row": "'##################'"}, "Value After Statement Execution": "['##################']", "Variable States During Runtime": {"layout_str": [[1, "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"]], "layout_list": [[35.0, "[]"], [56.0, "['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################']"], [64.0, "[]"]], "start": [[36.0, "False"], [48.0, "True"], [57.0, "False"]], "i": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"], [37.0, "4"], [37.0, "5"], [37.0, "6"], [37.0, "7"], [37.0, "8"]], "line": [[37.0, "''"], [37.0, "'        ##################'"], [37.0, "'        #. ... .##.     3#'"], [37.0, "'        # # #  .  .### #1#'"], [37.0, "'        # # ##.   .      #'"], [37.0, "'        #      .   .## # #'"], [37.0, "'        #0# ###.  .  # # #'"], [37.0, "'        #2     .##. ... .#'"], [37.0, "'        ################## '"]], "row": [[38.0, "''"], [38.0, "'##################'"], [38.0, "'#. ... .##.     3#'"], [38.0, "'# # #  .  .### #1#'"], [38.0, "'# # ##.   .      #'"], [38.0, "'#      .   .## # #'"], [38.0, "'#0# ###.  .  # # #'"], [38.0, "'#2     .##. ... .#'"], [38.0, "'##################'"]], "current_layout": [[47.0, "['##################']"], [52.0, "['##################', '#. ... .##.     3#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "out": [[64.0, "{'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 30, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def dict_factory(cursor, row):\n    d = {}\n    for idx, col in enumerate(cursor.description):\n        d[col[0]] = row[idx]\n    return d\n\ndict_factory(cursor=REPR FAILED, row=('My Way',))", "Selected Statement": "d[col[0]] = row[idx]", "Function Input": {"cursor": "REPR FAILED", "row": "('My Way',)"}, "Variable Values Before Statement": {"row": "('My Way',)", "idx": "0"}, "Value After Statement Execution": "{'name': 'My Way'}", "Variable States During Runtime": {"cursor": [[1, "REPR FAILED"]], "row": [[1, "('My Way',)"]], "d": [[2.0, "{}"], [4.0, "{'name': 'My Way'}"]], "idx": [[3.0, "0"]], "col": [[3.0, "('name', None, None, None, None, None, None)"]]}, "Program Information": "Project Name: danwin+fairways_py", "idx": 31, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_air_quality(city):\n    \"\"\"\n    通过城市名获取空气质量\n    官网：http://aqicn.org/here/\n    token 申请地址：http://aqicn.org/data-platform/token/#/\n    :param city: 城市\n    :return:\n    \"\"\"\n\n    if not city or not city.strip():\n        return\n    print('获取 {} 的空气质量...'.format(city))\n    try:\n\n        url = 'http://api.waqi.info/feed/{city}/?token={token}'.format(city=city, token=AQICN_TOKEN)\n        resp = requests.get(url)\n        if resp.status_code == 200:\n            # print(resp.text)\n            content_dict = resp.json()\n            if content_dict.get('status') == 'ok':\n                data_dict = content_dict['data']\n                aqi = data_dict['aqi']\n                air_status = '严重污染'\n                for key in sorted(AIR_STATUS_DICT):\n                    if key >= aqi:\n                        air_status = AIR_STATUS_DICT[key]\n                        break\n                aqi_info = '{city} PM2.5：{aqi} {air_status}'.format(city=city, aqi=aqi, air_status=air_status)\n                # print(aqi_info)\n                return aqi_info\n            else:\n                print('获取空气质量失败:{}'.format(content_dict['data']))\n                return None\n        print('获取空气质量失败。')\n    except Exception as exception:\n        print(str(exception))\n    return None\n\nget_air_quality(city='桂林')", "Selected Statement": "data_dict = content_dict['data']", "Function Input": {"city": "'桂林'"}, "Variable Values Before Statement": {"content_dict": "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"}, "Value After Statement Execution": "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}", "Variable States During Runtime": {"city": [[1, "'桂林'"]], "url": [[15.0, "'http://api.waqi.info/feed/桂林/?token=6382db85ef321ae81f316486de0b5b8aa6c84f62'"]], "resp": [[16.0, "<Response [200]>"]], "content_dict": [[19.0, "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"]], "data_dict": [[21.0, "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}"]], "aqi": [[22.0, "50"]], "air_status": [[23.0, "'严重污染'"], [26.0, "'优'"]], "key": [[24.0, "50"]], "aqi_info": [[28.0, "'桂林 PM2.5：50 优'"]]}, "Program Information": "Project Name: sfyc23+EverydayWechat", "idx": 32, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "flag_args = args[separator_index + 1:]", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {"args": "['a', 'b', '--']"}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 33, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def mock_request_get_content(url, headers):\n    with open(os.path.join(TEST_DATA_DIR, URL_MAP_FILE)) as f:\n        url_map = json.loads(f.read())\n    resp_file = url_map[url]\n    mock = Mock()\n    with open(resp_file, \"rb\") as f:\n        mock.content = f.read()\n    return mock\n\nmock_request_get_content(url='https://weibo.cn/album/166564740000001980768563?rl=1', headers={'User_Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36', 'Cookie': ''})", "Selected Statement": "resp_file = url_map[url]", "Function Input": {"url": "'https://weibo.cn/album/166564740000001980768563?rl=1'", "headers": "{'User_Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36', 'Cookie': ''}"}, "Variable Values Before Statement": {"url_map": "{'https://weibo.cn/1669879400/profile': 'tests/testdata/a4437630f3bdfa2757bae1595186ac063fe5ec25cf2f98116ece83cb.html', 'https://weibo.cn/1669879400/info': 'tests/testdata/ca5f2a555e8d62f728c66fa90afb2d54d19f8c898e164204a61bdf03.html', 'https://weibo.cn/1669879400/profile?page=1': 'tests/testdata/4957814af5a123b82e974b5537dea736dfb34e48d8835203a45d2e67.html', 'https://weibo.cn/mblog/picAll/J6k49kbTc?rl=1': 'tests/testdata/e97222acd5bc7d8d1bfbd3f352f8cad3e36fdd19e40b69e1c33fb3c3.html', 'https://weibo.cn/mblog/picAll/J5ZcSnCAg?rl=1': 'tests/testdata/63a98849ec82b2c87ec55bca03cbf5988f7eac233a23d86b4fdf5ffd.html', 'https://weibo.cn/1669879400/profile?page=2': 'tests/testdata/2f62165fa3ca1e85e0d398d385c377a068b76eb95765f7020ffffd3e.html', 'https://weibo.cn/1669879400/profile?page=3': 'tests/testdata/d486235d4a17dd0accb0f2cc77b3648abfa03580b9e0cdb61f1e618f.html', 'https://weibo.cn/mblog/picAll/J3xfm61AZ?rl=1': 'tests/testdata/76233b3f90394581aac6f19cfa5d674a610e8b442b1f83de7673ab49.html', 'https://weibo.cn/comment/J5cVGuUNq': 'tests/testdata/4d5ed0a3ebd0303cb45edd544dbc0ab5e86d43e103405f0c60515884.html', 'https://weibo.cn/1980768563/photo?tf=6_008': 'tests/testdata/e4d541ecb02253c14abc1d52605fc00d91279df9ac4c1465c85b91b3.html', 'https://weibo.cn/album/166564740000001980768563?rl=1': 'tests/testdata/b541fd1751117498b6d6f40d3321686ddf871651237c4ac854a5c3eb.html'}", "url": "'https://weibo.cn/album/166564740000001980768563?rl=1'"}, "Value After Statement Execution": "'tests/testdata/b541fd1751117498b6d6f40d3321686ddf871651237c4ac854a5c3eb.html'", "Variable States During Runtime": {"url": [[1, "'https://weibo.cn/album/166564740000001980768563?rl=1'"]], "headers": [[1, "{'User_Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36', 'Cookie': ''}"]], "f": [[2.0, "<_io.TextIOWrapper name='tests/testdata/url_map.json' mode='r' encoding='UTF-8'>"], [6.0, "<_io.BufferedReader name='tests/testdata/b541fd1751117498b6d6f40d3321686ddf871651237c4ac854a5c3eb.html'>"]], "url_map": [[3.0, "{'https://weibo.cn/1669879400/profile': 'tests/testdata/a4437630f3bdfa2757bae1595186ac063fe5ec25cf2f98116ece83cb.html', 'https://weibo.cn/1669879400/info': 'tests/testdata/ca5f2a555e8d62f728c66fa90afb2d54d19f8c898e164204a61bdf03.html', 'https://weibo.cn/1669879400/profile?page=1': 'tests/testdata/4957814af5a123b82e974b5537dea736dfb34e48d8835203a45d2e67.html', 'https://weibo.cn/mblog/picAll/J6k49kbTc?rl=1': 'tests/testdata/e97222acd5bc7d8d1bfbd3f352f8cad3e36fdd19e40b69e1c33fb3c3.html', 'https://weibo.cn/mblog/picAll/J5ZcSnCAg?rl=1': 'tests/testdata/63a98849ec82b2c87ec55bca03cbf5988f7eac233a23d86b4fdf5ffd.html', 'https://weibo.cn/1669879400/profile?page=2': 'tests/testdata/2f62165fa3ca1e85e0d398d385c377a068b76eb95765f7020ffffd3e.html', 'https://weibo.cn/1669879400/profile?page=3': 'tests/testdata/d486235d4a17dd0accb0f2cc77b3648abfa03580b9e0cdb61f1e618f.html', 'https://weibo.cn/mblog/picAll/J3xfm61AZ?rl=1': 'tests/testdata/76233b3f90394581aac6f19cfa5d674a610e8b442b1f83de7673ab49.html', 'https://weibo.cn/comment/J5cVGuUNq': 'tests/testdata/4d5ed0a3ebd0303cb45edd544dbc0ab5e86d43e103405f0c60515884.html', 'https://weibo.cn/1980768563/photo?tf=6_008': 'tests/testdata/e4d541ecb02253c14abc1d52605fc00d91279df9ac4c1465c85b91b3.html', 'https://weibo.cn/album/166564740000001980768563?rl=1': 'tests/testdata/b541fd1751117498b6d6f40d3321686ddf871651237c4ac854a5c3eb.html'}"]], "resp_file": [[4.0, "'tests/testdata/b541fd1751117498b6d6f40d3321686ddf871651237c4ac854a5c3eb.html'"]], "mock": [[5.0, "<Mock id='140426606241008'>"]]}, "Program Information": "Project Name: dataabc+weiboSpider", "idx": 34, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def find_original_update_blocks(content, fence=DEFAULT_FENCE):\n    # make sure we end with a newline, otherwise the regex will miss <<UPD on the last line\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    pieces = re.split(split_re, content)\n\n    pieces.reverse()\n    processed = []\n\n    # Keep using the same filename in cases where GPT produces an edit block\n    # without a filename.\n    current_filename = None\n    try:\n        while pieces:\n            cur = pieces.pop()\n\n            if cur in (DIVIDER, UPDATED):\n                processed.append(cur)\n                raise ValueError(f\"Unexpected {cur}\")\n\n            if cur.strip() != HEAD:\n                processed.append(cur)\n                continue\n\n            processed.append(cur)  # original_marker\n\n            filename = strip_filename(processed[-2].splitlines()[-1], fence)\n            try:\n                if not filename:\n                    filename = strip_filename(processed[-2].splitlines()[-2], fence)\n                if not filename:\n                    if current_filename:\n                        filename = current_filename\n                    else:\n                        raise ValueError(missing_filename_err)\n            except IndexError:\n                if current_filename:\n                    filename = current_filename\n                else:\n                    raise ValueError(missing_filename_err)\n\n            current_filename = filename\n\n            original_text = pieces.pop()\n            processed.append(original_text)\n\n            divider_marker = pieces.pop()\n            processed.append(divider_marker)\n            if divider_marker.strip() != DIVIDER:\n                raise ValueError(f\"Expected `{DIVIDER}` not {divider_marker.strip()}\")\n\n            updated_text = pieces.pop()\n            processed.append(updated_text)\n\n            updated_marker = pieces.pop()\n            processed.append(updated_marker)\n            if updated_marker.strip() != UPDATED:\n                raise ValueError(f\"Expected `{UPDATED}` not `{updated_marker.strip()}\")\n\n            yield filename, original_text, updated_text\n    except ValueError as e:\n        processed = \"\".join(processed)\n        err = e.args[0]\n        raise ValueError(f\"{processed}\\n^^^ {err}\")\n    except IndexError:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Incomplete SEARCH/REPLACE block.\")\n    except Exception:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Error parsing SEARCH/REPLACE block.\")\n\nfind_original_update_blocks(content='ok', fence=('<source>', '</source>'))", "Selected Statement": "content = content + \"\\n\"", "Function Input": {"content": "'ok'", "fence": "('<source>', '</source>')"}, "Variable Values Before Statement": {"content": "'ok'"}, "Value After Statement Execution": "'ok\\n'", "Variable States During Runtime": {"content": [[1, "'ok'"], [4.0, "'ok\\n'"]], "fence": [[1, "('<source>', '</source>')"]], "pieces": [[6.0, "['ok\\n']"], [16.0, "[]"]], "processed": [[9.0, "[]"], [23.0, "['ok\\n']"]], "current_filename": [[13.0, "None"]], "cur": [[16.0, "'ok\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 35, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def str2datetime(string):\n    \"\"\"\n    Convert a normalized Benthos timestamp to a datetime object\n\n    Parameters\n    ----------\n    string : str\n        String to convert\n    \"\"\"\n\n    if string == \"0000-00-00T24:60:60Z\":\n        return None\n\n    ms = string[20:-1]\n    ms += \"000000\"[:6 - len(ms)]\n    return datetime.datetime(\n        int(string[:4]),\n        int(string[5:7]),\n        int(string[8:10]),\n        int(string[11:13]),\n        int(string[14:16]),\n        int(string[17:19]),\n        int(ms))\n\nstr2datetime(string='1970-01-01T00:00:00.0Z')", "Selected Statement": "ms = string[20:-1]", "Function Input": {"string": "'1970-01-01T00:00:00.0Z'"}, "Variable Values Before Statement": {"string": "'1970-01-01T00:00:00.0Z'"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"string": [[1, "'1970-01-01T00:00:00.0Z'"]], "ms": [[14.0, "'0'"], [15.0, "'000000'"]]}, "Program Information": "Project Name: SkyTruth+gpsd_format", "idx": 36, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def __remove_ip_object(self, ip_object):\n\n        if ip_object not in self.__description:\n            raise IPObjectNotInSpaceError(\n                \"cannot remove undescribed IP object\"\n            )\n\n        if isinstance(ip_object, IPAddressTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            self.__children_ip_object[supernet].remove(ip_object)\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        elif isinstance(ip_object, IPNetworkTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            children_of_supernet = (\n                self.__children_ip_object.setdefault(supernet, set())\n            )\n\n            for child in self.__children_ip_object[ip_object]:\n                self.__parent_supernet[child] = supernet\n                children_of_supernet.add(child)\n\n            del self.__children_ip_object[ip_object]\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        else:\n\n            raise TypeError(\"ip_parameter must be a valid IP object\")\n\n        return True\n\n__remove_ip_object(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_object=IPv4Address('203.0.113.128'), self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "supernet = self.__parent_supernet[ip_object]", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_object": "IPv4Address('203.0.113.128')", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"ip_object": "IPv4Address('203.0.113.128')"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [11.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: set()})"], [12.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"], [13.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_object": [[1, "IPv4Address('203.0.113.128')"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [11.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [13.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [12.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "supernet": [[10.0, "None"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 37, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_idx(ndim, axis=None, axis_idx=None):\n    s = [midx] * ndim\n    if axis is not None:\n        if hasattr(axis, \"__iter__\"):\n            for ax, axidx in zip(axis, axis_idx):\n                s[ax] = axidx\n        else:\n            s[axis] = axis_idx\n    return tuple(s)\n\nget_idx(ndim=1, axis=0, axis_idx=slice(None, -2, None))", "Selected Statement": "s = [midx] * ndim", "Function Input": {"ndim": "1", "axis": "0", "axis_idx": "slice(None, -2, None)"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[slice(1, -1, None)]", "Variable States During Runtime": {"ndim": [[1, "1"]], "axis": [[1, "0"]], "axis_idx": [[1, "slice(None, -2, None)"]], "s": [[2.0, "[slice(1, -1, None)]"], [8.0, "[slice(None, -2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 38, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _test_grad2_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    gu = np.zeros(tuple([n-2]*ndim))\n    gu2 = gu + 2.0\n    for i in range(ndim):\n        for j in range(ndim):\n            if i == j:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu2)\n            else:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad2_nd(n=32, ndim=1)", "Selected Statement": "gu2 = gu + 2.0", "Function Input": {"n": "32", "ndim": "1"}, "Variable Values Before Statement": {"gu": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Value After Statement Execution": "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])", "Variable States During Runtime": {"n": [[1, "32"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "u": [[6.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ucopy": [[7.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "gu": [[10.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "gu2": [[11.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "i": [[12.0, "0"]], "j": [[13.0, "0"]], "@py_assert2": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]], "@py_assert11": [[15.0, "None"]], "@py_assert6": [[15.0, "None"]], "@py_assert1": [[20.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 39, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def forward(source, phi):\n    \"\"\"\n    Obtain the target density distribution given the source distribution and\n    the mapping potential, phi.\n    The mapping from source coordinate, $x$, to the target coordinate, $y$, is\n    given by:\n\n    $$\n    y = x + \\nabla phi(x).\n    $$\n\n    The coordinate in i-th dimension is given by `np.arange(source.shape[i])`.\n\n    Parameters\n    ----------\n    * `source` : numpy.ndarray\n        The source density distribution in n-dimensional array.\n    * `phi` : numpy.ndarray\n        The mapping potential given above. It must have the same shape as\n        `source`.\n\n    Returns\n    -------\n    * numpy.ndarray\n        The target density distribution in n-dimensional array.\n    \"\"\"\n    # convert to np.ndarray\n    source = np.asarray(source)\n    phi = np.asarray(phi)\n    # check the shapes of inputs\n    if source.shape != phi.shape:\n        raise ValueError(\"The source and phi must have the same shape.\")\n\n    # calculate the total potential so that $y = \\nabla u(x)$\n    u0, u, phi_pad = _get_full_potential(phi)\n    ndim = np.ndim(phi)\n\n    # calculate the determinant of the hessian\n    det_hess_s = det_hess(u)\n\n    # get the displacement in (n x D) format\n    x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n    y = np.array([grad(u , axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n\n    # interpolate the values\n    interp = lambda s: griddata(y, s.flatten(), x, \"linear\").reshape(s.shape)\n    target_s = source / det_hess_s\n    target = interp(target_s)\n\n    # fill nan values with zeros\n    target[np.isnan(target)] = 0.0\n    return target\n\nforward(source=array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06]), phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "target_s = source / det_hess_s", "Function Input": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "det_hess_s": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"}, "Value After Statement Execution": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "Variable States During Runtime": {"source": [[1, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "phi_pad": [[35.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "u": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "u0": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "ndim": [[36.0, "1"]], "det_hess_s": [[39.0, "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]], "x": [[42.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "y": [[43.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "interp": [[46.0, "<function forward.<locals>.<lambda> at 0x7fab7f2e3700>"]], "target_s": [[47.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "target": [[48.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 40, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_default_expanded_coordinate(shape, ndim):\n    x_coords = []\n    for i in range(ndim):\n        idx = [None] * ndim\n        idx[i] = slice(None, None, None)\n        x_coords.append(np.arange(shape[i])[tuple(idx)])\n    return x_coords\n\n_get_default_expanded_coordinate(shape=array([102]), ndim=1)", "Selected Statement": "idx = [None] * ndim", "Function Input": {"shape": "array([102])", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[None]", "Variable States During Runtime": {"shape": [[1, "array([102])"]], "ndim": [[1, "1"]], "x_coords": [[2.0, "[]"], [6.0, "[array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101])]"]], "i": [[3.0, "0"]], "idx": [[4.0, "[None]"], [5.0, "[slice(None, None, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 41, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _get_idx(ndim, dim, s, defidx=None):\n    defidx = slice(None, None, None) if defidx is None else defidx\n    idx = [defidx] * ndim\n    idx[dim] = s\n    return tuple(idx)\n\n_get_idx(ndim=1, dim=0, s=slice(1, 2, None), defidx=None)", "Selected Statement": "idx = [defidx] * ndim", "Function Input": {"ndim": "1", "dim": "0", "s": "slice(1, 2, None)", "defidx": "None"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[slice(None, None, None)]", "Variable States During Runtime": {"ndim": [[1, "1"]], "dim": [[1, "0"]], "s": [[1, "slice(1, 2, None)"]], "defidx": [[1, "None"], [2.0, "slice(None, None, None)"]], "idx": [[3.0, "[slice(None, None, None)]"], [4.0, "[slice(1, 2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 42, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _test_forward_nd_slanted_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is slanted on the first dimension, so the target will be shifted\n    # source on the first dimension by A\n    A = n / 6.0\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = xs[0] * A\n    target = sb.forward(source, phi)\n\n    xs2 = np.copy(xs)\n    xs2[0] -= A\n    xs2_sq = reduce(lambda x,y:x+y*y, xs2, 0.0)\n    target_calc = np.exp(-xs2_sq / (2*sigma**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_slanted_pot(n=100, ndim=1, abs=None)", "Selected Statement": "A = n / 6.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {"n": "100"}, "Value After Statement Execution": "16.666666666666668", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [21.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "A": [[8.0, "16.666666666666668"]], "sigma": [[9.0, "3.3333333333333335"]], "source": [[10.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[12.0, "array([-833.33333333, -816.66666667, -800.        , -783.33333333,       -766.66666667, -750.        , -733.33333333, -716.66666667,       -700.        , -683.33333333, -666.66666667, -650.        ,       -633.33333333, -616.66666667, -600.        , -583.33333333,       -566.66666667, -550.        , -533.33333333, -516.66666667,       -500.        , -483.33333333, -466.66666667, -450.        ,       -433.33333333, -416.66666667, -400.        , -383.33333333,       -366.66666667, -350.        , -333.33333333, -316.66666667,       -300.        , -283.33333333, -266.66666667, -250.        ,       -233.33333333, -216.66666667, -200.        , -183.33333333,       -166.66666667, -150.        , -133.33333333, -116.66666667,       -100.        ,  -83.33333333,  -66.66666667,  -50.        ,        -33.33333333,  -16.66666667,    0.        ,   16.66666667,         33.33333333,   50.        ,   66.66666667,   83.33333333,        100.        ,  116.66666667,  133.33333333,  150.        ,        166.66666667,  183.33333333,  200.        ,  216.66666667,        233.33333333,  250.        ,  266.66666667,  283.33333333,        300.        ,  316.66666667,  333.33333333,  350.        ,        366.66666667,  383.33333333,  400.        ,  416.66666667,        433.33333333,  450.        ,  466.66666667,  483.33333333,        500.        ,  516.66666667,  533.33333333,  550.        ,        566.66666667,  583.33333333,  600.        ,  616.66666667,        633.33333333,  650.        ,  666.66666667,  683.33333333,        700.        ,  716.66666667,  733.33333333,  750.        ,        766.66666667,  783.33333333,  800.        ,  816.66666667])"]], "target": [[13.0, "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 4.06920181e-48, 3.20724834e-46, 2.31075854e-44,       1.52188819e-42, 9.16273954e-41, 5.04302641e-39, 2.53740658e-37,       1.16716481e-35, 4.90827418e-34, 1.88708742e-32, 6.63337857e-31,       2.13192075e-29, 6.26492385e-28, 1.68339106e-26, 4.13614560e-25,       9.29322466e-24, 1.90948503e-22, 3.58811078e-21, 6.16647454e-20,       9.69287214e-19, 1.39359494e-17, 1.83279714e-16, 2.20501882e-15,       2.42693184e-14, 2.44387199e-13, 2.25166580e-12, 1.89829483e-11,       1.46449459e-10, 1.03396690e-09, 6.68114154e-09, 3.95139172e-08,       2.13911719e-07, 1.06006637e-06, 4.80920541e-06, 1.99747687e-05,       7.59596517e-05, 2.64484047e-04, 8.43240507e-04, 2.46182046e-03,       6.58155885e-03, 1.61131343e-02, 3.61258608e-02, 7.41733503e-02,       1.39466583e-01, 2.40149955e-01, 3.78685730e-01, 5.46827108e-01,       7.23074611e-01, 8.75512635e-01, 9.70664988e-01, 9.85332494e-01,       9.15755058e-01, 7.79172411e-01, 6.06901959e-01, 4.32718993e-01,       2.82401211e-01, 1.68682641e-01, 9.22119378e-02, 4.61303118e-02,       2.11172721e-02, 8.84527769e-03, 3.38983023e-03, 1.18852559e-03,       3.81219734e-04, 1.11854006e-04, 3.00200330e-05, 7.36935486e-06,       1.65456117e-06, 3.39741645e-07, 6.37978546e-08, 1.09555606e-08,       1.72034467e-09, 2.47019294e-10, 3.24312866e-11, 3.89313794e-12,       4.27290433e-13, 4.28766413e-14, 3.93350717e-15, 3.29905094e-16,       2.52951417e-17, 1.77302216e-18, 1.13608506e-19, 6.65454790e-21])"]], "xs2": [[15.0, "array([[-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,        -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,        -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,        -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,         -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,          5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,         16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,         27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,         38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,         49.]])"], [16.0, "array([[-66.66666667, -65.66666667, -64.66666667, -63.66666667,        -62.66666667, -61.66666667, -60.66666667, -59.66666667,        -58.66666667, -57.66666667, -56.66666667, -55.66666667,        -54.66666667, -53.66666667, -52.66666667, -51.66666667,        -50.66666667, -49.66666667, -48.66666667, -47.66666667,        -46.66666667, -45.66666667, -44.66666667, -43.66666667,        -42.66666667, -41.66666667, -40.66666667, -39.66666667,        -38.66666667, -37.66666667, -36.66666667, -35.66666667,        -34.66666667, -33.66666667, -32.66666667, -31.66666667,        -30.66666667, -29.66666667, -28.66666667, -27.66666667,        -26.66666667, -25.66666667, -24.66666667, -23.66666667,        -22.66666667, -21.66666667, -20.66666667, -19.66666667,        -18.66666667, -17.66666667, -16.66666667, -15.66666667,        -14.66666667, -13.66666667, -12.66666667, -11.66666667,        -10.66666667,  -9.66666667,  -8.66666667,  -7.66666667,         -6.66666667,  -5.66666667,  -4.66666667,  -3.66666667,         -2.66666667,  -1.66666667,  -0.66666667,   0.33333333,          1.33333333,   2.33333333,   3.33333333,   4.33333333,          5.33333333,   6.33333333,   7.33333333,   8.33333333,          9.33333333,  10.33333333,  11.33333333,  12.33333333,         13.33333333,  14.33333333,  15.33333333,  16.33333333,         17.33333333,  18.33333333,  19.33333333,  20.33333333,         21.33333333,  22.33333333,  23.33333333,  24.33333333,         25.33333333,  26.33333333,  27.33333333,  28.33333333,         29.33333333,  30.33333333,  31.33333333,  32.33333333]])"]], "xs2_sq": [[17.0, "array([4.44444444e+03, 4.31211111e+03, 4.18177778e+03, 4.05344444e+03,       3.92711111e+03, 3.80277778e+03, 3.68044444e+03, 3.56011111e+03,       3.44177778e+03, 3.32544444e+03, 3.21111111e+03, 3.09877778e+03,       2.98844444e+03, 2.88011111e+03, 2.77377778e+03, 2.66944444e+03,       2.56711111e+03, 2.46677778e+03, 2.36844444e+03, 2.27211111e+03,       2.17777778e+03, 2.08544444e+03, 1.99511111e+03, 1.90677778e+03,       1.82044444e+03, 1.73611111e+03, 1.65377778e+03, 1.57344444e+03,       1.49511111e+03, 1.41877778e+03, 1.34444444e+03, 1.27211111e+03,       1.20177778e+03, 1.13344444e+03, 1.06711111e+03, 1.00277778e+03,       9.40444444e+02, 8.80111111e+02, 8.21777778e+02, 7.65444444e+02,       7.11111111e+02, 6.58777778e+02, 6.08444444e+02, 5.60111111e+02,       5.13777778e+02, 4.69444444e+02, 4.27111111e+02, 3.86777778e+02,       3.48444444e+02, 3.12111111e+02, 2.77777778e+02, 2.45444444e+02,       2.15111111e+02, 1.86777778e+02, 1.60444444e+02, 1.36111111e+02,       1.13777778e+02, 9.34444444e+01, 7.51111111e+01, 5.87777778e+01,       4.44444444e+01, 3.21111111e+01, 2.17777778e+01, 1.34444444e+01,       7.11111111e+00, 2.77777778e+00, 4.44444444e-01, 1.11111111e-01,       1.77777778e+00, 5.44444444e+00, 1.11111111e+01, 1.87777778e+01,       2.84444444e+01, 4.01111111e+01, 5.37777778e+01, 6.94444444e+01,       8.71111111e+01, 1.06777778e+02, 1.28444444e+02, 1.52111111e+02,       1.77777778e+02, 2.05444444e+02, 2.35111111e+02, 2.66777778e+02,       3.00444444e+02, 3.36111111e+02, 3.73777778e+02, 4.13444444e+02,       4.55111111e+02, 4.98777778e+02, 5.44444444e+02, 5.92111111e+02,       6.41777778e+02, 6.93444444e+02, 7.47111111e+02, 8.02777778e+02,       8.60444444e+02, 9.20111111e+02, 9.81777778e+02, 1.04544444e+03])"]], "target_calc": [[18.0, "array([1.38389653e-87, 5.33736937e-85, 1.88132746e-82, 6.06059172e-80,       1.78434636e-77, 4.80127724e-75, 1.18072268e-72, 2.65370429e-70,       5.45093048e-68, 1.02329831e-65, 1.75568810e-63, 2.75299848e-61,       3.94528221e-59, 5.16729996e-57, 6.18532849e-55, 6.76667568e-53,       6.76552418e-51, 6.18217132e-49, 5.16290482e-47, 3.94058498e-45,       2.74878501e-43, 1.75240444e-41, 1.02103685e-39, 5.43703314e-38,       2.64603779e-36, 1.17691094e-34, 4.78414856e-33, 1.77737558e-31,       6.03486081e-30, 1.87270255e-28, 5.31109225e-27, 1.37661464e-25,       3.26102718e-24, 7.06008534e-23, 1.39694394e-21, 2.52616378e-20,       4.17501006e-19, 6.30618989e-18, 8.70542662e-17, 1.09831413e-15,       1.26641655e-14, 1.33456608e-13, 1.28533723e-12, 1.13137762e-11,       9.10147076e-11, 6.69158609e-10, 4.49634946e-09, 2.76124246e-08,       1.54975314e-07, 7.94939362e-07, 3.72665317e-06, 1.59667839e-05,       6.25215038e-05, 2.23745794e-04, 7.31802419e-04, 2.18749112e-03,       5.97602290e-03, 1.49207861e-02, 3.40474547e-02, 7.10053537e-02,       1.35335283e-01, 2.35746077e-01, 3.75311099e-01, 5.46074427e-01,       7.26149037e-01, 8.82496903e-01, 9.80198673e-01, 9.95012479e-01,       9.23116346e-01, 7.82704538e-01, 6.06530660e-01, 4.29557358e-01,       2.78037300e-01, 1.64474457e-01, 8.89216175e-02, 4.39369336e-02,       1.98410947e-02, 8.18870101e-03, 3.08871541e-03, 1.06476624e-03,       3.35462628e-04, 9.65934137e-05, 2.54193465e-05, 6.11356797e-06,       1.34381228e-06, 2.69957850e-07, 4.95640532e-08, 8.31670246e-09,       1.27540763e-09, 1.78755887e-10, 2.28973485e-11, 2.68054764e-12,       2.86797501e-13, 2.80440474e-14, 2.50622189e-15, 2.04697171e-16,       1.52797997e-17, 1.04240618e-18, 6.49934797e-20, 3.70353198e-21])"]], "@py_assert3": [[22.0, "None"]], "@py_assert7": [[22.0, "None"]], "@py_assert1": [[22.0, "None"]], "@py_assert4": [[25.0, "None"]], "@py_assert6": [[25.0, "None"]], "@py_assert8": [[28.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 43, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _test_forward_nd_quad_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is quadratic on all dimension, so the target will be scaled\n    # source on all dimension by (1+B)\n    B = 1.0\n    scale = 1 + B\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = 0.5*B*xs_sq\n    target = sb.forward(source, phi)\n\n    target_calc = (scale**-ndim)*np.exp(-xs_sq / (2*(sigma*scale)**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_quad_pot(n=100, ndim=1, abs=None)", "Selected Statement": "scale = 1 + B", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {"B": "1.0"}, "Value After Statement Execution": "2.0", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [19.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "B": [[8.0, "1.0"]], "scale": [[9.0, "2.0"]], "sigma": [[10.0, "3.3333333333333335"]], "source": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[12.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[13.0, "array([1.2500e+03, 1.2005e+03, 1.1520e+03, 1.1045e+03, 1.0580e+03,       1.0125e+03, 9.6800e+02, 9.2450e+02, 8.8200e+02, 8.4050e+02,       8.0000e+02, 7.6050e+02, 7.2200e+02, 6.8450e+02, 6.4800e+02,       6.1250e+02, 5.7800e+02, 5.4450e+02, 5.1200e+02, 4.8050e+02,       4.5000e+02, 4.2050e+02, 3.9200e+02, 3.6450e+02, 3.3800e+02,       3.1250e+02, 2.8800e+02, 2.6450e+02, 2.4200e+02, 2.2050e+02,       2.0000e+02, 1.8050e+02, 1.6200e+02, 1.4450e+02, 1.2800e+02,       1.1250e+02, 9.8000e+01, 8.4500e+01, 7.2000e+01, 6.0500e+01,       5.0000e+01, 4.0500e+01, 3.2000e+01, 2.4500e+01, 1.8000e+01,       1.2500e+01, 8.0000e+00, 4.5000e+00, 2.0000e+00, 5.0000e-01,       0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03])"]], "target": [[14.0, "array([3.05096834e-13, 1.53620093e-12, 2.76730504e-12, 1.28535587e-11,       2.29398124e-11, 9.83671882e-11, 1.73794564e-10, 6.88577891e-10,       1.20336122e-09, 4.40917555e-09, 7.61498987e-09, 2.58279429e-08,       4.40408960e-08, 1.38413341e-07, 2.32785786e-07, 6.78656885e-07,       1.12452798e-06, 3.04464007e-06, 4.96475215e-06, 1.24987004e-05,       2.00326487e-05, 4.69534144e-05, 7.38741801e-05, 1.61425945e-04,       2.48977711e-04, 5.07941525e-04, 7.66905340e-04, 1.46291267e-03,       2.15892000e-03, 3.85670914e-03, 5.55449827e-03, 9.30760160e-03,       1.30607049e-02, 2.05640432e-02, 2.80673814e-02, 4.15963220e-02,       5.51252627e-02, 7.70373061e-02, 9.89493495e-02, 1.30637792e-01,       1.62326234e-01, 2.02851181e-01, 2.43376128e-01, 2.88432267e-01,       3.33488405e-01, 3.75561756e-01, 4.17635106e-01, 4.47816923e-01,       4.77998741e-01, 4.88999370e-01, 5.00000000e-01, 4.88999370e-01,       4.77998741e-01, 4.47816923e-01, 4.17635106e-01, 3.75561756e-01,       3.33488405e-01, 2.88432267e-01, 2.43376128e-01, 2.02851181e-01,       1.62326234e-01, 1.30637792e-01, 9.89493495e-02, 7.70373061e-02,       5.51252627e-02, 4.15963220e-02, 2.80673814e-02, 2.05640432e-02,       1.30607049e-02, 9.30760160e-03, 5.55449827e-03, 3.85670914e-03,       2.15892000e-03, 1.46291267e-03, 7.66905340e-04, 5.07941525e-04,       2.48977711e-04, 1.61425945e-04, 7.38741801e-05, 4.69534144e-05,       2.00326487e-05, 1.24987004e-05, 4.96475215e-06, 3.04464007e-06,       1.12452798e-06, 6.78656885e-07, 2.32785786e-07, 1.38413341e-07,       4.40408960e-08, 2.58279429e-08, 7.61498987e-09, 4.40917555e-09,       1.20336122e-09, 6.88577891e-10, 1.73794564e-10, 9.83671882e-11,       2.29398124e-11, 1.28535587e-11, 2.76730504e-12, 1.53620093e-12])"]], "target_calc": [[16.0, "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"]], "@py_assert3": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert1": [[20.0, "None"]], "@py_assert4": [[23.0, "None"]], "@py_assert6": [[23.0, "None"]], "@py_assert8": [[26.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 44, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def get_reporting_config() -> Dict[str, Any]:\n    \"\"\"Get an existing reporting config\"\"\"\n    reporting_config: Dict[str, Any] = {\"consent\": False}\n    try:\n        if not os.path.exists(REPORTING_CONFIG_FILE_PATH):\n            client_id = str(uuid.uuid4())\n            reporting_config[\"client_id\"] = client_id\n            reporting_config = save_reporting_config(True, client_id)\n        else:\n            with open(REPORTING_CONFIG_FILE_PATH, \"r\") as ifp:\n                reporting_config = json.load(ifp)\n\n        # The following changes do NOT mutate the reporting_config.json file on the file system, but\n        # they provide a means to report the username as the client_id (if the username is available)\n        # while tracking the existing client_id as a machine_id.\n        reporting_config[\"machine_id\"] = reporting_config[\"client_id\"]\n\n        if (\n            reporting_config.get(\"username\") is not None\n            and reporting_config[\"client_id\"] != reporting_config[\"username\"]\n        ):\n            reporting_config[\"client_id\"] = reporting_config[\"username\"]\n\n    except Exception:\n        # Not being able to load reporting consent should not get in the user's way. We will just\n        # return the default reporting_config object in which consent is set to False.\n        pass\n    return reporting_config\n\nget_reporting_config()", "Selected Statement": "reporting_config[\"machine_id\"] = reporting_config[\"client_id\"]", "Function Input": {}, "Variable Values Before Statement": {"reporting_config": "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True}"}, "Value After Statement Execution": "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True, 'machine_id': '8728ad25-a15b-4b67-91db-a3a3878aba24'}", "Variable States During Runtime": {"reporting_config": [[3.0, "{'consent': False}"], [11.0, "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True}"], [16.0, "{'client_id': '8728ad25-a15b-4b67-91db-a3a3878aba24', 'consent': True, 'machine_id': '8728ad25-a15b-4b67-91db-a3a3878aba24'}"]], "ifp": [[10.0, "<_io.TextIOWrapper name='/home/XXX/.activeloop/reporting_config.json' mode='r' encoding='UTF-8'>"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 45, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n    \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n\n    defaults = HTYPE_CONFIGURATIONS[htype]\n\n    for key, value in htype_overwrite.items():\n        if key not in defaults:\n            raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n\n        if isinstance(value, str) and value == UNSPECIFIED:\n            if defaults[key] == REQUIRE_USER_SPECIFICATION:\n                raise TensorMetaMissingRequiredValue(htype, key)\n\n    sc = htype_overwrite[\"sample_compression\"]\n    cc = htype_overwrite[\"chunk_compression\"]\n    compr = sc if cc in (None, UNSPECIFIED) else cc\n    actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype\n    if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n        raise TensorMetaMissingRequiredValue(\n            actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n        )\n    if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n        if cc not in (UNSPECIFIED, None):\n            raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n        elif sc == UNSPECIFIED:\n            raise TensorMetaMissingRequiredValue(\n                actual_htype, \"sample_compression\"  # type: ignore\n            )\n    supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)\n    if (\n        compr\n        and compr != UNSPECIFIED\n        and supported_compressions\n        and compr not in supported_compressions\n    ):\n        raise UnsupportedCompressionError(compr, htype=htype)\n\n_validate_htype_overwrites(htype='generic', htype_overwrite={'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "Selected Statement": "sc = htype_overwrite[\"sample_compression\"]", "Function Input": {"htype": "'generic'", "htype_overwrite": "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Variable Values Before Statement": {"htype_overwrite": "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Value After Statement Execution": "'unspecified'", "Variable States During Runtime": {"htype": [[1, "'generic'"]], "htype_overwrite": [[1, "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"]], "defaults": [[4.0, "{'dtype': None, 'sample_compression': None, 'chunk_compression': None, 'typestr': None, 'max_chunk_size': None, 'tiling_threshold': None, 'is_sequence': False, 'is_link': False, 'hidden': False, 'links': None, 'verify': False}"]], "key": [[6.0, "'sample_compression'"], [6.0, "'chunk_compression'"], [6.0, "'dtype'"], [6.0, "'hidden'"], [6.0, "'tiling_threshold'"], [6.0, "'max_chunk_size'"], [6.0, "'is_sequence'"], [6.0, "'is_link'"], [6.0, "'verify'"]], "value": [[6.0, "'unspecified'"], [6.0, "False"], [6.0, "None"], [6.0, "2000000"], [6.0, "False"], [6.0, "True"]], "sc": [[14.0, "'unspecified'"]], "cc": [[15.0, "'unspecified'"]], "compr": [[16.0, "'unspecified'"]], "actual_htype": [[17.0, "'generic'"]], "supported_compressions": [[29.0, "None"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 46, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _format_values(htype: str, htype_overwrite: dict):\n    \"\"\"Replaces values in `htype_overwrite` with consistent types/formats.\"\"\"\n\n    dtype = htype_overwrite[\"dtype\"]\n    if dtype is not None:\n        if htype in (\"json\", \"list\", \"tag\", \"intrinsics\"):\n            if getattr(dtype, \"__module__\", None) == \"typing\":\n                htype_overwrite[\"dtype\"] = str(dtype)\n        else:\n            htype_overwrite[\"dtype\"] = np.dtype(htype_overwrite[\"dtype\"]).name\n\n    for key, value in COMPRESSION_ALIASES.items():\n        if htype_overwrite.get(\"sample_compression\") == key:\n            htype_overwrite[\"sample_compression\"] = value\n        if htype_overwrite.get(\"chunk_compression\") == key:\n            htype_overwrite[\"chunk_compression\"] = value\n\n_format_values(htype='generic', htype_overwrite={'sample_compression': None, 'chunk_compression': None, 'dtype': None, 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "Selected Statement": "dtype = htype_overwrite[\"dtype\"]", "Function Input": {"htype": "'generic'", "htype_overwrite": "{'sample_compression': None, 'chunk_compression': None, 'dtype': None, 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Variable Values Before Statement": {"htype_overwrite": "{'sample_compression': None, 'chunk_compression': None, 'dtype': None, 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"htype": [[1, "'generic'"]], "htype_overwrite": [[1, "{'sample_compression': None, 'chunk_compression': None, 'dtype': None, 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"]], "dtype": [[4.0, "None"]], "key": [[12.0, "'jpg'"], [12.0, "'tif'"], [12.0, "'jp2'"]], "value": [[12.0, "'jpeg'"], [12.0, "'tiff'"], [12.0, "'jpeg2000'"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 47, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def serialize_chunkids(version: str, arr: np.ndarray) -> memoryview:\n    \"\"\"Serializes chunk ID encoders into a single byte stream. This is how the encoders will be written to the storage provider.\n\n    Args:\n        version: (str) Version of deeplake library.\n        arr: (np.ndarray) Encoded chunk ids from a `ChunkIdEncoder` instance.\n\n    Returns:\n        Serialized chunk ids as memoryview.\n    \"\"\"\n    len_version = len(version)\n    write_dtype = version_compare(version, \"2.7.6\") >= 0\n    flatbuff = bytearray(1 + int(write_dtype) + len_version + arr.nbytes)\n\n    # Write version\n    len_version = len(version)\n    flatbuff[0] = len_version\n    flatbuff[1 : 1 + len_version] = version.encode(\"ascii\")\n    offset = 1 + len_version\n\n    # write encoder dtype\n    if write_dtype:\n        dtype = arr.dtype\n        num_bytes = int(dtype.itemsize)\n        flatbuff[offset] = num_bytes\n        offset += 1\n\n    # Write ids\n    flatbuff[offset : offset + arr.nbytes] = arr.tobytes()\n    offset += arr.nbytes\n    return memoryview(flatbuff)\n\nserialize_chunkids(version='3.8.18', arr=array([], shape=(0, 2), dtype=uint64))", "Selected Statement": "offset = 1 + len_version", "Function Input": {"version": "'3.8.18'", "arr": "array([], shape=(0, 2), dtype=uint64)"}, "Variable Values Before Statement": {"len_version": "6"}, "Value After Statement Execution": "7", "Variable States During Runtime": {"version": [[1, "'3.8.18'"]], "arr": [[1, "array([], shape=(0, 2), dtype=uint64)"]], "len_version": [[11.0, "6"]], "write_dtype": [[12.0, "True"]], "flatbuff": [[13.0, "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [17.0, "bytearray(b'\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [18.0, "bytearray(b'\\x063.8.18\\x00')"], [25.0, "bytearray(b'\\x063.8.18\\x08')"]], "offset": [[19.0, "7"], [26.0, "8"]], "dtype": [[23.0, "dtype('uint64')"]], "num_bytes": [[24.0, "8"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 48, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def cheat_create_rack_word(self, word, player_id):\n        player_rack = self.player_rack_list[player_id]\n        for character in word:\n            tile = scrabble_board.ScrabbleTile(letter=character)\n            player_rack.append(tile)\n\ncheat_create_rack_word(self=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0, word='BAKER', player_id=0, self.board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, self.move_number=0, self.player_rack_list=[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]], self.player_score_list_list=[[], [], [], []], self.tile_bag=[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y])", "Selected Statement": "player_rack = self.player_rack_list[player_id]", "Function Input": {"self": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0", "word": "'BAKER'", "player_id": "0", "self.board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "self.move_number": "0", "self.player_rack_list": "[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]", "self.player_score_list_list": "[[], [], [], []]", "self.tile_bag": "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"}, "Variable Values Before Statement": {"player_id": "0"}, "Value After Statement Execution": "[Q, E, O, S, G, H, E]", "Variable States During Runtime": {"self": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [5.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [5.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [5.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [5.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [5.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"]], "word": [[1, "'BAKER'"]], "player_id": [[1, "0"]], "self.board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "self.move_number": [[1, "0"]], "self.player_rack_list": [[1, "[[Q, E, O, S, G, H, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [5.0, "[[Q, E, O, S, G, H, E, B], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [5.0, "[[Q, E, O, S, G, H, E, B, A], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [5.0, "[[Q, E, O, S, G, H, E, B, A, K], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [5.0, "[[Q, E, O, S, G, H, E, B, A, K, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [5.0, "[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"]], "self.player_score_list_list": [[1, "[[], [], [], []]"]], "self.tile_bag": [[1, "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"]], "player_rack": [[2.0, "[Q, E, O, S, G, H, E]"], [5.0, "[Q, E, O, S, G, H, E, B]"], [5.0, "[Q, E, O, S, G, H, E, B, A]"], [5.0, "[Q, E, O, S, G, H, E, B, A, K]"], [5.0, "[Q, E, O, S, G, H, E, B, A, K, E]"], [5.0, "[Q, E, O, S, G, H, E, B, A, K, E, R]"]], "character": [[3.0, "'B'"], [3.0, "'A'"], [3.0, "'K'"], [3.0, "'E'"], [3.0, "'R'"]], "tile": [[4.0, "B"], [4.0, "A"], [4.0, "K"], [4.0, "E"], [4.0, "R"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 49, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "hs = df2['h']", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"df2": "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"}, "Value After Statement Execution": "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 50, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def parse_special_command(sql):\n    command, _, arg = sql.partition(' ')\n    verbose = '+' in command\n    command = command.strip().replace('+', '')\n    return (command, verbose, arg.strip())\n\nparse_special_command(sql='\\\\. ')", "Selected Statement": "verbose = '+' in command", "Function Input": {"sql": "'\\\\. '"}, "Variable Values Before Statement": {"command": "'\\\\.'"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"sql": [[1, "'\\\\. '"]], "command": [[2.0, "'\\\\.'"]], "_": [[2.0, "' '"]], "arg": [[2.0, "''"]], "verbose": [[3.0, "False"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 51, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def strip_matching_quotes(s):\n    \"\"\"Remove matching, surrounding quotes from a string.\n\n    This is the same logic that ConfigObj uses when parsing config\n    values.\n\n    \"\"\"\n    if (isinstance(s, basestring) and len(s) >= 2 and\n            s[0] == s[-1] and s[0] in ('\"', \"'\")):\n        s = s[1:-1]\n    return s\n\nstrip_matching_quotes(s='\"May the force be with you.\"')", "Selected Statement": "s = s[1:-1]", "Function Input": {"s": "'\"May the force be with you.\"'"}, "Variable Values Before Statement": {"s": "'\"May the force be with you.\"'"}, "Value After Statement Execution": "'May the force be with you.'", "Variable States During Runtime": {"s": [[1, "'\"May the force be with you.\"'"], [10.0, "'May the force be with you.'"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 52, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def glob_absolute_paths(file: Union[str, Path]) -> List[Path]:\n            path = Path(file)\n            if not path.is_absolute():\n                path = base / path\n            return sorted(path.parent.glob(path.name), key=lambda p: p.stem)\n\nglob_absolute_paths(file='aggrid.js', base=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements'))", "Selected Statement": "path = base / path", "Function Input": {"file": "'aggrid.js'", "base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"}, "Variable Values Before Statement": {"base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')", "path": "PosixPath('aggrid.js')"}, "Value After Statement Execution": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')", "Variable States During Runtime": {"file": [[1, "'aggrid.js'"]], "base": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"]], "path": [[2.0, "PosixPath('aggrid.js')"], [4.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 53, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def show_android_class_methods(args: list = None) -> None:\n    \"\"\"\n        Shows the methods available on an Android class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: android hooking list class_methods <class name>', bold=True)\n        return\n\n    class_name = args[0]\n\n    api = state_connection.get_api()\n    methods = api.android_hooking_get_class_methods(class_name)\n\n    # print the enumerated classes\n    for class_name in sorted(methods):\n        click.secho(class_name)\n\n    click.secho('\\nFound {0} method(s)'.format(len(methods)), bold=True)\n\nshow_android_class_methods(args=['com.foo.bar'])", "Selected Statement": "class_name = args[0]", "Function Input": {"args": "['com.foo.bar']"}, "Variable Values Before Statement": {"args": "['com.foo.bar']"}, "Value After Statement Execution": "'com.foo.bar'", "Variable States During Runtime": {"args": [[1, "['com.foo.bar']"]], "class_name": [[13.0, "'com.foo.bar'"], [19.0, "'bar'"], [19.0, "'baz'"], [19.0, "'foo'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041905108928'>"]], "methods": [[16.0, "['foo', 'bar', 'baz']"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 54, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def show_ios_class_methods(args: list) -> None:\n    \"\"\"\n        Displays the methods available in a class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: ios hooking list class_methods <class name> (--include-parents)', bold=True)\n        return\n\n    classname = args[0]\n\n    api = state_connection.get_api()\n    methods = api.ios_hooking_get_class_methods(classname, _should_include_parent_methods(args))\n\n    if len(methods) > 0:\n\n        # dump the methods to screen\n        for method in methods:\n            click.secho(method)\n\n        click.secho('\\nFound {0} methods'.format(len(methods)), bold=True)\n\n    else:\n        click.secho('No class / methods found')\n\nshow_ios_class_methods(args=['TEKeychainManager'])", "Selected Statement": "classname = args[0]", "Function Input": {"args": "['TEKeychainManager']"}, "Variable Values Before Statement": {"args": "['TEKeychainManager']"}, "Value After Statement Execution": "'TEKeychainManager'", "Variable States During Runtime": {"args": [[1, "['TEKeychainManager']"]], "classname": [[13.0, "'TEKeychainManager'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041837197248'>"]], "methods": [[16.0, "['foo', 'bar']"]], "method": [[21.0, "'foo'"], [21.0, "'bar'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 55, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def cat(args: list = None) -> None:\n    \"\"\"\n        Parses a plist on an iOS device and echoes it in a more human\n        readable way.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios plist cat <remote_plist>', bold=True)\n        return\n\n    plist = args[0]\n\n    if not os.path.isabs(plist):\n        pwd = filemanager.pwd()\n        plist = device_state.platform.path_separator.join([pwd, plist])\n\n    api = state_connection.get_api()\n    plist_data = api.ios_plist_read(plist)\n\n    click.secho(plist_data, bold=True)\n\ncat(args=['/foo'])", "Selected Statement": "plist = args[0]", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"args": "['/foo']"}, "Value After Statement Execution": "'/foo'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "plist": [[14.0, "'/foo'"]], "api": [[20.0, "<MagicMock name='get_api()' id='140041837108288'>"]], "plist_data": [[21.0, "'foo'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 56, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def cd(args: list) -> None:\n    \"\"\"\n        Change the current working directory of the device.\n\n        While this method does not actually change any directories,\n        it simply updates the value in the file_manager_state property\n        that keeps record of the current directory.\n\n        Before changing directories though, some checks are performed\n        on the device to at least ensure that the destination directory\n        exists.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: cd <destination directory>', bold=True)\n        return\n\n    path = args[0]\n    current_dir = pwd()\n\n    # nothing to do\n    if path == '.':\n        return\n\n    # moving one directory back\n    if path == '..':\n\n        split_path = os.path.split(current_dir)\n\n        # nothing to do if we are already at root\n        if len(split_path) == 1:\n            return\n\n        new_path = ''.join(split_path[:-1])\n        click.secho(new_path, fg='green', bold=True)\n\n        file_manager_state.cwd = new_path\n\n        return\n\n    # if we got an absolute path, check if the path\n    # actually exists, and then cd to it if we can\n    if os.path.isabs(path):\n\n        # assume the path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(path, fg='green', bold=True)\n\n            file_manager_state.cwd = path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(path), fg='red')\n\n    # directory is not absolute, tack it on at the end and\n    # see if its legit.\n    else:\n\n        proposed_path = device_state.platform.path_separator.join([current_dir, path])\n\n        # assume the proposed_path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(proposed_path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(proposed_path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(proposed_path, fg='green', bold=True)\n\n            file_manager_state.cwd = proposed_path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(proposed_path), fg='red')\n\ncd(args=['/foo/bar/baz'])", "Selected Statement": "path = args[0]", "Function Input": {"args": "['/foo/bar/baz']"}, "Variable Values Before Statement": {"args": "['/foo/bar/baz']"}, "Value After Statement Execution": "'/foo/bar/baz'", "Variable States During Runtime": {"args": [[1, "['/foo/bar/baz']"]], "path": [[21.0, "'/foo/bar/baz'"]], "current_dir": [[22.0, "'/foo'"]], "does_exist": [[49.0, "False"], [56.0, "True"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 57, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def rm(args: list) -> None:\n    \"\"\"\n        Remove a file from the remote filesystem.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) < 1:\n        click.secho('Usage: rm <target remote file>', bold=True)\n        return\n\n    target = args[0]\n\n    if not os.path.isabs(target):\n        target = device_state.platform.path_separator.join([pwd(), target])\n\n    if not click.confirm('Really delete {0} ?'.format(target)):\n        click.secho('Not deleting {0}'.format(target), dim=True)\n        return\n\n    if device_state.platform == Ios:\n        _rm_ios(target)\n\n    if device_state.platform == Android:\n        _rm_android(target)\n\nrm(args='/poo')", "Selected Statement": "target = args[0]", "Function Input": {"args": "'/poo'"}, "Variable Values Before Statement": {"args": "'/poo'"}, "Value After Statement Execution": "'/'", "Variable States During Runtime": {"args": [[1, "'/poo'"]], "target": [[13.0, "'/'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 58, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def dump_all(args: list) -> None:\n    \"\"\"\n        Dump memory from the currently injected process.\n        Loosely based on:\n            https://github.com/Nightbringer21/fridump\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: memory dump all <local destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    destination = args[0]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Continue, appending to the file?'):\n            return\n\n    # access type used when enumerating ranges\n    access = 'rw-'\n\n    api = state_connection.get_api()\n    ranges = api.memory_list_ranges(access)\n\n    total_size = sum([x['size'] for x in ranges])\n    click.secho('Will dump {0} {1} images, totalling {2}'.format(\n        len(ranges), access, sizeof_fmt(total_size)), fg='green', dim=True)\n\n    with click.progressbar(ranges) as bar:\n        for image in bar:\n            dump = bytearray()\n            bar.label = 'Dumping {0} from base: {1}'.format(sizeof_fmt(image['size']), hex(int(image['base'], 16)))\n\n            # catch and exception thrown while dumping.\n            # this could for a few reasons like if the protection\n            # changes or the range is reallocated\n            try:\n                # grab the (size) bytes starting at the (base_address) in chunks of BLOCK_SIZE\n                chunks = _get_chunks(int(image['base'], 16), int(image['size']), BLOCK_SIZE)\n                for chunk in chunks:\n                    dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n            except Exception as e:\n                continue\n\n            # append the results to the destination file\n            with open(destination, 'ab') as f:\n                f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_all(args=['/foo'])", "Selected Statement": "destination = args[0]", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"args": "['/foo']"}, "Value After Statement Execution": "'/foo'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "destination": [[16.0, "'/foo'"]], "access": [[25.0, "'rw-'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041837128480'>"]], "ranges": [[28.0, "[{'size': 100, 'base': '0x7fff90800000'}]"]], "total_size": [[30.0, "100"]], "bar": [[34.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"], [37.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='Dumping 100.0 B from base: 0x7fff90800000', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"]], "image": [[35.0, "{'size': 100, 'base': '0x7fff90800000'}"]], "dump": [[36.0, "bytearray(b'')"], [46.0, "bytearray(b'\\x00')"]], "chunks": [[44.0, "[(140735617695744, 100)]"]], "chunk": [[45.0, "(140735617695744, 100)"]], "f": [[52.0, "<MagicMock name='open().__enter__()' id='140041837437520'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 59, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def dump_from_base(args: list) -> None:\n    \"\"\"\n        Dump memory from a base address for a specific size to file\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) < 3:\n        click.secho('Usage: memory dump from_base <base_address> <size_to_dump> <local_destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    base_address = args[0]\n    memory_size = args[1]\n    destination = args[2]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Override?'):\n            return\n\n    click.secho('Dumping {0} from {1} to {2}'.format(sizeof_fmt(int(memory_size)), base_address, destination),\n                fg='green', dim=True)\n\n    api = state_connection.get_api()\n\n    # iirc, if you don't cast the return type to a bytearray it uses the sizeof(int) per cell, which is massive\n    dump = bytearray()\n    chunks = _get_chunks(int(base_address, 16), int(memory_size), BLOCK_SIZE)\n    for chunk in chunks:\n        dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n    # append the results to the destination file\n    with open(destination, 'wb') as f:\n        f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_from_base(args=['0x00008000', '200', '/foo'])", "Selected Statement": "base_address = args[0]", "Function Input": {"args": "['0x00008000', '200', '/foo']"}, "Variable Values Before Statement": {"args": "['0x00008000', '200', '/foo']"}, "Value After Statement Execution": "'0x00008000'", "Variable States During Runtime": {"args": [[1, "['0x00008000', '200', '/foo']"]], "base_address": [[14.0, "'0x00008000'"]], "memory_size": [[15.0, "'200'"]], "destination": [[16.0, "'/foo'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041905169216'>"]], "dump": [[30.0, "bytearray(b'')"], [33.0, "bytearray(b'\\x00')"]], "chunks": [[31.0, "[(32768, 200)]"]], "chunk": [[32.0, "(32768, 200)"]], "f": [[36.0, "<MagicMock name='open().__enter__()' id='140041907062336'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 60, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def ios_screenshot(args: list = None) -> None:\n    \"\"\"\n        Take an iOS screenshot.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios ui screenshot <local png destination>', bold=True)\n        return\n\n    destination = args[0]\n\n    if not destination.endswith('.png'):\n        destination = destination + '.png'\n\n    api = state_connection.get_api()\n    png = api.ios_ui_screenshot()\n\n    with open(destination, 'wb') as f:\n        f.write(png)\n\n    click.secho('Screenshot saved to: {0}'.format(destination), fg='green')\n\nios_screenshot(args=['foo'])", "Selected Statement": "destination = args[0]", "Function Input": {"args": "['foo']"}, "Variable Values Before Statement": {"args": "['foo']"}, "Value After Statement Execution": "'foo'", "Variable States During Runtime": {"args": [[1, "['foo']"]], "destination": [[13.0, "'foo'"], [16.0, "'foo.png'"]], "api": [[18.0, "<MagicMock name='get_api()' id='140041828273504'>"]], "png": [[19.0, "b'\\x00'"]], "f": [[21.0, "<MagicMock name='open().__enter__()' id='140041828431664'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 61, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def rsa(text, pubkey, modulus):\n    text = text[::-1]\n    rs = pow(int(binascii.hexlify(text), 16), int(pubkey, 16), int(modulus, 16))\n    return format(rs, \"x\").zfill(256)\n\nrsa(text=b'8f0f5370d2e586d8', pubkey='010001', modulus='00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7')", "Selected Statement": "text = text[::-1]", "Function Input": {"text": "b'8f0f5370d2e586d8'", "pubkey": "'010001'", "modulus": "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"}, "Variable Values Before Statement": {"text": "b'8f0f5370d2e586d8'"}, "Value After Statement Execution": "b'8d685e2d0735f0f8'", "Variable States During Runtime": {"text": [[1, "b'8f0f5370d2e586d8'"], [2.0, "b'8d685e2d0735f0f8'"]], "pubkey": [[1, "'010001'"]], "modulus": [[1, "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"]], "rs": [[3.0, "41289025236364532763659893484694654271957746525301846225496173810914971221673940219469794803075175772641409601769538690249948382654879184221263545282891541468281379611086448019401240456345998524768441427254251530526498242614378789439179129682525095499524622736788988351523341804681052326293260583730641212123"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 62, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def sample(logits: torch.Tensor, temperature: float = 1.0, top_k: Optional[int] = None) -> torch.Tensor:\n    logits = logits[0, -1]\n    # optionally crop the logits to only the top k options\n    if top_k is not None:\n        v, i = torch.topk(logits, min(top_k, logits.size(-1)))\n        # do not use `torch.where` as in nanogpt because it will repeat top-k collisions\n        logits = torch.full_like(logits, float(\"-inf\")).scatter_(-1, i, v)\n    # optionally scale the logits and sample from a probability distribution\n    if temperature > 0.0:\n        probs = torch.nn.functional.softmax(logits / temperature, dim=-1)\n        return multinomial_num_samples_1(probs)\n    return torch.argmax(logits, dim=-1, keepdim=True)\n\nsample(logits=tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0'), temperature=0.8, top_k=None)", "Selected Statement": "logits = logits[0, -1]", "Function Input": {"logits": "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')", "temperature": "0.8", "top_k": "None"}, "Variable Values Before Statement": {"logits": "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')"}, "Value After Statement Execution": "tensor([ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539, -0.2213],       device", "Variable States During Runtime": {"logits": [[1, "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')"], [2.0, "tensor([ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539, -0.2213],       device='cuda:0')"]], "temperature": [[1, "0.8"]], "top_k": [[1, "None"]], "probs": [[10.0, "tensor([0.2101, 0.0732, 0.1800, 0.1411, 0.0362, 0.0316, 0.2456, 0.0823],       device='cuda:0')"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 63, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def bits2octets(data, order):\n    z1 = bits2int(data, bit_length(order))\n    z2 = z1 - order\n\n    if z2 < 0:\n        z2 = z1\n\n    return number_to_string_crop(z2, order)\n\nbits2octets(data=b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee', order=115792089237316195423570985008687907852837564279074904382605163141518161494337)", "Selected Statement": "z2 = z1 - order", "Function Input": {"data": "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Variable Values Before Statement": {"z1": "75648987130760998095283026105289635390775519882394219481699348731002280779365", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Value After Statement Execution": "-40143102106555197328287958903398272462062044396680684900905814410515880714972", "Variable States During Runtime": {"data": [[1, "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'"]], "order": [[1, "115792089237316195423570985008687907852837564279074904382605163141518161494337"]], "z1": [[2.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]], "z2": [[3.0, "-40143102106555197328287958903398272462062044396680684900905814410515880714972"], [6.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 64, "quantized value": "Negative Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def div(self, other, precision=18):\n        distance = precision - self.decimals + other.decimals\n        if distance == 0:\n            numerator = self.integer\n        elif distance < 0:\n            exponent = self.base ** -distance\n            numerator = self.integer // exponent\n        else:\n            exponent = self.base ** distance\n            numerator = self.integer * exponent\n        result, mod = divmod(numerator, other.integer)\n        # python floors negative numbers down instead of truncating\n        # if mod is zero it will be floored to itself so we do not add one\n        result = result + 1 if result < 0 and mod else result\n        return Precise(result, precision)\n\ndiv(self=Precise(0.00000002), other=Precise(69696900000), precision=1, self.base=10, self.decimals=8, self.integer=2)", "Selected Statement": "numerator = self.integer // exponent", "Function Input": {"self": "Precise(0.00000002)", "other": "Precise(69696900000)", "precision": "1", "self.base": "10", "self.decimals": "8", "self.integer": "2"}, "Variable Values Before Statement": {"exponent": "1000000000000"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "Precise(0.00000002)"]], "other": [[1, "Precise(69696900000)"]], "precision": [[1, "1"]], "self.base": [[1, "10"]], "self.decimals": [[1, "8"]], "self.integer": [[1, "2"]], "distance": [[2.0, "-12"]], "exponent": [[6.0, "1000000000000"]], "numerator": [[7.0, "0"]], "result": [[11.0, "0"]], "mod": [[11.0, "0"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 65, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _to_str(size, suffixes, base):\n    # type: (SupportsInt, Iterable[Text], int) -> Text\n    try:\n        size = int(size)\n    except ValueError:\n        raise TypeError(\"filesize requires a numeric value, not {!r}\".format(size))\n    if size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return \"{:,} bytes\".format(size)\n\n    for i, suffix in enumerate(suffixes, 2):\n        unit = base ** i\n        if size < unit:\n            break\n    return \"{:,.1f} {}\".format((base * size / unit), suffix)\n\n_to_str(size=1024, suffixes=('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'), base=1024)", "Selected Statement": "unit = base ** i", "Function Input": {"size": "1024", "suffixes": "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')", "base": "1024"}, "Variable Values Before Statement": {"base": "1024", "i": "2"}, "Value After Statement Execution": "1048576", "Variable States During Runtime": {"size": [[1, "1024"]], "suffixes": [[1, "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')"]], "base": [[1, "1024"]], "i": [[12.0, "2"]], "suffix": [[12.0, "'KiB'"]], "unit": [[13.0, "1048576"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 66, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def quat_from_axis_angle(axis, angle):\n        axis_ = np.array(axis, dtype=np.float64)\n        half_angle = angle * 0.5\n        ret = np.empty(4)\n        ret[0] = math.cos(half_angle)\n        ret[1:4] = math.sin(half_angle) * axis_\n        return ret\n\nquat_from_axis_angle(axis=[1.0, 0.0, 0.0], angle=6.1086523819801535)", "Selected Statement": "half_angle = angle * 0.5", "Function Input": {"axis": "[1.0, 0.0, 0.0]", "angle": "6.1086523819801535"}, "Variable Values Before Statement": {"angle": "6.1086523819801535"}, "Value After Statement Execution": "3.0543261909900767", "Variable States During Runtime": {"axis": [[1, "[1.0, 0.0, 0.0]"]], "angle": [[1, "6.1086523819801535"]], "axis_": [[2.0, "array([1., 0., 0.])"]], "half_angle": [[3.0, "3.0543261909900767"]], "ret": [[4.0, "array([4.65265954e-310, 0.00000000e+000, 1.58101007e-322, 6.90572610e-310])"], [5.0, "array([-9.96194698e-001,  0.00000000e+000,  1.58101007e-322,        6.90572610e-310])"], [6.0, "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])"]]}, "Program Information": "Project Name: Hasenpfote+fpq", "idx": 67, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Assignment", "Source Code": "def _clean_unicode(url: str) -> str:\n    \"\"\"Clean up URLs, which use punycode to handle unicode chars.\n\n    Applies percent encoding to URL path and query if required.\n\n    Parameters\n    ----------\n    url : str\n        URL that should be cleaned from unicode\n\n    Returns\n    -------\n    str\n        Cleaned URL\n\n    \"\"\"\n    urllist = list(urlsplit(url))\n    netloc = urllist[1]\n    if _has_unicode(netloc):\n        domains = netloc.split(\".\")\n        for i, d in enumerate(domains):\n            if _has_unicode(d):\n                d = \"xn--\" + d.encode(\"punycode\").decode(\"ascii\")\n                domains[i] = d\n        urllist[1] = \".\".join(domains)\n        url = urlunsplit(urllist)\n\n    # Clean up path/query/params, which use url-encoding to handle unicode chars\n    chars = list(url)\n    for i, x in enumerate(chars):\n        if ord(x) > 128:\n            chars[i] = quote(x)\n\n    return \"\".join(chars)\n\n_clean_unicode(url='http://example.com/test?type=2&ie=utf8&query=汉字')", "Selected Statement": "netloc = urllist[1]", "Function Input": {"url": "'http://example.com/test?type=2&ie=utf8&query=汉字'"}, "Variable Values Before Statement": {"urllist": "['http', 'example.com', '/test', 'type=2&ie=utf8&query=汉字', '']"}, "Value After Statement Execution": "'example.com'", "Variable States During Runtime": {"url": [[1, "'http://example.com/test?type=2&ie=utf8&query=汉字'"]], "urllist": [[17.0, "['http', 'example.com', '/test', 'type=2&ie=utf8&query=汉字', '']"]], "netloc": [[18.0, "'example.com'"]], "chars": [[29.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '汉', '字']"], [32.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '字']"], [32.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '%E5%AD%97']"]], "i": [[30.0, "0"], [30.0, "1"], [30.0, "2"], [30.0, "3"], [30.0, "4"], [30.0, "5"], [30.0, "6"], [30.0, "7"], [30.0, "8"], [30.0, "9"], [30.0, "10"], [30.0, "11"], [30.0, "12"], [30.0, "13"], [30.0, "14"], [30.0, "15"], [30.0, "16"], [30.0, "17"], [30.0, "18"], [30.0, "19"], [30.0, "20"], [30.0, "21"], [30.0, "22"], [30.0, "23"], [30.0, "24"], [30.0, "25"], [30.0, "26"], [30.0, "27"], [30.0, "28"], [30.0, "29"], [30.0, "30"], [30.0, "31"], [30.0, "32"], [30.0, "33"], [30.0, "34"], [30.0, "35"], [30.0, "36"], [30.0, "37"], [30.0, "38"], [30.0, "39"], [30.0, "40"], [30.0, "41"], [30.0, "42"], [30.0, "43"], [30.0, "44"], [30.0, "45"], [30.0, "46"]], "x": [[30.0, "'h'"], [30.0, "'t'"], [30.0, "'p'"], [30.0, "':'"], [30.0, "'/'"], [30.0, "'e'"], [30.0, "'x'"], [30.0, "'a'"], [30.0, "'m'"], [30.0, "'p'"], [30.0, "'l'"], [30.0, "'e'"], [30.0, "'.'"], [30.0, "'c'"], [30.0, "'o'"], [30.0, "'m'"], [30.0, "'/'"], [30.0, "'t'"], [30.0, "'e'"], [30.0, "'s'"], [30.0, "'t'"], [30.0, "'?'"], [30.0, "'t'"], [30.0, "'y'"], [30.0, "'p'"], [30.0, "'e'"], [30.0, "'='"], [30.0, "'2'"], [30.0, "'&'"], [30.0, "'i'"], [30.0, "'e'"], [30.0, "'='"], [30.0, "'u'"], [30.0, "'t'"], [30.0, "'f'"], [30.0, "'8'"], [30.0, "'&'"], [30.0, "'q'"], [30.0, "'u'"], [30.0, "'e'"], [30.0, "'r'"], [30.0, "'y'"], [30.0, "'='"], [30.0, "'汉'"], [30.0, "'字'"]]}, "Program Information": "Project Name: getsentry+responses", "idx": 68, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def secrets_dir(env=os.getenv('D2_ENVIRONMENT', None),\n                basedir=os.getenv('D2_SECRETS_BASEDIR', None)):\n    if env is not None:\n        env_str = str(env)\n    else:\n        cwd = os.getcwd()\n        default_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(default_file):\n            with open(default_file, 'r') as f:\n                env_str = f.read().strip()\n        else:\n            env_str = os.path.basename(cwd)\n    if basedir is None:\n        basedir = os.path.join(\n                HOME,\n                'secrets' if sys.platform.startswith('win') else '.secrets')\n    return os.path.join(basedir, env_str)\n\nsecrets_dir(env=None, basedir=None)", "Selected Statement": "if basedir is None:", "Function Input": {"env": "None", "basedir": "None"}, "Variable Values Before Statement": {"basedir": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"env": [[1, "None"]], "basedir": [[1, "None"], [14.0, "'/home/XXX/.secrets'"]], "cwd": [[6.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "default_file": [[7.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]], "env_str": [[12.0, "'davedittrich+python_secrets'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 69, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _identify_environment(environment=None):\n    \"\"\"\n    Returns the environment identifier.\n\n    There are multiple ways to define the default environment (in order\n    of priority):\n\n    1. The --environment command line option;\n    2. The content of the file .python_secrets_environment in the current\n       working directory;\n    3. The value specified by environment variable D2_ENVIRONMENT; or\n    4. The basename of the current working directory.\n    \"\"\"\n    cwd = os.getcwd()\n    if environment is None:\n        env_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(env_file):\n            with open(env_file, 'r') as f:\n                environment = f.read().replace('\\n', '')\n        else:\n            environment = os.getenv('D2_ENVIRONMENT',\n                                    os.path.basename(cwd))\n    return environment\n\n_identify_environment(environment=None)", "Selected Statement": "if environment is None:", "Function Input": {"environment": "None"}, "Variable Values Before Statement": {"environment": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"environment": [[1, "None"], [21.0, "'davedittrich+python_secrets'"]], "cwd": [[14.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "env_file": [[16.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 70, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def find(lst, key, value):\n    for i, dic in enumerate(lst):\n        if dic[key] == value:\n            return i\n    return None\n\nfind(lst=[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}], key='Variable', value='something_not_there')", "Selected Statement": "if dic[key] == value:", "Function Input": {"lst": "[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}]", "key": "'Variable'", "value": "'something_not_there'"}, "Variable Values Before Statement": {"value": "'something_not_there'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"lst": [[1, "[{'Variable': 'jenkins_admin_password', 'Type': 'password'}, {'Variable': 'ca_rootca_password', 'Type': 'password'}]"]], "key": [[1, "'Variable'"]], "value": [[1, "'something_not_there'"]], "i": [[2.0, "0"], [2.0, "1"]], "dic": [[2.0, "{'Variable': 'jenkins_admin_password', 'Type': 'password'}"], [2.0, "{'Variable': 'ca_rootca_password', 'Type': 'password'}"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 71, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def mknode(id=None, ip=None, port=None, intid=None):\n    \"\"\"\n    Make a node.  Created a random id if not specified.\n    \"\"\"\n    if intid is not None:\n        id = pack('>l', intid)\n    id = id or hashlib.sha1(str(random.getrandbits(255))).digest()\n    return Node(id, ip, port)\n\nmknode(id=None, ip=None, port=None, intid=0)", "Selected Statement": "if intid is not None:", "Function Input": {"id": "None", "ip": "None", "port": "None", "intid": "0"}, "Variable Values Before Statement": {"intid": "0"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"id": [[1, "None"], [6.0, "b'\\x00\\x00\\x00\\x00'"]], "ip": [[1, "None"]], "port": [[1, "None"]], "intid": [[1, "0"]]}, "Program Information": "Project Name: Storj+storjkademlia", "idx": 72, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _normalize_proxies(proxies):\n    \"\"\"Normalize user-supplied `proxies`:\n\n    - For `None` -- retrieve System proxies using\n      :func:`urllib.request.getproxies`\n    - Add `http://` scheme to proxy urls if missing.\n    \"\"\"\n    if proxies is None:  # Use system proxy settings\n        proxies = getproxies()\n    if not proxies:\n        return {}  # Disable proxies\n\n    normalized = {}\n    for scheme, url in proxies.items():\n        if url and \"://\" not in url:\n            # Without the scheme there are errors:\n            # from aiohttp:\n            #   ValueError: Only http proxies are supported\n            # from requests (in some envs):\n            #   urllib3.exceptions.ProxySchemeUnknown: Not supported\n            #   proxy scheme localhost\n            url = \"http://%s\" % url\n        normalized[scheme] = url\n    return normalized\n\n_normalize_proxies(proxies=None)", "Selected Statement": "if proxies is None:  # Use system proxy settings", "Function Input": {"proxies": "None"}, "Variable Values Before Statement": {"proxies": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"proxies": [[1, "None"], [9.0, "{}"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 73, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def format_decimal(self, altitude=None):\n        \"\"\"\n        Format decimal degrees with altitude::\n\n            >>> p = Point(41.5, -81.0, 12.3)\n            >>> p.format_decimal()\n            '41.5, -81.0, 12.3km'\n            >>> p = Point(41.5, 0, 0)\n            >>> p.format_decimal()\n            '41.5, 0.0'\n\n        :param bool altitude: Whether to include ``altitude`` value.\n            By default it is automatically included if it is non-zero.\n        \"\"\"\n        coordinates = [str(self.latitude), str(self.longitude)]\n\n        if altitude is None:\n            altitude = bool(self.altitude)\n        if altitude:\n            if not isinstance(altitude, str):\n                altitude = 'km'\n            coordinates.append(self.format_altitude(altitude))\n\n        return \", \".join(coordinates)\n\nformat_decimal(self=Point(41.5, 81.0, 2.5), altitude=None, self.altitude=2.5, self.latitude=41.5, self.longitude=81.0)", "Selected Statement": "if altitude is None:", "Function Input": {"self": "Point(41.5, 81.0, 2.5)", "altitude": "None", "self.altitude": "2.5", "self.latitude": "41.5", "self.longitude": "81.0"}, "Variable Values Before Statement": {"altitude": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"self": [[1, "Point(41.5, 81.0, 2.5)"]], "altitude": [[1, "None"], [18.0, "True"], [21.0, "'km'"]], "self.altitude": [[1, "2.5"]], "self.latitude": [[1, "41.5"]], "self.longitude": [[1, "81.0"]], "coordinates": [[15.0, "['41.5', '81.0']"], [22.0, "['41.5', '81.0', '2.5km']"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 74, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def xldate_as_tuple(xldate, datemode):\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n    if xldate == 0.00:\n        return (0, 0, 0, 0, 0, 0)\n    if xldate < 0.00:\n        raise XLDateNegative(xldate)\n    xldays = int(xldate)\n    frac = xldate - xldays\n    seconds = int(round(frac * 86400.0))\n    assert 0 <= seconds <= 86400\n    if seconds == 86400:\n        hour = minute = second = 0\n        xldays += 1\n    else:\n        # second = seconds % 60; minutes = seconds // 60\n        minutes, second = divmod(seconds, 60)\n        # minute = minutes % 60; hour    = minutes // 60\n        hour, minute = divmod(minutes, 60)\n    if xldays >= _XLDAYS_TOO_LARGE[datemode]:\n        raise XLDateTooLarge(xldate)\n\n    if xldays == 0:\n        return (0, 0, 0, hour, minute, second)\n\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(xldate)\n\n    jdn = xldays + _JDN_delta[datemode]\n    yreg = (ifd(ifd(jdn * 4 + 274277, 146097) * 3, 4) + jdn + 1363) * 4 + 3\n    mp = ifd(yreg % 1461, 4) * 535 + 333\n    d = ifd(mp % 16384, 535) + 1\n    # mp /= 16384\n    mp >>= 14\n    if mp >= 10:\n        return (ifd(yreg, 1461) - 4715, mp - 9, d, hour, minute, second)\n    else:\n        return (ifd(yreg, 1461) - 4716, mp + 3, d, hour, minute, second)\n\nxldate_as_tuple(xldate=2741.0, datemode=0)", "Selected Statement": "if xldays >= _XLDAYS_TOO_LARGE[datemode]:", "Function Input": {"xldate": "2741.0", "datemode": "0"}, "Variable Values Before Statement": {"xldays": "2741"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"xldate": [[1, "2741.0"]], "datemode": [[1, "0"]], "xldays": [[8.0, "2741"]], "frac": [[9.0, "0.0"]], "seconds": [[10.0, "0"]], "second": [[17.0, "0"]], "minutes": [[17.0, "0"]], "hour": [[19.0, "0"]], "minute": [[19.0, "0"]], "jdn": [[29.0, "2417760"]], "yreg": [[30.0, "9676699"]], "mp": [[31.0, "66673"], [34.0, "4"]], "d": [[32.0, "3"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 75, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_frames(tback, is_breakpoint):\n    \"\"\"Builds a list of ErrorFrame objects from a traceback\"\"\"\n\n    frames = []\n\n    while tback is not None:\n        if tback.tb_next is None and is_breakpoint:\n            break\n\n        filename = tback.tb_frame.f_code.co_filename\n        function = tback.tb_frame.f_code.co_name\n        context = tback.tb_frame.f_locals\n        lineno = tback.tb_lineno - 1\n        tback_id = id(tback)\n        pre_context_lineno, pre_context, context_line, post_context = get_lines_from_file(filename, lineno + 1, 7)\n        frames.append(ErrorFrame(tback, filename, function, lineno, context, tback_id, pre_context, context_line, post_context, pre_context_lineno))\n        tback = tback.tb_next\n\n    return frames\n\nget_frames(tback=REPR FAILED, is_breakpoint=False)", "Selected Statement": "if tback.tb_next is None and is_breakpoint:", "Function Input": {"tback": "REPR FAILED", "is_breakpoint": "False"}, "Variable Values Before Statement": {"is_breakpoint": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"tback": [[1, "REPR FAILED"], [17.0, "None"]], "is_breakpoint": [[1, "False"]], "frames": [[4.0, "[]"], [16.0, "[<oz.error_pages.ErrorFrame object at 0x7f85da9e7a30>]"], [16.0, "[<oz.error_pages.ErrorFrame object at 0x7f85da9e7a30>, <oz.error_pages.ErrorFrame object at 0x7f85da9e7c70>]"]], "filename": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/dailymuse+oz/dailymuse+oz/tests/error_pages/test_core.py'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/dailymuse+oz/dailymuse+oz/oz/error_pages/__init__.py'"]], "function": [[11.0, "'test_get_frames_debug'"], [11.0, "'debug'"]], "context": [[12.0, "{'self': <tests.error_pages.test_core.ErrorPagesCoreTestCase testMethod=test_get_frames_debug>, 'e': DebugBreakException(), '_': DebugBreakException(), 'tback': <traceback object at 0x7f85da895600>}"], [12.0, "{}"]], "lineno": [[13.0, "44"], [13.0, "19"]], "tback_id": [[14.0, "140212873811456"], [14.0, "140212874253504"]], "pre_context_lineno": [[15.0, "38"], [15.0, "13"]], "pre_context": [[15.0, "['            self.assertEqual(len(frames), 1)', '', '            for frame in frames:', '                self.assertTrue(isinstance(frame, oz.error_pages.ErrorFrame))', '', '    def test_get_frames_debug(self):', '        try:']"], [15.0, "['', 'class DebugBreakException(Exception):', '    \"\"\"Raise this to break into the debugger during an HTTP request\"\"\"', '    pass', '', 'def debug():', '    \"\"\"Used to create debug breakpoints in code\"\"\"']"]], "context_line": [[15.0, "'            oz.error_pages.debug()'"], [15.0, "'    raise DebugBreakException()'"]], "post_context": [[15.0, "['        except Exception as e:', '            _, _, tback = sys.exc_info()', '            frames = oz.error_pages.get_frames(tback, False)', '', '            self.assertEqual(len(frames), 2)', '']"], [15.0, "['', 'class ErrorFrame(object):', '    \"\"\"Holds information about a function call in a traceback\"\"\"', '', '    def __init__(self, tback, filename, function, lineno, vars, id, pre_context, context_line, post_context, pre_context_lineno):', '        self.tback = tback']"]]}, "Program Information": "Project Name: dailymuse+oz", "idx": 76, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _add_notice_to_docstring(doc, no_doc_str, notice):\n    \"\"\"Adds a deprecation notice to a docstring.\"\"\"\n    if not doc:\n        lines = [no_doc_str]\n\n    else:\n        lines = _normalize_docstring(doc).splitlines()\n\n    notice = [''] + notice\n\n    if len(lines) > 1:\n        # Make sure that we keep our distance from the main body\n        if lines[1].strip():\n            notice.append('')\n\n        lines[1:1] = notice\n    else:\n        lines += notice\n\n    return '\\n'.join(lines)\n\n_add_notice_to_docstring(doc=None, no_doc_str='DEPRECATED FUNCTION', notice=['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        '])", "Selected Statement": "if not doc:", "Function Input": {"doc": "None", "no_doc_str": "'DEPRECATED FUNCTION'", "notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Variable Values Before Statement": {"doc": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"doc": [[1, "None"]], "no_doc_str": [[1, "'DEPRECATED FUNCTION'"]], "notice": [[1, "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"], [9.0, "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]], "lines": [[4.0, "['DEPRECATED FUNCTION']"], [18.0, "['DEPRECATED FUNCTION', '', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 77, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _normalize_docstring(docstring):\n    \"\"\"Normalizes the docstring.\n\n    Replaces tabs with spaces, removes leading and trailing blanks lines, and\n    removes any indentation.\n\n    Copied from PEP-257:\n    https://www.python.org/dev/peps/pep-0257/#handling-docstring-indentation\n\n    Args:\n        docstring: the docstring to normalize\n\n    Returns:\n        The normalized docstring\n    \"\"\"\n    if not docstring:\n        return ''\n    # Convert tabs to spaces (following the normal Python rules)\n    # and split into a list of lines:\n    lines = docstring.expandtabs().splitlines()\n    # Determine minimum indentation (first line doesn't count):\n    # (we use sys.maxsize because sys.maxint doesn't exist in Python 3)\n    indent = sys.maxsize\n    for line in lines[1:]:\n        stripped = line.lstrip()\n        if stripped:\n            indent = min(indent, len(line) - len(stripped))\n    # Remove indentation (first line is special):\n    trimmed = [lines[0].strip()]\n    if indent < sys.maxsize:\n        for line in lines[1:]:\n            trimmed.append(line[indent:].rstrip())\n    # Strip off trailing and leading blank lines:\n    while trimmed and not trimmed[-1]:\n        trimmed.pop()\n    while trimmed and not trimmed[0]:\n        trimmed.pop(0)\n    # Return a single string:\n    return '\\n'.join(trimmed)\n\n_normalize_docstring(docstring='Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.\\n\\n    Usually be used for image segmentation.\\n\\n    Parameters\\n    ----------\\n    x : Tensor\\n        input.\\n            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.\\n            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.\\n    name : str\\n        function name (optional)\\n\\n    Returns\\n    -------\\n    Tensor\\n        A ``Tensor`` in the same type as ``x``.\\n\\n    Examples\\n    --------\\n    >>> outputs = pixel_wise_softmax(network.outputs)\\n    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)\\n\\n    References\\n    ----------\\n    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__\\n\\n    ')", "Selected Statement": "if not docstring:", "Function Input": {"docstring": "'Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.\\n\\n    Usually be used for image segmentation.\\n\\n    Parameters\\n    ----------\\n    x : Tensor\\n        input.\\n            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.\\n            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.\\n    name : str\\n        function name (optional)\\n\\n    Returns\\n    -------\\n    Tensor\\n        A ``Tensor`` in the same type as ``x``.\\n\\n    Examples\\n    --------\\n    >>> outputs = pixel_wise_softmax(network.outputs)\\n    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)\\n\\n    References\\n    ----------\\n    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__\\n\\n    '"}, "Variable Values Before Statement": {"docstring": "'Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.\\n\\n    Usually be used for image segmentation.\\n\\n    Parameters\\n    ----------\\n    x : Tensor\\n        input.\\n            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.\\n            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.\\n    name : str\\n        function name (optional)\\n\\n    Returns\\n    -------\\n    Tensor\\n        A ``Tensor`` in the same type as ``x``.\\n\\n    Examples\\n    --------\\n    >>> outputs = pixel_wise_softmax(network.outputs)\\n    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)\\n\\n    References\\n    ----------\\n    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__\\n\\n    '"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"docstring": [[1, "'Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.\\n\\n    Usually be used for image segmentation.\\n\\n    Parameters\\n    ----------\\n    x : Tensor\\n        input.\\n            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.\\n            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.\\n    name : str\\n        function name (optional)\\n\\n    Returns\\n    -------\\n    Tensor\\n        A ``Tensor`` in the same type as ``x``.\\n\\n    Examples\\n    --------\\n    >>> outputs = pixel_wise_softmax(network.outputs)\\n    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)\\n\\n    References\\n    ----------\\n    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__\\n\\n    '"]], "lines": [[20.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', '    Usually be used for image segmentation.', '', '    Parameters', '    ----------', '    x : Tensor', '        input.', '            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', '    name : str', '        function name (optional)', '', '    Returns', '    -------', '    Tensor', '        A ``Tensor`` in the same type as ``x``.', '', '    Examples', '    --------', '    >>> outputs = pixel_wise_softmax(network.outputs)', '    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', '    References', '    ----------', '    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__', '', '    ']"]], "indent": [[23.0, "9223372036854775807"], [27.0, "4"]], "line": [[24.0, "''"], [24.0, "'    Usually be used for image segmentation.'"], [24.0, "''"], [24.0, "'    Parameters'"], [24.0, "'    ----------'"], [24.0, "'    x : Tensor'"], [24.0, "'        input.'"], [24.0, "'            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.'"], [24.0, "'            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.'"], [24.0, "'    name : str'"], [24.0, "'        function name (optional)'"], [24.0, "''"], [24.0, "'    Returns'"], [24.0, "'    -------'"], [24.0, "'    Tensor'"], [24.0, "'        A ``Tensor`` in the same type as ``x``.'"], [24.0, "''"], [24.0, "'    Examples'"], [24.0, "'    --------'"], [24.0, "'    >>> outputs = pixel_wise_softmax(network.outputs)'"], [24.0, "'    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)'"], [24.0, "''"], [24.0, "'    References'"], [24.0, "'    ----------'"], [24.0, "'    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__'"], [24.0, "''"], [24.0, "'    '"], [31.0, "''"], [31.0, "'    Usually be used for image segmentation.'"], [31.0, "''"], [31.0, "'    Parameters'"], [31.0, "'    ----------'"], [31.0, "'    x : Tensor'"], [31.0, "'        input.'"], [31.0, "'            - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.'"], [31.0, "'            - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.'"], [31.0, "'    name : str'"], [31.0, "'        function name (optional)'"], [31.0, "''"], [31.0, "'    Returns'"], [31.0, "'    -------'"], [31.0, "'    Tensor'"], [31.0, "'        A ``Tensor`` in the same type as ``x``.'"], [31.0, "''"], [31.0, "'    Examples'"], [31.0, "'    --------'"], [31.0, "'    >>> outputs = pixel_wise_softmax(network.outputs)'"], [31.0, "'    >>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)'"], [31.0, "''"], [31.0, "'    References'"], [31.0, "'    ----------'"], [31.0, "'    - `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__'"], [31.0, "''"], [31.0, "'    '"]], "stripped": [[25.0, "''"], [25.0, "'Usually be used for image segmentation.'"], [25.0, "''"], [25.0, "'Parameters'"], [25.0, "'----------'"], [25.0, "'x : Tensor'"], [25.0, "'input.'"], [25.0, "'- For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.'"], [25.0, "'- For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.'"], [25.0, "'name : str'"], [25.0, "'function name (optional)'"], [25.0, "''"], [25.0, "'Returns'"], [25.0, "'-------'"], [25.0, "'Tensor'"], [25.0, "'A ``Tensor`` in the same type as ``x``.'"], [25.0, "''"], [25.0, "'Examples'"], [25.0, "'--------'"], [25.0, "'>>> outputs = pixel_wise_softmax(network.outputs)'"], [25.0, "'>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)'"], [25.0, "''"], [25.0, "'References'"], [25.0, "'----------'"], [25.0, "'- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__'"], [25.0, "''"]], "trimmed": [[29.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------', '- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------', '- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__', '']"], [32.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------', '- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__', '', '']"], [35.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------', '- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__', '']"], [35.0, "['Return the softmax outputs of images, every pixels have multiple label, the sum of a pixel is 1.', '', 'Usually be used for image segmentation.', '', 'Parameters', '----------', 'x : Tensor', '    input.', '        - For 2d image, 4D tensor (batch_size, height, weight, channel), where channel >= 2.', '        - For 3d image, 5D tensor (batch_size, depth, height, weight, channel), where channel >= 2.', 'name : str', '    function name (optional)', '', 'Returns', '-------', 'Tensor', '    A ``Tensor`` in the same type as ``x``.', '', 'Examples', '--------', '>>> outputs = pixel_wise_softmax(network.outputs)', '>>> dice_loss = 1 - dice_coe(outputs, y_, epsilon=1e-5)', '', 'References', '----------', '- `tf.reverse <https://www.tensorflow.org/versions/master/api_docs/python/array_ops.html#reverse>`__']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 78, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def git_versions_from_vcs(tag_prefix, root, verbose=False):\n    # this runs 'git' from the root of the source tree. This only gets called\n    # if the git-archive 'subst' keywords were *not* expanded, and\n    # _version.py hasn't already been rewritten with a short version string,\n    # meaning we're inside a checked out source tree.\n\n    if not os.path.exists(os.path.join(root, \".git\")):\n        if verbose:\n            print(\"no .git in %s\" % root)\n        return {}\n\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    stdout = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\", \"--always\"],\n                         cwd=root)\n    if stdout is None:\n        return {}\n    if not stdout.startswith(tag_prefix):\n        if verbose:\n            print(\"tag '%s' doesn't start with prefix '%s'\"\n                  % (stdout, tag_prefix))\n        return {}\n    tag = stdout[len(tag_prefix):]\n    stdout = run_command(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if stdout is None:\n        return {}\n    full = stdout.strip()\n    if tag.endswith(\"-dirty\"):\n        full += \"-dirty\"\n    return {\"version\": tag, \"full\": full}\n\ngit_versions_from_vcs(tag_prefix='v', root='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs', verbose=False)", "Selected Statement": "if stdout is None:", "Function Input": {"tag_prefix": "'v'", "root": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'", "verbose": "False"}, "Variable Values Before Statement": {"stdout": "'v0.1.2'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"tag_prefix": [[1, "'v'"]], "root": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'"]], "verbose": [[1, "False"]], "GITS": [[12.0, "['git']"]], "stdout": [[15.0, "'v0.1.2'"], [25.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]], "tag": [[24.0, "'0.1.2'"]], "full": [[28.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]]}, "Program Information": "Project Name: andsor+pydevs", "idx": 79, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def send_telemetry(event_name, properties=None):\n    try:\n        if properties == None:\n            properties = {}\n        properties[\"oi_version\"] = pkg_resources.get_distribution(\n            \"open-interpreter\"\n        ).version\n        with open(os.devnull, \"w\") as f, contextlib.redirect_stdout(\n            f\n        ), contextlib.redirect_stderr(f):\n            posthog.capture(user_id, event_name, properties)\n    except:\n        # Non blocking\n        pass\n\nsend_telemetry(event_name='started_chat', properties={'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False})", "Selected Statement": "if properties == None:", "Function Input": {"event_name": "'started_chat'", "properties": "{'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False}"}, "Variable Values Before Statement": {"properties": "{'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"event_name": [[1, "'started_chat'"]], "properties": [[1, "{'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False}"], [5.0, "{'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False, 'oi_version': '0.2.0'}"], [11.0, "{'in_terminal_interface': False, 'message_type': 'str', 'os_mode': False, 'oi_version': '0.2.0', '$lib': 'posthog-python', '$lib_version': '3.1.0', '$geoip_disable': True}"]], "f": [[8.0, "<_io.TextIOWrapper name='/dev/null' mode='w' encoding='UTF-8'>"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 80, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def count_messages_tokens(messages=[], model=None):\n    \"\"\"\n    Count the number of tokens in a list of messages\n    \"\"\"\n    try:\n        tokens_used = 0\n\n        for message in messages:\n            if isinstance(message, str):\n                tokens_used += count_tokens(message, model=model)\n            elif \"message\" in message:\n                tokens_used += count_tokens(message[\"message\"], model=model)\n\n                if \"code\" in message:\n                    tokens_used += count_tokens(message[\"code\"], model=model)\n\n                if \"output\" in message:\n                    tokens_used += count_tokens(message[\"output\"], model=model)\n\n        prompt_cost = token_cost(tokens_used, model=model)\n\n        return (tokens_used, prompt_cost)\n    except:\n        # Non-essential feature\n        return (0, 0)\n\ncount_messages_tokens(messages=[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], model='gpt-3.5-turbo')", "Selected Statement": "if \"code\" in message:", "Function Input": {"messages": "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]", "model": "'gpt-3.5-turbo'"}, "Variable Values Before Statement": {"message": "{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"messages": [[1, "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]"]], "model": [[1, "'gpt-3.5-turbo'"]], "tokens_used": [[6.0, "0"], [12.0, "360"]], "message": [[8.0, "{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}"]], "prompt_cost": [[20.0, "0.00054"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 81, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _get_builtin_metadata(dataset_name):\n    if dataset_name == \"coco\":\n        return _get_coco_instances_meta()\n    if dataset_name == \"coco_panoptic_separated\":\n        return _get_coco_panoptic_separated_meta()\n    elif dataset_name == \"coco_panoptic_standard\":\n        meta = {}\n        # The following metadata maps contiguous id from [0, #thing categories +\n        # #stuff categories) to their names and colors. We have to replica of the\n        # same name and color under \"thing_*\" and \"stuff_*\" because the current\n        # visualization function in D2 handles thing and class classes differently\n        # due to some heuristic used in Panoptic FPN. We keep the same naming to\n        # enable reusing existing visualization functions.\n        thing_classes = [k[\"name\"] for k in COCO_CATEGORIES]\n        thing_colors = [k[\"color\"] for k in COCO_CATEGORIES]\n        stuff_classes = [k[\"name\"] for k in COCO_CATEGORIES]\n        stuff_colors = [k[\"color\"] for k in COCO_CATEGORIES]\n\n        meta[\"thing_classes\"] = thing_classes\n        meta[\"thing_colors\"] = thing_colors\n        meta[\"stuff_classes\"] = stuff_classes\n        meta[\"stuff_colors\"] = stuff_colors\n\n        # Convert category id for training:\n        #   category id: like semantic segmentation, it is the class id for each\n        #   pixel. Since there are some classes not used in evaluation, the category\n        #   id is not always contiguous and thus we have two set of category ids:\n        #       - original category id: category id in the original dataset, mainly\n        #           used for evaluation.\n        #       - contiguous category id: [0, #classes), in order to train the linear\n        #           softmax classifier.\n        thing_dataset_id_to_contiguous_id = {}\n        stuff_dataset_id_to_contiguous_id = {}\n\n        for i, cat in enumerate(COCO_CATEGORIES):\n            if cat[\"isthing\"]:\n                thing_dataset_id_to_contiguous_id[cat[\"id\"]] = i\n            else:\n                stuff_dataset_id_to_contiguous_id[cat[\"id\"]] = i\n\n        meta[\"thing_dataset_id_to_contiguous_id\"] = thing_dataset_id_to_contiguous_id\n        meta[\"stuff_dataset_id_to_contiguous_id\"] = stuff_dataset_id_to_contiguous_id\n\n        return meta\n    elif dataset_name == \"coco_person\":\n        return {\n            \"thing_classes\": [\"person\"],\n            \"keypoint_names\": COCO_PERSON_KEYPOINT_NAMES,\n            \"keypoint_flip_map\": COCO_PERSON_KEYPOINT_FLIP_MAP,\n            \"keypoint_connection_rules\": KEYPOINT_CONNECTION_RULES,\n        }\n    elif dataset_name == \"cityscapes\":\n        # fmt: off\n        CITYSCAPES_THING_CLASSES = [\n            \"person\", \"rider\", \"car\", \"truck\",\n            \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n        ]\n        CITYSCAPES_STUFF_CLASSES = [\n            \"road\", \"sidewalk\", \"building\", \"wall\", \"fence\", \"pole\", \"traffic light\",\n            \"traffic sign\", \"vegetation\", \"terrain\", \"sky\", \"person\", \"rider\", \"car\",\n            \"truck\", \"bus\", \"train\", \"motorcycle\", \"bicycle\",\n        ]\n        # fmt: on\n        return {\n            \"thing_classes\": CITYSCAPES_THING_CLASSES,\n            \"stuff_classes\": CITYSCAPES_STUFF_CLASSES,\n        }\n    raise KeyError(\"No built-in metadata for dataset {}\".format(dataset_name))\n\n_get_builtin_metadata(dataset_name='coco_panoptic_standard')", "Selected Statement": "if dataset_name == \"coco_panoptic_separated\":", "Function Input": {"dataset_name": "'coco_panoptic_standard'"}, "Variable Values Before Statement": {"dataset_name": "'coco_panoptic_standard'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"dataset_name": [[1, "'coco_panoptic_standard'"]], "meta": [[7.0, "{}"], [19.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']}"], [20.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]}"], [21.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']}"], [22.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]}"], [41.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}}"], [42.0, "{'thing_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'thing_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'stuff_classes': ['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skatebo...rigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged'], 'stuff_colors': [[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]], 'thing_dataset_id_to_contiguous_id': {1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}, 'stuff_dataset_id_to_contiguous_id': {92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129, 198: 130, 199: 131, 200: 132}}"]], "thing_classes": [[14.0, "['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']"]], "thing_colors": [[15.0, "[[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]"]], "stuff_classes": [[16.0, "['person', 'bicycle', 'car', 'motorcycle', 'airplane', 'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog', 'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'backpack', 'umbrella', 'handbag', 'tie', 'suitcase', 'frisbee', 'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat', 'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana', 'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza', 'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'dining table', 'toilet', 'tv', 'laptop', 'mouse', 'remote', 'keyboard', 'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier', 'toothbrush', 'banner', 'blanket', 'bridge', 'cardboard', 'counter', 'curtain', 'door-stuff', 'floor-wood', 'flower', 'fruit', 'gravel', 'house', 'light', 'mirror-stuff', 'net', 'pillow', 'platform', 'playingfield', 'railroad', 'river', 'road', 'roof', 'sand', 'sea', 'shelf', 'snow', 'stairs', 'tent', 'towel', 'wall-brick', 'wall-stone', 'wall-tile', 'wall-wood', 'water-other', 'window-blind', 'window-other', 'tree-merged', 'fence-merged', 'ceiling-merged', 'sky-other-merged', 'cabinet-merged', 'table-merged', 'floor-other-merged', 'pavement-merged', 'mountain-merged', 'grass-merged', 'dirt-merged', 'paper-merged', 'food-other-merged', 'building-other-merged', 'rock-merged', 'wall-other-merged', 'rug-merged']"]], "stuff_colors": [[17.0, "[[220, 20, 60], [119, 11, 32], [0, 0, 142], [0, 0, 230], [106, 0, 228], [0, 60, 100], [0, 80, 100], [0, 0, 70], [0, 0, 192], [250, 170, 30], [100, 170, 30], [220, 220, 0], [175, 116, 175], [250, 0, 30], [165, 42, 42], [255, 77, 255], [0, 226, 252], [182, 182, 255], [0, 82, 0], [120, 166, 157], [110, 76, 0], [174, 57, 255], [199, 100, 0], [72, 0, 118], [255, 179, 240], [0, 125, 92], [209, 0, 151], [188, 208, 182], [0, 220, 176], [255, 99, 164], [92, 0, 73], [133, 129, 255], [78, 180, 255], [0, 228, 0], [174, 255, 243], [45, 89, 255], [134, 134, 103], [145, 148, 174], [255, 208, 186], [197, 226, 255], [171, 134, 1], [109, 63, 54], [207, 138, 255], [151, 0, 95], [9, 80, 61], [84, 105, 51], [74, 65, 105], [166, 196, 102], [208, 195, 210], [255, 109, 65], [0, 143, 149], [179, 0, 194], [209, 99, 106], [5, 121, 0], [227, 255, 205], [147, 186, 208], [153, 69, 1], [3, 95, 161], [163, 255, 0], [119, 0, 170], [0, 182, 199], [0, 165, 120], [183, 130, 88], [95, 32, 0], [130, 114, 135], [110, 129, 133], [166, 74, 118], [219, 142, 185], [79, 210, 114], [178, 90, 62], [65, 70, 15], [127, 167, 115], [59, 105, 106], [142, 108, 45], [196, 172, 0], [95, 54, 80], [128, 76, 255], [201, 57, 1], [246, 0, 122], [191, 162, 208], [255, 255, 128], [147, 211, 203], [150, 100, 100], [168, 171, 172], [146, 112, 198], [210, 170, 100], [92, 136, 89], [218, 88, 184], [241, 129, 0], [217, 17, 255], [124, 74, 181], [70, 70, 70], [255, 228, 255], [154, 208, 0], [193, 0, 92], [76, 91, 113], [255, 180, 195], [106, 154, 176], [230, 150, 140], [60, 143, 255], [128, 64, 128], [92, 82, 55], [254, 212, 124], [73, 77, 174], [255, 160, 98], [255, 255, 255], [104, 84, 109], [169, 164, 131], [225, 199, 255], [137, 54, 74], [135, 158, 223], [7, 246, 231], [107, 255, 200], [58, 41, 149], [183, 121, 142], [255, 73, 97], [107, 142, 35], [190, 153, 153], [146, 139, 141], [70, 130, 180], [134, 199, 156], [209, 226, 140], [96, 36, 108], [96, 96, 96], [64, 170, 64], [152, 251, 152], [208, 229, 228], [206, 186, 171], [152, 161, 64], [116, 112, 0], [0, 114, 143], [102, 102, 156], [250, 141, 255]]"]], "thing_dataset_id_to_contiguous_id": [[32.0, "{}"], [37.0, "{1: 0}"], [37.0, "{1: 0, 2: 1}"], [37.0, "{1: 0, 2: 1, 3: 2}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78}"], [37.0, "{1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5, 7: 6, 8: 7, 9: 8, 10: 9, 11: 10, 13: 11, 14: 12, 15: 13, 16: 14, 17: 15, 18: 16, 19: 17, 20: 18, 21: 19, 22: 20, 23: 21, 24: 22, 25: 23, 27: 24, 28: 25, 31: 26, 32: 27, 33: 28, 34: 29, 35: 30, 36: 31, 37: 32, 38: 33, 39: 34, 40: 35, 41: 36, 42: 37, 43: 38, 44: 39, 46: 40, 47: 41, 48: 42, 49: 43, 50: 44, 51: 45, 52: 46, 53: 47, 54: 48, 55: 49, 56: 50, 57: 51, 58: 52, 59: 53, 60: 54, 61: 55, 62: 56, 63: 57, 64: 58, 65: 59, 67: 60, 70: 61, 72: 62, 73: 63, 74: 64, 75: 65, 76: 66, 77: 67, 78: 68, 79: 69, 80: 70, 81: 71, 82: 72, 84: 73, 85: 74, 86: 75, 87: 76, 88: 77, 89: 78, 90: 79}"]], "stuff_dataset_id_to_contiguous_id": [[33.0, "{}"], [39.0, "{92: 80}"], [39.0, "{92: 80, 93: 81}"], [39.0, "{92: 80, 93: 81, 95: 82}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129, 198: 130}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129, 198: 130, 199: 131}"], [39.0, "{92: 80, 93: 81, 95: 82, 100: 83, 107: 84, 109: 85, 112: 86, 118: 87, 119: 88, 122: 89, 125: 90, 128: 91, 130: 92, 133: 93, 138: 94, 141: 95, 144: 96, 145: 97, 147: 98, 148: 99, 149: 100, 151: 101, 154: 102, 155: 103, 156: 104, 159: 105, 161: 106, 166: 107, 168: 108, 171: 109, 175: 110, 176: 111, 177: 112, 178: 113, 180: 114, 181: 115, 184: 116, 185: 117, 186: 118, 187: 119, 188: 120, 189: 121, 190: 122, 191: 123, 192: 124, 193: 125, 194: 126, 195: 127, 196: 128, 197: 129, 198: 130, 199: 131, 200: 132}"]], "i": [[35.0, "0"], [35.0, "1"], [35.0, "2"], [35.0, "3"], [35.0, "4"], [35.0, "5"], [35.0, "6"], [35.0, "7"], [35.0, "8"], [35.0, "9"], [35.0, "10"], [35.0, "11"], [35.0, "12"], [35.0, "13"], [35.0, "14"], [35.0, "15"], [35.0, "16"], [35.0, "17"], [35.0, "18"], [35.0, "19"], [35.0, "20"], [35.0, "21"], [35.0, "22"], [35.0, "23"], [35.0, "24"], [35.0, "25"], [35.0, "26"], [35.0, "27"], [35.0, "28"], [35.0, "29"], [35.0, "30"], [35.0, "31"], [35.0, "32"], [35.0, "33"], [35.0, "34"], [35.0, "35"], [35.0, "36"], [35.0, "37"], [35.0, "38"], [35.0, "39"], [35.0, "40"], [35.0, "41"], [35.0, "42"], [35.0, "43"], [35.0, "44"], [35.0, "45"], [35.0, "46"], [35.0, "47"], [35.0, "48"], [35.0, "49"], [35.0, "50"], [35.0, "51"], [35.0, "52"], [35.0, "53"], [35.0, "54"], [35.0, "55"], [35.0, "56"], [35.0, "57"], [35.0, "58"], [35.0, "59"], [35.0, "60"], [35.0, "61"], [35.0, "62"], [35.0, "63"], [35.0, "64"], [35.0, "65"], [35.0, "66"], [35.0, "67"], [35.0, "68"], [35.0, "69"], [35.0, "70"], [35.0, "71"], [35.0, "72"], [35.0, "73"], [35.0, "74"], [35.0, "75"], [35.0, "76"], [35.0, "77"], [35.0, "78"], [35.0, "79"], [35.0, "80"], [35.0, "81"], [35.0, "82"], [35.0, "83"], [35.0, "84"], [35.0, "85"], [35.0, "86"], [35.0, "87"], [35.0, "88"], [35.0, "89"], [35.0, "90"], [35.0, "91"], [35.0, "92"], [35.0, "93"], [35.0, "94"], [35.0, "95"], [35.0, "96"], [35.0, "97"], [35.0, "98"], [35.0, "99"], [35.0, "100"], [35.0, "101"], [35.0, "102"], [35.0, "103"], [35.0, "104"], [35.0, "105"], [35.0, "106"], [35.0, "107"], [35.0, "108"], [35.0, "109"], [35.0, "110"], [35.0, "111"], [35.0, "112"], [35.0, "113"], [35.0, "114"], [35.0, "115"], [35.0, "116"], [35.0, "117"], [35.0, "118"], [35.0, "119"], [35.0, "120"], [35.0, "121"], [35.0, "122"], [35.0, "123"], [35.0, "124"], [35.0, "125"], [35.0, "126"], [35.0, "127"], [35.0, "128"], [35.0, "129"], [35.0, "130"], [35.0, "131"], [35.0, "132"]], "cat": [[35.0, "{'color': [220, 20, 60], 'isthing': 1, 'id': 1, 'name': 'person'}"], [35.0, "{'color': [119, 11, 32], 'isthing': 1, 'id': 2, 'name': 'bicycle'}"], [35.0, "{'color': [0, 0, 142], 'isthing': 1, 'id': 3, 'name': 'car'}"], [35.0, "{'color': [0, 0, 230], 'isthing': 1, 'id': 4, 'name': 'motorcycle'}"], [35.0, "{'color': [106, 0, 228], 'isthing': 1, 'id': 5, 'name': 'airplane'}"], [35.0, "{'color': [0, 60, 100], 'isthing': 1, 'id': 6, 'name': 'bus'}"], [35.0, "{'color': [0, 80, 100], 'isthing': 1, 'id': 7, 'name': 'train'}"], [35.0, "{'color': [0, 0, 70], 'isthing': 1, 'id': 8, 'name': 'truck'}"], [35.0, "{'color': [0, 0, 192], 'isthing': 1, 'id': 9, 'name': 'boat'}"], [35.0, "{'color': [250, 170, 30], 'isthing': 1, 'id': 10, 'name': 'traffic light'}"], [35.0, "{'color': [100, 170, 30], 'isthing': 1, 'id': 11, 'name': 'fire hydrant'}"], [35.0, "{'color': [220, 220, 0], 'isthing': 1, 'id': 13, 'name': 'stop sign'}"], [35.0, "{'color': [175, 116, 175], 'isthing': 1, 'id': 14, 'name': 'parking meter'}"], [35.0, "{'color': [250, 0, 30], 'isthing': 1, 'id': 15, 'name': 'bench'}"], [35.0, "{'color': [165, 42, 42], 'isthing': 1, 'id': 16, 'name': 'bird'}"], [35.0, "{'color': [255, 77, 255], 'isthing': 1, 'id': 17, 'name': 'cat'}"], [35.0, "{'color': [0, 226, 252], 'isthing': 1, 'id': 18, 'name': 'dog'}"], [35.0, "{'color': [182, 182, 255], 'isthing': 1, 'id': 19, 'name': 'horse'}"], [35.0, "{'color': [0, 82, 0], 'isthing': 1, 'id': 20, 'name': 'sheep'}"], [35.0, "{'color': [120, 166, 157], 'isthing': 1, 'id': 21, 'name': 'cow'}"], [35.0, "{'color': [110, 76, 0], 'isthing': 1, 'id': 22, 'name': 'elephant'}"], [35.0, "{'color': [174, 57, 255], 'isthing': 1, 'id': 23, 'name': 'bear'}"], [35.0, "{'color': [199, 100, 0], 'isthing': 1, 'id': 24, 'name': 'zebra'}"], [35.0, "{'color': [72, 0, 118], 'isthing': 1, 'id': 25, 'name': 'giraffe'}"], [35.0, "{'color': [255, 179, 240], 'isthing': 1, 'id': 27, 'name': 'backpack'}"], [35.0, "{'color': [0, 125, 92], 'isthing': 1, 'id': 28, 'name': 'umbrella'}"], [35.0, "{'color': [209, 0, 151], 'isthing': 1, 'id': 31, 'name': 'handbag'}"], [35.0, "{'color': [188, 208, 182], 'isthing': 1, 'id': 32, 'name': 'tie'}"], [35.0, "{'color': [0, 220, 176], 'isthing': 1, 'id': 33, 'name': 'suitcase'}"], [35.0, "{'color': [255, 99, 164], 'isthing': 1, 'id': 34, 'name': 'frisbee'}"], [35.0, "{'color': [92, 0, 73], 'isthing': 1, 'id': 35, 'name': 'skis'}"], [35.0, "{'color': [133, 129, 255], 'isthing': 1, 'id': 36, 'name': 'snowboard'}"], [35.0, "{'color': [78, 180, 255], 'isthing': 1, 'id': 37, 'name': 'sports ball'}"], [35.0, "{'color': [0, 228, 0], 'isthing': 1, 'id': 38, 'name': 'kite'}"], [35.0, "{'color': [174, 255, 243], 'isthing': 1, 'id': 39, 'name': 'baseball bat'}"], [35.0, "{'color': [45, 89, 255], 'isthing': 1, 'id': 40, 'name': 'baseball glove'}"], [35.0, "{'color': [134, 134, 103], 'isthing': 1, 'id': 41, 'name': 'skateboard'}"], [35.0, "{'color': [145, 148, 174], 'isthing': 1, 'id': 42, 'name': 'surfboard'}"], [35.0, "{'color': [255, 208, 186], 'isthing': 1, 'id': 43, 'name': 'tennis racket'}"], [35.0, "{'color': [197, 226, 255], 'isthing': 1, 'id': 44, 'name': 'bottle'}"], [35.0, "{'color': [171, 134, 1], 'isthing': 1, 'id': 46, 'name': 'wine glass'}"], [35.0, "{'color': [109, 63, 54], 'isthing': 1, 'id': 47, 'name': 'cup'}"], [35.0, "{'color': [207, 138, 255], 'isthing': 1, 'id': 48, 'name': 'fork'}"], [35.0, "{'color': [151, 0, 95], 'isthing': 1, 'id': 49, 'name': 'knife'}"], [35.0, "{'color': [9, 80, 61], 'isthing': 1, 'id': 50, 'name': 'spoon'}"], [35.0, "{'color': [84, 105, 51], 'isthing': 1, 'id': 51, 'name': 'bowl'}"], [35.0, "{'color': [74, 65, 105], 'isthing': 1, 'id': 52, 'name': 'banana'}"], [35.0, "{'color': [166, 196, 102], 'isthing': 1, 'id': 53, 'name': 'apple'}"], [35.0, "{'color': [208, 195, 210], 'isthing': 1, 'id': 54, 'name': 'sandwich'}"], [35.0, "{'color': [255, 109, 65], 'isthing': 1, 'id': 55, 'name': 'orange'}"], [35.0, "{'color': [0, 143, 149], 'isthing': 1, 'id': 56, 'name': 'broccoli'}"], [35.0, "{'color': [179, 0, 194], 'isthing': 1, 'id': 57, 'name': 'carrot'}"], [35.0, "{'color': [209, 99, 106], 'isthing': 1, 'id': 58, 'name': 'hot dog'}"], [35.0, "{'color': [5, 121, 0], 'isthing': 1, 'id': 59, 'name': 'pizza'}"], [35.0, "{'color': [227, 255, 205], 'isthing': 1, 'id': 60, 'name': 'donut'}"], [35.0, "{'color': [147, 186, 208], 'isthing': 1, 'id': 61, 'name': 'cake'}"], [35.0, "{'color': [153, 69, 1], 'isthing': 1, 'id': 62, 'name': 'chair'}"], [35.0, "{'color': [3, 95, 161], 'isthing': 1, 'id': 63, 'name': 'couch'}"], [35.0, "{'color': [163, 255, 0], 'isthing': 1, 'id': 64, 'name': 'potted plant'}"], [35.0, "{'color': [119, 0, 170], 'isthing': 1, 'id': 65, 'name': 'bed'}"], [35.0, "{'color': [0, 182, 199], 'isthing': 1, 'id': 67, 'name': 'dining table'}"], [35.0, "{'color': [0, 165, 120], 'isthing': 1, 'id': 70, 'name': 'toilet'}"], [35.0, "{'color': [183, 130, 88], 'isthing': 1, 'id': 72, 'name': 'tv'}"], [35.0, "{'color': [95, 32, 0], 'isthing': 1, 'id': 73, 'name': 'laptop'}"], [35.0, "{'color': [130, 114, 135], 'isthing': 1, 'id': 74, 'name': 'mouse'}"], [35.0, "{'color': [110, 129, 133], 'isthing': 1, 'id': 75, 'name': 'remote'}"], [35.0, "{'color': [166, 74, 118], 'isthing': 1, 'id': 76, 'name': 'keyboard'}"], [35.0, "{'color': [219, 142, 185], 'isthing': 1, 'id': 77, 'name': 'cell phone'}"], [35.0, "{'color': [79, 210, 114], 'isthing': 1, 'id': 78, 'name': 'microwave'}"], [35.0, "{'color': [178, 90, 62], 'isthing': 1, 'id': 79, 'name': 'oven'}"], [35.0, "{'color': [65, 70, 15], 'isthing': 1, 'id': 80, 'name': 'toaster'}"], [35.0, "{'color': [127, 167, 115], 'isthing': 1, 'id': 81, 'name': 'sink'}"], [35.0, "{'color': [59, 105, 106], 'isthing': 1, 'id': 82, 'name': 'refrigerator'}"], [35.0, "{'color': [142, 108, 45], 'isthing': 1, 'id': 84, 'name': 'book'}"], [35.0, "{'color': [196, 172, 0], 'isthing': 1, 'id': 85, 'name': 'clock'}"], [35.0, "{'color': [95, 54, 80], 'isthing': 1, 'id': 86, 'name': 'vase'}"], [35.0, "{'color': [128, 76, 255], 'isthing': 1, 'id': 87, 'name': 'scissors'}"], [35.0, "{'color': [201, 57, 1], 'isthing': 1, 'id': 88, 'name': 'teddy bear'}"], [35.0, "{'color': [246, 0, 122], 'isthing': 1, 'id': 89, 'name': 'hair drier'}"], [35.0, "{'color': [191, 162, 208], 'isthing': 1, 'id': 90, 'name': 'toothbrush'}"], [35.0, "{'color': [255, 255, 128], 'isthing': 0, 'id': 92, 'name': 'banner'}"], [35.0, "{'color': [147, 211, 203], 'isthing': 0, 'id': 93, 'name': 'blanket'}"], [35.0, "{'color': [150, 100, 100], 'isthing': 0, 'id': 95, 'name': 'bridge'}"], [35.0, "{'color': [168, 171, 172], 'isthing': 0, 'id': 100, 'name': 'cardboard'}"], [35.0, "{'color': [146, 112, 198], 'isthing': 0, 'id': 107, 'name': 'counter'}"], [35.0, "{'color': [210, 170, 100], 'isthing': 0, 'id': 109, 'name': 'curtain'}"], [35.0, "{'color': [92, 136, 89], 'isthing': 0, 'id': 112, 'name': 'door-stuff'}"], [35.0, "{'color': [218, 88, 184], 'isthing': 0, 'id': 118, 'name': 'floor-wood'}"], [35.0, "{'color': [241, 129, 0], 'isthing': 0, 'id': 119, 'name': 'flower'}"], [35.0, "{'color': [217, 17, 255], 'isthing': 0, 'id': 122, 'name': 'fruit'}"], [35.0, "{'color': [124, 74, 181], 'isthing': 0, 'id': 125, 'name': 'gravel'}"], [35.0, "{'color': [70, 70, 70], 'isthing': 0, 'id': 128, 'name': 'house'}"], [35.0, "{'color': [255, 228, 255], 'isthing': 0, 'id': 130, 'name': 'light'}"], [35.0, "{'color': [154, 208, 0], 'isthing': 0, 'id': 133, 'name': 'mirror-stuff'}"], [35.0, "{'color': [193, 0, 92], 'isthing': 0, 'id': 138, 'name': 'net'}"], [35.0, "{'color': [76, 91, 113], 'isthing': 0, 'id': 141, 'name': 'pillow'}"], [35.0, "{'color': [255, 180, 195], 'isthing': 0, 'id': 144, 'name': 'platform'}"], [35.0, "{'color': [106, 154, 176], 'isthing': 0, 'id': 145, 'name': 'playingfield'}"], [35.0, "{'color': [230, 150, 140], 'isthing': 0, 'id': 147, 'name': 'railroad'}"], [35.0, "{'color': [60, 143, 255], 'isthing': 0, 'id': 148, 'name': 'river'}"], [35.0, "{'color': [128, 64, 128], 'isthing': 0, 'id': 149, 'name': 'road'}"], [35.0, "{'color': [92, 82, 55], 'isthing': 0, 'id': 151, 'name': 'roof'}"], [35.0, "{'color': [254, 212, 124], 'isthing': 0, 'id': 154, 'name': 'sand'}"], [35.0, "{'color': [73, 77, 174], 'isthing': 0, 'id': 155, 'name': 'sea'}"], [35.0, "{'color': [255, 160, 98], 'isthing': 0, 'id': 156, 'name': 'shelf'}"], [35.0, "{'color': [255, 255, 255], 'isthing': 0, 'id': 159, 'name': 'snow'}"], [35.0, "{'color': [104, 84, 109], 'isthing': 0, 'id': 161, 'name': 'stairs'}"], [35.0, "{'color': [169, 164, 131], 'isthing': 0, 'id': 166, 'name': 'tent'}"], [35.0, "{'color': [225, 199, 255], 'isthing': 0, 'id': 168, 'name': 'towel'}"], [35.0, "{'color': [137, 54, 74], 'isthing': 0, 'id': 171, 'name': 'wall-brick'}"], [35.0, "{'color': [135, 158, 223], 'isthing': 0, 'id': 175, 'name': 'wall-stone'}"], [35.0, "{'color': [7, 246, 231], 'isthing': 0, 'id': 176, 'name': 'wall-tile'}"], [35.0, "{'color': [107, 255, 200], 'isthing': 0, 'id': 177, 'name': 'wall-wood'}"], [35.0, "{'color': [58, 41, 149], 'isthing': 0, 'id': 178, 'name': 'water-other'}"], [35.0, "{'color': [183, 121, 142], 'isthing': 0, 'id': 180, 'name': 'window-blind'}"], [35.0, "{'color': [255, 73, 97], 'isthing': 0, 'id': 181, 'name': 'window-other'}"], [35.0, "{'color': [107, 142, 35], 'isthing': 0, 'id': 184, 'name': 'tree-merged'}"], [35.0, "{'color': [190, 153, 153], 'isthing': 0, 'id': 185, 'name': 'fence-merged'}"], [35.0, "{'color': [146, 139, 141], 'isthing': 0, 'id': 186, 'name': 'ceiling-merged'}"], [35.0, "{'color': [70, 130, 180], 'isthing': 0, 'id': 187, 'name': 'sky-other-merged'}"], [35.0, "{'color': [134, 199, 156], 'isthing': 0, 'id': 188, 'name': 'cabinet-merged'}"], [35.0, "{'color': [209, 226, 140], 'isthing': 0, 'id': 189, 'name': 'table-merged'}"], [35.0, "{'color': [96, 36, 108], 'isthing': 0, 'id': 190, 'name': 'floor-other-merged'}"], [35.0, "{'color': [96, 96, 96], 'isthing': 0, 'id': 191, 'name': 'pavement-merged'}"], [35.0, "{'color': [64, 170, 64], 'isthing': 0, 'id': 192, 'name': 'mountain-merged'}"], [35.0, "{'color': [152, 251, 152], 'isthing': 0, 'id': 193, 'name': 'grass-merged'}"], [35.0, "{'color': [208, 229, 228], 'isthing': 0, 'id': 194, 'name': 'dirt-merged'}"], [35.0, "{'color': [206, 186, 171], 'isthing': 0, 'id': 195, 'name': 'paper-merged'}"], [35.0, "{'color': [152, 161, 64], 'isthing': 0, 'id': 196, 'name': 'food-other-merged'}"], [35.0, "{'color': [116, 112, 0], 'isthing': 0, 'id': 197, 'name': 'building-other-merged'}"], [35.0, "{'color': [0, 114, 143], 'isthing': 0, 'id': 198, 'name': 'rock-merged'}"], [35.0, "{'color': [102, 102, 156], 'isthing': 0, 'id': 199, 'name': 'wall-other-merged'}"], [35.0, "{'color': [250, 141, 255], 'isthing': 0, 'id': 200, 'name': 'rug-merged'}"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 82, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _set_fallback(elements, src_field, fallback, dest_field=None):\n        \"\"\"\n        Helper function used to set the fallback attributes of an element when\n        they are defined by the configuration as \"None\" or \"-\".\n        \"\"\"\n\n        if dest_field is None:\n            dest_field = src_field\n        if isinstance(fallback, six.string_types):\n            fallback = elements[fallback]\n\n        attrs = elements[src_field]\n        elements[dest_field] = (\n            attrs[0] if attrs[0] is not None else fallback[0],\n            attrs[1] if attrs[1] is not None else fallback[1],\n            attrs[2] if attrs[2] is not None else fallback[2])\n\n_set_fallback(elements={'Normal': (-1, -1, 0), 'Selected': (-1, -1, 0), 'SelectedCursor': (-1, -1, 262144), 'TitleBar': (6, None, 2359296), 'OrderBar': (3, None, 2097152), 'OrderBarHighlight': (3, None, 2359296), 'HelpBar': (6, None, 2359296), 'Prompt': (6, None, 2359296), 'NoticeInfo': (None, None, 2097152), 'NoticeLoading': (None, None, 2097152), 'NoticeError': (None, None, 2097152), 'NoticeSuccess': (None, None, 2097152), 'CursorBlock': (None, None, None), 'CursorBar1': (5, None, None), 'CursorBar2': (6, None, None), 'CursorBar3': (2, None, None), 'CursorBar4': (3, None, None), 'CommentAuthor': (4, None, 2097152), 'CommentAuthorSelf': (2, None, 2097152), 'CommentCount': (None, None, None), 'CommentText': (None, None, None), 'Created': (None, None, None), 'Downvote': (1, None, 2097152), 'Gold': (3, None, 2097152), 'HiddenCommentExpand': (None, None, 2097152), 'HiddenCommentText': (None, None, None), 'MultiredditName': (3, None, 2097152), 'MultiredditText': (None, None, None), 'NeutralVote': (None, None, 2097152), 'NSFW': (1, None, 2359296), 'Saved': (2, None, None), 'Score': (None, None, None), 'Separator': (None, None, 2097152), 'Stickied': (2, None, None), 'SubscriptionName': (3, None, 2097152), 'SubscriptionText': (None, None, None), 'SubmissionAuthor': (2, None, 2097152), 'SubmissionFlair': (1, None, None), 'SubmissionSubreddit': (3, None, None), 'SubmissionText': (None, None, None), 'SubmissionTitle': (None, None, 2097152), 'SubmissionTitleSeen': (None, None, None), 'Upvote': (2, None, 2097152), 'Link': (4, None, 131072), 'LinkSeen': (5, None, 131072), 'UserFlair': (3, None, 2097152)}, src_field='Normal', fallback=(-1, -1, 0), dest_field=None)", "Selected Statement": "if dest_field is None:", "Function Input": {"elements": "{'Normal': (-1, -1, 0), 'Selected': (-1, -1, 0), 'SelectedCursor': (-1, -1, 262144), 'TitleBar': (6, None, 2359296), 'OrderBar': (3, None, 2097152), 'OrderBarHighlight': (3, None, 2359296), 'HelpBar': (6, None, 2359296), 'Prompt': (6, None, 2359296), 'NoticeInfo': (None, None, 2097152), 'NoticeLoading': (None, None, 2097152), 'NoticeError': (None, None, 2097152), 'NoticeSuccess': (None, None, 2097152), 'CursorBlock': (None, None, None), 'CursorBar1': (5, None, None), 'CursorBar2': (6, None, None), 'CursorBar3': (2, None, None), 'CursorBar4': (3, None, None), 'CommentAuthor': (4, None, 2097152), 'CommentAuthorSelf': (2, None, 2097152), 'CommentCount': (None, None, None), 'CommentText': (None, None, None), 'Created': (None, None, None), 'Downvote': (1, None, 2097152), 'Gold': (3, None, 2097152), 'HiddenCommentExpand': (None, None, 2097152), 'HiddenCommentText': (None, None, None), 'MultiredditName': (3, None, 2097152), 'MultiredditText': (None, None, None), 'NeutralVote': (None, None, 2097152), 'NSFW': (1, None, 2359296), 'Saved': (2, None, None), 'Score': (None, None, None), 'Separator': (None, None, 2097152), 'Stickied': (2, None, None), 'SubscriptionName': (3, None, 2097152), 'SubscriptionText': (None, None, None), 'SubmissionAuthor': (2, None, 2097152), 'SubmissionFlair': (1, None, None), 'SubmissionSubreddit': (3, None, None), 'SubmissionText': (None, None, None), 'SubmissionTitle': (None, None, 2097152), 'SubmissionTitleSeen': (None, None, None), 'Upvote': (2, None, 2097152), 'Link': (4, None, 131072), 'LinkSeen': (5, None, 131072), 'UserFlair': (3, None, 2097152)}", "src_field": "'Normal'", "fallback": "(-1, -1, 0)", "dest_field": "None"}, "Variable Values Before Statement": {"dest_field": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"elements": [[1, "{'Normal': (-1, -1, 0), 'Selected': (-1, -1, 0), 'SelectedCursor': (-1, -1, 262144), 'TitleBar': (6, None, 2359296), 'OrderBar': (3, None, 2097152), 'OrderBarHighlight': (3, None, 2359296), 'HelpBar': (6, None, 2359296), 'Prompt': (6, None, 2359296), 'NoticeInfo': (None, None, 2097152), 'NoticeLoading': (None, None, 2097152), 'NoticeError': (None, None, 2097152), 'NoticeSuccess': (None, None, 2097152), 'CursorBlock': (None, None, None), 'CursorBar1': (5, None, None), 'CursorBar2': (6, None, None), 'CursorBar3': (2, None, None), 'CursorBar4': (3, None, None), 'CommentAuthor': (4, None, 2097152), 'CommentAuthorSelf': (2, None, 2097152), 'CommentCount': (None, None, None), 'CommentText': (None, None, None), 'Created': (None, None, None), 'Downvote': (1, None, 2097152), 'Gold': (3, None, 2097152), 'HiddenCommentExpand': (None, None, 2097152), 'HiddenCommentText': (None, None, None), 'MultiredditName': (3, None, 2097152), 'MultiredditText': (None, None, None), 'NeutralVote': (None, None, 2097152), 'NSFW': (1, None, 2359296), 'Saved': (2, None, None), 'Score': (None, None, None), 'Separator': (None, None, 2097152), 'Stickied': (2, None, None), 'SubscriptionName': (3, None, 2097152), 'SubscriptionText': (None, None, None), 'SubmissionAuthor': (2, None, 2097152), 'SubmissionFlair': (1, None, None), 'SubmissionSubreddit': (3, None, None), 'SubmissionText': (None, None, None), 'SubmissionTitle': (None, None, 2097152), 'SubmissionTitleSeen': (None, None, None), 'Upvote': (2, None, 2097152), 'Link': (4, None, 131072), 'LinkSeen': (5, None, 131072), 'UserFlair': (3, None, 2097152)}"]], "src_field": [[1, "'Normal'"]], "fallback": [[1, "(-1, -1, 0)"]], "dest_field": [[1, "None"], [8.0, "'Normal'"]], "attrs": [[12.0, "(-1, -1, 0)"]]}, "Program Information": "Project Name: Aareon+rtv", "idx": 83, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def eval_block(code, namespace=None, filename=\"<string>\"):\n    \"\"\"\n    Execute a multi-line block of code in the given namespace\n\n    If the final statement in the code is an expression, return\n    the result of the expression.\n    \"\"\"\n    tree = ast.parse(code, filename=\"<ast>\", mode=\"exec\")\n    if namespace is None:\n        namespace = {}\n    catch_display = _CatchDisplay()\n\n    if isinstance(tree.body[-1], ast.Expr):\n        to_exec, to_eval = tree.body[:-1], tree.body[-1:]\n    else:\n        to_exec, to_eval = tree.body, []\n\n    for node in to_exec:\n        compiled = compile(ast.Module([node], []), filename=filename, mode=\"exec\")\n        exec(compiled, namespace)\n\n    with catch_display:\n        for node in to_eval:\n            compiled = compile(\n                ast.Interactive([node]), filename=filename, mode=\"single\"\n            )\n            exec(compiled, namespace)\n\n    return catch_display.output\n\neval_block(code=b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n', namespace=None, filename='<string>')", "Selected Statement": "if namespace is None:", "Function Input": {"code": "b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n'", "namespace": "None", "filename": "'<string>'"}, "Variable Values Before Statement": {"namespace": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"code": [[1, "b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n'"]], "namespace": [[1, "None"], [10.0, "{}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'})}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })}))}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'})}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...)}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...), 'connections': alt.Chart(...)}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...), 'connections': alt.Chart(...), 'points': alt.Chart(...)}"]], "filename": [[1, "'<string>'"]], "tree": [[8.0, "{body=[<ast.Expr object at 0x7fc2e898dfa0>, <ast.Import object at 0x7fc2e898df10>, <ast.ImportFrom object at 0x7fc2e898de50>, <ast.Assign object at 0x7fc2e898de20>, <ast.Assign object at 0x7fc2e898dcd0>, <ast.Assign object at 0x7fc2e898dbe0>, <ast.Assign object at 0x7fc2e898da30>, <ast.Assign object at 0x7fc2e898d760>, <ast.Assign object at 0x7fc2e898d4f0>, <ast.Assign object at 0x7fc2e898c700>, <ast.Assign object at 0x7fc2e9ac7f40>, <ast.Expr object at 0x7fc39279b9d0>], type_ignores=[]}"]], "catch_display": [[11.0, "{output=None}"], [22.0, "{output=None, old_hook=<built-in function displayhook>}"], [27.0, "{output=alt.LayerChart(...), old_hook=<built-in function displayhook>}"]], "to_exec": [[14.0, "[<ast.Expr object at 0x7fc2e898dfa0>, <ast.Import object at 0x7fc2e898df10>, <ast.ImportFrom object at 0x7fc2e898de50>, <ast.Assign object at 0x7fc2e898de20>, <ast.Assign object at 0x7fc2e898dcd0>, <ast.Assign object at 0x7fc2e898dbe0>, <ast.Assign object at 0x7fc2e898da30>, <ast.Assign object at 0x7fc2e898d760>, <ast.Assign object at 0x7fc2e898d4f0>, <ast.Assign object at 0x7fc2e898c700>, <ast.Assign object at 0x7fc2e9ac7f40>]"]], "to_eval": [[14.0, "[<ast.Expr object at 0x7fc39279b9d0>]"]], "node": [[18.0, "{value=<ast.Constant object at 0x7fc2e898df70>, lineno=1, col_offset=0, end_lineno=7, end_col_offset=3}"], [18.0, "{names=[<ast.alias object at 0x7fc2e898dee0>], lineno=9, col_offset=0, end_lineno=9, end_col_offset=20}"], [18.0, "{module='vega_datasets', names=[<ast.alias object at 0x7fc2e898ddf0>], level=0, lineno=10, col_offset=0, end_lineno=10, end_col_offset=30}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dd90>], value=<ast.Attribute object at 0x7fc2e898dd60>, type_comment=None, lineno=13, col_offset=0, end_lineno=13, end_col_offset=28}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dca0>], value=<ast.Attribute object at 0x7fc2e898dc70>, type_comment=None, lineno=14, col_offset=0, end_lineno=14, end_col_offset=42}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dbb0>], value=<ast.Call object at 0x7fc2e898db80>, type_comment=None, lineno=16, col_offset=0, end_lineno=16, end_col_offset=60}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d9d0>], value=<ast.Call object at 0x7fc2e898d9a0>, type_comment=None, lineno=19, col_offset=0, end_lineno=21, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d730>], value=<ast.Call object at 0x7fc2e898d700>, type_comment=None, lineno=24, col_offset=0, end_lineno=26, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d4c0>], value=<ast.Call object at 0x7fc2e898d490>, type_comment=None, lineno=28, col_offset=0, end_lineno=34, end_col_offset=22}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898c6d0>], value=<ast.Call object at 0x7fc2e898c6a0>, type_comment=None, lineno=36, col_offset=0, end_lineno=50, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e9ac7f10>], value=<ast.Call object at 0x7fc2e9ac79a0>, type_comment=None, lineno=52, col_offset=0, end_lineno=68, end_col_offset=1}"], [23.0, "{value=<ast.Call object at 0x7fc39279b820>, lineno=70, col_offset=0, end_lineno=70, end_col_offset=63}"]], "compiled": [[19.0, "<code object <module> at 0x7fc2e9732450, file \"<string>\", line 1>"], [19.0, "<code object <module> at 0x7fc2e973c870, file \"<string>\", line 9>"], [19.0, "<code object <module> at 0x7fc2e973cea0, file \"<string>\", line 10>"], [19.0, "<code object <module> at 0x7fc2e973c450, file \"<string>\", line 13>"], [19.0, "<code object <module> at 0x7fc2e96e5ea0, file \"<string>\", line 14>"], [19.0, "<code object <module> at 0x7fc2e96e8ea0, file \"<string>\", line 16>"], [19.0, "<code object <module> at 0x7fc2e95e7be0, file \"<string>\", line 19>"], [19.0, "<code object <module> at 0x7fc2e93ef7c0, file \"<string>\", line 24>"], [19.0, "<code object <module> at 0x7fc2e91a2f50, file \"<string>\", line 28>"], [19.0, "<code object <module> at 0x7fc2e93a09d0, file \"<string>\", line 36>"], [19.0, "<code object <module> at 0x7fc2e10453a0, file \"<string>\", line 52>"], [24.0, "<code object <module> at 0x7fc2e9a60b30, file \"<string>\", line 70>"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 84, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def properties(self, **kwargs) -> Self:\n        \"\"\"Set top-level properties of the Chart.\n\n        Argument names and types are the same as class initialization.\n        \"\"\"\n        # ignore type as copy comes from another class for subclasses of TopLevelMixin\n        copy = self.copy(deep=False)  # type: ignore[attr-defined]\n        for key, val in kwargs.items():\n            if key == \"selection\" and isinstance(val, Parameter):\n                # TODO: Can this be removed\n                # For backward compatibility with old selection interface.\n                setattr(copy, key, {val.name: val.selection})\n            else:\n                # Don't validate data, because it hasn't been processed.\n                if key != \"data\":\n                    # ignore type as validate_property comes from SchemaBase,\n                    # not from TopLevelMixin\n                    self.validate_property(key, val)  # type: ignore[attr-defined]\n                setattr(copy, key, val)\n        return copy\n\nproperties(self=alt.Chart(...), kwargs={'width': 750, 'height': 500}, self._args=(), self._kwds={'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined})", "Selected Statement": "if key != \"data\":", "Function Input": {"self": "alt.Chart(...)", "kwargs": "{'width': 750, 'height': 500}", "self._args": "()", "self._kwds": "{'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined}"}, "Variable Values Before Statement": {"key": "'height'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "alt.Chart(...)"]], "kwargs": [[1, "{'width': 750, 'height': 500}"]], "self._args": [[1, "()"]], "self._kwds": [[1, "{'data': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'mark': MarkDef({  fill: 'lightgray',  stroke: 'white',  type: 'geoshape'}), 'align': Undefined, 'autosize': Undefined, 'background': Undefined, 'bounds': Undefined, 'center': Undefined, 'config': Undefined, 'datasets': Undefined, 'description': Undefined, 'encoding': Undefined, 'height': Undefined, 'name': Undefined, 'padding': Undefined, 'params': Undefined, 'projection': Undefined, 'resolve': Undefined, 'spacing': Undefined, 'title': Undefined, 'transform': Undefined, 'usermeta': Undefined, 'view': Undefined, 'width': Undefined}"]], "copy": [[7.0, "alt.Chart(...)"]], "key": [[8.0, "'width'"], [8.0, "'height'"]], "val": [[8.0, "750"], [8.0, "500"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 85, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def to_values(data: DataType) -> ToValuesReturnType:\n    \"\"\"Replace a DataFrame by a data model with values.\"\"\"\n    check_data_type(data)\n    if hasattr(data, \"__geo_interface__\"):\n        if isinstance(data, pd.DataFrame):\n            data = sanitize_dataframe(data)\n        # Maybe the type could be further clarified here that it is\n        # SupportGeoInterface and then the ignore statement is not needed?\n        data_sanitized = sanitize_geo_interface(data.__geo_interface__)  # type: ignore[arg-type]\n        return {\"values\": data_sanitized}\n    elif isinstance(data, pd.DataFrame):\n        data = sanitize_dataframe(data)\n        return {\"values\": data.to_dict(orient=\"records\")}\n    elif isinstance(data, dict):\n        if \"values\" not in data:\n            raise KeyError(\"values expected in data dict, but not present.\")\n        return data\n    elif hasattr(data, \"__dataframe__\"):\n        # experimental interchange dataframe support\n        pi = import_pyarrow_interchange()\n        pa_table = sanitize_arrow_table(pi.from_dataframe(data))\n        return {\"values\": pa_table.to_pylist()}\n    else:\n        # Should never reach this state as tested by check_data_type\n        raise ValueError(\"Unrecognized data type: {}\".format(type(data)))\n\nto_values(data=           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns])", "Selected Statement": "if \"values\" not in data:", "Function Input": {"data": "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"}, "Variable Values Before Statement": {"data": "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"data": [[1, "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [12.0, "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 86, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def load_library():\n    # note: for a mapping between bitcoin-core/secp256k1 git tags and .so.V libtool version numbers,\n    #       see https://github.com/bitcoin-core/secp256k1/pull/1055#issuecomment-1227505189\n    tested_libversions = [2, 1, 0, ]  # try latest version first\n    libnames = []\n    if sys.platform == 'darwin':\n        for v in tested_libversions:\n            libnames.append(f\"libsecp256k1.{v}.dylib\")\n    elif sys.platform in ('windows', 'win32'):\n        for v in tested_libversions:\n            libnames.append(f\"libsecp256k1-{v}.dll\")\n    elif 'ANDROID_DATA' in os.environ:\n        libnames = ['libsecp256k1.so', ]  # don't care about version number. we built w/e is available.\n    else:  # desktop Linux and similar\n        for v in tested_libversions:\n            libnames.append(f\"libsecp256k1.so.{v}\")\n        # maybe we could fall back to trying \"any\" version? maybe guarded with an env var?\n        #libnames.append(f\"libsecp256k1.so\")\n    library_paths = []\n    for libname in libnames:  # try local files in repo dir first\n        library_paths.append(os.path.join(os.path.dirname(__file__), libname))\n    for libname in libnames:\n        library_paths.append(libname)\n\n    exceptions = []\n    secp256k1 = None\n    for libpath in library_paths:\n        try:\n            secp256k1 = ctypes.cdll.LoadLibrary(libpath)\n        except BaseException as e:\n            exceptions.append(e)\n        else:\n            break\n    if not secp256k1:\n        _logger.error(f'libsecp256k1 library failed to load. exceptions: {repr(exceptions)}')\n        return None\n\n    try:\n        secp256k1.secp256k1_context_create.argtypes = [c_uint]\n        secp256k1.secp256k1_context_create.restype = c_void_p\n\n        secp256k1.secp256k1_context_randomize.argtypes = [c_void_p, c_char_p]\n        secp256k1.secp256k1_context_randomize.restype = c_int\n\n        secp256k1.secp256k1_ec_pubkey_create.argtypes = [c_void_p, c_void_p, c_char_p]\n        secp256k1.secp256k1_ec_pubkey_create.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_sign.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p, c_void_p, c_void_p]\n        secp256k1.secp256k1_ecdsa_sign.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_verify.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p]\n        secp256k1.secp256k1_ecdsa_verify.restype = c_int\n\n        secp256k1.secp256k1_ec_pubkey_parse.argtypes = [c_void_p, c_char_p, c_char_p, c_size_t]\n        secp256k1.secp256k1_ec_pubkey_parse.restype = c_int\n\n        secp256k1.secp256k1_ec_pubkey_serialize.argtypes = [c_void_p, c_char_p, c_void_p, c_char_p, c_uint]\n        secp256k1.secp256k1_ec_pubkey_serialize.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_signature_parse_compact.argtypes = [c_void_p, c_char_p, c_char_p]\n        secp256k1.secp256k1_ecdsa_signature_parse_compact.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_signature_normalize.argtypes = [c_void_p, c_char_p, c_char_p]\n        secp256k1.secp256k1_ecdsa_signature_normalize.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_signature_serialize_compact.argtypes = [c_void_p, c_char_p, c_char_p]\n        secp256k1.secp256k1_ecdsa_signature_serialize_compact.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_signature_parse_der.argtypes = [c_void_p, c_char_p, c_char_p, c_size_t]\n        secp256k1.secp256k1_ecdsa_signature_parse_der.restype = c_int\n\n        secp256k1.secp256k1_ecdsa_signature_serialize_der.argtypes = [c_void_p, c_char_p, c_void_p, c_char_p]\n        secp256k1.secp256k1_ecdsa_signature_serialize_der.restype = c_int\n\n        secp256k1.secp256k1_ec_pubkey_tweak_mul.argtypes = [c_void_p, c_char_p, c_char_p]\n        secp256k1.secp256k1_ec_pubkey_tweak_mul.restype = c_int\n\n        secp256k1.secp256k1_ec_pubkey_combine.argtypes = [c_void_p, c_char_p, c_void_p, c_size_t]\n        secp256k1.secp256k1_ec_pubkey_combine.restype = c_int\n\n        # --enable-module-recovery\n        try:\n            secp256k1.secp256k1_ecdsa_recover.argtypes = [c_void_p, c_char_p, c_char_p, c_char_p]\n            secp256k1.secp256k1_ecdsa_recover.restype = c_int\n\n            secp256k1.secp256k1_ecdsa_recoverable_signature_parse_compact.argtypes = [c_void_p, c_char_p, c_char_p, c_int]\n            secp256k1.secp256k1_ecdsa_recoverable_signature_parse_compact.restype = c_int\n        except (OSError, AttributeError):\n            raise LibModuleMissing('libsecp256k1 library found but it was built '\n                                   'without required module (--enable-module-recovery)')\n\n        secp256k1.ctx = secp256k1.secp256k1_context_create(SECP256K1_CONTEXT_SIGN | SECP256K1_CONTEXT_VERIFY)\n        ret = secp256k1.secp256k1_context_randomize(secp256k1.ctx, os.urandom(32))\n        if not ret:\n            _logger.error('secp256k1_context_randomize failed')\n            return None\n\n        return secp256k1\n    except (OSError, AttributeError) as e:\n        _logger.error(f'libsecp256k1 library was found and loaded but there was an error when using it: {repr(e)}')\n        return None\n\nload_library()", "Selected Statement": "if not secp256k1:", "Function Input": {}, "Variable Values Before Statement": {"secp256k1": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"tested_libversions": [[4.0, "[2, 1, 0]"]], "libnames": [[5.0, "[]"], [16.0, "['libsecp256k1.so.2']"], [16.0, "['libsecp256k1.so.2', 'libsecp256k1.so.1']"], [16.0, "['libsecp256k1.so.2', 'libsecp256k1.so.1', 'libsecp256k1.so.0']"]], "v": [[15.0, "2"], [15.0, "1"], [15.0, "0"]], "library_paths": [[19.0, "[]"], [21.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2']"], [21.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1']"], [21.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0']"], [23.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0', 'libsecp256k1.so.2']"], [23.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0', 'libsecp256k1.so.2', 'libsecp256k1.so.1']"], [23.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0', 'libsecp256k1.so.2', 'libsecp256k1.so.1', 'libsecp256k1.so.0']"]], "libname": [[20.0, "'libsecp256k1.so.2'"], [20.0, "'libsecp256k1.so.1'"], [20.0, "'libsecp256k1.so.0'"], [22.0, "'libsecp256k1.so.2'"], [22.0, "'libsecp256k1.so.1'"], [22.0, "'libsecp256k1.so.0'"]], "exceptions": [[25.0, "[]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory')]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory')]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0: cannot open shared object file: No such file or directory')]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.2: cannot open shared object file: No such file or directory')]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.1: cannot open shared object file: No such file or directory')]"], [31.0, "[OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory'), OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.2: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.1: cannot open shared object file: No such file or directory'), OSError('libsecp256k1.so.0: cannot open shared object file: No such file or directory')]"]], "secp256k1": [[26.0, "None"]], "libpath": [[27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2'"], [27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1'"], [27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0'"], [27.0, "'libsecp256k1.so.2'"], [27.0, "'libsecp256k1.so.1'"], [27.0, "'libsecp256k1.so.0'"]], "e": [[30.0, "OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.2: cannot open shared object file: No such file or directory')"], [30.0, "OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.1: cannot open shared object file: No such file or directory')"], [30.0, "OSError('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/spesmilo+electrum/spesmilo+electrum/electrum/libsecp256k1.so.0: cannot open shared object file: No such file or directory')"], [30.0, "OSError('libsecp256k1.so.2: cannot open shared object file: No such file or directory')"], [30.0, "OSError('libsecp256k1.so.1: cannot open shared object file: No such file or directory')"], [30.0, "OSError('libsecp256k1.so.0: cannot open shared object file: No such file or directory')"]]}, "Program Information": "Project Name: spesmilo+electrum", "idx": 87, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def driver():\n    TEST_BROWSER = os.environ.get(\"TEST_BROWSER\", \"chrome\").lower()\n\n    if TEST_BROWSER == \"chrome\":\n        options = webdriver.ChromeOptions()\n        options.headless = True\n        capabilities = DesiredCapabilities.CHROME\n        capabilities[\"goog:loggingPrefs\"] = {\"browser\": \"ALL\"}\n\n        if platform.system() == \"Windows\":\n            options.binary_location = \"C:/Program Files/Google/Chrome/Application/chrome.exe\"\n\n        driver = webdriver.Chrome(\n            ChromeDriverManager().install(),\n            options=options,\n            desired_capabilities=capabilities,\n            service_log_path=os.path.devnull,\n        )\n\n    # Firefox doesn't currently supported pulling JavaScript console logs, which we currently scan to affirm that\n    # JS/Python can communicate in some places. So for now, we can't really use firefox/geckodriver during testing.\n    # This may be added in the future: https://github.com/mozilla/geckodriver/issues/284\n\n    # elif TEST_BROWSER == \"firefox\":\n    #     options = webdriver.FirefoxOptions()\n    #     options.headless = True\n    #     capabilities = DesiredCapabilities.FIREFOX\n    #     capabilities['loggingPrefs'] = {\"browser\": \"ALL\"}\n    #\n    #     driver = webdriver.Firefox(options=options, capabilities=capabilities, service_log_path=os.path.devnull)\n\n    else:\n        raise ValueError(f\"Unsupported browser for testing: {TEST_BROWSER}\")\n\n    with mock.patch(\"eel.browsers.open\"):\n        yield driver\n\ndriver()", "Selected Statement": "if TEST_BROWSER == \"chrome\":", "Function Input": {}, "Variable Values Before Statement": {"TEST_BROWSER": "'chrome'"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"TEST_BROWSER": [[2.0, "'chrome'"]], "options": [[5.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None}"], [6.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None, headless=True}"]], "capabilities": [[7.0, "{'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}}"]]}, "Program Information": "Project Name: python-eel+Eel", "idx": 88, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def find_csv_separators(csv):\n    \"\"\"Finds column and decimal separators in a CSV string\n\n    Args:\n        csv: CSV text data\n\n    Returns:\n        (column_separator, decimal separator)\n    \"\"\"\n    lines = csv.strip().split('\\n')\n    # First find all potential column separators by checking which characters appear on each line that starts with digit\n    column_separator_candidates = {',', ';', '\\t', '|'}\n    for line in lines:\n        if not numeric_start.match(line):  # Skip rows which don't start with numbers\n            continue\n        remove_candidates = []\n        for column_separator in column_separator_candidates:\n            if column_separator not in line:\n                # Numeric line doesn't contain the column separator candidate, eliminate the candidate\n                remove_candidates.append(column_separator)\n        for remove_candidate in remove_candidates:\n            column_separator_candidates.remove(remove_candidate)\n\n    if len(column_separator_candidates) == 0:\n        raise CsvParseError('Could not find column and decimal separators')\n\n    if column_separator_candidates == {','}:\n        # Only comma found, it must be the column separator and decimal point must be dot\n        return [',', '.']\n\n    if ',' in column_separator_candidates:\n        # Comma is included in the candidates (along with something else), it must be the decimal separator\n        decimal_separator = ','\n        column_separator_candidates.remove(',')\n    else:\n        decimal_separator = '.'\n\n    if len(column_separator_candidates) > 1:\n        raise CsvParseError(f'Found multiple potential column separators: {column_separator_candidates}')\n\n    return list(column_separator_candidates)[0], decimal_separator\n\nfind_csv_separators(csv='frequency,raw\\n20,0\\n1000,3\\n20000,0\\n')", "Selected Statement": "if column_separator_candidates == {','}:", "Function Input": {"csv": "'frequency,raw\\n20,0\\n1000,3\\n20000,0\\n'"}, "Variable Values Before Statement": {"column_separator_candidates": "{','}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"csv": [[1, "'frequency,raw\\n20,0\\n1000,3\\n20000,0\\n'"]], "lines": [[10.0, "['frequency,raw', '20,0', '1000,3', '20000,0']"]], "column_separator_candidates": [[12.0, "{'\\t', ';', ',', '|'}"], [22.0, "{';', ',', '|'}"], [22.0, "{',', '|'}"], [22.0, "{','}"]], "line": [[13.0, "'frequency,raw'"], [13.0, "'20,0'"], [13.0, "'1000,3'"], [13.0, "'20000,0'"]], "remove_candidates": [[16.0, "[]"], [20.0, "['\\t']"], [20.0, "['\\t', ';']"], [20.0, "['\\t', ';', '|']"], [16.0, "[]"]], "column_separator": [[17.0, "'\\t'"], [17.0, "';'"], [17.0, "','"], [17.0, "'|'"], [17.0, "','"]], "remove_candidate": [[21.0, "'\\t'"], [21.0, "';'"], [21.0, "'|'"]]}, "Program Information": "Project Name: jaakkopasanen+AutoEq", "idx": 89, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _merge(a, aux, lo, mid, hi):\n        i = lo\n        j = mid + 1\n\n        for k in range(lo, hi + 1):\n            aux[k] = a[k]\n\n        for k in range(lo, hi + 1):\n            if i > mid:\n                a[k] = aux[j]\n                j += 1\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge(a=[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, mid=3, hi=7)", "Selected Statement": "if i > mid:", "Function Input": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Variable Values Before Statement": {"i": "0", "mid": "3"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"a": [[1, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "mid": [[1, "3"]], "hi": [[1, "7"]], "i": [[2.0, "0"], [17.0, "1"], [17.0, "2"], [17.0, "3"], [17.0, "4"]], "j": [[3.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"], [11.0, "8"]], "k": [[5.0, "0"], [5.0, "1"], [5.0, "2"], [5.0, "3"], [5.0, "4"], [5.0, "5"], [5.0, "6"], [5.0, "7"], [8.0, "0"], [8.0, "1"], [8.0, "2"], [8.0, "3"], [8.0, "4"], [8.0, "5"], [8.0, "6"], [8.0, "7"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 90, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def partition(a, lo, hi):\n        i = lo\n        j = hi\n\n        while True:\n            while not util.less(a[lo], a[i]):\n                i += 1\n                if i >= hi:\n                    break\n\n            while util.less(a[lo], a[j]):\n                j -= 1\n                if j <= lo:\n                    break\n\n            if i >= j:\n                break\n\n            util.exchange(a, i, j)\n\n        util.exchange(a, lo, j)\n        return j\n\npartition(a=[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66], lo=0, hi=14)", "Selected Statement": "if i >= hi:", "Function Input": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "lo": "0", "hi": "14"}, "Variable Values Before Statement": {"i": "0", "hi": "14"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"a": [[1, "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [19.0, "[4, 2, 1, 4, 23, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"]], "lo": [[1, "0"]], "hi": [[1, "14"]], "i": [[2.0, "0"], [7.0, "1"], [7.0, "2"], [7.0, "3"], [7.0, "4"]], "j": [[3.0, "14"], [12.0, "13"], [12.0, "12"], [12.0, "11"], [12.0, "10"], [12.0, "9"], [12.0, "8"], [12.0, "7"], [12.0, "6"], [12.0, "5"], [12.0, "4"], [12.0, "3"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 91, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def version_compare(self, other):\n        \"Compares version of the form [epoch:]upstream-version[-debian-revision]\" \\\n        + \" according to Debian package version number format.\"\n\n        # compare epoch\n        diff = self.epoch - other.epoch\n        if diff != 0:\n            return diff\n\n        # compare upstream version and debian revision\n        for slf, othr in (self.upstream_version, other.upstream_version), (self.revision, other.revision):\n            i = 0\n            while len(slf) > 0 or len(othr) > 0:\n                decimal = (i % 2 == 1) \n                slf_part, slf = self._get_part(slf, decimal=decimal)\n                othr_part, othr = self._get_part(othr, decimal=decimal)\n                diff = self._compare_parts(slf_part, othr_part, decimal=decimal)\n                if diff != 0:\n                    return diff\n                i += 1\n\n        # versions are equal\n        return 0\n\nversion_compare(self=2.2.0~rc5, other=2.2.0~rc5, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "if diff != 0:", "Function Input": {"self": "2.2.0~rc5", "other": "2.2.0~rc5", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"diff": "0"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "other": [[1, "2.2.0~rc5"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "diff": [[6.0, "0"]], "slf": [[11.0, "'2.2.0~rc5'"], [15.0, "'.2.0~rc5'"], [15.0, "'2.0~rc5'"], [15.0, "'.0~rc5'"], [15.0, "'0~rc5'"], [15.0, "'~rc5'"], [15.0, "'5'"], [15.0, "''"], [11.0, "'0'"], [15.0, "''"]], "othr": [[11.0, "'2.2.0~rc5'"], [16.0, "'.2.0~rc5'"], [16.0, "'2.0~rc5'"], [16.0, "'.0~rc5'"], [16.0, "'0~rc5'"], [16.0, "'~rc5'"], [16.0, "'5'"], [16.0, "''"], [11.0, "'0'"], [16.0, "''"]], "i": [[12.0, "0"], [20.0, "1"], [20.0, "2"], [20.0, "3"], [20.0, "4"], [20.0, "5"], [20.0, "6"], [20.0, "7"], [20.0, "8"], [12.0, "0"], [20.0, "1"], [20.0, "2"]], "decimal": [[14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"]], "slf_part": [[15.0, "''"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'0'"], [15.0, "'~rc'"], [15.0, "'5'"], [15.0, "''"], [15.0, "'0'"]], "othr_part": [[16.0, "''"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'0'"], [16.0, "'~rc'"], [16.0, "'5'"], [16.0, "''"], [16.0, "'0'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 92, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _get_part(self, s, decimal):\n        \"Strips first part of string containing either non-decimal or decimal characters.\" \\\n        + \" Returns tuple (part, remider).\"\n        div = 0\n        for c in s:\n            if decimal and not c.isdecimal():\n                break\n            elif not decimal and c.isdecimal():\n                break\n            else:\n                div += 1\n\n        return (s[:div], s[div:])\n\n_get_part(self=2.2.0~rc5, s='2.2.0~rc5', decimal=False, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "if decimal and not c.isdecimal():", "Function Input": {"self": "2.2.0~rc5", "s": "'2.2.0~rc5'", "decimal": "False", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"decimal": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "s": [[1, "'2.2.0~rc5'"]], "decimal": [[1, "False"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "div": [[4.0, "0"]], "c": [[5.0, "'2'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 93, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _compare_parts(self, a, b, decimal):\n        if decimal:\n            if a == \"\": a = \"0\"\n            if b == \"\": b = \"0\"\n            return int(a) - int(b)\n        else:\n            i = 0\n            while i < (min(len(a), len(b)) + 1):\n                res = self._order(self._get_empty_str_on_index_error(a, i)) \\\n                        - self._order(self._get_empty_str_on_index_error(b, i))\n                if res != 0:\n                    return res\n                i += 1\n            else:\n                return 0\n\n_compare_parts(self=2.2.0~rc5, a='', b='', decimal=False, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "if a == \"\": a = \"0\"", "Function Input": {"self": "2.2.0~rc5", "a": "''", "b": "''", "decimal": "False", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"a": "''"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "a": [[1, "''"]], "b": [[1, "''"]], "decimal": [[1, "False"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "i": [[7.0, "0"], [13.0, "1"]], "res": [[9.0, "0"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 94, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def static_bool_env(varname: str, default: bool) -> bool:\n  \"\"\"Read an environment variable and interpret it as a boolean.\n\n  This is deprecated. Please use bool_flag() unless your flag\n  will be used in a static method and does not require runtime updates.\n\n  True values are (case insensitive): 'y', 'yes', 't', 'true', 'on', and '1';\n  false values are 'n', 'no', 'f', 'false', 'off', and '0'.\n  Args:\n    varname: the name of the variable\n    default: the default boolean value\n  Returns:\n    boolean return value derived from defaults and environment.\n  Raises: ValueError if the environment variable is anything else.\n  \"\"\"\n  val = os.getenv(varname, str(default))\n  val = val.lower()\n  if val in ('y', 'yes', 't', 'true', 'on', '1'):\n    return True\n  elif val in ('n', 'no', 'f', 'false', 'off', '0'):\n    return False\n  else:\n    raise ValueError(\n      'invalid truth value {!r} for environment {!r}'.format(val, varname)\n    )\n\nstatic_bool_env(varname='FLAX_LAZY_RNG', default=True)", "Selected Statement": "if val in ('y', 'yes', 't', 'true', 'on', '1'):", "Function Input": {"varname": "'FLAX_LAZY_RNG'", "default": "True"}, "Variable Values Before Statement": {"val": "'True'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"varname": [[1, "'FLAX_LAZY_RNG'"]], "default": [[1, "True"]], "val": [[16.0, "'True'"], [17.0, "'true'"]]}, "Program Information": "Project Name: google+flax", "idx": 95, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _copy(src, dst, src_is_storage, dst_is_storage):\n    \"\"\"\n    Copies file from source to destination\n\n    Args:\n        src (str or file-like object): Source file.\n        dst (str or file-like object): Destination file.\n        src_is_storage (bool): Source is storage.\n        dst_is_storage (bool): Destination is storage.\n    \"\"\"\n    # If both storage: Tries to perform same storage direct copy\n    if src_is_storage and dst_is_storage:\n        system = get_instance(src)\n        if system is get_instance(dst):\n\n            # Checks if same file\n            if system.relpath(src) == system.relpath(dst):\n                raise same_file_error(\n                    \"'%s' and '%s' are the same file\" % (src, dst))\n\n            # Tries to copy\n            try:\n                return system.copy(src, dst)\n            except (UnsupportedOperation, ObjectException):\n                pass\n\n    # At least one storage object: copies streams\n    with cos_open(src, 'rb') as fsrc:\n        with cos_open(dst, 'wb') as fdst:\n\n            # Get stream buffer size\n            for stream in (fdst, fsrc):\n                try:\n                    buffer_size = getattr(stream, '_buffer_size')\n                    break\n                except AttributeError:\n                    continue\n            else:\n                buffer_size = 16384\n\n            # Read and write\n            copyfileobj(fsrc, fdst, buffer_size)\n\n_copy(src='dummy_read://file.txt', dst='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt', src_is_storage=True, dst_is_storage=False)", "Selected Statement": "if src_is_storage and dst_is_storage:", "Function Input": {"src": "'dummy_read://file.txt'", "dst": "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'", "src_is_storage": "True", "dst_is_storage": "False"}, "Variable Values Before Statement": {"src_is_storage": "True", "dst_is_storage": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"src": [[1, "'dummy_read://file.txt'"]], "dst": [[1, "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'"]], "src_is_storage": [[1, "True"]], "dst_is_storage": [[1, "False"]], "fsrc": [[28.0, "{}"]], "fdst": [[29.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"]], "stream": [[32.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"], [32.0, "{}"]], "buffer_size": [[39.0, "16384"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 96, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_logger_name(context=None):\n        log_names = [root_logger_name, logger_name]\n\n        if context is not None:\n            log_names.insert(1,\n                             context if isinstance(context,\n                                                   string_types) else context.__class__.__name__)\n\n        return '.'.join(log_names)\n\nget_logger_name(context=None, logger_name='State')", "Selected Statement": "if context is not None:", "Function Input": {"context": "None", "logger_name": "'State'"}, "Variable Values Before Statement": {"context": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"context": [[1, "None"]], "logger_name": [[1, "'State'"]], "log_names": [[2.0, "['lewis', 'State']"]]}, "Program Information": "Project Name: DMSC-Instrument-Data+lewis", "idx": 97, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "if coeff_name is None:", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {"coeff_name": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 98, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def make_input_stream(input, charset):\n    # Is already an input stream.\n    if hasattr(input, 'read'):\n        if PY2:\n            return input\n        rv = _find_binary_reader(input)\n        if rv is not None:\n            return rv\n        raise TypeError('Could not find binary reader for input stream.')\n\n    if input is None:\n        input = b''\n    elif not isinstance(input, bytes):\n        input = input.encode(charset)\n    if PY2:\n        return StringIO(input)\n    return io.BytesIO(input)\n\nmake_input_stream(input=None, charset='utf-8')", "Selected Statement": "if input is None:", "Function Input": {"input": "None", "charset": "'utf-8'"}, "Variable Values Before Statement": {"input": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"input": [[1, "None"], [12.0, "b''"]], "charset": [[1, "'utf-8'"]]}, "Program Information": "Project Name: MrTango+click", "idx": 99, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _fetch(c):\n        try:\n            if spos is None:\n                return c.popleft()\n            else:\n                return c.pop()\n        except IndexError:\n            return None\n\n_fetch(c=deque([-1, 1]), spos=None)", "Selected Statement": "if spos is None:", "Function Input": {"c": "deque([-1, 1])", "spos": "None"}, "Variable Values Before Statement": {"spos": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"c": [[1, "deque([-1, 1])"], [4.0, "deque([1])"]], "spos": [[1, "None"]]}, "Program Information": "Project Name: MrTango+click", "idx": 100, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _build_prompt(text, suffix, show_default=False, default=None):\n    prompt = text\n    if default is not None and show_default:\n        prompt = '%s [%s]' % (prompt, default)\n    return prompt + suffix\n\n_build_prompt(text='Foo', suffix=': ', show_default=True, default=None)", "Selected Statement": "if default is not None and show_default:", "Function Input": {"text": "'Foo'", "suffix": "': '", "show_default": "True", "default": "None"}, "Variable Values Before Statement": {"show_default": "True"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"text": [[1, "'Foo'"]], "suffix": [[1, "': '"]], "show_default": [[1, "True"]], "default": [[1, "None"]], "prompt": [[2.0, "'Foo'"]]}, "Program Information": "Project Name: MrTango+click", "idx": 101, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def parse_array(data, start=0):\n    endcnt = data.find(CRLF, start + 1)\n\n    if endcnt == -1:\n        raise ParseError(\"Unterminated array element count after pos {}.\".format(start + 1))\n\n    try:\n        count = int(data[start + 1:endcnt])\n    except (ValueError, TypeError):\n        raise ParseError(\"Invalid array element count at pos {} - {}.\".format(start + 1, endcnt))\n\n    start = endcnt + CRLFLEN\n\n    if count == -1:\n        return None, endcnt\n\n    result = []\n    \n    for i in range(count):\n        if start + 4 < len(data):\n            obj, start = _decode(data, start)\n            result.append(obj)\n        else:\n            raise ParseError(\"Unterminated array element at pos {}\".format(start))\n    \n    return result, start\n\nparse_array(data='*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-7630684\\r\\n$3\\r\\nAAA\\r\\n', start=0)", "Selected Statement": "if endcnt == -1:", "Function Input": {"data": "'*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-7630684\\r\\n$3\\r\\nAAA\\r\\n'", "start": "0"}, "Variable Values Before Statement": {"endcnt": "2"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"data": [[1, "'*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-8232902\\r\\n$2\\r\\nxx\\r\\n*3\\r\\n$3\\r\\nSET\\r\\n$15\\r\\nmemtier-7630684\\r\\n$3\\r\\nAAA\\r\\n'"]], "start": [[1, "0"], [12.0, "4"], [21.0, "13"], [21.0, "35"], [21.0, "43"]], "endcnt": [[2.0, "2"]], "count": [[8.0, "3"]], "result": [[17.0, "[]"], [22.0, "['SET']"], [22.0, "['SET', 'memtier-8232902']"], [22.0, "['SET', 'memtier-8232902', 'xx']"]], "i": [[19.0, "0"], [19.0, "1"], [19.0, "2"]], "obj": [[21.0, "'SET'"], [21.0, "'memtier-8232902'"], [21.0, "'xx'"]]}, "Program Information": "Project Name: SpotlightKid+picoredis", "idx": 102, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def elapsed_text(seconds, precise, prefix=''):\n    seconds = round(seconds, 1 if precise else 0)\n    if seconds < 60.:\n        return '{}{:{}f}s'.format(prefix, seconds, .1 if precise else .0)\n\n    minutes, seconds = divmod(seconds, 60.)\n    if minutes < 60.:\n        return '{}{:.0f}:{:0{}f}'.format(prefix, minutes, seconds, 4.1 if precise else 2.0)\n\n    hours, minutes = divmod(minutes, 60.)\n    return '{}{:.0f}:{:02.0f}:{:0{}f}'.format(prefix, hours, minutes, seconds,\n                                              4.1 if precise else 2.0)\n\nelapsed_text(seconds=1.23, precise=True, prefix='')", "Selected Statement": "if seconds < 60.:", "Function Input": {"seconds": "1.23", "precise": "True", "prefix": "''"}, "Variable Values Before Statement": {"seconds": "1.23"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"seconds": [[1, "1.23"], [2.0, "1.2"]], "precise": [[1, "True"]], "prefix": [[1, "''"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 103, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def mknode(id=None, ip=None, port=None, intid=None):\n    \"\"\"\n    Make a node.  Created a random id if not specified.\n    \"\"\"\n    if intid is not None:\n        id = pack('>l', intid)\n    id = id or hashlib.sha1(str(random.getrandbits(255))).digest()\n    return Node(id, ip, port)\n\nmknode(id=None, ip=None, port=None, intid=0)", "Selected Statement": "if intid is not None:", "Function Input": {"id": "None", "ip": "None", "port": "None", "intid": "0"}, "Variable Values Before Statement": {"intid": "0"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"id": [[1, "None"], [6.0, "b'\\x00\\x00\\x00\\x00'"]], "ip": [[1, "None"]], "port": [[1, "None"]], "intid": [[1, "0"]]}, "Program Information": "Project Name: Storj+storj-kademlia", "idx": 104, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def strtobool(val):\n    \"\"\"Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    \"\"\"\n    val = val.lower()\n    if val in ('y', 'yes', 't', 'true', 'on', '1'):\n        return 1\n    if val in ('n', 'no', 'f', 'false', 'off', '0'):\n        return 0\n    raise ValueError(f\"invalid truth value {val!r}\")\n\nstrtobool(val='False')", "Selected Statement": "if val in ('n', 'no', 'f', 'false', 'off', '0'):", "Function Input": {"val": "'False'"}, "Variable Values Before Statement": {"val": "'false'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"val": [[1, "'False'"], [8.0, "'false'"]]}, "Program Information": "Project Name: mher+flower", "idx": 105, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def stringified_dict_contains_value(key, value, str_dict):\n    \"\"\"Checks if dict in for of string like \"{'test': 5}\" contains\n    key/value pair. This works faster, then creating actual dict\n    from string since this operation is called for each task in case\n    of kwargs search.\"\"\"\n    if not str_dict:\n        return False\n    value = str(value)\n    try:\n        # + 3 for key right quote, one for colon and one for space\n        key_index = str_dict.index(key) + len(key) + 3\n    except ValueError:\n        return False\n    try:\n        comma_index = str_dict.index(',', key_index)\n    except ValueError:\n        # last value in dict\n        comma_index = str_dict.index('}', key_index)\n    return str(value) == str_dict[key_index:comma_index].strip('\"\\'')\n\nstringified_dict_contains_value(key='test', value=5, str_dict=\"{'test': 5}\")", "Selected Statement": "if not str_dict:", "Function Input": {"key": "'test'", "value": "5", "str_dict": "\"{'test': 5}\""}, "Variable Values Before Statement": {"str_dict": "\"{'test': 5}\""}, "Value After Statement Execution": "No", "Variable States During Runtime": {"key": [[1, "'test'"]], "value": [[1, "5"], [8.0, "'5'"]], "str_dict": [[1, "\"{'test': 5}\""]], "key_index": [[11.0, "9"]], "comma_index": [[18.0, "10"]]}, "Program Information": "Project Name: mher+flower", "idx": 106, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def authenticate(pattern, email):\n    if '|' in pattern:\n        return email in pattern.split('|')\n    if '*' in pattern:\n        pattern = re.escape(pattern).replace(r'\\.\\*', r\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\-]*\")\n        return re.fullmatch(pattern, email)\n    return pattern == email\n\nauthenticate(pattern='.*@example.com', email='one@example.com')", "Selected Statement": "if '*' in pattern:", "Function Input": {"pattern": "'.*@example.com'", "email": "'one@example.com'"}, "Variable Values Before Statement": {"pattern": "'.*@example.com'"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"pattern": [[1, "'.*@example.com'"], [5.0, "\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\\\-]*@example\\\\.com\""]], "email": [[1, "'one@example.com'"]]}, "Program Information": "Project Name: mher+flower", "idx": 107, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def to_tuple(param, low=None, bias=None):\n    \"\"\"Convert input argument to min-max tuple\n    Args:\n        param (scalar, tuple or list of 2+ elements): Input value.\n            If value is scalar, return value would be (offset - value, offset + value).\n            If value is tuple, return value would be value + offset (broadcasted).\n        low:  Second element of tuple can be passed as optional argument\n        bias: An offset factor added to each element\n    \"\"\"\n    if low is not None and bias is not None:\n        raise ValueError(\"Arguments low and bias are mutually exclusive\")\n\n    if param is None:\n        return param\n\n    if isinstance(param, (int, float)):\n        if low is None:\n            param = -param, +param\n        else:\n            param = (low, param) if low < param else (param, low)\n    elif isinstance(param, Sequence):\n        if len(param) != 2:\n            raise ValueError(\"to_tuple expects 1 or 2 values\")\n        param = tuple(param)\n    else:\n        raise ValueError(\"Argument param must be either scalar (int, float) or tuple\")\n\n    if bias is not None:\n        return tuple(bias + x for x in param)\n\n    return tuple(param)\n\nto_tuple(param=7, low=3, bias=None)", "Selected Statement": "if bias is not None:", "Function Input": {"param": "7", "low": "3", "bias": "None"}, "Variable Values Before Statement": {"bias": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"param": [[1, "7"], [20.0, "(3, 7)"]], "low": [[1, "3"]], "bias": [[1, "None"]]}, "Program Information": "Project Name: albumentations-team+albumentations", "idx": 108, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def file(input_file, light=False):\n    \"\"\"Import colorscheme from json file.\"\"\"\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/light/\"))\n    util.create_dir(os.path.join(CONF_DIR, \"colorschemes/dark/\"))\n\n    theme_name = \".\".join((input_file, \"json\"))\n    bri = \"light\" if light else \"dark\"\n\n    user_theme_file = os.path.join(CONF_DIR, \"colorschemes\", bri, theme_name)\n    theme_file = os.path.join(MODULE_DIR, \"colorschemes\", bri, theme_name)\n\n    # Find the theme file.\n    if input_file in (\"random\", \"random_dark\"):\n        theme_file = get_random_theme()\n\n    elif input_file == \"random_light\":\n        theme_file = get_random_theme(light)\n\n    elif input_file == \"random_user\":\n        theme_file = get_random_theme_user()\n\n    elif os.path.isfile(user_theme_file):\n        theme_file = user_theme_file\n\n    elif os.path.isfile(input_file):\n        theme_file = input_file\n\n    # Parse the theme file.\n    if os.path.isfile(theme_file):\n        logging.info(\"Set theme to \\033[1;37m%s\\033[0m.\",\n                     os.path.basename(theme_file))\n        util.save_file(os.path.basename(theme_file),\n                       os.path.join(CACHE_DIR, \"last_used_theme\"))\n        return parse(theme_file)\n\n    logging.error(\"No %s colorscheme file found.\", bri)\n    logging.error(\"Try adding   '-l' to set light themes.\")\n    logging.error(\"Try removing '-l' to set dark themes.\")\n    sys.exit(1)\n\nfile(input_file='tests/test_files/test_file.json', light=False)", "Selected Statement": "if input_file in (\"random\", \"random_dark\"):", "Function Input": {"input_file": "'tests/test_files/test_file.json'", "light": "False"}, "Variable Values Before Statement": {"input_file": "'tests/test_files/test_file.json'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"input_file": [[1, "'tests/test_files/test_file.json'"]], "light": [[1, "False"]], "theme_name": [[6.0, "'tests/test_files/test_file.json.json'"]], "bri": [[7.0, "'dark'"]], "user_theme_file": [[9.0, "'/home/XXX/.config/wal/colorschemes/dark/tests/test_files/test_file.json.json'"]], "theme_file": [[10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/pywal/colorschemes/dark/tests/test_files/test_file.json.json'"], [26.0, "'tests/test_files/test_file.json'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 109, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def parse(theme_file):\n    \"\"\"Parse the theme file.\"\"\"\n    data = util.read_file_json(theme_file)\n\n    if \"wallpaper\" not in data:\n        data[\"wallpaper\"] = \"None\"\n\n    if \"alpha\" not in data:\n        data[\"alpha\"] = util.Color.alpha_num\n\n    # Terminal.sexy format.\n    if \"color\" in data:\n        data = terminal_sexy_to_wal(data)\n\n    return data\n\nparse(theme_file='tests/test_files/test_file.json')", "Selected Statement": "if \"alpha\" not in data:", "Function Input": {"theme_file": "'tests/test_files/test_file.json'"}, "Variable Values Before Statement": {"data": "{'wallpaper': '5.png', 'alpha': '100', 'special': {'background': '#1F211E', 'foreground': '#F5F1F4', 'cursor': '#F5F1F4'}, 'colors': {'color0': '#1F211E', 'color1': '#4B7A85', 'color2': '#CC6A93', 'color3': '#5C9894', 'color4': '#A0A89B', 'color5': '#D1B9A9', 'color6': '#E3D6D8', 'color7': '#F5F1F4', 'color8': '#666666', 'color9': '#4B7A85', 'color10': '#CC6A93', 'color11': '#5C9894', 'color12': '#A0A89B', 'color13': '#D1B9A9', 'color14': '#E3D6D8', 'color15': '#F5F1F4'}}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"theme_file": [[1, "'tests/test_files/test_file.json'"]], "data": [[3.0, "{'wallpaper': '5.png', 'alpha': '100', 'special': {'background': '#1F211E', 'foreground': '#F5F1F4', 'cursor': '#F5F1F4'}, 'colors': {'color0': '#1F211E', 'color1': '#4B7A85', 'color2': '#CC6A93', 'color3': '#5C9894', 'color4': '#A0A89B', 'color5': '#D1B9A9', 'color6': '#E3D6D8', 'color7': '#F5F1F4', 'color8': '#666666', 'color9': '#4B7A85', 'color10': '#CC6A93', 'color11': '#5C9894', 'color12': '#A0A89B', 'color13': '#D1B9A9', 'color14': '#E3D6D8', 'color15': '#F5F1F4'}}"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 110, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _keep_only_referenced_tex(contents, splits):\n  \"\"\"Returns the filenames referenced from the tex files themselves.\n\n  It needs various iterations in case one file is referenced from an\n  unreferenced file.\n  \"\"\"\n  old_referenced = set(splits['tex_in_root'] + splits['tex_not_in_root'])\n  while True:\n    referenced = set(splits['tex_in_root'])\n    for fn in old_referenced:\n      for fn2 in old_referenced:\n        if regex.search(\n            r'(' + os.path.splitext(fn)[0] + r'[.}])', '\\n'.join(contents[fn2])\n        ):\n          referenced.add(fn)\n\n    if referenced == old_referenced:\n      splits['tex_to_copy'] = list(referenced)\n      return\n\n    old_referenced = referenced.copy()\n\n_keep_only_referenced_tex(contents={'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}, splits={'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []})", "Selected Statement": "if referenced == old_referenced:", "Function Input": {"contents": "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}", "splits": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"}, "Variable Values Before Statement": {"referenced": "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}", "old_referenced": "{'figures/figure_included.tex', 'figures/figure_not_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"contents": [[1, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}"]], "splits": [[1, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"], [18.0, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}"]], "old_referenced": [[7.0, "{'figures/figure_included.tex', 'figures/figure_not_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "referenced": [[9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "fn": [[10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_not_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"]], "fn2": [[11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 111, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "if operation == \"Replace\":", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"operation": "'Replace'"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 112, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def generate(resource_types=()):\n    resource_defs = {}\n    definitions = {\n        'resources': resource_defs,\n        'string_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\"type\": \"string\"},\n            },\n        },\n        'basic_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    'oneOf': [\n                        {\"type\": \"string\"},\n                        {\"type\": \"boolean\"},\n                        {\"type\": \"number\"},\n                    ],\n                }\n            },\n        },\n        'iam-statement': {\n            'additionalProperties': False,\n            'type': 'object',\n            'properties': {\n                'Sid': {'type': 'string'},\n                'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']},\n                'Principal': {'anyOf': [\n                    {'type': 'string'},\n                    {'type': 'object'}, {'type': 'array'}]},\n                'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]},\n                'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Condition': {'type': 'object'}\n            },\n            'required': ['Sid', 'Effect'],\n            'oneOf': [\n                {'required': ['Principal', 'Action', 'Resource']},\n                {'required': ['NotPrincipal', 'Action', 'Resource']},\n                {'required': ['Principal', 'NotAction', 'Resource']},\n                {'required': ['NotPrincipal', 'NotAction', 'Resource']},\n                {'required': ['Principal', 'Action', 'NotResource']},\n                {'required': ['NotPrincipal', 'Action', 'NotResource']},\n                {'required': ['Principal', 'NotAction', 'NotResource']},\n                {'required': ['NotPrincipal', 'NotAction', 'NotResource']}\n            ]\n        },\n        'actions': {},\n        'filters': {\n            'value': ValueFilter.schema,\n            'event': EventFilter.schema,\n            'age': AgeFilter.schema,\n            'reduce': ReduceFilter.schema,\n            # Shortcut form of value filter as k=v\n            'valuekv': {\n                'type': 'object',\n                'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'},\n                    {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]},\n                'minProperties': 1,\n                'maxProperties': 1},\n        },\n        'filters_common': {\n            'list_item_attrs': _get_attr_schema(),\n            'comparison_operators': {\n                'enum': list(OPERATORS.keys())},\n            'value_types': {'enum': VALUE_TYPES},\n            'value_from': ValuesFrom.schema,\n            'value': {'oneOf': [\n                {'type': 'array'},\n                {'type': 'string'},\n                {'type': 'boolean'},\n                {'type': 'number'},\n                {'type': 'null'}]},\n        },\n        'policy': {\n            'type': 'object',\n            'required': ['name', 'resource'],\n            'additionalProperties': False,\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'pattern': \"^[A-z][A-z0-9]*(-[A-z0-9]+)*$\"},\n                'conditions': {\n                    'type': 'array',\n                    'items': {'anyOf': [\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'or': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'not': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'and': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'$ref': '#/definitions/filters/value'},\n                        {'$ref': '#/definitions/filters/event'},\n                        {'$ref': '#/definitions/filters/valuekv'}]}},\n                # these should be deprecated for conditions\n                'region': {'type': 'string'},\n                'tz': {'type': 'string'},\n                'start': {'format': 'date-time'},\n                'end': {'format': 'date-time'},\n                'resource': {'oneOf': [\n                    {'type': 'string'},\n                    {'type': 'array', 'items': {'type': 'string'}}]},\n                'max-resources': {'anyOf': [\n                    {'type': 'integer', 'minimum': 1},\n                    {'$ref': '#/definitions/max-resources-properties'}\n                ]},\n                'max-resources-percent': {'type': 'number', 'minimum': 0, 'maximum': 100},\n                'comment': {'type': 'string'},\n                'comments': {'type': 'string'},\n                'description': {'type': 'string'},\n                'tags': {'type': 'array', 'items': {'type': 'string'}},\n                'metadata': {'type': 'object'},\n                'mode': {'$ref': '#/definitions/policy-mode'},\n                'source': {'enum': list(sources.keys())},\n                'actions': {\n                    'type': 'array',\n                },\n                'filters': {\n                    'type': 'array'\n                },\n                #\n                # TODO: source queries should really move under\n                # source. This was initially used for describe sources\n                # to expose server side query mechanisms, however its\n                # important to note it also prevents resource cache\n                # utilization between policies that have different\n                # queries.\n                'query': {\n                    'type': 'array', 'items': {'type': 'object'}}\n\n            },\n        },\n        'policy-mode': {\n            'anyOf': [e.schema for _, e in execution.items()],\n        },\n        'max-resources-properties': {\n            'type': 'object',\n            'additionalProperties': False,\n            'properties': {\n                'amount': {\"type\": 'integer', 'minimum': 1},\n                'op': {'enum': ['or', 'and']},\n                'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}\n            }\n        }\n    }\n\n    resource_refs = []\n    for cloud_name, cloud_type in sorted(clouds.items()):\n        for type_name, resource_type in sorted(cloud_type.resources.items()):\n            r_type_name = \"%s.%s\" % (cloud_name, type_name)\n            if resource_types and r_type_name not in resource_types:\n                if not resource_type.type_aliases:\n                    continue\n                elif not {\"%s.%s\" % (cloud_name, ralias) for ralias\n                        in resource_type.type_aliases}.intersection(\n                        resource_types):\n                    continue\n\n            aliases = []\n            if resource_type.type_aliases:\n                aliases.extend([\"%s.%s\" % (cloud_name, a) for a in resource_type.type_aliases])\n                # aws gets legacy aliases with no cloud prefix\n                if cloud_name == 'aws':\n                    aliases.extend(resource_type.type_aliases)\n\n            # aws gets additional alias for default name\n            if cloud_name == 'aws':\n                aliases.append(type_name)\n\n            resource_refs.append(\n                process_resource(\n                    r_type_name,\n                    resource_type,\n                    resource_defs,\n                    aliases,\n                    definitions,\n                    cloud_name\n                ))\n\n    schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        'id': 'http://schema.cloudcustodian.io/v0/custodian.json',\n        'definitions': definitions,\n        'type': 'object',\n        'required': ['policies'],\n        'additionalProperties': False,\n        'properties': {\n            'vars': {'type': 'object'},\n            'policies': {\n                'type': 'array',\n                'additionalItems': False,\n                'items': {'anyOf': resource_refs}\n            }\n        }\n    }\n\n    # allow empty policies with lazy load\n    if not resource_refs:\n        schema['properties']['policies']['items'] = {'type': 'object'}\n    return schema\n\ngenerate(resource_types=())", "Selected Statement": "if cloud_name == 'aws':", "Function Input": {"resource_types": "()"}, "Variable Values Before Statement": {"cloud_name": "'gcp'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"resource_types": [[1, "()"]], "resource_defs": [[2.0, "{}"], [177.0, "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}"]], "definitions": [[3.0, "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"], [177.0, "{'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"]], "resource_refs": [[153.0, "[]"], [176.0, "[{'$ref': '#/definitions/resources/gcp.region/policy'}]"]], "cloud_type": [[154.0, "<class 'c7n.resources.aws.AWS'>"], [154.0, "<class 'c7n_gcp.provider.GoogleCloud'>"]], "cloud_name": [[154.0, "'aws'"], [154.0, "'gcp'"]], "type_name": [[155.0, "'region'"]], "resource_type": [[155.0, "<class 'c7n_gcp.region.Region'>"]], "r_type_name": [[156.0, "'gcp.region'"]], "aliases": [[165.0, "[]"]], "schema": [[186.0, "{'$schema': 'http://json-schema.org/draft-07/schema#', 'id': 'http://schema.cloudcustodian.io/v0/custodian.json', 'definitions': {'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv'...ype': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}, 'type': 'object', 'required': ['policies'], 'additionalProperties': False, 'properties': {'vars': {'type': 'object'}, 'policies': {'type': 'array', 'additionalItems': False, 'items': {'anyOf': [{'$ref': '#/definitions/resources/gcp.region/policy'}]}}}}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 113, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def import_ext(name, optional=False):\n  components = name.split(\".\")\n  if (len(components) > 1):\n    __import__(\".\".join(components[:-1]))\n  previous_dlopenflags = None\n  if (sys.platform.startswith(\"linux\")) :\n    previous_dlopenflags = sys.getdlopenflags()\n    sys.setdlopenflags(0x100|0x2)\n  try: mod = __import__(name)\n  except ImportError as e:\n    if (optional): return None\n    error_msg = str(e)\n    m = symbol_not_found_pat.search(error_msg)\n    if m:\n      error_msg = (  error_msg[:m.start(1)]\n                   + cpp_function_name.demangle(m.group(1))\n                   + error_msg[m.end(1):])\n    raise ImportError(\n      \"\\n  \".join(['__import__(\"%s\"): %s' % (name, error_msg), \"sys.path:\"]\n      + [\"  \"+p for p in sys.path]))\n  for comp in components[1:]:\n    mod = getattr(mod, comp)\n  if (previous_dlopenflags is not None):\n    sys.setdlopenflags(previous_dlopenflags)\n  if (python_libstdcxx_so is not None):\n    mod_file = getattr(mod, \"__file__\", None)\n    if (mod_file is not None):\n      for line in easy_run.fully_buffered(\n                    command='/usr/bin/ldd \"%s\"' % mod_file).stdout_lines:\n        if (line.strip().startswith(\"libstdc++.so\")):\n          mod_libstdcxx_so = line.split()[0]\n          if (mod_libstdcxx_so != python_libstdcxx_so):\n            raise SystemError(\"\"\"\\\nFATAL: libstdc++.so mismatch:\n  %s: %s\n  %s: %s\"\"\" % (sys.executable, python_libstdcxx_so,\n               mod_file, mod_libstdcxx_so))\n          break\n  return mod\n\nimport_ext(name='boost_python_meta_ext', optional=False)", "Selected Statement": "if (optional): return None", "Function Input": {"name": "'boost_python_meta_ext'", "optional": "False"}, "Variable Values Before Statement": {"optional": "False"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"name": [[1, "'boost_python_meta_ext'"]], "optional": [[1, "False"]], "components": [[2.0, "['boost_python_meta_ext']"]], "previous_dlopenflags": [[5.0, "None"], [7.0, "258"]], "e": [[10.0, "ModuleNotFoundError(\"No module named 'boost_python_meta_ext'\")"]], "error_msg": [[12.0, "\"No module named 'boost_python_meta_ext'\""]], "m": [[13.0, "None"]]}, "Program Information": "Project Name: cctbx+cctbx_project", "idx": 114, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _make_text_tag(column, attributes, text, cell_width):\n    \"\"\"Build SVG text element based on content and style attributes\"\"\"\n    text_tag_attributes = {\n        'x': str(column * cell_width),\n        'textLength': str(wcswidth(text) * cell_width),\n    }\n    if attributes['bold']:\n        text_tag_attributes['font-weight'] = 'bold'\n\n    if attributes['italics']:\n        text_tag_attributes['font-style'] = 'italic'\n\n    decoration = ''\n    if attributes['underscore']:\n        decoration = 'underline'\n    if attributes['strikethrough']:\n        decoration += ' line-through'\n    if decoration:\n        text_tag_attributes['text-decoration'] = decoration\n\n    if attributes['color'].startswith('#'):\n        text_tag_attributes['fill'] = attributes['color']\n    else:\n        text_tag_attributes['class'] = attributes['color']\n\n    text_tag = etree.Element('text', text_tag_attributes)\n    text_tag.text = text\n    return text_tag\n\n_make_text_tag(column=0, attributes={'color': 'red', 'bold': False, 'italics': False, 'underscore': False, 'strikethrough': False}, text='A', cell_width=8)", "Selected Statement": "if attributes['bold']:", "Function Input": {"column": "0", "attributes": "{'color': 'red', 'bold': False, 'italics': False, 'underscore': False, 'strikethrough': False}", "text": "'A'", "cell_width": "8"}, "Variable Values Before Statement": {"attributes": "{'color': 'red', 'bold': False, 'italics': False, 'underscore': False, 'strikethrough': False}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"column": [[1, "0"]], "attributes": [[1, "{'color': 'red', 'bold': False, 'italics': False, 'underscore': False, 'strikethrough': False}"]], "text": [[1, "'A'"]], "cell_width": [[1, "8"]], "text_tag_attributes": [[3.0, "{'x': '0', 'textLength': '8'}"], [24.0, "{'x': '0', 'textLength': '8', 'class': 'red'}"]], "decoration": [[13.0, "''"]], "text_tag": [[26.0, "<Element text at 0x7ff5ea583680>"]]}, "Program Information": "Project Name: nbedos+termtosvg", "idx": 115, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def digit_version(version_str: str, length: int = 4):\n    \"\"\"Convert a version string into a tuple of integers.\n\n    This method is usually used for comparing two versions. For pre-release\n    versions: alpha < beta < rc.\n\n    Args:\n        version_str (str): The version string.\n        length (int): The maximum number of version levels. Default: 4.\n\n    Returns:\n        tuple[int]: The version info in digits (integers).\n    \"\"\"\n    assert 'parrots' not in version_str\n    version = parse(version_str)\n    assert version.release, f'failed to parse version {version_str}'\n    release = list(version.release)\n    release = release[:length]\n    if len(release) < length:\n        release = release + [0] * (length - len(release))\n    if version.is_prerelease:\n        mapping = {'a': -3, 'b': -2, 'rc': -1}\n        val = -4\n        # version.pre can be None\n        if version.pre:\n            if version.pre[0] not in mapping:\n                warnings.warn(f'unknown prerelease version {version.pre[0]}, '\n                              'version checking may go wrong')\n            else:\n                val = mapping[version.pre[0]]\n            release.extend([val, version.pre[-1]])\n        else:\n            release.extend([val, 0])\n\n    elif version.is_postrelease:\n        release.extend([1, version.post])\n    else:\n        release.extend([0, 0])\n    return tuple(release)\n\ndigit_version(version_str='2.2.2+cu121', length=4)", "Selected Statement": "if len(release) < length:", "Function Input": {"version_str": "'2.2.2+cu121'", "length": "4"}, "Variable Values Before Statement": {"length": "4"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"version_str": [[1, "'2.2.2+cu121'"]], "length": [[1, "4"]], "version": [[15.0, "<Version('2.2.2+cu121')>"]], "release": [[17.0, "[2, 2, 2]"], [20.0, "[2, 2, 2, 0]"], [38.0, "[2, 2, 2, 0, 0, 0]"]]}, "Program Information": "Project Name: Mikubill+sd-webui-controlnet", "idx": 116, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def from_file(filepath, delimiter=\"\", blanklines=False):\n    \"\"\"Imports userdata from a file.\n\n    :type filepath: string\n\n    :param filepath  The absolute path to the file.\n\n    :type delimiter: string\n\n    :param: delimiter  Delimiter to use with the troposphere.Join().\n\n    :type blanklines: boolean\n\n    :param blanklines  If blank lines should be ignored\n\n    rtype: troposphere.Base64\n    :return The base64 representation of the file.\n    \"\"\"\n    data = []\n\n    try:\n        with open(filepath, \"r\") as f:\n            for line in f:\n                if blanklines and line.strip(\"\\n\\r \") == \"\":\n                    continue\n\n                data.append(line)\n    except IOError:\n        raise IOError(\"Error opening or reading file: {}\".format(filepath))\n\n    return Base64(Join(delimiter, data))\n\nfrom_file(filepath='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh', delimiter='', blanklines=False)", "Selected Statement": "if blanklines and line.strip(\"\\n\\r \") == \"\":", "Function Input": {"filepath": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh'", "delimiter": "''", "blanklines": "False"}, "Variable Values Before Statement": {"blanklines": "False"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"filepath": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh'"]], "delimiter": [[1, "''"]], "blanklines": [[1, "False"]], "data": [[19.0, "[]"], [27.0, "['\\\\n\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n', '\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n', '\\n', '<>\\n']"]], "f": [[22.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh' mode='r' encoding='UTF-8'>"]], "line": [[23.0, "'\\\\n\\n'"], [23.0, "'\\\\\\n'"], [23.0, "'    \\n'"], [23.0, "'?\\n'"], [23.0, "'\"\"\\n'"], [23.0, "'\\n'"], [23.0, "'<>\\n'"]]}, "Program Information": "Project Name: cloudtools+troposphere", "idx": 117, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "if '--' in args:", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {"args": "['a', 'b', '--']"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 118, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def config_dict(configuration_tuple):\n    config_dict = {}\n\n    config_file = configuration_tuple._asdict().get('CFG')\n    if config_file is None:\n        config_file = configfile.get_config_path(configuration_tuple)\n\n    if config_file is not None:\n        config_dict = utils.filter_fields(configfile.read_config(config_file), configuration_tuple)\n        config_dict = utils.type_correct_with(config_dict, configuration_tuple)\n\n    return config_dict\n\nconfig_dict(configuration_tuple={})", "Selected Statement": "if config_file is not None:", "Function Input": {"configuration_tuple": "{}"}, "Variable Values Before Statement": {"config_file": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"configuration_tuple": [[1, "{}"]], "config_dict": [[2.0, "{}"], [9.0, "{'bar': '42'}"], [10.0, "{'bar': 42}"]], "config_file": [[4.0, "None"], [6.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 119, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def do_replace(fname, content, before_text, after_text, fence=None):\n    before_text = strip_quoted_wrapping(before_text, fname, fence)\n    after_text = strip_quoted_wrapping(after_text, fname, fence)\n    fname = Path(fname)\n\n    # does it want to make a new file?\n    if not fname.exists() and not before_text.strip():\n        fname.touch()\n        content = \"\"\n\n    if content is None:\n        return\n\n    if not before_text.strip():\n        # append to existing file, or start a new file\n        new_content = content + after_text\n    else:\n        new_content = replace_most_similar_chunk(content, before_text, after_text)\n\n    return new_content\n\ndo_replace(fname='/tmp/tmp7g7a2csg/file.txt', content='two\\n', before_text='two\\n', after_text='three\\n', fence=('```', '```'))", "Selected Statement": "if content is None:", "Function Input": {"fname": "'/tmp/tmp7g7a2csg/file.txt'", "content": "'two\\n'", "before_text": "'two\\n'", "after_text": "'three\\n'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"content": "'two\\n'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"], [4.0, "PosixPath('/tmp/tmp7g7a2csg/file.txt')"]], "content": [[1, "'two\\n'"]], "before_text": [[1, "'two\\n'"]], "after_text": [[1, "'three\\n'"]], "fence": [[1, "('```', '```')"]], "new_content": [[18.0, "'three\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 120, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):\n    \"\"\"\n    Given an input string which may have extra \"wrapping\" around it, remove the wrapping.\n    For example:\n\n    filename.ext\n    ```\n    We just want this content\n    Not the filename and triple quotes\n    ```\n    \"\"\"\n    if not res:\n        return res\n\n    res = res.splitlines()\n\n    if fname and res[0].strip().endswith(Path(fname).name):\n        res = res[1:]\n\n    if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):\n        res = res[1:-1]\n\n    res = \"\\n\".join(res)\n    if res and res[-1] != \"\\n\":\n        res += \"\\n\"\n\n    return res\n\nstrip_quoted_wrapping(res='two\\n', fname='/tmp/tmp7g7a2csg/file.txt', fence=('```', '```'))", "Selected Statement": "if res and res[-1] != \"\\n\":", "Function Input": {"res": "'two\\n'", "fname": "'/tmp/tmp7g7a2csg/file.txt'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"res": "['two']"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"res": [[1, "'two\\n'"], [15.0, "['two']"], [23.0, "'two'"], [25.0, "'two\\n'"]], "fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"]], "fence": [[1, "('```', '```')"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 121, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines):\n    # GPT often messes up leading whitespace.\n    # It usually does it uniformly across the ORIG and UPD blocks.\n    # Either omitting all leading whitespace, or including only some of it.\n\n    # Outdent everything in part_lines and replace_lines by the max fixed amount possible\n    leading = [len(p) - len(p.lstrip()) for p in part_lines if p.strip()] + [\n        len(p) - len(p.lstrip()) for p in replace_lines if p.strip()\n    ]\n\n    if leading and min(leading):\n        num_leading = min(leading)\n        part_lines = [p[num_leading:] if p.strip() else p for p in part_lines]\n        replace_lines = [p[num_leading:] if p.strip() else p for p in replace_lines]\n\n    # can we find an exact match not including the leading whitespace\n    num_part_lines = len(part_lines)\n\n    for i in range(len(whole_lines) - num_part_lines + 1):\n        add_leading = match_but_for_leading_whitespace(\n            whole_lines[i : i + num_part_lines], part_lines\n        )\n\n        if add_leading is None:\n            continue\n\n        replace_lines = [add_leading + rline if rline.strip() else rline for rline in replace_lines]\n        whole_lines = whole_lines[:i] + replace_lines + whole_lines[i + num_part_lines :]\n        return \"\".join(whole_lines)\n\n    return None\n\nreplace_part_with_missing_leading_whitespace(whole_lines=['    line1\\n', '    line2\\n', '    line3\\n'], part_lines=[' line1\\n', ' line2\\n'], replace_lines=[' new_line1\\n', '     new_line2\\n'])", "Selected Statement": "if leading and min(leading):", "Function Input": {"whole_lines": "['    line1\\n', '    line2\\n', '    line3\\n']", "part_lines": "[' line1\\n', ' line2\\n']", "replace_lines": "[' new_line1\\n', '     new_line2\\n']"}, "Variable Values Before Statement": {"leading": "[1, 1, 1, 5]"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"whole_lines": [[1, "['    line1\\n', '    line2\\n', '    line3\\n']"], [28.0, "['    new_line1\\n', '        new_line2\\n', '    line3\\n']"]], "part_lines": [[1, "[' line1\\n', ' line2\\n']"], [13.0, "['line1\\n', 'line2\\n']"]], "replace_lines": [[1, "[' new_line1\\n', '     new_line2\\n']"], [14.0, "['new_line1\\n', '    new_line2\\n']"], [27.0, "['    new_line1\\n', '        new_line2\\n']"]], "leading": [[7.0, "[1, 1, 1, 5]"]], "num_leading": [[12.0, "1"]], "num_part_lines": [[17.0, "2"]], "i": [[19.0, "0"]], "add_leading": [[20.0, "'    '"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 122, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def process_fenced_block(lines, start_line_num):\n    for line_num in range(start_line_num, len(lines)):\n        line = lines[line_num]\n        if line.startswith(\"```\"):\n            break\n\n    block = lines[start_line_num:line_num]\n    block.append(\"@@ @@\")\n\n    if block[0].startswith(\"--- \") and block[1].startswith(\"+++ \"):\n        # Extract the file path, considering that it might contain spaces\n        fname = block[1][4:].strip()\n        block = block[2:]\n    else:\n        fname = None\n\n    edits = []\n\n    keeper = False\n    hunk = []\n    op = \" \"\n    for line in block:\n        hunk.append(line)\n        if len(line) < 2:\n            continue\n\n        if line.startswith(\"+++ \") and hunk[-2].startswith(\"--- \"):\n            if hunk[-3] == \"\\n\":\n                hunk = hunk[:-3]\n            else:\n                hunk = hunk[:-2]\n\n            edits.append((fname, hunk))\n            hunk = []\n            keeper = False\n\n            fname = line[4:].strip()\n            continue\n\n        op = line[0]\n        if op in \"-+\":\n            keeper = True\n            continue\n        if op != \"@\":\n            continue\n        if not keeper:\n            hunk = []\n            continue\n\n        hunk = hunk[:-1]\n        edits.append((fname, hunk))\n        hunk = []\n        keeper = False\n\n    return line_num + 1, edits\n\nprocess_fenced_block(lines=['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n'], start_line_num=4)", "Selected Statement": "if not keeper:", "Function Input": {"lines": "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']", "start_line_num": "4"}, "Variable Values Before Statement": {"keeper": "True"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"lines": [[1, "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"]], "start_line_num": [[1, "4"]], "line_num": [[2.0, "4"], [2.0, "5"], [2.0, "6"], [2.0, "7"], [2.0, "8"], [2.0, "9"]], "line": [[3.0, "'--- /dev/null\\n'"], [3.0, "'+++ file.txt\\n'"], [3.0, "'@@ ... @@\\n'"], [3.0, "'-Original\\n'"], [3.0, "'+Modified\\n'"], [3.0, "'```\\n'"], [22.0, "'@@ ... @@\\n'"], [22.0, "'-Original\\n'"], [22.0, "'+Modified\\n'"], [22.0, "'@@ @@'"]], "block": [[7.0, "['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n']"], [8.0, "['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@']"], [13.0, "['@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@']"]], "fname": [[12.0, "'file.txt'"]], "edits": [[17.0, "[]"], [51.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]], "keeper": [[19.0, "False"], [42.0, "True"], [53.0, "False"]], "hunk": [[20.0, "[]"], [23.0, "['@@ ... @@\\n']"], [47.0, "[]"], [23.0, "['-Original\\n']"], [23.0, "['-Original\\n', '+Modified\\n']"], [23.0, "['-Original\\n', '+Modified\\n', '@@ @@']"], [50.0, "['-Original\\n', '+Modified\\n']"], [52.0, "[]"]], "op": [[21.0, "' '"], [40.0, "'@'"], [40.0, "'-'"], [40.0, "'+'"], [40.0, "'@'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 123, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _addpoint(sol, i, distances, prec):\n    \"\"\"\n    Try to add point i to a given solution-approach.\n\n    gives all possibilties and a status about the solution:\n        state = 0: possibilities found\n        state = 1: no possibilities but no contradiction\n        state = 2: solution-approach has a contradiction with point i\n    \"\"\"\n    res = []\n\n    # if i is already part of the solution return it\n    if np.ndim(sol[i]) != 0:\n        return [sol], 0\n\n    # collect the points already present in the solution\n    solpnts = []\n    for n, m in enumerate(sol):\n        if np.ndim(m) != 0:\n            solpnts.append(n)\n\n    # number of present points\n    pntscount = len(solpnts)\n\n    # try to add the point in all possible constellations\n    for n in range(pntscount - 1):\n        for m in range(n + 1, pntscount):\n            tmppnt, state = _pntcoord(\n                sol, i, solpnts[n], solpnts[m], distances, prec\n            )\n\n            # if possiblities are found, add them (at most 2! (think about))\n            if state == 0:\n                for pnt in tmppnt:\n                    res.append(dcopy(sol))\n                    res[-1][i] = pnt\n\n            # if one possiblity or a contradiction is found, return the result\n            if state != 1:\n                return res, state\n\n    # if the state remaind 1, return empty result and no contradiction\n    return res, state\n\n_addpoint(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "if state == 0:", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"state": "0"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "res": [[10.0, "[]"], [35.0, "[[array([0., 0.]), array([3., 0.]), 0, 0]]"], [36.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0]]"], [35.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), 0, 0]]"], [36.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0]]"]], "solpnts": [[17.0, "[]"], [20.0, "[0]"], [20.0, "[0, 1]"]], "n": [[18.0, "0"], [18.0, "1"], [18.0, "2"], [18.0, "3"], [26.0, "0"]], "m": [[18.0, "array([0., 0.])"], [18.0, "array([3., 0.])"], [18.0, "0"], [27.0, "1"]], "pntscount": [[23.0, "2"]], "tmppnt": [[28.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[28.0, "0"]], "pnt": [[34.0, "array([3.5       , 1.93649167])"], [34.0, "array([ 3.5       , -1.93649167])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 124, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _pntcoord(sol, i, n, m, distances, prec):\n    \"\"\"\n    Generate coordinates for point i in constellation to points m and n.\n\n    Check if these coordinates are valid with all other points in the solution.\n    \"\"\"\n    tmppnt = []\n\n    state = 1\n\n    pntscount = len(sol)\n\n    # if no distances known, return empty result and the unknown-state\n    if distances[i, n] < -0.5 or distances[i, m] < -0.5:\n        return tmppnt, state\n\n    # if the Triangle inequality is not fullfilled give a contradiction\n    if distances[i, n] + distances[i, m] < _dist(sol[n], sol[m]):\n        state = 2\n        return tmppnt, state\n\n    # generate the affine rotation to bring the points in the right place\n    g = _affinef(*_invtranmat(*_tranmat(sol[n], sol[m])))\n\n    # generate the coordinates\n    x = _xvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n    y1, y2 = _yvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n\n    # generate the possible positons\n    pos1 = g(np.array([x, y1]))\n    pos2 = g(np.array([x, y2]))\n\n    valid1 = True\n    valid2 = True\n\n    # check if the possible positions are valid\n    for k in range(pntscount):\n        if np.ndim(sol[k]) != 0 and distances[i, k] > -0.5:\n            valid1 &= abs(_dist(sol[k], pos1) - distances[i, k]) < prec\n            valid2 &= abs(_dist(sol[k], pos2) - distances[i, k]) < prec\n\n    # if any position is valid, add it to the result\n    if valid1 or valid2:\n        state = 0\n        same = abs(y1 - y2) < prec / 4.0\n        if valid1:\n            tmppnt.append(dcopy(pos1))\n        if valid2 and not same:\n            tmppnt.append(dcopy(pos2))\n    # if the positions are not valid, give a contradiction\n    else:\n        state = 2\n\n    return tmppnt, state\n\n_pntcoord(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, n=0, m=1, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "if valid1 or valid2:", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "n": "0", "m": "1", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"valid1": "True", "valid2": "True"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "n": [[1, "0"]], "m": [[1, "1"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "tmppnt": [[7.0, "[]"], [47.0, "[array([3.5       , 1.93649167])]"], [49.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[9.0, "1"], [44.0, "0"]], "pntscount": [[11.0, "4"]], "g": [[23.0, "<function _affinef.<locals>.func at 0x7f9d2f5dc9d0>"]], "x": [[26.0, "3.5"]], "y1": [[27.0, "1.9364916731037083"]], "y2": [[27.0, "-1.9364916731037083"]], "pos1": [[30.0, "array([3.5       , 1.93649167])"]], "pos2": [[31.0, "array([ 3.5       , -1.93649167])"]], "valid1": [[33.0, "True"]], "valid2": [[34.0, "True"]], "k": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"]], "same": [[45.0, "False"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 125, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def str2datetime(string):\n    \"\"\"\n    Convert a normalized Benthos timestamp to a datetime object\n\n    Parameters\n    ----------\n    string : str\n        String to convert\n    \"\"\"\n\n    if string == \"0000-00-00T24:60:60Z\":\n        return None\n\n    ms = string[20:-1]\n    ms += \"000000\"[:6 - len(ms)]\n    return datetime.datetime(\n        int(string[:4]),\n        int(string[5:7]),\n        int(string[8:10]),\n        int(string[11:13]),\n        int(string[14:16]),\n        int(string[17:19]),\n        int(ms))\n\nstr2datetime(string='1970-01-01T00:00:00.0Z')", "Selected Statement": "if string == \"0000-00-00T24:60:60Z\":", "Function Input": {"string": "'1970-01-01T00:00:00.0Z'"}, "Variable Values Before Statement": {"string": "'1970-01-01T00:00:00.0Z'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"string": [[1, "'1970-01-01T00:00:00.0Z'"]], "ms": [[14.0, "'0'"], [15.0, "'000000'"]]}, "Program Information": "Project Name: SkyTruth+gpsd_format", "idx": 126, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def getLogger(name, stdout=None):\n    \"\"\" Return logger suitable for Cumulus \"\"\"\n    logger = logging.getLogger(name)\n    # clear existing handlers\n    logger.handlers = []\n    if (stdout is None):\n        logger.addHandler(logging.NullHandler())\n    if stdout is not None:\n        handler = logging.StreamHandler()\n        handler.setLevel(stdout['level'])\n        handler.setFormatter(CumulusFormatter())\n        logger.addHandler(handler)\n    # logging level\n    logger.setLevel(1)\n    return logger\n\ngetLogger(name='cumulus.aws', stdout=None)", "Selected Statement": "if stdout is not None:", "Function Input": {"name": "'cumulus.aws'", "stdout": "None"}, "Variable Values Before Statement": {"stdout": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"name": [[1, "'cumulus.aws'"]], "stdout": [[1, "None"]], "logger": [[3.0, "<Logger cumulus.aws (WARNING)>"], [14.0, "<Logger cumulus.aws (Level 1)>"]]}, "Program Information": "Project Name: amarouane-ABDLHAK+cumulus-process-py", "idx": 127, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def delete(self, *, ip_parameter, cascade):\n\n        as_address = clean_address(ip_parameter)\n        as_network = clean_network(ip_parameter)\n\n        if as_address in self.__description:\n            return self.__remove_ip_object(as_address)\n        elif as_network in self.__description:\n            return self.__remove_ip_object(as_network)\n\n        raise IPObjectNotInSpaceError(\"cannot delete undescribed IP object\")\n\ndelete(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_parameter='203.0.113.128', cascade=True, self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "if as_address in self.__description:", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_parameter": "'203.0.113.128'", "cascade": "True", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"as_address": "IPv4Address('203.0.113.128')"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [7.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_parameter": [[1, "'203.0.113.128'"]], "cascade": [[1, "True"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [7.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [7.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [7.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "as_address": [[3.0, "IPv4Address('203.0.113.128')"]], "as_network": [[4.0, "IPv4Network('203.0.113.128/32')"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 128, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_idx(ndim, axis=None, axis_idx=None):\n    s = [midx] * ndim\n    if axis is not None:\n        if hasattr(axis, \"__iter__\"):\n            for ax, axidx in zip(axis, axis_idx):\n                s[ax] = axidx\n        else:\n            s[axis] = axis_idx\n    return tuple(s)\n\nget_idx(ndim=1, axis=0, axis_idx=slice(None, -2, None))", "Selected Statement": "if axis is not None:", "Function Input": {"ndim": "1", "axis": "0", "axis_idx": "slice(None, -2, None)"}, "Variable Values Before Statement": {"axis": "0"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"ndim": [[1, "1"]], "axis": [[1, "0"]], "axis_idx": [[1, "slice(None, -2, None)"]], "s": [[2.0, "[slice(1, -1, None)]"], [8.0, "[slice(None, -2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 129, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_audioclip_stereo_max_volume(nchannels, channel_muted):\n    def make_frame(t):\n        frame = []\n        # build channels (one of each pair muted)\n        for i in range(int(nchannels / 2)):\n            if channel_muted == \"left\":\n                # if muted channel is left, [0, sound, 0, sound...]\n                frame.append(np.sin(t * 0))\n                frame.append(np.sin(440 * 2 * np.pi * t))\n            else:\n                # if muted channel is right, [sound, 0, sound, 0...]\n                frame.append(np.sin(440 * 2 * np.pi * t))\n                frame.append(np.sin(t * 0))\n        return np.array(frame).T\n\n    clip = AudioClip(make_frame, fps=44100, duration=1)\n    max_volume = clip.max_volume(stereo=True)\n    # if `stereo == True`, `AudioClip.max_volume` returns a Numpy array`\n    assert isinstance(max_volume, np.ndarray)\n    assert len(max_volume) == nchannels\n\n    # check channels muted and with sound\n    for i, channel_max_volume in enumerate(max_volume):\n        if i % 2 == 0:\n            if channel_muted == \"left\":\n                assert channel_max_volume == 0\n            else:\n                assert channel_max_volume > 0\n        else:\n            if channel_muted == \"right\":\n                assert channel_max_volume == 0\n            else:\n                assert channel_max_volume > 0\n\ntest_audioclip_stereo_max_volume(nchannels=2, channel_muted='left')", "Selected Statement": "if channel_muted == \"left\":", "Function Input": {"nchannels": "2", "channel_muted": "'left'"}, "Variable Values Before Statement": {"channel_muted": "'left'"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"nchannels": [[1, "2"]], "channel_muted": [[1, "'left'"]], "make_frame": [[2.0, "<function test_audioclip_stereo_max_volume.<locals>.make_frame at 0x7f8c02a8e670>"]], "clip": [[16.0, "{start=0, end=1, duration=1, memoize=False, memoized_t=None, memoized_frame=None, fps=44100, nchannels=2}"]], "max_volume": [[17.0, "array([0.        , 0.99999975])"]], "@py_assert3": [[19.0, "None"]], "@py_assert5": [[19.0, "None"]], "@py_assert2": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "i": [[23.0, "0"], [23.0, "1"]], "channel_max_volume": [[23.0, "0.0"], [23.0, "0.999999746257887"]], "@py_assert1": [[26.0, "None"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 130, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_clip_with_end(duration, start, end, expected_start, expected_duration):\n    clip = ColorClip(color=(255, 0, 0), size=(2, 2), duration=duration).with_fps(1)\n    if start is not None:\n        clip = clip.with_start(start)\n    else:\n        clip.start = None\n    clip = clip.with_end(end)\n\n    assert clip.start == expected_start\n    assert clip.duration == expected_duration\n\ntest_clip_with_end(duration=3, start=1, end=2, expected_start=1, expected_duration=1)", "Selected Statement": "if start is not None:", "Function Input": {"duration": "3", "start": "1", "end": "2", "expected_start": "1", "expected_duration": "1"}, "Variable Values Before Statement": {"start": "1"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"duration": [[1, "3"]], "start": [[1, "1"]], "end": [[1, "2"]], "expected_start": [[1, "1"]], "expected_duration": [[1, "1"]], "clip": [[2.0, "{start=0, end=3, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"], [4.0, "{start=1, end=4, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"], [7.0, "{start=1, end=2, duration=1, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"]], "@py_assert1": [[9.0, "None"]], "@py_assert3": [[9.0, "None"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 131, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def ffmpeg_write_image(filename, image, logfile=False, pixel_format=None):\n    \"\"\"Writes an image (HxWx3 or HxWx4 numpy array) to a file, using ffmpeg.\n\n    Parameters\n    ----------\n\n    filename : str\n        Path to the output file.\n\n    image : np.ndarray\n        Numpy array with the image data.\n\n    logfile : bool, optional\n        Writes the ffmpeg output inside a logging file (``True``) or not\n        (``False``).\n\n    pixel_format : str, optional\n        Pixel format for ffmpeg. If not defined, it will be discovered checking\n        if the image data contains an alpha channel (``\"rgba\"``) or not\n        (``\"rgb24\"``).\n    \"\"\"\n    if image.dtype != \"uint8\":\n        image = image.astype(\"uint8\")\n    if not pixel_format:\n        pixel_format = \"rgba\" if (image.shape[2] == 4) else \"rgb24\"\n\n    cmd = [\n        FFMPEG_BINARY,\n        \"-y\",\n        \"-s\",\n        \"%dx%d\" % (image.shape[:2][::-1]),\n        \"-f\",\n        \"rawvideo\",\n        \"-pix_fmt\",\n        pixel_format,\n        \"-i\",\n        \"-\",\n        filename,\n    ]\n\n    if logfile:\n        log_file = open(filename + \".log\", \"w+\")\n    else:\n        log_file = sp.PIPE\n\n    popen_params = cross_platform_popen_params(\n        {\"stdout\": sp.DEVNULL, \"stderr\": log_file, \"stdin\": sp.PIPE}\n    )\n\n    proc = sp.Popen(cmd, **popen_params)\n    out, err = proc.communicate(image.tobytes())\n\n    if proc.returncode:\n        error = (\n            f\"{err}\\n\\nMoviePy error: FFMPEG encountered the following error while \"\n            f\"writing file {filename} with command {cmd}:\\n\\n {err.decode()}\"\n        )\n\n        raise IOError(error)\n\n    del proc\n\nffmpeg_write_image(filename='/tmp/moviepy_ffmpeg_write_image.png', image=array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]]), logfile=False, pixel_format=None)", "Selected Statement": "if not pixel_format:", "Function Input": {"filename": "'/tmp/moviepy_ffmpeg_write_image.png'", "image": "array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]])", "logfile": "False", "pixel_format": "None"}, "Variable Values Before Statement": {"pixel_format": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"filename": [[1, "'/tmp/moviepy_ffmpeg_write_image.png'"]], "image": [[1, "array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]])"], [23.0, "array([[[  0, 255,   0],        [ 51, 204,   0],        [102, 153,   0],        [153, 101,   0],        [204,  50,   0]]], dtype=uint8)"]], "logfile": [[1, "False"]], "pixel_format": [[1, "None"], [25.0, "'rgb24'"]], "cmd": [[27.0, "['/local/rcs/XXX/miniforge3/envs/Zulko+moviepy/lib/python3.9/site-packages/imageio_ffmpeg/binaries/ffmpeg-linux64-v4.2.2', '-y', '-s', '5x1', '-f', 'rawvideo', '-pix_fmt', 'rgb24', '-i', '-', '/tmp/moviepy_ffmpeg_write_image.png']"]], "log_file": [[44.0, "-1"]], "popen_params": [[46.0, "{'stdout': -3, 'stderr': -1, 'stdin': -1}"]], "proc": [[50.0, "<Popen: returncode: None args: ['/local/rcs/XXX/miniforge3/envs/Zulko+mov...>"], [51.0, "<Popen: returncode: 0 args: ['/local/rcs/XXX/miniforge3/envs/Zulko+moviep...>"]], "out": [[51.0, "None"]], "err": [[51.0, "b\"ffmpeg version 4.2.2-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2019 the FFmpeg developers\\n  built with gcc 8 (Debian 8.3.0-6)\\n  configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg\\n  libavutil      56. 31.100 / 56. 31.100\\n  libavcodec     58. 54.100 / 58. 54.100\\n  libavformat    58. 29.100 / 58. 29.100\\n  libavdevice    58.  8.100 / 58.  8.100\\n  libavfilter     7. 57.100 /  7. 57.100\\n  libswscale      5.  5.100 /  5.  5.100\\n  libswresample   3.  5.100 /  3.  5.100\\n  libpostproc    55.  5.100 / 55.  5.100\\nInput #0, rawvideo, from 'pipe:':\\n  Duration: N/A, start: 0.000000, bitrate: 3 kb/s\\n    Stream #0:0: Video: rawvideo (RGB[24] / 0x18424752), rgb24, 5x1, 3 kb/s, 25 tbr, 25 tbn, 25 tbc\\nStream mapping:\\n  Stream #0:0 -> #0:0 (rawvideo (native) -> png (native))\\nOutput #0, image2, to '/tmp/moviepy_ffmpeg_write_image.png':\\n  Metadata:\\n    encoder         : Lavf58.29.100\\n    Stream #0:0: Video: png, rgb24, 5x1, q=2-31, 200 kb/s, 25 fps, 25 tbn, 25 tbc\\n    Metadata:\\n      encoder         : Lavc58.54.100 png\\nframe=    1 fps=0.0 q=-0.0 Lsize=N/A time=00:00:00.04 bitrate=N/A speed=1.64x    \\nvideo:0kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\\n\""]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 132, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_mask_and(image_from, duration, color, mask_color, expected_color):\n    \"\"\"Checks ``mask_and`` FX behaviour.\"\"\"\n    clip_size = tuple(random.randint(3, 10) for i in range(2))\n\n    if duration == \"random\":\n        duration = round(random.uniform(0, 0.5), 2)\n\n    # test ImageClip and np.ndarray types as mask argument\n    clip = ColorClip(color=color, size=clip_size).with_duration(duration)\n    mask_clip = ColorClip(color=mask_color, size=clip.size)\n    masked_clip = mask_and(\n        clip, mask_clip if image_from == \"ImageClip\" else mask_clip.get_frame(0)\n    )\n\n    assert masked_clip.duration == clip.duration\n    assert np.array_equal(masked_clip.get_frame(0)[0][0], np.array(expected_color))\n\n    # test VideoClip as mask argument\n    color_frame, mask_color_frame = (np.array([[color]]), np.array([[mask_color]]))\n    clip = VideoClip(lambda t: color_frame).with_duration(duration)\n    mask_clip = VideoClip(lambda t: mask_color_frame).with_duration(duration)\n    masked_clip = mask_and(clip, mask_clip)\n\n    assert np.array_equal(masked_clip.get_frame(0)[0][0], np.array(expected_color))\n\ntest_mask_and(image_from='np.ndarray', duration=None, color=(0, 0, 0), mask_color=(255, 255, 255), expected_color=(0, 0, 0))", "Selected Statement": "if duration == \"random\":", "Function Input": {"image_from": "'np.ndarray'", "duration": "None", "color": "(0, 0, 0)", "mask_color": "(255, 255, 255)", "expected_color": "(0, 0, 0)"}, "Variable Values Before Statement": {"duration": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"image_from": [[1, "'np.ndarray'"]], "duration": [[1, "None"]], "color": [[1, "(0, 0, 0)"]], "mask_color": [[1, "(255, 255, 255)"]], "expected_color": [[1, "(0, 0, 0)"]], "clip_size": [[3.0, "(8, 3)"]], "clip": [[9.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]]])}"], [20.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "mask_clip": [[10.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]],       [[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]],       [[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]]])}"], [21.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "masked_clip": [[11.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]]])}"], [22.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "@py_assert1": [[15.0, "None"]], "@py_assert5": [[15.0, "None"]], "@py_assert3": [[15.0, "None"]], "@py_assert6": [[16.0, "None"]], "@py_assert9": [[16.0, "None"]], "@py_assert11": [[16.0, "None"]], "color_frame": [[19.0, "array([[[0, 0, 0]]])"]], "mask_color_frame": [[19.0, "array([[[255, 255, 255]]])"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 133, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n    \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n\n    defaults = HTYPE_CONFIGURATIONS[htype]\n\n    for key, value in htype_overwrite.items():\n        if key not in defaults:\n            raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n\n        if isinstance(value, str) and value == UNSPECIFIED:\n            if defaults[key] == REQUIRE_USER_SPECIFICATION:\n                raise TensorMetaMissingRequiredValue(htype, key)\n\n    sc = htype_overwrite[\"sample_compression\"]\n    cc = htype_overwrite[\"chunk_compression\"]\n    compr = sc if cc in (None, UNSPECIFIED) else cc\n    actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype\n    if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n        raise TensorMetaMissingRequiredValue(\n            actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n        )\n    if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n        if cc not in (UNSPECIFIED, None):\n            raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n        elif sc == UNSPECIFIED:\n            raise TensorMetaMissingRequiredValue(\n                actual_htype, \"sample_compression\"  # type: ignore\n            )\n    supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)\n    if (\n        compr\n        and compr != UNSPECIFIED\n        and supported_compressions\n        and compr not in supported_compressions\n    ):\n        raise UnsupportedCompressionError(compr, htype=htype)\n\n_validate_htype_overwrites(htype='generic', htype_overwrite={'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "Selected Statement": "if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):", "Function Input": {"htype": "'generic'", "htype_overwrite": "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Variable Values Before Statement": {"htype": "'generic'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"htype": [[1, "'generic'"]], "htype_overwrite": [[1, "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"]], "defaults": [[4.0, "{'dtype': None, 'sample_compression': None, 'chunk_compression': None, 'typestr': None, 'max_chunk_size': None, 'tiling_threshold': None, 'is_sequence': False, 'is_link': False, 'hidden': False, 'links': None, 'verify': False}"]], "key": [[6.0, "'sample_compression'"], [6.0, "'chunk_compression'"], [6.0, "'dtype'"], [6.0, "'hidden'"], [6.0, "'tiling_threshold'"], [6.0, "'max_chunk_size'"], [6.0, "'is_sequence'"], [6.0, "'is_link'"], [6.0, "'verify'"]], "value": [[6.0, "'unspecified'"], [6.0, "False"], [6.0, "None"], [6.0, "2000000"], [6.0, "False"], [6.0, "True"]], "sc": [[14.0, "'unspecified'"]], "cc": [[15.0, "'unspecified'"]], "compr": [[16.0, "'unspecified'"]], "actual_htype": [[17.0, "'generic'"]], "supported_compressions": [[29.0, "None"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 134, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_rack_tile_index(player_rack, move_letter):\n    for i, rack_tile in enumerate(player_rack):\n        if rack_tile.letter == move_letter:\n            return i\n\n    return None\n\nget_rack_tile_index(player_rack=[Q, E, O, S, G, H, E, B, A, K, E, R], move_letter='K')", "Selected Statement": "if rack_tile.letter == move_letter:", "Function Input": {"player_rack": "[Q, E, O, S, G, H, E, B, A, K, E, R]", "move_letter": "'K'"}, "Variable Values Before Statement": {"move_letter": "'K'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"player_rack": [[1, "[Q, E, O, S, G, H, E, B, A, K, E, R]"]], "move_letter": [[1, "'K'"]], "i": [[2.0, "0"], [2.0, "1"], [2.0, "2"], [2.0, "3"], [2.0, "4"], [2.0, "5"], [2.0, "6"], [2.0, "7"], [2.0, "8"], [2.0, "9"]], "rack_tile": [[2.0, "Q"], [2.0, "E"], [2.0, "O"], [2.0, "S"], [2.0, "G"], [2.0, "H"], [2.0, "E"], [2.0, "B"], [2.0, "A"], [2.0, "K"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 135, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_word_set_total_score(board, word_set, num_move_locations):\n    total_score = 0\n    word_score = 0\n\n    for word_location_set in word_set:\n        word_score = 0\n        word_multiplier = 1\n\n        for location in word_location_set:\n            square = board.board_square_dict[location]\n            word_multiplier *= square.word_multiplier\n            word_score += square.tile.point_value * square.letter_multiplier\n\n        word_score *= word_multiplier\n        total_score += word_score\n\n    if num_move_locations == config.PLAYER_RACK_SIZE:\n        total_score += config.BINGO_SCORE\n\n    return total_score\n\nget_word_set_total_score(board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, word_set={frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}, num_move_locations=5)", "Selected Statement": "if num_move_locations == config.PLAYER_RACK_SIZE:", "Function Input": {"board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "word_set": "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}", "num_move_locations": "5"}, "Variable Values Before Statement": {"num_move_locations": "5"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "word_set": [[1, "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}"]], "num_move_locations": [[1, "5"]], "total_score": [[2.0, "0"], [15.0, "24"]], "word_score": [[3.0, "0"], [12.0, "3"], [12.0, "8"], [12.0, "10"], [12.0, "11"], [12.0, "12"], [14.0, "24"]], "word_location_set": [[5.0, "frozenset()"], [5.0, "frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})"]], "word_multiplier": [[7.0, "1"], [11.0, "2"]], "location": [[9.0, "('h', 8)"], [9.0, "('j', 8)"], [9.0, "('l', 8)"], [9.0, "('i', 8)"], [9.0, "('k', 8)"]], "square": [[10.0, "B"], [10.0, "K"], [10.0, "R"], [10.0, "A"], [10.0, "E"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 136, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "if len(xs) < w:", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"w": "1"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 137, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def create_request_parameters(parent, request_model, params=None, index=None):\n    \"\"\"\n    Handle request parameters that can be filled in from identifiers,\n    resource data members or constants.\n\n    By passing ``params``, you can invoke this method multiple times and\n    build up a parameter dict over time, which is particularly useful\n    for reverse JMESPath expressions that append to lists.\n\n    :type parent: ServiceResource\n    :param parent: The resource instance to which this action is attached.\n    :type request_model: :py:class:`~boto3.resources.model.Request`\n    :param request_model: The action request model.\n    :type params: dict\n    :param params: If set, then add to this existing dict. It is both\n                   edited in-place and returned.\n    :type index: int\n    :param index: The position of an item within a list\n    :rtype: dict\n    :return: Pre-filled parameters to be sent to the request operation.\n    \"\"\"\n    if params is None:\n        params = {}\n\n    for param in request_model.params:\n        source = param.source\n        target = param.target\n\n        if source == 'identifier':\n            # Resource identifier, e.g. queue.url\n            value = getattr(parent, xform_name(param.name))\n        elif source == 'data':\n            # If this is a data member then it may incur a load\n            # action before returning the value.\n            value = get_data_member(parent, param.path)\n        elif source in ['string', 'integer', 'boolean']:\n            # These are hard-coded values in the definition\n            value = param.value\n        elif source == 'input':\n            # This is provided by the user, so ignore it here\n            continue\n        else:\n            raise NotImplementedError(f'Unsupported source type: {source}')\n\n        build_param_structure(params, target, value, index)\n\n    return params\n\ncreate_request_parameters(parent=dynamodb.Table(name='MyTable'), request_model={_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}, params=None, index=None)", "Selected Statement": "if params is None:", "Function Input": {"parent": "dynamodb.Table(name='MyTable')", "request_model": "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}", "params": "None", "index": "None"}, "Variable Values Before Statement": {"params": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"parent": [[1, "dynamodb.Table(name='MyTable')"]], "request_model": [[1, "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}"]], "params": [[1, "None"], [23.0, "{}"], [45.0, "{'TableName': 'MyTable'}"]], "index": [[1, "None"]], "param": [[25.0, "{target='TableName', source='identifier', name='Name', path=None, value=None}"]], "source": [[26.0, "'identifier'"]], "target": [[27.0, "'TableName'"]], "value": [[31.0, "'MyTable'"]]}, "Program Information": "Project Name: boto+boto3", "idx": 138, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def get_mylogin_cnf_path():\n    \"\"\"Return the path to the login path file or None if it doesn't exist.\"\"\"\n    mylogin_cnf_path = os.getenv('MYSQL_TEST_LOGIN_FILE')\n\n    if mylogin_cnf_path is None:\n        app_data = os.getenv('APPDATA')\n        default_dir = os.path.join(app_data, 'MySQL') if app_data else '~'\n        mylogin_cnf_path = os.path.join(default_dir, '.mylogin.cnf')\n\n    mylogin_cnf_path = os.path.expanduser(mylogin_cnf_path)\n\n    if exists(mylogin_cnf_path):\n        logger.debug(\"Found login path file at '{0}'\".format(mylogin_cnf_path))\n        return mylogin_cnf_path\n    return None\n\nget_mylogin_cnf_path()", "Selected Statement": "if mylogin_cnf_path is None:", "Function Input": {}, "Variable Values Before Statement": {"mylogin_cnf_path": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"mylogin_cnf_path": [[3.0, "None"], [8.0, "'~/.mylogin.cnf'"], [10.0, "'/home/XXX/.mylogin.cnf'"]], "app_data": [[6.0, "None"]], "default_dir": [[7.0, "'~'"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 139, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _check(self) -> None:\n        \"\"\"Check the syntax of the expression.\n\n        :raises ValueError:\n            If the expression is incomplete.  This error is aimed at debugging\n            the expression so it is very verbose.\n        \"\"\"\n        stack_size = 0\n        for i, token_ in enumerate(self._tokens):\n            stack_size -= token_.pops\n            if stack_size < 0:\n                raise ValueError(\n                    self._format_syntax_error(\n                        f\"'{token_}' takes {token_.pops} argument(s) but the stack\"\n                        f\" will only have {stack_size + token_.pops} element(s)\",\n                        i,\n                    )\n                )\n            stack_size += token_.puts\n        if stack_size == 0:\n            raise ValueError(\n                self._format_syntax_error(\"expression does not produce a result\")\n            )\n        if stack_size > 1:\n            raise ValueError(\n                self._format_syntax_error(\n                    f\"expression produces too many results ({stack_size}), \"\n                    \"expected 1\"\n                )\n            )\n\n_check(self=CompleteExpression([Literal(1)]), self[0]=Literal(1))", "Selected Statement": "if stack_size == 0:", "Function Input": {"self": "CompleteExpression([Literal(1)])", "self[0]": "Literal(1)"}, "Variable Values Before Statement": {"stack_size": "0"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "CompleteExpression([Literal(1)])"]], "self[0]": [[1, "Literal(1)"]], "stack_size": [[8.0, "0"], [19.0, "1"]], "i": [[9.0, "0"]], "token_": [[9.0, "Literal(1)"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 140, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def contains_sublist(list_: List[Any], sublist: List[Any]) -> bool:\n    \"\"\"Determine if a `list` contains a `sublist`.\n\n    :param list_:\n        list to search for the `sublist` in.\n    :param sublist:\n        Sub list to search for.\n\n    :return:\n        True if `list` contains `sublist`.\n\n    \"\"\"\n    # Adapted from: https://stackoverflow.com/a/12576755\n    if not sublist:\n        return False\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return True\n    return False\n\ncontains_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "if not sublist:", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"sublist": "[1, 2]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[16.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 141, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def delete_sublist(list_: List[Any], sublist: List[Any]) -> List[Any]:\n    \"\"\"Remove a `sublist` from the given `list_`.\n\n    :param list_:\n        List to remove the `sublist` from.\n    :param sublist:\n        Sublist to remove from `list_`.\n\n    :return:\n        A copy of `list_` with the `sublist` removed.\n    \"\"\"\n    if not sublist:\n        return list_[:]\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return list_[:i] + list_[i + len(sublist) :]\n    return list_[:]\n\ndelete_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "if not sublist:", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"sublist": "[1, 2]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[14.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 142, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def bounded_product(sequence, n=None, seed=None):\n    \"\"\"\n    Returns a shuffled, bounded cartesian product of the input sequence.\n    Designed to cover as wide a range of permutations as possible with a limited number of iterations.\n    Will manifest the whole list in memory, so not suitable for super large sequences.\n\n    :param sequence: iterable\n    :param n: length of returned list\n    :param seed: random seed for reproducibility\n    :return: list\n    \"\"\"\n    p = list(itertools.product(*sequence))\n    if seed is not None:\n        random.seed(seed)\n    random.shuffle(p)\n    return p if n is None else p[:n]\n\nbounded_product(sequence=([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]]), n=50, seed=None)", "Selected Statement": "if seed is not None:", "Function Input": {"sequence": "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])", "n": "50", "seed": "None"}, "Variable Values Before Statement": {"seed": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"sequence": [[1, "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])"]], "n": [[1, "50"]], "seed": [[1, "None"]], "p": [[12.0, "[([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis... True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False])]"], [15.0, "[([0, 1, 1], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, '...abled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True])]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 143, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def set_up_autotuning(encoded_config, overwrite_values):\n        config = json.loads(base64.urlsafe_b64decode(encoded_config).decode(\"utf-8\"))\n        overwrite_values = overwrite_values if overwrite_values else {}\n        for tuning_param in AUTOTUNING_ARGS:\n            # TODO: This is for autotuning specifically, may cause surprises for someone with a weird setup\n            if tuning_param in config:\n                overwrite_values[tuning_param] = config[tuning_param]\n        return overwrite_values\n\nset_up_autotuning(encoded_config='eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', overwrite_values={'train_iters': 32})", "Selected Statement": "if tuning_param in config:", "Function Input": {"encoded_config": "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='", "overwrite_values": "{'train_iters': 32}"}, "Variable Values Before Statement": {"tuning_param": "'autotuning'", "config": "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"encoded_config": [[1, "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='"]], "overwrite_values": [[1, "{'train_iters': 32}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "config": [[2.0, "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}"]], "tuning_param": [[4.0, "'train_batch_size'"], [4.0, "'train_micro_batch_size_per_gpu'"], [4.0, "'gradient_accumulation_steps'"], [4.0, "'zero_optimization'"], [4.0, "'autotuning'"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 144, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_model_training_options(monkeypatch, key, value):\n    # TODO: Possibly add testing over world_size=2 back in\n    neox_args = NeoXArgs.from_dict(BASE_CONFIG)\n    if getattr(neox_args, key) == value:\n        pytest.skip(\"Skipping to avoid redundancy as no change in base config\")\n    if key == \"precision\" and value == \"bfloat16\":\n        pytest.xfail(\n            reason=\"Assumes that ZeRO optimization stage has been set in the YAML\"\n        )\n    param_dict = {key: value}\n    run_train_test(monkeypatch, overwrite_values=param_dict)\n\ntest_model_training_options(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, key='gpt_j_residual', value=False)", "Selected Statement": "if getattr(neox_args, key) == value:", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "key": "'gpt_j_residual'", "value": "False"}, "Variable Values Before Statement": {"value": "False"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"]], "key": [[1, "'gpt_j_residual'"]], "value": [[1, "False"]], "neox_args": [[3.0, "NeoXArgs(distributed_backend='nccl', local_rank=None, rank=None, lazy_mpu_init=False, short_seq_prob=0.1, eod_mask_loss=False, adlr_autoresume=False, adlr_autoresume_interval=1000, seed=1234, onnx_safe=False, deepscale=False, deepscale_config=None, deepspeed_mpi=False, deepspeed_slurm=False, user_script=None, iteration=None, do_train=None, do_valid=None, do_test=None, save_iters=[], global_num_gpus=1, text_gen_type='unconditional', temperature=0.0, top_p=0.0, top_k=0, return_logits=False, maximum_tokens=64, prompt_end='\\n', sample_input_file=None, sample_output_file='samples.txt', num_samples=1, recompute=False, eval_results_prefix='', eval_tasks=None, use_wandb=False, wandb_group=None, wandb_team=None, wandb_project='neox', wandb_host='https://api.wandb.ai', wandb_init_all_ranks=False, git_hash='7a8fa2f0', log_dir=None, tensorboard_dir=None, log_interval=10, log_grad_pct_zeros=False, log_param_norm=False, log_grad_norm=False, log_optimizer_states=False, log_gradient_noise_scale=False, gradient_noise_scale_n_batches=5, gradient_noise_scale_cpu_offload=False, pipe_parallel_size=1, model_parallel_size=1, pipe_partition_method='type:transformer|mlp', world_size=None, is_pipe_parallel=True, data_path='data/enwik8/enwik8_text_document', use_shared_fs=True, train_data_paths=None, label_data_paths=None, test_data_paths=None, valid_data_paths=None, train_data_weights=None, valid_data_weights=None, test_data_weights=None, weight_by_num_documents=False, weighted_sampler_alpha=1.0, data_impl='mmap', mmap_warmup=False, save=None, s3_path=None, s3_chunk_size=104857600, config_files=None, load=None, checkpoint_validation_with_forward_pass=False, checkpoint_scale='linear', checkpoint_factor=1000, extra_save_iters=None, no_save_optim=False, no_save_rng=False, no_load_optim=False, no_load_rng=False, finetune=False, batch_size=4, train_iters=20, eval_iters=10, keep_last_n_checkpoints=None, eval_interval=100000, split='969, 30, 1', vocab_file='data/gpt2-vocab.json', merge_file='data/gpt2-merges.txt', num_workers=1, exit_interval=None, attention_dropout=0, hidden_dropout=0, weight_decay=0.1, checkpoint_activations=True, checkpoint_num_layers=1, deepspeed_activation_checkpointing=True, contiguous_checkpointing=False, checkpoint_in_cpu=False, synchronize_each_layer=True, profile_backward=False, partition_activations=True, gas=1, clip_grad=1.0, hysteresis=2, dynamic_loss_scale=True, loss_scale=None, loss_scale_window=1000.0, min_scale=1.0, char_level_ppl=False, use_mup=False, coord_check=False, save_base_shapes=False, base_shapes_file=None, mup_init_scale=1.0, mup_attn_temp=1.0, mup_output_temp=1.0, mup_embedding_mult=1.0, mup_rp_embedding_mult=1.0, mup_width_scale=2, tokenizer_type='GPT2BPETokenizer', padded_vocab_size=None, optimizer_type='sm3', use_bnb_optimizer=False, zero_stage=0, zero_reduce_scatter=True, zero_contiguous_gradients=False, zero_reduce_bucket_size=500000000, zero_allgather_bucket_size=500000000, lr=0.001, lr_decay_style='cosine', lr_decay_iters=20, min_lr=0.0, warmup=0.01, override_lr_scheduler=False, use_checkpoint_lr_scheduler=False, precision='fp16', num_layers=2, hidden_size=8, num_attention_heads=4, seq_length=1024, max_position_embeddings=1024, norm='layernorm', use_qk_layernorm=False, layernorm_epsilon=1e-05, rms_norm_epsilon=1e-08, scalenorm_epsilon=1e-08, pos_emb='rotary', rpe_num_buckets=32, rpe_max_distance=128, opt_pos_emb_offset=0, no_weight_tying=True, attention_config=['global', 'global'], sparsity_config={}, num_unique_layers=None, param_sharing_style='grouped', make_vocab_size_divisible_by=128, activation='gelu', scaled_upper_triang_masked_softmax_fusion=False, scaled_masked_softmax_fusion=False, bias_gelu_fusion=False, bias_dropout_fusion=False, rope_fusion=False, fp16_lm_cross_entropy=False, init_method_std=0.02, apply_query_key_layer_scaling=False, use_cpu_initialization=False, attention_softmax_in_fp32=False, rotary_pct=1.0, rotary_emb_base=10000, init_method='small_init', output_layer_init_method='wang_init', gmlp_attn_dim=64, gpt_j_residual=False, gpt_j_tied=False, use_bias_in_norms=True, use_bias_in_attn_linear=True, mlp_type='regular', soft_prompt_tuning=None, output_layer_parallelism='column', deepspeed=True, train_batch_size=4, train_micro_batch_size_per_gpu=4, gradient_accumulation_steps=1, optimizer={'type': 'sm3', 'params': {}}, scheduler=None, fp32_allreduce=False, prescale_gradients=False, gradient_predivide_factor=1.0, sparse_gradients=False, fp16={'type': 'fp16', 'enabled': True}, bf16=None, amp=None, gradient_clipping=1.0, zero_optimization={'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, curriculum_learning=None, curriculum_seqlen=0, steps_per_print=10, wall_clock_breakdown=True, dump_state=False, flops_profiler=None, communication_data_type=None, autotuning=None, activation_checkpointing=None, sparse_attention=None, data_efficiency=None, tensorboard=None, wandb=None, csv_monitor=None, elasticity=None, comms_logger=None, compression_training=None, checkpoint=None, data_types=None, deepspeed_extra_args={'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}, hostfile='None', include='localhost:1', exclude=None, num_nodes=-1, num_gpus=None, master_port=29500, master_addr=None, launcher='pdsh', force_multi=False, detect_nvlink_pairs=False, autotuning_run=None, no_ssh_check=False, comment=None, account=None)"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 145, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _get_nested(data, key):\n    \"\"\"\n    Return value for a hierrachical key (like a.b.c).\n    Return None if nothing found.\n    If there is a key with . in the name, and a subdictionary,\n    the former is preferred:\n\n    >>> print(_get_nested({'a.b': 10, 'a':{'b': 20}}, 'a.b'))\n    10\n    >>> print(_get_nested({'a': {'b': 20}}, 'a.b'))\n    20\n    >>> print(_get_nested({'a': {'b': {'c': 30}}}, 'a.b.c'))\n    30\n    \"\"\"\n\n    if not data or not isinstance(data, dict):\n        return None\n    if '.' not in key:\n        return data.get(key)\n    if key in data:\n        return data[key]\n\n    parts = key.split('.')\n    for i in range(len(parts))[::-1]:\n        prefix = \".\".join(parts[:i])\n        if prefix in data:\n            return _get_nested(data[prefix], \".\".join(parts[i:]))\n\n    return None\n\n_get_nested(data={'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}, key='adapters.active')", "Selected Statement": "if '.' not in key:", "Function Input": {"data": "{'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}", "key": "'adapters.active'"}, "Variable Values Before Statement": {"key": "'adapters.active'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"data": [[1, "{'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}"]], "key": [[1, "'adapters.active'"]], "parts": [[23.0, "['adapters', 'active']"]], "i": [[24.0, "1"], [24.0, "0"]], "prefix": [[25.0, "'adapters'"], [25.0, "''"]]}, "Program Information": "Project Name: chubin+cheat.sh", "idx": 146, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def sample(logits: torch.Tensor, temperature: float = 1.0, top_k: Optional[int] = None) -> torch.Tensor:\n    logits = logits[0, -1]\n    # optionally crop the logits to only the top k options\n    if top_k is not None:\n        v, i = torch.topk(logits, min(top_k, logits.size(-1)))\n        # do not use `torch.where` as in nanogpt because it will repeat top-k collisions\n        logits = torch.full_like(logits, float(\"-inf\")).scatter_(-1, i, v)\n    # optionally scale the logits and sample from a probability distribution\n    if temperature > 0.0:\n        probs = torch.nn.functional.softmax(logits / temperature, dim=-1)\n        return multinomial_num_samples_1(probs)\n    return torch.argmax(logits, dim=-1, keepdim=True)\n\nsample(logits=tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0'), temperature=0.8, top_k=None)", "Selected Statement": "if temperature > 0.0:", "Function Input": {"logits": "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')", "temperature": "0.8", "top_k": "None"}, "Variable Values Before Statement": {"temperature": "0.8"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"logits": [[1, "tensor([[[ 0.2595,  0.0058,  0.6498, -0.5155,  0.0366, -0.2944,  0.0555,          -0.4013],         [ 0.5342, -0.9790, -0.0861,  0.2530,  0.1378, -0.4913,  0.1915,          -0.3248],         [ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539,          -0.2213]]], device='cuda:0')"], [2.0, "tensor([ 0.5289, -0.3149,  0.4052,  0.2107, -0.8788, -0.9871,  0.6539, -0.2213],       device='cuda:0')"]], "temperature": [[1, "0.8"]], "top_k": [[1, "None"]], "probs": [[10.0, "tensor([0.2101, 0.0732, 0.1800, 0.1411, 0.0362, 0.0316, 0.2456, 0.0823],       device='cuda:0')"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 147, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def test_generate(monkeypatch, generated, stop_tokens, expected):\n    import chat.base as chat\n    import generate.base as generate\n\n    input_idx = torch.tensor([5, 3])\n    max_returned_tokens = len(input_idx) + 8\n    model = MagicMock()\n    model.config.block_size = 100\n    model.max_seq_length = 100\n    it = iter(generated)\n\n    def multinomial(*_, **__):\n        out = next(it)\n        return torch.tensor([out])\n\n    monkeypatch.setattr(generate, \"multinomial_num_samples_1\", multinomial)\n    actual = chat.generate(model, input_idx, max_returned_tokens, stop_tokens=stop_tokens)\n    actual = list(actual)\n\n    assert len(actual) == len(expected)\n    if not actual:\n        assert actual == expected\n    else:\n        for t in actual:\n            assert t.dtype == torch.long\n        assert torch.cat(actual).tolist() == expected\n\ntest_generate(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, generated=repeat(1), stop_tokens=(), expected=[1, 1, 1, 1, 1, 1, 1, 1])", "Selected Statement": "if not actual:", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "generated": "repeat(1)", "stop_tokens": "()", "expected": "[1, 1, 1, 1, 1, 1, 1, 1]"}, "Variable Values Before Statement": {"actual": "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [16.0, "{_setattr=[(<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>, 'multinomial_num_samples_1', <function multinomial_num_samples_1 at 0x7f805238a160>)], _setitem=[], _cwd=None, _savesyspath=None}"]], "generated": [[1, "repeat(1)"]], "stop_tokens": [[1, "()"]], "expected": [[1, "[1, 1, 1, 1, 1, 1, 1, 1]"]], "chat": [[2.0, "<module 'chat.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/chat/base.py'>"]], "generate": [[3.0, "<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>"]], "input_idx": [[5.0, "tensor([5, 3])"]], "max_returned_tokens": [[6.0, "10"]], "model": [[7.0, "<MagicMock id='140188337253248'>"]], "it": [[10.0, "repeat(1)"]], "multinomial": [[12.0, "<function test_generate.<locals>.multinomial at 0x7f7fd0f7e430>"]], "actual": [[17.0, "<generator object generate at 0x7f803c55ff90>"], [18.0, "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"]], "@py_assert2": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "t": [[24.0, "tensor([1])"]], "@py_assert1": [[25.0, "None"]], "@py_assert5": [[25.0, "None"]], "@py_assert3": [[25.0, "None"]], "@py_assert6": [[26.0, "None"]], "@py_assert8": [[26.0, "None"]], "@py_assert10": [[26.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 148, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def render_pep440_feature(pieces):\n    \"\"\"Build up version string, used within \"feature\" branch of repository.\n\n    Our goal: MERGE-POINT.post.devN+gHEX.BRANCH-NAME.M[.dirty]\n        +) MERGE-POINT = Most recent common ancestor for `develop` and `master`\n          *) Does not yet handle branch from `release-*`\n        +) N = DISTANCE from the MERGE-POINT of `develop` and `master`\n        +) M = DISTANCE from the MERGE-POINT of \"feature\" and `develop`\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"] and pieces[\"develop\"]:\n        rendered = pieces[\"closest-tag\"]\n        distance_to_develop = pieces[\"distance-to-develop\"]\n        distance_to_merge = pieces[\"distance-to-master\"]\n        distance_merge_to_tag = (pieces[\"distance\"] - distance_to_merge)\n        distance_dev_to_merge = (distance_to_merge - distance_to_develop)\n        if (distance_merge_to_tag > 0):\n            rendered += \".%d\" % distance_merge_to_tag\n        rendered += \".post.dev%d\" % distance_dev_to_merge\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n        rendered += \".%s\" % pieces[\"branch\"]\n        rendered += \".%d\" % distance_to_develop\n    else:\n        # exception #1\n        rendered = \"0.post.dev%d\" % (pieces[\"distance\"] - 1)\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \".dirty\"\n    return rendered\n\nrender_pep440_feature(pieces={'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']})", "Selected Statement": "if pieces[\"dirty\"]:", "Function Input": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Variable Values Before Statement": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"pieces": [[1, "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"]], "rendered": [[28.0, "'0.post.dev2'"], [29.0, "'0.post.dev2+'"], [30.0, "'0.post.dev2+ge60d005'"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 149, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def encode_number(n):\n    b128_digits = []\n    while n:\n        b128_digits.insert(0, (n & 0x7f) | 0x80)\n        n = n >> 7\n    if not b128_digits:\n        b128_digits.append(0)\n    b128_digits[-1] &= 0x7f\n    return b''.join([int.to_bytes(d, 1, 'big') for d in b128_digits])\n\nencode_number(n=840)", "Selected Statement": "if not b128_digits:", "Function Input": {"n": "840"}, "Variable Values Before Statement": {"b128_digits": "[134, 200]"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"n": [[1, "840"], [5.0, "6"], [5.0, "0"]], "b128_digits": [[2.0, "[]"], [4.0, "[200]"], [4.0, "[134, 200]"], [8.0, "[134, 72]"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 150, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def bits2octets(data, order):\n    z1 = bits2int(data, bit_length(order))\n    z2 = z1 - order\n\n    if z2 < 0:\n        z2 = z1\n\n    return number_to_string_crop(z2, order)\n\nbits2octets(data=b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee', order=115792089237316195423570985008687907852837564279074904382605163141518161494337)", "Selected Statement": "if z2 < 0:", "Function Input": {"data": "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Variable Values Before Statement": {"z2": "-40143102106555197328287958903398272462062044396680684900905814410515880714972"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"data": [[1, "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'"]], "order": [[1, "115792089237316195423570985008687907852837564279074904382605163141518161494337"]], "z1": [[2.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]], "z2": [[3.0, "-40143102106555197328287958903398272462062044396680684900905814410515880714972"], [6.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 151, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _import_plugins(plugin_names):\n    plugins = []\n    for name, path in plugin_names.items():\n        log.debug(\"Importing plugin %s: %s\", name, path)\n        if '.' not in path:\n            plugins.append(__import__(path))\n        else:\n            package, module = path.rsplit('.', 1)\n            module = __import__(path, fromlist=[module])\n            plugins.append(module)\n    return plugins\n\n_import_plugins(plugin_names={'__builtin__': 'awscli.handlers'})", "Selected Statement": "if '.' not in path:", "Function Input": {"plugin_names": "{'__builtin__': 'awscli.handlers'}"}, "Variable Values Before Statement": {"path": "'awscli.handlers'"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"plugin_names": [[1, "{'__builtin__': 'awscli.handlers'}"]], "plugins": [[2.0, "[]"], [10.0, "[<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>]"]], "name": [[3.0, "'__builtin__'"]], "path": [[3.0, "'awscli.handlers'"]], "package": [[8.0, "'awscli'"]], "module": [[8.0, "'handlers'"], [9.0, "<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>"]]}, "Program Information": "Project Name: aws+aws-cli", "idx": 152, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def _make_stage(self, planes: int, num_blocks: int, num_se_blocks: int) -> nn.Sequential:\n        \"\"\"Build a stage of MobileOne model.\n\n        :param planes: Number of output channels.\n        :param num_blocks: Number of blocks in this stage.\n        :param num_se_blocks: Number of SE blocks in this stage.\n        :return: A stage of MobileOne model.\n        \"\"\"\n        # Get strides for all layers\n        strides = [2] + [1] * (num_blocks - 1)\n        blocks = []\n        for ix, stride in enumerate(strides):\n            use_se = False\n            if num_se_blocks > num_blocks:\n                raise ValueError(\"Number of SE blocks cannot \" \"exceed number of layers.\")\n            if ix >= (num_blocks - num_se_blocks):\n                use_se = True\n\n            # Depthwise conv\n            blocks.append(\n                MobileOneBlock(\n                    in_channels=self.in_planes,\n                    out_channels=self.in_planes,\n                    kernel_size=3,\n                    stride=stride,\n                    padding=1,\n                    groups=self.in_planes,\n                    inference_mode=self.inference_mode,\n                    use_se=use_se,\n                    num_conv_branches=self.num_conv_branches,\n                )\n            )\n            # Pointwise conv\n            blocks.append(\n                MobileOneBlock(\n                    in_channels=self.in_planes,\n                    out_channels=planes,\n                    kernel_size=1,\n                    stride=1,\n                    padding=0,\n                    groups=1,\n                    inference_mode=self.inference_mode,\n                    use_se=use_se,\n                    num_conv_branches=self.num_conv_branches,\n                )\n            )\n            self.in_planes = planes\n            self.cur_layer_idx += 1\n        return nn.Sequential(*blocks)\n\n_make_stage(self=MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), planes=48, num_blocks=2, num_se_blocks=0, self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._depth=3, self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._in_channels=3, self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._modules=OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))]), self._non_persistent_buffers_set=set(), self._out_channels=(3, 48, 48, 128, 256, 1024), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.cur_layer_idx=1, self.in_planes=48, self.inference_mode=False, self.num_conv_branches=4, self.training=True, self.use_se=False)", "Selected Statement": "if ix >= (num_blocks - num_se_blocks):", "Function Input": {"self": "MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))", "planes": "48", "num_blocks": "2", "num_se_blocks": "0", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._depth": "3", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._in_channels": "3", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._modules": "OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))])", "self._non_persistent_buffers_set": "set()", "self._out_channels": "(3, 48, 48, 128, 256, 1024)", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.cur_layer_idx": "1", "self.in_planes": "48", "self.inference_mode": "False", "self.num_conv_branches": "4", "self.training": "True", "self.use_se": "False"}, "Variable Values Before Statement": {"ix": "1"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))"]], "planes": [[1, "48"]], "num_blocks": [[1, "2"]], "num_se_blocks": [[1, "0"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._depth": [[1, "3"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._in_channels": [[1, "3"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._modules": [[1, "OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))])"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._out_channels": [[1, "(3, 48, 48, 128, 256, 1024)"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.cur_layer_idx": [[1, "1"], [48.0, "2"], [48.0, "3"]], "self.in_planes": [[1, "48"]], "self.inference_mode": [[1, "False"]], "self.num_conv_branches": [[1, "4"]], "self.training": [[1, "True"]], "self.use_se": [[1, "False"]], "strides": [[10.0, "[2, 1]"]], "blocks": [[11.0, "[]"], [20.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ))]"], [34.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))]"], [20.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ))]"], [34.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))]"]], "ix": [[12.0, "0"], [12.0, "1"]], "stride": [[12.0, "2"], [12.0, "1"]], "use_se": [[13.0, "False"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 153, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def __setitem__(self, key, value):\n        # type: (_K, _V) -> None\n        \"\"\"Store a new views, potentially discarding an old value.\n        \"\"\"\n        if key not in self:\n            if len(self) >= self.cache_size:\n                self.popitem(last=False)\n        OrderedDict.__setitem__(self, key, value)\n\n__setitem__(self=LRUCache(), key='foo', value=1)", "Selected Statement": "if key not in self:", "Function Input": {"self": "LRUCache()", "key": "'foo'", "value": "1"}, "Variable Values Before Statement": {"key": "'foo'", "self": "LRUCache()"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "LRUCache()"], [8.0, "LRUCache([('foo', 1)])"]], "key": [[1, "'foo'"]], "value": [[1, "1"]], "self['foo']": [[8.0, "1"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 154, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def config(_config=None, **kwargs):\n    \"\"\"\n    A decorator for setting the default kwargs of `BaseHandler.crawl`.\n    Any self.crawl with this callback will use this config.\n    \"\"\"\n    if _config is None:\n        _config = {}\n    _config.update(kwargs)\n\n    def wrapper(func):\n        func._config = _config\n        return func\n    return wrapper\n\nconfig(_config=None, kwargs={'age': 864000})", "Selected Statement": "if _config is None:", "Function Input": {"_config": "None", "kwargs": "{'age': 864000}"}, "Variable Values Before Statement": {"_config": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"_config": [[1, "None"], [7.0, "{}"], [8.0, "{'age': 864000}"]], "kwargs": [[1, "{'age': 864000}"]], "wrapper": [[10.0, "<function config.<locals>.wrapper at 0x7f6a10388ee0>"]]}, "Program Information": "Project Name: binux+pyspider", "idx": 155, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def base64url_decode(input: Union[bytes, str]) -> bytes:\n    input_bytes = force_bytes(input)\n\n    rem = len(input_bytes) % 4\n\n    if rem > 0:\n        input_bytes += b\"=\" * (4 - rem)\n\n    return base64.urlsafe_b64decode(input_bytes)\n\nbase64url_decode(input='hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg')", "Selected Statement": "if rem > 0:", "Function Input": {"input": "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Variable Values Before Statement": {"rem": "3"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"input": [[1, "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"]], "input_bytes": [[2.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"], [7.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg='"]], "rem": [[4.0, "3"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 156, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def to_dict(self, default=None):\n        \"\"\"\n        Converts sequence of (Key, Value) pairs to a dictionary.\n\n        >>> type(seq([('a', 1)]).to_dict())\n        dict\n\n        >>> seq([('a', 1), ('b', 2)]).to_dict()\n        {'a': 1, 'b': 2}\n\n        :param default: Can be a callable zero argument function. When not None, the returned\n            dictionary is a collections.defaultdict with default as value for missing keys. If the\n            value is not callable, then a zero argument lambda function is created returning the\n            value and used for collections.defaultdict\n        :return: dictionary from sequence of (Key, Value) elements\n        \"\"\"\n        dictionary = {}\n        for e in self.sequence:\n            dictionary[e[0]] = e[1]\n        if default is None:\n            return dictionary\n        else:\n            if hasattr(default, '__call__'):\n                return collections.defaultdict(default, dictionary)\n            else:\n                return collections.defaultdict(lambda: default, dictionary)\n\nto_dict(self=[(1, 2), (2, 10), (7, 2)], default=None, self._base_sequence=[(1, 2), (2, 10), (7, 2)], self._lineage=Lineage: sequence)", "Selected Statement": "if default is None:", "Function Input": {"self": "[(1, 2), (2, 10), (7, 2)]", "default": "None", "self._base_sequence": "[(1, 2), (2, 10), (7, 2)]", "self._lineage": "Lineage: sequence"}, "Variable Values Before Statement": {"default": "None"}, "Value After Statement Execution": "No", "Variable States During Runtime": {"self": [[1, "[(1, 2), (2, 10), (7, 2)]"]], "default": [[1, "None"]], "self._base_sequence": [[1, "[(1, 2), (2, 10), (7, 2)]"]], "self._lineage": [[1, "Lineage: sequence"]], "dictionary": [[17.0, "{}"], [19.0, "{1: 2}"], [19.0, "{1: 2, 2: 10}"], [19.0, "{1: 2, 2: 10, 7: 2}"]], "e": [[18.0, "(1, 2)"], [18.0, "(2, 10)"], [18.0, "(7, 2)"]]}, "Program Information": "Project Name: EntilZha+ScalaFunctional", "idx": 157, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Branch", "Source Code": "def sqlite3(conn, sql, parameters=None, *args, **kwargs):\n    \"\"\"\n    Additional entry point to Sequence which query data from sqlite db file.\n\n    >>> seq.sqlite3('examples/users.db', 'select id, name from users where id = 1;').first()\n    [(1, \"Tom\")]\n\n    :param conn: path or sqlite connection, cursor\n    :param sql: SQL query string\n    :return: Sequence wrapping SQL cursor\n    \"\"\"\n\n    if parameters is None:\n        parameters = ()\n\n    if isinstance(conn, (sqlite3api.Connection, sqlite3api.Cursor)):\n        return seq(conn.execute(sql, parameters))\n    elif isinstance(conn, str):\n        with sqlite3api.connect(conn, *args, **kwargs) as input_conn:\n            return seq(input_conn.execute(sql, parameters))\n    else:\n        raise ValueError('conn must be a must be a file path or sqlite3 Connection/Cursor')\n\nsqlite3(conn=1, sql='SELECT * from user', parameters=None, args=(), kwargs={})", "Selected Statement": "if parameters is None:", "Function Input": {"conn": "1", "sql": "'SELECT * from user'", "parameters": "None", "args": "()", "kwargs": "{}"}, "Variable Values Before Statement": {"parameters": "None"}, "Value After Statement Execution": "Yes", "Variable States During Runtime": {"conn": [[1, "1"]], "sql": [[1, "'SELECT * from user'"]], "parameters": [[1, "None"], [14.0, "()"]], "args": [[1, "()"]], "kwargs": [[1, "{}"]]}, "Program Information": "Project Name: EntilZha+ScalaFunctional", "idx": 158, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def secrets_dir(env=os.getenv('D2_ENVIRONMENT', None),\n                basedir=os.getenv('D2_SECRETS_BASEDIR', None)):\n    if env is not None:\n        env_str = str(env)\n    else:\n        cwd = os.getcwd()\n        default_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(default_file):\n            with open(default_file, 'r') as f:\n                env_str = f.read().strip()\n        else:\n            env_str = os.path.basename(cwd)\n    if basedir is None:\n        basedir = os.path.join(\n                HOME,\n                'secrets' if sys.platform.startswith('win') else '.secrets')\n    return os.path.join(basedir, env_str)\n\nsecrets_dir(env=None, basedir=None)", "Selected Statement": "default_file = os.path.join(cwd, '.python_secrets_environment')", "Function Input": {"env": "None", "basedir": "None"}, "Variable Values Before Statement": {"cwd": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'", "Variable States During Runtime": {"env": [[1, "None"]], "basedir": [[1, "None"], [14.0, "'/home/XXX/.secrets'"]], "cwd": [[6.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "default_file": [[7.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]], "env_str": [[12.0, "'davedittrich+python_secrets'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 159, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _identify_environment(environment=None):\n    \"\"\"\n    Returns the environment identifier.\n\n    There are multiple ways to define the default environment (in order\n    of priority):\n\n    1. The --environment command line option;\n    2. The content of the file .python_secrets_environment in the current\n       working directory;\n    3. The value specified by environment variable D2_ENVIRONMENT; or\n    4. The basename of the current working directory.\n    \"\"\"\n    cwd = os.getcwd()\n    if environment is None:\n        env_file = os.path.join(cwd, '.python_secrets_environment')\n        if os.path.exists(env_file):\n            with open(env_file, 'r') as f:\n                environment = f.read().replace('\\n', '')\n        else:\n            environment = os.getenv('D2_ENVIRONMENT',\n                                    os.path.basename(cwd))\n    return environment\n\n_identify_environment(environment=None)", "Selected Statement": "env_file = os.path.join(cwd, '.python_secrets_environment')", "Function Input": {"environment": "None"}, "Variable Values Before Statement": {"cwd": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'", "Variable States During Runtime": {"environment": [[1, "None"], [21.0, "'davedittrich+python_secrets'"]], "cwd": [[14.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets'"]], "env_file": [[16.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/davedittrich+python_secrets/davedittrich+python_secrets/.python_secrets_environment'"]]}, "Program Information": "Project Name: davedittrich+python_secrets", "idx": 160, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_route_template(template):\n    rbuilder = [\"^\"]\n    fbuilder = []\n    position = 0\n    schema = {}\n\n    for match in template_var_re_finditer(template):\n        param_name = match.group(\"name\")\n        param_type = match.group(\"type\") or \"id\"\n        # TODO: Handle KeyError, maybe we want to use a custom error here.\n        param_formatchar, param_re, param_schema = _schema_map[param_type]\n        schema[param_name] = param_schema\n\n        rbuilder.append(re.escape(template[position:match.start()]))\n        rbuilder.append(param_re.format(param_name))\n\n        fbuilder.append(template[position:match.start()])\n        fbuilder.append(\"{\")\n        fbuilder.append(param_name)\n        fbuilder.append(\":\")\n        fbuilder.append(param_formatchar)\n        fbuilder.append(\"}\")\n\n        position = match.end()\n\n    rbuilder.append(re.escape(template[position:]))\n    rbuilder.append(\"$\")\n    fbuilder.append(template[position:])\n\n    return (valid.Schema(schema),\n            re.compile(\"\".join(rbuilder)),\n            u\"\".join(fbuilder).format)\n\nparse_route_template(template='get/{variable}')", "Selected Statement": "fbuilder.append(param_name)", "Function Input": {"template": "'get/{variable}'"}, "Variable Values Before Statement": {"param_name": "'variable'"}, "Value After Statement Execution": "['get/', '{', 'variable']", "Variable States During Runtime": {"template": [[1, "'get/{variable}'"]], "rbuilder": [[2.0, "['^']"], [14.0, "['^', 'get/']"], [15.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)']"], [26.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '']"], [27.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '', '$']"]], "fbuilder": [[3.0, "[]"], [17.0, "['get/']"], [18.0, "['get/', '{']"], [19.0, "['get/', '{', 'variable']"], [20.0, "['get/', '{', 'variable', ':']"], [21.0, "['get/', '{', 'variable', ':', 's']"], [22.0, "['get/', '{', 'variable', ':', 's', '}']"], [28.0, "['get/', '{', 'variable', ':', 's', '}', '']"]], "position": [[4.0, "0"], [24.0, "14"]], "schema": [[5.0, "{}"], [12.0, "{'variable': And(<class 'str'>, <function Match at 0x7f0c58d64940>)}"]], "match": [[7.0, "<re.Match object; span=(4, 14), match='{variable}'>"]], "param_name": [[8.0, "'variable'"]], "param_type": [[9.0, "'id'"]], "param_formatchar": [[11.0, "'s'"]], "param_re": [[11.0, "'(?P<{}>[_a-zA-Z][_\\\\w]*)'"]], "param_schema": [[11.0, "And(<class 'str'>, <function Match at 0x7f0c58d64940>)"]]}, "Program Information": "Project Name: aperezdc+omni", "idx": 161, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_generation(ba_name, **kwargs):\n    # get data\n    c = client_factory(ba_name)\n    data = c.get_generation(**kwargs)\n    \n    # log\n    if len(data) == 0:\n        msg = '%s: No generation data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),\n                                                    kwargs)\n        logger.warn(msg)\n    \n    # return\n    return data\n\nget_generation(ba_name='CAISO', kwargs={'latest': True})", "Selected Statement": "c = client_factory(ba_name)", "Function Input": {"ba_name": "'CAISO'", "kwargs": "{'latest': True}"}, "Variable Values Before Statement": {"ba_name": "'CAISO'"}, "Value After Statement Execution": "{options", "Variable States During Runtime": {"ba_name": [[1, "'CAISO'"]], "kwargs": [[1, "{'latest': True}"]], "c": [[3.0, "{options={}, NAME='CAISO'}"], [4.0, "{options={'data': 'gen', 'latest': True, 'yesterday': False, 'start_at': False, 'end_at': False, 'sliceable': False, 'forecast': False, 'market': 'RT5M', 'freq': '10m'}, NAME='CAISO', session=<requests.sessions.Session object at 0x7fcc37a98b50>}"]], "data": [[4.0, "[]"]], "msg": [[8.0, "\"CAISO: No generation data at 2024-04-03T22:46:21.338362 with args {'latest': True}\""]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 162, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_load(ba_name, **kwargs):\n    # get data\n    c = client_factory(ba_name)\n    data = c.get_load(**kwargs)\n    \n    # log\n    if len(data) == 0:\n        msg = '%s: No load data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),\n                                                    kwargs)\n        logger.warn(msg)\n    \n    # return\n    return data\n\nget_load(ba_name='PJM', kwargs={'latest': True})", "Selected Statement": "c = client_factory(ba_name)", "Function Input": {"ba_name": "'PJM'", "kwargs": "{'latest': True}"}, "Variable Values Before Statement": {"ba_name": "'PJM'"}, "Value After Statement Execution": "{options", "Variable States During Runtime": {"ba_name": [[1, "'PJM'"]], "kwargs": [[1, "{'latest': True}"]], "c": [[3.0, "{options={}, NAME='PJM'}"], [4.0, "{options={'data': 'load', 'latest': True, 'start_at': None, 'end_at': None, 'forecast': False, 'sliceable': False}, NAME='PJM', session=<requests.sessions.Session object at 0x7fcc37745f10>}"]], "data": [[4.0, "[]"]], "msg": [[8.0, "\"PJM: No load data at 2024-04-03T22:47:45.327834 with args {'latest': True}\""]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 163, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def format_decimal(self, altitude=None):\n        \"\"\"\n        Format decimal degrees with altitude::\n\n            >>> p = Point(41.5, -81.0, 12.3)\n            >>> p.format_decimal()\n            '41.5, -81.0, 12.3km'\n            >>> p = Point(41.5, 0, 0)\n            >>> p.format_decimal()\n            '41.5, 0.0'\n\n        :param bool altitude: Whether to include ``altitude`` value.\n            By default it is automatically included if it is non-zero.\n        \"\"\"\n        coordinates = [str(self.latitude), str(self.longitude)]\n\n        if altitude is None:\n            altitude = bool(self.altitude)\n        if altitude:\n            if not isinstance(altitude, str):\n                altitude = 'km'\n            coordinates.append(self.format_altitude(altitude))\n\n        return \", \".join(coordinates)\n\nformat_decimal(self=Point(41.5, 81.0, 2.5), altitude=None, self.altitude=2.5, self.latitude=41.5, self.longitude=81.0)", "Selected Statement": "coordinates.append(self.format_altitude(altitude))", "Function Input": {"self": "Point(41.5, 81.0, 2.5)", "altitude": "None", "self.altitude": "2.5", "self.latitude": "41.5", "self.longitude": "81.0"}, "Variable Values Before Statement": {"altitude": "'km'"}, "Value After Statement Execution": "['41.5', '81.0', '2.5km']", "Variable States During Runtime": {"self": [[1, "Point(41.5, 81.0, 2.5)"]], "altitude": [[1, "None"], [18.0, "True"], [21.0, "'km'"]], "self.altitude": [[1, "2.5"]], "self.latitude": [[1, "41.5"]], "self.longitude": [[1, "81.0"]], "coordinates": [[15.0, "['41.5', '81.0']"], [22.0, "['41.5', '81.0', '2.5km']"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 164, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _global_import(name):\n    p = __import__(name, globals(), locals(), level=1)\n    lst = p.__all__ if '__all__' in dir(p) else dir(p)\n    if lst:\n        globals().pop(name, None)\n        for k in lst:\n            if not k.startswith('__'):\n                globals()[k] = p.__dict__[k]\n                __all__.append(k)\n\n_global_import(name='base')", "Selected Statement": "p = __import__(name, globals(), locals(), level=1)", "Function Input": {"name": "'base'"}, "Variable Values Before Statement": {"name": "'base'"}, "Value After Statement Execution": "<module 'tensorpack.dataflow.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/dataflow/base.py'>", "Variable States During Runtime": {"name": [[1, "'base'"]], "p": [[2.0, "<module 'tensorpack.dataflow.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/dataflow/base.py'>"]], "lst": [[3.0, "['DataFlow', 'ProxyDataFlow', 'RNGDataFlow', 'DataFlowTerminated']"]], "k": [[6.0, "'DataFlow'"], [6.0, "'ProxyDataFlow'"], [6.0, "'RNGDataFlow'"], [6.0, "'DataFlowTerminated'"]]}, "Program Information": "Project Name: tensorpack+tensorpack", "idx": 165, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def global_import(name):\n    p = __import__(name, globals(), locals(), level=1)\n    lst = p.__all__ if '__all__' in dir(p) else []\n    del globals()[name]\n    for k in lst:\n        if not k.startswith('__'):\n            globals()[k] = p.__dict__[k]\n            __all__.append(k)\n\nglobal_import(name='model_desc')", "Selected Statement": "p = __import__(name, globals(), locals(), level=1)", "Function Input": {"name": "'model_desc'"}, "Variable Values Before Statement": {"name": "'model_desc'"}, "Value After Statement Execution": "<module 'tensorpack.graph_builder.model_desc' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/graph_builder/model_desc.py'>", "Variable States During Runtime": {"name": [[1, "'model_desc'"]], "p": [[2.0, "<module 'tensorpack.graph_builder.model_desc' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/tensorpack+tensorpack/tensorpack+tensorpack/tensorpack/graph_builder/model_desc.py'>"]], "lst": [[3.0, "[]"]]}, "Program Information": "Project Name: tensorpack+tensorpack", "idx": 166, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def xldate_as_tuple(xldate, datemode):\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n    if xldate == 0.00:\n        return (0, 0, 0, 0, 0, 0)\n    if xldate < 0.00:\n        raise XLDateNegative(xldate)\n    xldays = int(xldate)\n    frac = xldate - xldays\n    seconds = int(round(frac * 86400.0))\n    assert 0 <= seconds <= 86400\n    if seconds == 86400:\n        hour = minute = second = 0\n        xldays += 1\n    else:\n        # second = seconds % 60; minutes = seconds // 60\n        minutes, second = divmod(seconds, 60)\n        # minute = minutes % 60; hour    = minutes // 60\n        hour, minute = divmod(minutes, 60)\n    if xldays >= _XLDAYS_TOO_LARGE[datemode]:\n        raise XLDateTooLarge(xldate)\n\n    if xldays == 0:\n        return (0, 0, 0, hour, minute, second)\n\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(xldate)\n\n    jdn = xldays + _JDN_delta[datemode]\n    yreg = (ifd(ifd(jdn * 4 + 274277, 146097) * 3, 4) + jdn + 1363) * 4 + 3\n    mp = ifd(yreg % 1461, 4) * 535 + 333\n    d = ifd(mp % 16384, 535) + 1\n    # mp /= 16384\n    mp >>= 14\n    if mp >= 10:\n        return (ifd(yreg, 1461) - 4715, mp - 9, d, hour, minute, second)\n    else:\n        return (ifd(yreg, 1461) - 4716, mp + 3, d, hour, minute, second)\n\nxldate_as_tuple(xldate=2741.0, datemode=0)", "Selected Statement": "minutes, second = divmod(seconds, 60)", "Function Input": {"xldate": "2741.0", "datemode": "0"}, "Variable Values Before Statement": {"seconds": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"xldate": [[1, "2741.0"]], "datemode": [[1, "0"]], "xldays": [[8.0, "2741"]], "frac": [[9.0, "0.0"]], "seconds": [[10.0, "0"]], "second": [[17.0, "0"]], "minutes": [[17.0, "0"]], "hour": [[19.0, "0"]], "minute": [[19.0, "0"]], "jdn": [[29.0, "2417760"]], "yreg": [[30.0, "9676699"]], "mp": [[31.0, "66673"], [34.0, "4"]], "d": [[32.0, "3"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 167, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def cast_tuple(val, length = None):\n    if isinstance(val, list):\n        val = tuple(val)\n\n    output = val if isinstance(val, tuple) else ((val,) * default(length, 1))\n\n    if exists(length):\n        assert len(output) == length\n\n    return output\n\ncast_tuple(val=1, length=4)", "Selected Statement": "output = val if isinstance(val, tuple) else ((val,) * default(length, 1))", "Function Input": {"val": "1", "length": "4"}, "Variable Values Before Statement": {"length": "4"}, "Value After Statement Execution": "(1, 1, 1, 1)", "Variable States During Runtime": {"val": [[1, "1"]], "length": [[1, "4"]], "output": [[5.0, "(1, 1, 1, 1)"]]}, "Program Information": "Project Name: lucidrains+imagen-pytorch", "idx": 168, "quantized value": "Non-Empty tuple", "mapping_info": {"len(value) == 0": "Empty tuple", "len(value) > 0": "Non-Empty tuple"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def init_conv_(self, conv):\n        o, i, h, w = conv.weight.shape\n        conv_weight = torch.empty(o // 4, i, h, w)\n        nn.init.kaiming_uniform_(conv_weight)\n        conv_weight = repeat(conv_weight, 'o ... -> (o 4) ...')\n\n        conv.weight.data.copy_(conv_weight)\n        nn.init.zeros_(conv.bias.data)\n\ninit_conv_(self=PixelShuffleUpsample(  (net): Sequential(    (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))    (1): SiLU()    (2): PixelShuffle(upscale_factor=2)  )), conv=Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1)), self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._modules=OrderedDict([('net', Sequential(  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))  (1): SiLU()  (2): PixelShuffle(upscale_factor=2)))]), self._non_persistent_buffers_set=set(), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.training=True)", "Selected Statement": "nn.init.kaiming_uniform_(conv_weight)", "Function Input": {"self": "PixelShuffleUpsample(  (net): Sequential(    (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))    (1): SiLU()    (2): PixelShuffle(upscale_factor=2)  ))", "conv": "Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._modules": "OrderedDict([('net', Sequential(  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))  (1): SiLU()  (2): PixelShuffle(upscale_factor=2)))])", "self._non_persistent_buffers_set": "set()", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.training": "True"}, "Variable Values Before Statement": {"conv_weight": "tensor([[[[ 1.4422e+00]],         [[ 1.0425e+00]],         [[-4.1854e-01]],         [[ 6.1111e-02]],         [[ 1.7011e-01]],         [[ 7.3859e-01]],         [[ 1.1234e-01]],         [[ 7.9434e-01]]],        [[[-5.1286e-02]],         [[ 6.4548e-01]],         [[-9.1563e-01]],         [[-1.3698e+00]],         [[-4.4227e-01]],         [[-3.2611e-01]],         [[-1.2114e+00]],         [[ 5.9611e-01]]],        [[[-1.5431e-01]],         [[-1.6676e-01]],         [[ 1.2692e+00]],         [[-2.8656e+00]],         [[ 2.2421e-43]],         [[ 0.0000e+00]],         [[ 3.6013e-43]],         [[ 0.0000e+00]]],        [[[ 2.1569e-07]],         [[ 3.0774e-41]],         [[ 2.1415e-07]],         [[ 3.0774e-41]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 2.0319e-43]],         [[ 0.0000e+00]],         [[ 2.1136e-07]],         [[ 3.0774e-41]],         [[ 2.0801e-07]],         [[ 3.0774e-41]]],        [[[ 4.4842e-44]],         [[ 0.0000e+00]],         [[ 1.5695e-43]],         [[ 0.0000e+00]],         [[ 7.7116e+24]],         [[ 3.0778e-41]],         [[ 0.0000e+00]],         [[ 0.0000e+00]]]])"}, "Value After Statement Execution": "tensor([[[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]]])", "Variable States During Runtime": {"self": [[1, "PixelShuffleUpsample(  (net): Sequential(    (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))    (1): SiLU()    (2): PixelShuffle(upscale_factor=2)  ))"]], "conv": [[1, "Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._modules": [[1, "OrderedDict([('net', Sequential(  (0): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))  (1): SiLU()  (2): PixelShuffle(upscale_factor=2)))])"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.training": [[1, "True"]], "o": [[2.0, "32"]], "i": [[2.0, "8"]], "h": [[2.0, "1"]], "w": [[2.0, "1"]], "conv_weight": [[3.0, "tensor([[[[ 1.4422e+00]],         [[ 1.0425e+00]],         [[-4.1854e-01]],         [[ 6.1111e-02]],         [[ 1.7011e-01]],         [[ 7.3859e-01]],         [[ 1.1234e-01]],         [[ 7.9434e-01]]],        [[[-5.1286e-02]],         [[ 6.4548e-01]],         [[-9.1563e-01]],         [[-1.3698e+00]],         [[-4.4227e-01]],         [[-3.2611e-01]],         [[-1.2114e+00]],         [[ 5.9611e-01]]],        [[[-1.5431e-01]],         [[-1.6676e-01]],         [[ 1.2692e+00]],         [[-2.8656e+00]],         [[ 2.2421e-43]],         [[ 0.0000e+00]],         [[ 3.6013e-43]],         [[ 0.0000e+00]]],        [[[ 2.1569e-07]],         [[ 3.0774e-41]],         [[ 2.1415e-07]],         [[ 3.0774e-41]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 1.4013e-45]],         [[ 0.0000e+00]]],        [[[ 1.4013e-45]],         [[ 0.0000e+00]],         [[ 2.0319e-43]],         [[ 0.0000e+00]],         [[ 2.1136e-07]],         [[ 3.0774e-41]],         [[ 2.0801e-07]],         [[ 3.0774e-41]]],        [[[ 4.4842e-44]],         [[ 0.0000e+00]],         [[ 1.5695e-43]],         [[ 0.0000e+00]],         [[ 7.7116e+24]],         [[ 3.0778e-41]],         [[ 0.0000e+00]],         [[ 0.0000e+00]]]])"], [4.0, "tensor([[[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]]])"], [5.0, "tensor([[[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[ 0.2046]],         [[ 0.7383]],         [[-0.2354]],         [[ 0.7482]],         [[ 0.3718]],         [[-0.1113]],         [[ 0.5291]],         [[ 0.5602]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[-0.4435]],         [[-0.5901]],         [[ 0.3579]],         [[-0.2002]],         [[-0.1366]],         [[ 0.8172]],         [[-0.4366]],         [[ 0.8074]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.5757]],         [[ 0.6216]],         [[-0.0433]],         [[ 0.6816]],         [[-0.2335]],         [[-0.8362]],         [[-0.6477]],         [[-0.1428]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.6086]],         [[-0.8312]],         [[ 0.7359]],         [[ 0.4631]],         [[-0.2967]],         [[-0.5708]],         [[ 0.5318]],         [[-0.2615]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[ 0.2776]],         [[-0.6416]],         [[-0.1069]],         [[-0.3409]],         [[ 0.6007]],         [[ 0.7782]],         [[-0.4220]],         [[ 0.4654]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.1207]],         [[-0.6514]],         [[-0.5793]],         [[-0.5897]],         [[-0.5506]],         [[-0.6959]],         [[ 0.8602]],         [[ 0.5812]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.8445]],         [[ 0.3486]],         [[-0.7968]],         [[ 0.3068]],         [[-0.2670]],         [[ 0.4851]],         [[ 0.8124]],         [[ 0.8039]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]],        [[[-0.2703]],         [[-0.2185]],         [[ 0.5634]],         [[ 0.8424]],         [[-0.8168]],         [[-0.2052]],         [[ 0.6885]],         [[ 0.8138]]]])"]]}, "Program Information": "Project Name: lucidrains+imagen-pytorch", "idx": 169, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_start_seconds(start_seconds):\n    parser_zero = GenericSubtitleParser(start_seconds=0)\n    parser_zero.fit(BytesIO(fake_srt))\n    parser = GenericSubtitleParser(start_seconds=start_seconds)\n    parser.fit(BytesIO(fake_srt))\n    expected = [\n        sub\n        for sub in parser_zero.subs_\n        if sub.start >= timedelta(seconds=start_seconds)\n    ]\n    assert all(esub == psub for esub, psub in zip(expected, parser.subs_))\n\ntest_start_seconds(start_seconds=0)", "Selected Statement": "assert all(esub == psub for esub, psub in zip(expected, parser.subs_))", "Function Input": {"start_seconds": "0"}, "Variable Values Before Statement": {"expected": "[<ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb0b6c79520>, <ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb015502430>, <ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb01543e190>]"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"start_seconds": [[1, "0"]], "parser_zero": [[2.0, "{subs_=None, sub_format='srt', encoding='infer', caching=False, fit_fname=None, detected_encoding_=None, max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"], [3.0, "{subs_=<ffsubsync.generic_subtitles.GenericSubtitlesFile object at 0x7fb015444520>, sub_format='srt', encoding='infer', caching=False, fit_fname=<_io.BytesIO object at 0x7fb015254db0>, detected_encoding_='ASCII', max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"]], "parser": [[4.0, "{subs_=None, sub_format='srt', encoding='infer', caching=False, fit_fname=None, detected_encoding_=None, max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"], [5.0, "{subs_=<ffsubsync.generic_subtitles.GenericSubtitlesFile object at 0x7fb0b6ce5c40>, sub_format='srt', encoding='infer', caching=False, fit_fname=<_io.BytesIO object at 0x7fb01520a4a0>, detected_encoding_='ASCII', max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"]], "expected": [[6.0, "[<ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb0b6c79520>, <ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb015502430>, <ffsubsync.generic_subtitles.GenericSubtitle object at 0x7fb01543e190>]"]], "@py_assert1": [[11.0, "None"]], "@py_assert3": [[11.0, "None"]]}, "Program Information": "Project Name: smacke+ffsubsync", "idx": 170, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def git_versions_from_vcs(tag_prefix, root, verbose=False):\n    # this runs 'git' from the root of the source tree. This only gets called\n    # if the git-archive 'subst' keywords were *not* expanded, and\n    # _version.py hasn't already been rewritten with a short version string,\n    # meaning we're inside a checked out source tree.\n\n    if not os.path.exists(os.path.join(root, \".git\")):\n        if verbose:\n            print(\"no .git in %s\" % root)\n        return {}\n\n    GITS = [\"git\"]\n    if sys.platform == \"win32\":\n        GITS = [\"git.cmd\", \"git.exe\"]\n    stdout = run_command(GITS, [\"describe\", \"--tags\", \"--dirty\", \"--always\"],\n                         cwd=root)\n    if stdout is None:\n        return {}\n    if not stdout.startswith(tag_prefix):\n        if verbose:\n            print(\"tag '%s' doesn't start with prefix '%s'\"\n                  % (stdout, tag_prefix))\n        return {}\n    tag = stdout[len(tag_prefix):]\n    stdout = run_command(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)\n    if stdout is None:\n        return {}\n    full = stdout.strip()\n    if tag.endswith(\"-dirty\"):\n        full += \"-dirty\"\n    return {\"version\": tag, \"full\": full}\n\ngit_versions_from_vcs(tag_prefix='v', root='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs', verbose=False)", "Selected Statement": "stdout = run_command(GITS, [\"rev-parse\", \"HEAD\"], cwd=root)", "Function Input": {"tag_prefix": "'v'", "root": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'", "verbose": "False"}, "Variable Values Before Statement": {"GITS": "['git']"}, "Value After Statement Execution": "'1ef835aee49f536a5a499db71927deac87f4152e'", "Variable States During Runtime": {"tag_prefix": [[1, "'v'"]], "root": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/andsor+pydevs/andsor+pydevs'"]], "verbose": [[1, "False"]], "GITS": [[12.0, "['git']"]], "stdout": [[15.0, "'v0.1.2'"], [25.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]], "tag": [[24.0, "'0.1.2'"]], "full": [[28.0, "'1ef835aee49f536a5a499db71927deac87f4152e'"]]}, "Program Information": "Project Name: andsor+pydevs", "idx": 171, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def count_messages_tokens(messages=[], model=None):\n    \"\"\"\n    Count the number of tokens in a list of messages\n    \"\"\"\n    try:\n        tokens_used = 0\n\n        for message in messages:\n            if isinstance(message, str):\n                tokens_used += count_tokens(message, model=model)\n            elif \"message\" in message:\n                tokens_used += count_tokens(message[\"message\"], model=model)\n\n                if \"code\" in message:\n                    tokens_used += count_tokens(message[\"code\"], model=model)\n\n                if \"output\" in message:\n                    tokens_used += count_tokens(message[\"output\"], model=model)\n\n        prompt_cost = token_cost(tokens_used, model=model)\n\n        return (tokens_used, prompt_cost)\n    except:\n        # Non-essential feature\n        return (0, 0)\n\ncount_messages_tokens(messages=[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], model='gpt-3.5-turbo')", "Selected Statement": "prompt_cost = token_cost(tokens_used, model=model)", "Function Input": {"messages": "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]", "model": "'gpt-3.5-turbo'"}, "Variable Values Before Statement": {"tokens_used": "360"}, "Value After Statement Execution": "0.00054", "Variable States During Runtime": {"messages": [[1, "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]"]], "model": [[1, "'gpt-3.5-turbo'"]], "tokens_used": [[6.0, "0"], [12.0, "360"]], "message": [[8.0, "{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}"]], "prompt_cost": [[20.0, "0.00054"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 172, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _co2mpas_info2df(start_time, main_flags=None):\n    import socket\n    import datetime\n    from co2mpas import __version__\n    from ..load.schema import define_flags_schema\n    time_elapsed = (datetime.datetime.today() - start_time).total_seconds()\n    hostname = socket.gethostname()\n    info = [\n        ('CO2MPAS version', __version__),\n        ('Simulation started', start_time.strftime('%Y/%m/%d-%H:%M:%S')),\n        ('Time elapsed', '%.3f sec' % time_elapsed),\n        ('Hostname', hostname),\n    ]\n\n    if main_flags:\n        main_flags = define_flags_schema(read=False).validate(main_flags)\n        info.extend(sorted(main_flags.items()))\n    import pandas as pd\n    df = pd.DataFrame(info, columns=['Parameter', 'Value'])\n    df.set_index(['Parameter'], inplace=True)\n    setattr(df, 'name', 'info')\n    return df\n\n_co2mpas_info2df(start_time=datetime.datetime(2024, 4, 3, 16, 28, 9, 62286), main_flags=None)", "Selected Statement": "df = pd.DataFrame(info, columns=['Parameter', 'Value'])", "Function Input": {"start_time": "datetime.datetime(2024, 4, 3, 16, 28, 9, 62286)", "main_flags": "None"}, "Variable Values Before Statement": {"info": "[('CO2MPAS version', '4.1.6'), ('Simulation started', '2024/04/03-16:28:09'), ('Time elapsed', '103.530 sec'), ('Hostname', 'thor')]"}, "Value After Statement Execution": "Parameter                Value0     CO2MPAS version                4.1.61  Simulation started  2024/04/03-16:28:092        Time elapsed          103.530 sec3            Hostname                 thor", "Variable States During Runtime": {"start_time": [[1, "datetime.datetime(2024, 4, 3, 16, 28, 9, 62286)"]], "main_flags": [[1, "None"]], "socket": [[2.0, "<module 'socket' from '/local/rcs/XXX/miniforge3/envs/JRCSTU+co2mpas-ta/lib/python3.9/socket.py'>"]], "datetime": [[3.0, "<module 'datetime' from '/local/rcs/XXX/miniforge3/envs/JRCSTU+co2mpas-ta/lib/python3.9/datetime.py'>"]], "__version__": [[4.0, "'4.1.6'"]], "define_flags_schema": [[5.0, "{__module__='co2mpas.core.load.schema', __name__='define_flags_schema', __qualname__='define_flags_schema', __doc__='\\n    Define flag schema.\\n\\n    :param read:\\n        Schema for reading?\\n    :type read: bool\\n\\n    :return:\\n        Flag schema.\\n    :rtype: schema.Schema\\n    ', __annotations__={}}"]], "time_elapsed": [[6.0, "103.529885"]], "hostname": [[7.0, "'thor'"]], "info": [[8.0, "[('CO2MPAS version', '4.1.6'), ('Simulation started', '2024/04/03-16:28:09'), ('Time elapsed', '103.530 sec'), ('Hostname', 'thor')]"]], "pd": [[18.0, "<module 'pandas' from '/local/rcs/XXX/miniforge3/envs/JRCSTU+co2mpas-ta/lib/python3.9/site-packages/pandas/__init__.py'>"]], "df": [[19.0, "            Parameter                Value0     CO2MPAS version                4.1.61  Simulation started  2024/04/03-16:28:092        Time elapsed          103.530 sec3            Hostname                 thor"], [20.0, "                                  ValueParameter                              CO2MPAS version                   4.1.6Simulation started  2024/04/03-16:28:09Time elapsed                103.530 secHostname                           thor"]]}, "Program Information": "Project Name: JRCSTU+co2mpas-ta", "idx": 173, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def dump(self, file, default_flow_style=False, **kw):\n        import yaml\n        kw['Dumper'] = kw.get('Dumper', yaml.CDumper)\n        with open(file, 'w') as f:\n            yaml.dump(\n                self.to_dict(), f, default_flow_style=default_flow_style, **kw\n            )\n\ndump(self={}, file='./conf.yaml', default_flow_style=False, kw={})", "Selected Statement": "with open(file, 'w') as f:", "Function Input": {"self": "{}", "file": "'./conf.yaml'", "default_flow_style": "False", "kw": "{}"}, "Variable Values Before Statement": {"file": "'./conf.yaml'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"self": [[1, "{}"]], "file": [[1, "'./conf.yaml'"]], "default_flow_style": [[1, "False"]], "kw": [[1, "{}"], [3.0, "{'Dumper': <class 'yaml.cyaml.CDumper'>}"]], "yaml": [[2.0, "<module 'yaml' from '/local/rcs/XXX/miniforge3/envs/JRCSTU+co2mpas-ta/lib/python3.9/site-packages/yaml/__init__.py'>"]], "f": [[4.0, "<_io.TextIOWrapper name='./conf.yaml' mode='w' encoding='UTF-8'>"]]}, "Program Information": "Project Name: JRCSTU+co2mpas-ta", "idx": 174, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def article_missing(field: str):\n    article = Article(\n        title=None, authors=[\"L, Robertson\"], year=1999, journal=\"Science\"\n    )\n    setattr(article, field, None)\n    return ArticleWrapper(article=article)\n\narticle_missing(field='year')", "Selected Statement": "setattr(article, field, None)", "Function Input": {"field": "'year'"}, "Variable Values Before Statement": {"article": "{title=None, authors=['L, Robertson'], keywords=[], year=1999, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}", "field": "'year'"}, "Value After Statement Execution": "{title", "Variable States During Runtime": {"field": [[1, "'year'"]], "article": [[2.0, "{title=None, authors=['L, Robertson'], keywords=[], year=1999, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}"], [5.0, "{title=None, authors=['L, Robertson'], keywords=[], year=None, journal='Science', volume=None, issue=None, page=None, doi=None, references=[], sources=set(), extra={}}"]]}, "Program Information": "Project Name: coreofscience+python-wostools", "idx": 175, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def create_dummy_class(klass, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a class is not available, create a dummy class which throws ImportError\n    when used.\n\n    Args:\n        klass (str): name of the class.\n        dependency (str): name of the dependency.\n        message: extra message to print\n    Returns:\n        class: a class object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, klass)\n    if message:\n        err = err + \" \" + message\n\n    class _DummyMetaClass(type):\n        # throw error on class attribute access\n        def __getattr__(_, __):  # noqa: B902\n            raise ImportError(err)\n\n    class _Dummy(object, metaclass=_DummyMetaClass):\n        # throw error on constructor\n        def __init__(self, *args, **kwargs):\n            raise ImportError(err)\n\n    return _Dummy\n\ncreate_dummy_class(klass='DeformConv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, klass)", "Function Input": {"klass": "'DeformConv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"dependency": "'detectron2._C'", "klass": "'DeformConv'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available.\"", "Variable States During Runtime": {"klass": [[1, "'DeformConv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_DummyMetaClass": [[17.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._DummyMetaClass'>"]], "_Dummy": [[22.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._Dummy'>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 176, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def create_dummy_func(func, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a function is not available, create a dummy function which throws\n    ImportError when used.\n\n    Args:\n        func (str): name of the function.\n        dependency (str or list[str]): name(s) of the dependency.\n        message: extra message to print\n    Returns:\n        function: a function object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, func)\n    if message:\n        err = err + \" \" + message\n\n    if isinstance(dependency, (list, tuple)):\n        dependency = \",\".join(dependency)\n\n    def _dummy(*args, **kwargs):\n        raise ImportError(err)\n\n    return _dummy\n\ncreate_dummy_func(func='deform_conv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, func)", "Function Input": {"func": "'deform_conv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"dependency": "'detectron2._C'", "func": "'deform_conv'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available.\"", "Variable States During Runtime": {"func": [[1, "'deform_conv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_dummy": [[20.0, "<function create_dummy_func.<locals>._dummy at 0x7f3337cdfd30>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 177, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def register_mesh(mesh_info: MeshInfo, base_path: Optional[str]) -> None:\n    geodists, symmetry, texcoords = mesh_info.geodists, mesh_info.symmetry, mesh_info.texcoords\n    if geodists:\n        geodists = maybe_prepend_base_path(base_path, geodists)\n    if symmetry:\n        symmetry = maybe_prepend_base_path(base_path, symmetry)\n    if texcoords:\n        texcoords = maybe_prepend_base_path(base_path, texcoords)\n    MeshCatalog[mesh_info.name] = MeshInfo(\n        name=mesh_info.name,\n        data=maybe_prepend_base_path(base_path, mesh_info.data),\n        geodists=geodists,\n        symmetry=symmetry,\n        texcoords=texcoords,\n    )\n\nregister_mesh(mesh_info=MeshInfo(name='smpl_27554', data='smpl_27554.pkl', geodists='geodists/geodists_smpl_27554.pkl', symmetry='symmetry/symmetry_smpl_27554.pkl', texcoords='texcoords/texcoords_smpl_27554.pkl'), base_path='https://dl.fbaipublicfiles.com/densepose/meshes/')", "Selected Statement": "geodists = maybe_prepend_base_path(base_path, geodists)", "Function Input": {"mesh_info": "MeshInfo(name='smpl_27554', data='smpl_27554.pkl', geodists='geodists/geodists_smpl_27554.pkl', symmetry='symmetry/symmetry_smpl_27554.pkl', texcoords='texcoords/texcoords_smpl_27554.pkl')", "base_path": "'https://dl.fbaipublicfiles.com/densepose/meshes/'"}, "Variable Values Before Statement": {"base_path": "'https://dl.fbaipublicfiles.com/densepose/meshes/'", "geodists": "'geodists/geodists_smpl_27554.pkl'"}, "Value After Statement Execution": "'https://dl.fbaipublicfiles.com/densepose/meshes/geodists/geodists_smpl_27554.pkl'", "Variable States During Runtime": {"mesh_info": [[1, "MeshInfo(name='smpl_27554', data='smpl_27554.pkl', geodists='geodists/geodists_smpl_27554.pkl', symmetry='symmetry/symmetry_smpl_27554.pkl', texcoords='texcoords/texcoords_smpl_27554.pkl')"]], "base_path": [[1, "'https://dl.fbaipublicfiles.com/densepose/meshes/'"]], "geodists": [[2.0, "'geodists/geodists_smpl_27554.pkl'"], [4.0, "'https://dl.fbaipublicfiles.com/densepose/meshes/geodists/geodists_smpl_27554.pkl'"]], "symmetry": [[2.0, "'symmetry/symmetry_smpl_27554.pkl'"], [6.0, "'https://dl.fbaipublicfiles.com/densepose/meshes/symmetry/symmetry_smpl_27554.pkl'"]], "texcoords": [[2.0, "'texcoords/texcoords_smpl_27554.pkl'"], [8.0, "'https://dl.fbaipublicfiles.com/densepose/meshes/texcoords/texcoords_smpl_27554.pkl'"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 178, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_model(self):\n        from yolox.models import YOLOX, YOLOPAFPN, YOLOXHead\n\n        def init_yolo(M):\n            for m in M.modules():\n                if isinstance(m, nn.BatchNorm2d):\n                    m.eps = 1e-3\n                    m.momentum = 0.03\n\n        if getattr(self, \"model\", None) is None:\n            in_channels = [256, 512, 1024]\n            backbone = YOLOPAFPN(self.depth, self.width, in_channels=in_channels, act=self.act)\n            head = YOLOXHead(self.num_classes, self.width, in_channels=in_channels, act=self.act)\n            self.model = YOLOX(backbone, head)\n\n        self.model.apply(init_yolo)\n        self.model.head.initialize_biases(1e-2)\n        self.model.train()\n        return self.model\n\nget_model(self=╒═══════════════════╤════════════════════════════╕│ keys              │ values                     │╞═══════════════════╪════════════════════════════╡│ seed              │ None                       │├───────────────────┼────────────────────────────┤│ output_dir        │ './YOLOX_outputs'          │├───────────────────┼────────────────────────────┤│ print_interval    │ 10                         │├───────────────────┼────────────────────────────┤│ eval_interval     │ 10                         │├───────────────────┼────────────────────────────┤│ dataset           │ None                       │├───────────────────┼────────────────────────────┤│ num_classes       │ 80                         │├───────────────────┼────────────────────────────┤│ depth             │ 0.33                       │├───────────────────┼────────────────────────────┤│ width             │ 0.5                        │├───────────────────┼────────────────────────────┤│ act               │ 'silu'                     │├───────────────────┼────────────────────────────┤│ data_num_workers  │ 4                          │├───────────────────┼────────────────────────────┤│ input_size        │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ multiscale_range  │ 5                          │├───────────────────┼────────────────────────────┤│ data_dir          │ None                       │├───────────────────┼────────────────────────────┤│ train_ann         │ 'instances_train2017.json' │├───────────────────┼────────────────────────────┤│ val_ann           │ 'instances_val2017.json'   │├───────────────────┼────────────────────────────┤│ test_ann          │ 'instances_test2017.json'  │├───────────────────┼────────────────────────────┤│ mosaic_prob       │ 1.0                        │├───────────────────┼────────────────────────────┤│ mixup_prob        │ 1.0                        │├───────────────────┼────────────────────────────┤│ hsv_prob          │ 1.0                        │├───────────────────┼────────────────────────────┤│ flip_prob         │ 0.5                        │├───────────────────┼────────────────────────────┤│ degrees           │ 10.0                       │├───────────────────┼────────────────────────────┤│ translate         │ 0.1                        │├───────────────────┼────────────────────────────┤│ mosaic_scale      │ (0.1, 2)                   │├───────────────────┼────────────────────────────┤│ enable_mixup      │ True                       │├───────────────────┼────────────────────────────┤│ mixup_scale       │ (0.5, 1.5)                 │├───────────────────┼────────────────────────────┤│ shear             │ 2.0                        │├───────────────────┼────────────────────────────┤│ warmup_epochs     │ 5                          │├───────────────────┼────────────────────────────┤│ max_epoch         │ 300                        │├───────────────────┼────────────────────────────┤│ warmup_lr         │ 0                          │├───────────────────┼────────────────────────────┤│ min_lr_ratio      │ 0.05                       │├───────────────────┼────────────────────────────┤│ basic_lr_per_img  │ 0.00015625                 │├───────────────────┼────────────────────────────┤│ scheduler         │ 'yoloxwarmcos'             │├───────────────────┼────────────────────────────┤│ no_aug_epochs     │ 15                         │├───────────────────┼────────────────────────────┤│ ema               │ True                       │├───────────────────┼────────────────────────────┤│ weight_decay      │ 0.0005                     │├───────────────────┼────────────────────────────┤│ momentum          │ 0.9                        │├───────────────────┼────────────────────────────┤│ save_history_ckpt │ True                       │├───────────────────┼────────────────────────────┤│ exp_name          │ 'yolox_s'                  │├───────────────────┼────────────────────────────┤│ test_size         │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ test_conf         │ 0.01                       │├───────────────────┼────────────────────────────┤│ nmsthre           │ 0.65                       │╘═══════════════════╧════════════════════════════╛, self.act='silu', self.basic_lr_per_img=0.00015625, self.data_dir=None, self.data_num_workers=4, self.dataset=None, self.degrees=10.0, self.depth=0.33, self.ema=True, self.enable_mixup=True, self.eval_interval=10, self.exp_name='yolox_s', self.flip_prob=0.5, self.hsv_prob=1.0, self.input_size=(640, 640), self.max_epoch=300, self.min_lr_ratio=0.05, self.mixup_prob=1.0, self.mixup_scale=(0.5, 1.5), self.momentum=0.9, self.mosaic_prob=1.0, self.mosaic_scale=(0.1, 2), self.multiscale_range=5, self.nmsthre=0.65, self.no_aug_epochs=15, self.num_classes=80, self.output_dir='./YOLOX_outputs', self.print_interval=10, self.save_history_ckpt=True, self.scheduler='yoloxwarmcos', self.seed=None, self.shear=2.0, self.test_ann='instances_test2017.json', self.test_conf=0.01, self.test_size=(640, 640), self.train_ann='instances_train2017.json', self.translate=0.1, self.val_ann='instances_val2017.json', self.warmup_epochs=5, self.warmup_lr=0, self.weight_decay=0.0005, self.width=0.5)", "Selected Statement": "self.model = YOLOX(backbone, head)", "Function Input": {"self": "╒═══════════════════╤════════════════════════════╕│ keys              │ values                     │╞═══════════════════╪════════════════════════════╡│ seed              │ None                       │├───────────────────┼────────────────────────────┤│ output_dir        │ './YOLOX_outputs'          │├───────────────────┼────────────────────────────┤│ print_interval    │ 10                         │├───────────────────┼────────────────────────────┤│ eval_interval     │ 10                         │├───────────────────┼────────────────────────────┤│ dataset           │ None                       │├───────────────────┼────────────────────────────┤│ num_classes       │ 80                         │├───────────────────┼────────────────────────────┤│ depth             │ 0.33                       │├───────────────────┼────────────────────────────┤│ width             │ 0.5                        │├───────────────────┼────────────────────────────┤│ act               │ 'silu'                     │├───────────────────┼────────────────────────────┤│ data_num_workers  │ 4                          │├───────────────────┼────────────────────────────┤│ input_size        │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ multiscale_range  │ 5                          │├───────────────────┼────────────────────────────┤│ data_dir          │ None                       │├───────────────────┼────────────────────────────┤│ train_ann         │ 'instances_train2017.json' │├───────────────────┼────────────────────────────┤│ val_ann           │ 'instances_val2017.json'   │├───────────────────┼────────────────────────────┤│ test_ann          │ 'instances_test2017.json'  │├───────────────────┼────────────────────────────┤│ mosaic_prob       │ 1.0                        │├───────────────────┼────────────────────────────┤│ mixup_prob        │ 1.0                        │├───────────────────┼────────────────────────────┤│ hsv_prob          │ 1.0                        │├───────────────────┼────────────────────────────┤│ flip_prob         │ 0.5                        │├───────────────────┼────────────────────────────┤│ degrees           │ 10.0                       │├───────────────────┼────────────────────────────┤│ translate         │ 0.1                        │├───────────────────┼────────────────────────────┤│ mosaic_scale      │ (0.1, 2)                   │├───────────────────┼────────────────────────────┤│ enable_mixup      │ True                       │├───────────────────┼────────────────────────────┤│ mixup_scale       │ (0.5, 1.5)                 │├───────────────────┼────────────────────────────┤│ shear             │ 2.0                        │├───────────────────┼────────────────────────────┤│ warmup_epochs     │ 5                          │├───────────────────┼────────────────────────────┤│ max_epoch         │ 300                        │├───────────────────┼────────────────────────────┤│ warmup_lr         │ 0                          │├───────────────────┼────────────────────────────┤│ min_lr_ratio      │ 0.05                       │├───────────────────┼────────────────────────────┤│ basic_lr_per_img  │ 0.00015625                 │├───────────────────┼────────────────────────────┤│ scheduler         │ 'yoloxwarmcos'             │├───────────────────┼────────────────────────────┤│ no_aug_epochs     │ 15                         │├───────────────────┼────────────────────────────┤│ ema               │ True                       │├───────────────────┼────────────────────────────┤│ weight_decay      │ 0.0005                     │├───────────────────┼────────────────────────────┤│ momentum          │ 0.9                        │├───────────────────┼────────────────────────────┤│ save_history_ckpt │ True                       │├───────────────────┼────────────────────────────┤│ exp_name          │ 'yolox_s'                  │├───────────────────┼────────────────────────────┤│ test_size         │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ test_conf         │ 0.01                       │├───────────────────┼────────────────────────────┤│ nmsthre           │ 0.65                       │╘═══════════════════╧════════════════════════════╛", "self.act": "'silu'", "self.basic_lr_per_img": "0.00015625", "self.data_dir": "None", "self.data_num_workers": "4", "self.dataset": "None", "self.degrees": "10.0", "self.depth": "0.33", "self.ema": "True", "self.enable_mixup": "True", "self.eval_interval": "10", "self.exp_name": "'yolox_s'", "self.flip_prob": "0.5", "self.hsv_prob": "1.0", "self.input_size": "(640, 640)", "self.max_epoch": "300", "self.min_lr_ratio": "0.05", "self.mixup_prob": "1.0", "self.mixup_scale": "(0.5, 1.5)", "self.momentum": "0.9", "self.mosaic_prob": "1.0", "self.mosaic_scale": "(0.1, 2)", "self.multiscale_range": "5", "self.nmsthre": "0.65", "self.no_aug_epochs": "15", "self.num_classes": "80", "self.output_dir": "'./YOLOX_outputs'", "self.print_interval": "10", "self.save_history_ckpt": "True", "self.scheduler": "'yoloxwarmcos'", "self.seed": "None", "self.shear": "2.0", "self.test_ann": "'instances_test2017.json'", "self.test_conf": "0.01", "self.test_size": "(640, 640)", "self.train_ann": "'instances_train2017.json'", "self.translate": "0.1", "self.val_ann": "'instances_val2017.json'", "self.warmup_epochs": "5", "self.warmup_lr": "0", "self.weight_decay": "0.0005", "self.width": "0.5"}, "Variable Values Before Statement": {"backbone": "YOLOPAFPN(  (backbone): CSPDarknet(    (stem): Focus(      (conv): BaseConv(        (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )    (dark2): Sequential(      (0): BaseConv(        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )        )      )    )    (dark3): Sequential(      (0): BaseConv(        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )          (1): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_runnin...ffine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv2): BaseConv(    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n3): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv1): BaseConv(    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n4): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  ))", "head": "YOLOXHead(  (cls_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (reg_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (cls_preds): ModuleList(    (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))  )  (reg_preds): ModuleList(    (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))  )  (obj_preds): ModuleList(    (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))  )  (stems): ModuleList(    (0): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (2): BaseConv(      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )  )  (l1_loss): L1Loss()  (bcewithlog_loss): BCEWithLogitsLoss()  (iou_loss): IOUloss())"}, "Value After Statement Execution": "YOLOX(  (backbone): YOLOPAFPN(    (backbone): CSPDarknet(      (stem): Focus(        (conv): BaseConv(          (conv): Conv2d(12, 32, kernel_size", "Variable States During Runtime": {"self": [[1, "╒═══════════════════╤════════════════════════════╕│ keys              │ values                     │╞═══════════════════╪════════════════════════════╡│ seed              │ None                       │├───────────────────┼────────────────────────────┤│ output_dir        │ './YOLOX_outputs'          │├───────────────────┼────────────────────────────┤│ print_interval    │ 10                         │├───────────────────┼────────────────────────────┤│ eval_interval     │ 10                         │├───────────────────┼────────────────────────────┤│ dataset           │ None                       │├───────────────────┼────────────────────────────┤│ num_classes       │ 80                         │├───────────────────┼────────────────────────────┤│ depth             │ 0.33                       │├───────────────────┼────────────────────────────┤│ width             │ 0.5                        │├───────────────────┼────────────────────────────┤│ act               │ 'silu'                     │├───────────────────┼────────────────────────────┤│ data_num_workers  │ 4                          │├───────────────────┼────────────────────────────┤│ input_size        │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ multiscale_range  │ 5                          │├───────────────────┼────────────────────────────┤│ data_dir          │ None                       │├───────────────────┼────────────────────────────┤│ train_ann         │ 'instances_train2017.json' │├───────────────────┼────────────────────────────┤│ val_ann           │ 'instances_val2017.json'   │├───────────────────┼────────────────────────────┤│ test_ann          │ 'instances_test2017.json'  │├───────────────────┼────────────────────────────┤│ mosaic_prob       │ 1.0                        │├───────────────────┼────────────────────────────┤│ mixup_prob        │ 1.0                        │├───────────────────┼────────────────────────────┤│ hsv_prob          │ 1.0                        │├───────────────────┼────────────────────────────┤│ flip_prob         │ 0.5                        │├───────────────────┼────────────────────────────┤│ degrees           │ 10.0                       │├───────────────────┼────────────────────────────┤│ translate         │ 0.1                        │├───────────────────┼────────────────────────────┤│ mosaic_scale      │ (0.1, 2)                   │├───────────────────┼────────────────────────────┤│ enable_mixup      │ True                       │├───────────────────┼────────────────────────────┤│ mixup_scale       │ (0.5, 1.5)                 │├───────────────────┼────────────────────────────┤│ shear             │ 2.0                        │├───────────────────┼────────────────────────────┤│ warmup_epochs     │ 5                          │├───────────────────┼────────────────────────────┤│ max_epoch         │ 300                        │├───────────────────┼────────────────────────────┤│ warmup_lr         │ 0                          │├───────────────────┼────────────────────────────┤│ min_lr_ratio      │ 0.05                       │├───────────────────┼────────────────────────────┤│ basic_lr_per_img  │ 0.00015625                 │├───────────────────┼────────────────────────────┤│ scheduler         │ 'yoloxwarmcos'             │├───────────────────┼────────────────────────────┤│ no_aug_epochs     │ 15                         │├───────────────────┼────────────────────────────┤│ ema               │ True                       │├───────────────────┼────────────────────────────┤│ weight_decay      │ 0.0005                     │├───────────────────┼────────────────────────────┤│ momentum          │ 0.9                        │├───────────────────┼────────────────────────────┤│ save_history_ckpt │ True                       │├───────────────────┼────────────────────────────┤│ exp_name          │ 'yolox_s'                  │├───────────────────┼────────────────────────────┤│ test_size         │ (640, 640)                 │├───────────────────┼────────────────────────────┤│ test_conf         │ 0.01                       │├───────────────────┼────────────────────────────┤│ nmsthre           │ 0.65                       │╘═══════════════════╧════════════════════════════╛"], [14.0, "╒═══════════════════╤═════════════════════════════════════════════════════════════════════════════════════════════════════════╕│ keys              │ values                                                                                                  │╞═══════════════════╪═════════════════════════════════════════════════════════════════════════════════════════════════════════╡│ seed              │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ output_dir        │ './YOLOX_outputs'                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ print_interval    │ 10                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ eval_interval     │ 10                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ dataset           │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ num_classes       │ 80                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ depth             │ 0.33                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ width             │ 0.5                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ act               │ 'silu'                                                                                                  │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ data_num_workers  │ 4                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ input_size        │ (640, 640)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ multiscale_range  │ 5                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ data_dir          │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ train_ann         │ 'instances_train2017.json'                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ val_ann           │ 'instances_val2017.json'                                                                                │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_ann          │ 'instances_test2017.json'                                                                               │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mosaic_prob       │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mixup_prob        │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ hsv_prob          │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ flip_prob         │ 0.5                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ degrees           │ 10.0                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ translate         │ 0.1                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mosaic_scale      │ (0.1, 2)                                                                                                │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ enable_mixup      │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mixup_scale       │ (0.5, 1.5)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ shear             │ 2.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ warmup_epochs     │ 5                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ max_epoch         │ 300                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ warmup_lr         │ 0                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ min_lr_ratio      │ 0.05                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ basic_lr_per_img  │ 0.00015625                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ scheduler         │ 'yoloxwarmcos'                                                                                          │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ no_aug_epochs     │ 15                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ ema               │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ weight_decay      │ 0.0005                                                                                                  │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ momentum          │ 0.9                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ save_history_ckpt │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ exp_name          │ 'yolox_s'                                                                                               │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_size         │ (640, 640)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_conf         │ 0.01                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ nmsthre           │ 0.65                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ model             │ YOLOX(                                                                                                  ││                   │   (backbone): YOLOPAFPN(                                                                                ││                   │     (backbone): CSPDarknet(                                                                             ││                   │       (stem): Focus(                                                                                    ││                   │         (conv): BaseConv(                                                                               ││                   │           (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)         ││                   │           (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)         ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark2): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)         ││                   │           (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)         ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark3): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        ││                   │           (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                      ││                   │             (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                      ││                   │             (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (1): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (2): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)   ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark4): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (1): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (2): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark5): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): SPPBottleneck(                                                                             ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): ModuleList(                                                                              ││                   │             (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)             ││                   │             (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)             ││                   │             (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)            ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                    ││                   │             (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │         (2): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (upsample): Upsample(scale_factor=2.0, mode='nearest')                                              ││                   │     (lateral_conv0): BaseConv(                                                                          ││                   │       (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                           ││                   │       (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_p4): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (reduce_conv1): BaseConv(                                                                           ││                   │       (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                           ││                   │       (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_p3): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                          ││                   │         (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)           ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                          ││                   │         (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)           ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │             (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)       ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (bu_conv2): BaseConv(                                                                               ││                   │       (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)           ││                   │       (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_n3): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (bu_conv1): BaseConv(                                                                               ││                   │       (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)           ││                   │       (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_n4): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │   )                                                                                                     ││                   │   (head): YOLOXHead(                                                                                    ││                   │     (cls_convs): ModuleList(                                                                            ││                   │       (0-2): 3 x Sequential(                                                                            ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (reg_convs): ModuleList(                                                                            ││                   │       (0-2): 3 x Sequential(                                                                            ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (cls_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))                                     ││                   │     )                                                                                                   ││                   │     (reg_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))                                      ││                   │     )                                                                                                   ││                   │     (obj_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))                                      ││                   │     )                                                                                                   ││                   │     (stems): ModuleList(                                                                                ││                   │       (0): BaseConv(                                                                                    ││                   │         (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (1): BaseConv(                                                                                    ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (2): BaseConv(                                                                                    ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (l1_loss): L1Loss()                                                                                 ││                   │     (bcewithlog_loss): BCEWithLogitsLoss()                                                              ││                   │     (iou_loss): IOUloss()                                                                               ││                   │   )                                                                                                     ││                   │ )                                                                                                       │╘═══════════════════╧═════════════════════════════════════════════════════════════════════════════════════════════════════════╛"], [16.0, "╒═══════════════════╤═════════════════════════════════════════════════════════════════════════════════════════════════════════╕│ keys              │ values                                                                                                  │╞═══════════════════╪═════════════════════════════════════════════════════════════════════════════════════════════════════════╡│ seed              │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ output_dir        │ './YOLOX_outputs'                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ print_interval    │ 10                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ eval_interval     │ 10                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ dataset           │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ num_classes       │ 80                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ depth             │ 0.33                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ width             │ 0.5                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ act               │ 'silu'                                                                                                  │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ data_num_workers  │ 4                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ input_size        │ (640, 640)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ multiscale_range  │ 5                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ data_dir          │ None                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ train_ann         │ 'instances_train2017.json'                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ val_ann           │ 'instances_val2017.json'                                                                                │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_ann          │ 'instances_test2017.json'                                                                               │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mosaic_prob       │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mixup_prob        │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ hsv_prob          │ 1.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ flip_prob         │ 0.5                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ degrees           │ 10.0                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ translate         │ 0.1                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mosaic_scale      │ (0.1, 2)                                                                                                │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ enable_mixup      │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ mixup_scale       │ (0.5, 1.5)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ shear             │ 2.0                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ warmup_epochs     │ 5                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ max_epoch         │ 300                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ warmup_lr         │ 0                                                                                                       │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ min_lr_ratio      │ 0.05                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ basic_lr_per_img  │ 0.00015625                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ scheduler         │ 'yoloxwarmcos'                                                                                          │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ no_aug_epochs     │ 15                                                                                                      │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ ema               │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ weight_decay      │ 0.0005                                                                                                  │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ momentum          │ 0.9                                                                                                     │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ save_history_ckpt │ True                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ exp_name          │ 'yolox_s'                                                                                               │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_size         │ (640, 640)                                                                                              │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ test_conf         │ 0.01                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ nmsthre           │ 0.65                                                                                                    │├───────────────────┼─────────────────────────────────────────────────────────────────────────────────────────────────────────┤│ model             │ YOLOX(                                                                                                  ││                   │   (backbone): YOLOPAFPN(                                                                                ││                   │     (backbone): CSPDarknet(                                                                             ││                   │       (stem): Focus(                                                                                    ││                   │         (conv): BaseConv(                                                                               ││                   │           (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)         ││                   │           (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark2): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)         ││                   │           (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark3): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        ││                   │           (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                      ││                   │             (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                      ││                   │             (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (1): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (2): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)   ││                   │                 (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)  ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark4): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (1): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │             (2): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │       (dark5): Sequential(                                                                              ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): SPPBottleneck(                                                                             ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): ModuleList(                                                                              ││                   │             (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)             ││                   │             (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)             ││                   │             (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)            ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                    ││                   │             (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │         (2): CSPLayer(                                                                                  ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv3): BaseConv(                                                                            ││                   │             (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (m): Sequential(                                                                              ││                   │             (0): Bottleneck(                                                                            ││                   │               (conv1): BaseConv(                                                                        ││                   │                 (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                 ││                   │                 (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │               (conv2): BaseConv(                                                                        ││                   │                 (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) ││                   │                 (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True) ││                   │                 (act): SiLU(inplace=True)                                                               ││                   │               )                                                                                         ││                   │             )                                                                                           ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (upsample): Upsample(scale_factor=2.0, mode='nearest')                                              ││                   │     (lateral_conv0): BaseConv(                                                                          ││                   │       (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                           ││                   │       (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)           ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_p4): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (reduce_conv1): BaseConv(                                                                           ││                   │       (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                           ││                   │       (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)           ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_p3): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                          ││                   │         (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                          ││                   │         (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                       ││                   │             (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │             (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (bu_conv2): BaseConv(                                                                               ││                   │       (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)           ││                   │       (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)           ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_n3): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (bu_conv1): BaseConv(                                                                               ││                   │       (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)           ││                   │       (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)           ││                   │       (act): SiLU(inplace=True)                                                                         ││                   │     )                                                                                                   ││                   │     (C3_n4): CSPLayer(                                                                                  ││                   │       (conv1): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv2): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (conv3): BaseConv(                                                                                ││                   │         (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (m): Sequential(                                                                                  ││                   │         (0): Bottleneck(                                                                                ││                   │           (conv1): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │           (conv2): BaseConv(                                                                            ││                   │             (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)     ││                   │             (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)     ││                   │             (act): SiLU(inplace=True)                                                                   ││                   │           )                                                                                             ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │   )                                                                                                     ││                   │   (head): YOLOXHead(                                                                                    ││                   │     (cls_convs): ModuleList(                                                                            ││                   │       (0-2): 3 x Sequential(                                                                            ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (reg_convs): ModuleList(                                                                            ││                   │       (0-2): 3 x Sequential(                                                                            ││                   │         (0): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │         (1): BaseConv(                                                                                  ││                   │           (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)       ││                   │           (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)       ││                   │           (act): SiLU(inplace=True)                                                                     ││                   │         )                                                                                               ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (cls_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))                                     ││                   │     )                                                                                                   ││                   │     (reg_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))                                      ││                   │     )                                                                                                   ││                   │     (obj_preds): ModuleList(                                                                            ││                   │       (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))                                      ││                   │     )                                                                                                   ││                   │     (stems): ModuleList(                                                                                ││                   │       (0): BaseConv(                                                                                    ││                   │         (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (1): BaseConv(                                                                                    ││                   │         (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │       (2): BaseConv(                                                                                    ││                   │         (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                         ││                   │         (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)         ││                   │         (act): SiLU(inplace=True)                                                                       ││                   │       )                                                                                                 ││                   │     )                                                                                                   ││                   │     (l1_loss): L1Loss()                                                                                 ││                   │     (bcewithlog_loss): BCEWithLogitsLoss()                                                              ││                   │     (iou_loss): IOUloss()                                                                               ││                   │   )                                                                                                     ││                   │ )                                                                                                       │╘═══════════════════╧═════════════════════════════════════════════════════════════════════════════════════════════════════════╛"]], "self.act": [[1, "'silu'"]], "self.basic_lr_per_img": [[1, "0.00015625"]], "self.data_dir": [[1, "None"]], "self.data_num_workers": [[1, "4"]], "self.dataset": [[1, "None"]], "self.degrees": [[1, "10.0"]], "self.depth": [[1, "0.33"]], "self.ema": [[1, "True"]], "self.enable_mixup": [[1, "True"]], "self.eval_interval": [[1, "10"]], "self.exp_name": [[1, "'yolox_s'"]], "self.flip_prob": [[1, "0.5"]], "self.hsv_prob": [[1, "1.0"]], "self.input_size": [[1, "(640, 640)"]], "self.max_epoch": [[1, "300"]], "self.min_lr_ratio": [[1, "0.05"]], "self.mixup_prob": [[1, "1.0"]], "self.mixup_scale": [[1, "(0.5, 1.5)"]], "self.momentum": [[1, "0.9"]], "self.mosaic_prob": [[1, "1.0"]], "self.mosaic_scale": [[1, "(0.1, 2)"]], "self.multiscale_range": [[1, "5"]], "self.nmsthre": [[1, "0.65"]], "self.no_aug_epochs": [[1, "15"]], "self.num_classes": [[1, "80"]], "self.output_dir": [[1, "'./YOLOX_outputs'"]], "self.print_interval": [[1, "10"]], "self.save_history_ckpt": [[1, "True"]], "self.scheduler": [[1, "'yoloxwarmcos'"]], "self.seed": [[1, "None"]], "self.shear": [[1, "2.0"]], "self.test_ann": [[1, "'instances_test2017.json'"]], "self.test_conf": [[1, "0.01"]], "self.test_size": [[1, "(640, 640)"]], "self.train_ann": [[1, "'instances_train2017.json'"]], "self.translate": [[1, "0.1"]], "self.val_ann": [[1, "'instances_val2017.json'"]], "self.warmup_epochs": [[1, "5"]], "self.warmup_lr": [[1, "0"]], "self.weight_decay": [[1, "0.0005"]], "self.width": [[1, "0.5"]], "YOLOX": [[2.0, "<class 'yolox.models.yolox.YOLOX'>"]], "YOLOPAFPN": [[2.0, "<class 'yolox.models.yolo_pafpn.YOLOPAFPN'>"]], "YOLOXHead": [[2.0, "<class 'yolox.models.yolo_head.YOLOXHead'>"]], "init_yolo": [[4.0, "<function Exp.get_model.<locals>.init_yolo at 0x7fb8c3463550>"]], "in_channels": [[11.0, "[256, 512, 1024]"]], "backbone": [[12.0, "YOLOPAFPN(  (backbone): CSPDarknet(    (stem): Focus(      (conv): BaseConv(        (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )    (dark2): Sequential(      (0): BaseConv(        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )        )      )    )    (dark3): Sequential(      (0): BaseConv(        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )          (1): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_runnin...ffine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv2): BaseConv(    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n3): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv1): BaseConv(    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n4): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  ))"], [16.0, "YOLOPAFPN(  (backbone): CSPDarknet(    (stem): Focus(      (conv): BaseConv(        (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )    (dark2): Sequential(      (0): BaseConv(        (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )        )      )    )    (dark3): Sequential(      (0): BaseConv(        (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): CSPLayer(        (conv1): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv3): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (m): Sequential(          (0): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )          )          (1): Bottleneck(            (conv1): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)              (act): SiLU(inplace=True)            )            (conv2): BaseConv(              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)              (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=Tru...k_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv2): BaseConv(    (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n3): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  )  (bu_conv1): BaseConv(    (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)    (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)    (act): SiLU(inplace=True)  )  (C3_n4): CSPLayer(    (conv1): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv2): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (conv3): BaseConv(      (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (m): Sequential(      (0): Bottleneck(        (conv1): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (conv2): BaseConv(          (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )  ))"]], "head": [[13.0, "YOLOXHead(  (cls_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (reg_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (cls_preds): ModuleList(    (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))  )  (reg_preds): ModuleList(    (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))  )  (obj_preds): ModuleList(    (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))  )  (stems): ModuleList(    (0): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (2): BaseConv(      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )  )  (l1_loss): L1Loss()  (bcewithlog_loss): BCEWithLogitsLoss()  (iou_loss): IOUloss())"], [16.0, "YOLOXHead(  (cls_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (reg_convs): ModuleList(    (0-2): 3 x Sequential(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )  )  (cls_preds): ModuleList(    (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))  )  (reg_preds): ModuleList(    (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))  )  (obj_preds): ModuleList(    (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))  )  (stems): ModuleList(    (0): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (2): BaseConv(      (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )  )  (l1_loss): L1Loss()  (bcewithlog_loss): BCEWithLogitsLoss()  (iou_loss): IOUloss())"]], "self.model": [[14.0, "YOLOX(  (backbone): YOLOPAFPN(    (backbone): CSPDarknet(      (stem): Focus(        (conv): BaseConv(          (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )      (dark2): Sequential(        (0): BaseConv(          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark3): Sequential(        (0): BaseConv(          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (1): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (2): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark4): Sequential(        (0): BaseConv(          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (1): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (2): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark5): Sequential(        (0): BaseConv(          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): SPPBottleneck(          (conv1): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): ModuleList(            (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)            (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)            (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)          )          (conv2): BaseConv(            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )        (2): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )    )    (upsample): Upsample(scale_factor=2.0, mode='nearest')    (lateral_conv0): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_p4): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (reduce_conv1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_p3): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (bu_conv2): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_n3): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (bu_conv1): BaseConv(      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_n4): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )  )  (head): YOLOXHead(    (cls_convs): ModuleList(      (0-2): 3 x Sequential(        (0): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )    (reg_convs): ModuleList(      (0-2): 3 x Sequential(        (0): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )    (cls_preds): ModuleList(      (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))    )    (reg_preds): ModuleList(      (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))    )    (obj_preds): ModuleList(      (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))    )    (stems): ModuleList(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (2): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )    (l1_loss): L1Loss()    (bcewithlog_loss): BCEWithLogitsLoss()    (iou_loss): IOUloss()  ))"], [16.0, "YOLOX(  (backbone): YOLOPAFPN(    (backbone): CSPDarknet(      (stem): Focus(        (conv): BaseConv(          (conv): Conv2d(12, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )      (dark2): Sequential(        (0): BaseConv(          (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(64, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(32, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark3): Sequential(        (0): BaseConv(          (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (1): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (2): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark4): Sequential(        (0): BaseConv(          (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (1): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )            (2): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )      (dark5): Sequential(        (0): BaseConv(          (conv): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)          (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): SPPBottleneck(          (conv1): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): ModuleList(            (0): MaxPool2d(kernel_size=5, stride=1, padding=2, dilation=1, ceil_mode=False)            (1): MaxPool2d(kernel_size=9, stride=1, padding=4, dilation=1, ceil_mode=False)            (2): MaxPool2d(kernel_size=13, stride=1, padding=6, dilation=1, ceil_mode=False)          )          (conv2): BaseConv(            (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )        (2): CSPLayer(          (conv1): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv3): BaseConv(            (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (m): Sequential(            (0): Bottleneck(              (conv1): BaseConv(                (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )              (conv2): BaseConv(                (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)                (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)                (act): SiLU(inplace=True)              )            )          )        )      )    )    (upsample): Upsample(scale_factor=2.0, mode='nearest')    (lateral_conv0): BaseConv(      (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_p4): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (reduce_conv1): BaseConv(      (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_p3): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(64, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (bu_conv2): BaseConv(      (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_n3): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )    (bu_conv1): BaseConv(      (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)      (act): SiLU(inplace=True)    )    (C3_n4): CSPLayer(      (conv1): BaseConv(        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv2): BaseConv(        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (conv3): BaseConv(        (conv): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(512, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (m): Sequential(        (0): Bottleneck(          (conv1): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )          (conv2): BaseConv(            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)            (bn): BatchNorm2d(256, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)            (act): SiLU(inplace=True)          )        )      )    )  )  (head): YOLOXHead(    (cls_convs): ModuleList(      (0-2): 3 x Sequential(        (0): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )    (reg_convs): ModuleList(      (0-2): 3 x Sequential(        (0): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )        (1): BaseConv(          (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)          (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)          (act): SiLU(inplace=True)        )      )    )    (cls_preds): ModuleList(      (0-2): 3 x Conv2d(128, 80, kernel_size=(1, 1), stride=(1, 1))    )    (reg_preds): ModuleList(      (0-2): 3 x Conv2d(128, 4, kernel_size=(1, 1), stride=(1, 1))    )    (obj_preds): ModuleList(      (0-2): 3 x Conv2d(128, 1, kernel_size=(1, 1), stride=(1, 1))    )    (stems): ModuleList(      (0): BaseConv(        (conv): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (1): BaseConv(        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )      (2): BaseConv(        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)        (bn): BatchNorm2d(128, eps=0.001, momentum=0.03, affine=True, track_running_stats=True)        (act): SiLU(inplace=True)      )    )    (l1_loss): L1Loss()    (bcewithlog_loss): BCEWithLogitsLoss()    (iou_loss): IOUloss()  ))"]]}, "Program Information": "Project Name: Megvii-BaseDetection+YOLOX", "idx": 179, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def fmt_dtype(hdf_dt):\n    \"\"\"Get a (preferably short) string describing an HDF5 datatype\"\"\"\n    size = hdf_dt.get_size()\n\n    if isinstance(hdf_dt, h5t.TypeIntegerID):\n        # Check normal int & uint dtypes first\n        for candidate, descr in int_types_by_size().get(size, ()):\n            if hdf_dt == candidate:\n                return descr\n        un = 'un' if hdf_dt.get_sign() == h5t.SGN_NONE else ''\n        return \"{}-byte {}signed integer\".format(size, un)\n    elif isinstance(hdf_dt, h5t.TypeFloatID):\n        # Check normal float dtypes first\n        for candidate, descr in float_types_by_size().get(size, ()):\n            if hdf_dt == candidate:\n                return descr\n        return \"custom {}-byte float\".format(size)\n    elif isinstance(hdf_dt, h5t.TypeBitfieldID):\n        return \"{}-byte bitfield\".format(size)\n    elif isinstance(hdf_dt, h5t.TypeTimeID):\n        return \"time\"  # NB. time datatype is deprecated\n    elif isinstance(hdf_dt, h5t.TypeOpaqueID):\n        s = \"{}-byte opaque\".format(size)\n        tag = hdf_dt.get_tag()\n        if tag:\n            s += ' ({})'.format(tag.decode('utf-8', 'replace'))\n        return s\n    elif isinstance(hdf_dt, h5t.TypeStringID):\n        cset = cset_names.get(hdf_dt.get_cset(), '?cset')\n        if hdf_dt.is_variable_str():\n            return \"{} string\".format(cset)\n        else:\n            return \"{}-byte {} string\".format(size, cset)\n    elif isinstance(hdf_dt, h5t.TypeVlenID):\n        return \"vlen array of \" + fmt_dtype(hdf_dt.get_super())\n    elif isinstance(hdf_dt, h5t.TypeArrayID):\n        shape = fmt_shape(hdf_dt.get_array_dims())\n        return \"{} array of {}\".format(shape, fmt_dtype(hdf_dt.get_super()))\n\n    elif isinstance(hdf_dt, h5t.TypeCompoundID):\n        return \"({})\".format(\", \".join(\n            \"{}: {}\".format(\n                hdf_dt.get_member_name(i).decode('utf-8', 'replace'),\n                fmt_dtype(hdf_dt.get_member_type(i))\n            )\n            for i in range(hdf_dt.get_nmembers())\n        ))\n    elif isinstance(hdf_dt, h5t.TypeEnumID):\n        nmembers = hdf_dt.get_nmembers()\n        if nmembers >= 5:\n            return \"enum ({} options)\".format(nmembers)\n        else:\n            return \"enum ({})\".format(\", \".join(\n                hdf_dt.get_member_name(i).decode('utf-8', 'replace')\n                for i in range(nmembers)\n            ))\n    elif isinstance(hdf_dt, h5t.TypeReferenceID):\n        return \"region ref\" if hdf_dt == h5t.STD_REF_DSETREG else \"object ref\"\n\n    return \"unrecognised {}-byte datatype\".format(size)\n\nfmt_dtype(hdf_dt=REPR FAILED)", "Selected Statement": "for candidate, descr in float_types_by_size().get(size, ()):", "Function Input": {"hdf_dt": "REPR FAILED"}, "Variable Values Before Statement": {"size": "4"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"hdf_dt": [[1, "REPR FAILED"]], "size": [[3.0, "4"]], "candidate": [[14.0, "REPR FAILED"]], "descr": [[14.0, "'float32'"]]}, "Program Information": "Project Name: European-XFEL+h5glance", "idx": 180, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def dtype_description(hdf_dt):\n    \"\"\"A slightly longer description, suitable for a tooltip\n\n    Can return None\n    \"\"\"\n    size = hdf_dt.get_size()\n\n    if isinstance(hdf_dt, h5t.TypeIntegerID):\n        # Check normal int & uint dtypes first\n        for candidate, descr in int_types_by_size().get(size, ()):\n            if hdf_dt == candidate:\n                un = 'un' if hdf_dt.get_sign() == h5t.SGN_NONE else ''\n                return '{}-bit {}signed integer'.format(size * 8, un)\n\n    elif isinstance(hdf_dt, h5t.TypeFloatID):\n        # Check normal float dtypes first\n        for candidate, descr in float_types_by_size().get(size, ()):\n            if hdf_dt == candidate:\n                return '{}-bit floating point'.format(size * 8)\n\n    return None\n\ndtype_description(hdf_dt=REPR FAILED)", "Selected Statement": "for candidate, descr in float_types_by_size().get(size, ()):", "Function Input": {"hdf_dt": "REPR FAILED"}, "Variable Values Before Statement": {"size": "4"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"hdf_dt": [[1, "REPR FAILED"]], "size": [[6.0, "4"]], "candidate": [[17.0, "REPR FAILED"]], "descr": [[17.0, "'float32'"]]}, "Program Information": "Project Name: European-XFEL+h5glance", "idx": 181, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _prepare_references_in_schema(schema: Dict[str, Any]) -> Dict[str, Any]:\n    # Create a copy so that $ref is not modified in the original schema in case\n    # that it would still reference a dictionary which might be attached to\n    # an Altair class _schema attribute\n    schema = copy.deepcopy(schema)\n\n    def _prepare_refs(d: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Add _VEGA_LITE_ROOT_URI in front of all $ref values. This function\n        recursively iterates through the whole dictionary.\"\"\"\n        for key, value in d.items():\n            if key == \"$ref\":\n                d[key] = _VEGA_LITE_ROOT_URI + d[key]\n            else:\n                # $ref values can only be nested in dictionaries or lists\n                # as the passed in `d` dictionary comes from the Vega-Lite json schema\n                # and in json we only have arrays (-> lists in Python) and objects\n                # (-> dictionaries in Python) which we need to iterate through.\n                if isinstance(value, dict):\n                    d[key] = _prepare_refs(value)\n                elif isinstance(value, list):\n                    prepared_values = []\n                    for v in value:\n                        if isinstance(v, dict):\n                            v = _prepare_refs(v)\n                        prepared_values.append(v)\n                    d[key] = prepared_values\n        return d\n\n    schema = _prepare_refs(schema)\n    return schema\n\n_prepare_references_in_schema(schema={'$ref': '#/definitions/ExprRef'})", "Selected Statement": "schema = _prepare_refs(schema)", "Function Input": {"schema": "{'$ref': '#/definitions/ExprRef'}"}, "Variable Values Before Statement": {"schema": "{'$ref': '#/definitions/ExprRef'}"}, "Value After Statement Execution": "{'$ref': 'urn:vega-lite-schema#/definitions/ExprRef'}", "Variable States During Runtime": {"schema": [[1, "{'$ref': '#/definitions/ExprRef'}"], [29.0, "{'$ref': 'urn:vega-lite-schema#/definitions/ExprRef'}"]], "_prepare_refs": [[7.0, "<function _prepare_references_in_schema.<locals>._prepare_refs at 0x7fc2eb850a60>"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 182, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def eval_block(code, namespace=None, filename=\"<string>\"):\n    \"\"\"\n    Execute a multi-line block of code in the given namespace\n\n    If the final statement in the code is an expression, return\n    the result of the expression.\n    \"\"\"\n    tree = ast.parse(code, filename=\"<ast>\", mode=\"exec\")\n    if namespace is None:\n        namespace = {}\n    catch_display = _CatchDisplay()\n\n    if isinstance(tree.body[-1], ast.Expr):\n        to_exec, to_eval = tree.body[:-1], tree.body[-1:]\n    else:\n        to_exec, to_eval = tree.body, []\n\n    for node in to_exec:\n        compiled = compile(ast.Module([node], []), filename=filename, mode=\"exec\")\n        exec(compiled, namespace)\n\n    with catch_display:\n        for node in to_eval:\n            compiled = compile(\n                ast.Interactive([node]), filename=filename, mode=\"single\"\n            )\n            exec(compiled, namespace)\n\n    return catch_display.output\n\neval_block(code=b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n', namespace=None, filename='<string>')", "Selected Statement": "exec(compiled, namespace)", "Function Input": {"code": "b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n'", "namespace": "None", "filename": "'<string>'"}, "Variable Values Before Statement": {"compiled": "<code object <module> at 0x7fc2e9a60b30, file \"<string>\", line 70>", "namespace": "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...), 'connections': alt.Chart(...), 'points': alt.Chart(...)}"}, "Value After Statement Execution": "{output", "Variable States During Runtime": {"code": [[1, "b'\"\"\"\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n\"\"\"\\n# category: case studies\\nimport altair as alt\\nfrom vega_datasets import data\\n\\n# Since these data are each more than 5,000 rows we\\'ll import from the URLs\\nairports = data.airports.url\\nflights_airport = data.flights_airport.url\\n\\nstates = alt.topo_feature(data.us_10m.url, feature=\"states\")\\n\\n# Create mouseover selection\\nselect_city = alt.selection_point(\\n    on=\"mouseover\", nearest=True, fields=[\"origin\"], empty=False\\n)\\n\\n# Define which attributes to lookup from airports.csv\\nlookup_data = alt.LookupData(\\n    airports, key=\"iata\", fields=[\"state\", \"latitude\", \"longitude\"]\\n)\\n\\nbackground = alt.Chart(states).mark_geoshape(\\n    fill=\"lightgray\", \\n    stroke=\"white\"\\n).properties(\\n    width=750, \\n    height=500\\n).project(\"albersUsa\")\\n\\nconnections = alt.Chart(flights_airport).mark_rule(opacity=0.35).encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    latitude2=\"lat2:Q\",\\n    longitude2=\"lon2:Q\"\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_lookup(\\n    lookup=\"destination\", \\n    from_=lookup_data, \\n    as_=[\"state\", \"lat2\", \"lon2\"]\\n).transform_filter(\\n    select_city\\n)\\n\\npoints = alt.Chart(flights_airport).mark_circle().encode(\\n    latitude=\"latitude:Q\",\\n    longitude=\"longitude:Q\",\\n    size=alt.Size(\"routes:Q\", scale=alt.Scale(range=[0, 1000]), legend=None),\\n    order=alt.Order(\"routes:Q\", sort=\"descending\"),\\n    tooltip=[\"origin:N\", \"routes:Q\"]\\n).transform_aggregate(\\n    routes=\"count()\", \\n    groupby=[\"origin\"]\\n).transform_lookup(\\n    lookup=\"origin\", \\n    from_=lookup_data\\n).transform_filter(\\n    (alt.datum.state != \"PR\") & (alt.datum.state != \"VI\")\\n).add_params(\\n    select_city\\n)\\n\\n(background + connections + points).configure_view(stroke=None)\\n'"]], "namespace": [[1, "None"], [10.0, "{}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv'}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'})}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })}))}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'})}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...)}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...), 'connections': alt.Chart(...)}"], [20.0, "{'__builtins__': {'__name__': 'builtins', '__doc__': \"Built-in functions, exceptions, and other objects.\\n\\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices.\", '__package__': '', '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': ModuleSpec(name='builtins', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in'), '__build_class__': <built-in function __build_class__>, '__import__': <built-in function __import__>, 'abs': <built-in function abs>, 'all': <built-in function all>, 'any': <built-in function any>, 'ascii': <built-in function ascii>, 'bin': <built-in function bin>, 'breakpoint': <built-in function breakpoint>, 'callable': <built-in function callable>, 'chr': <built-in function chr>, 'compile': <built-in function compile>, 'delattr': <built-in function delattr>, 'dir': <built-in function dir>, 'divmod': <built-in function divmod>, 'eval': <built-in function eval>, 'exec': <built-in function exec>, 'format': <built-in function format>, 'getattr': <built-in function getattr>, 'globals': <built-in function globals>, 'hasattr': <built-in function hasattr>, 'hash': <built-in function hash>, 'hex': <built-in function hex>, 'id': <built-in function id>, 'input': <built-in function input>, 'isinstance': <built-in function isinstance>, 'issubclass': <built-in function issubclass>, 'iter': <built-in function iter>, 'len': <built-in function len>, 'locals': <built-in function locals>, 'max': <built-in function max>, 'min': <built-in function min>, 'next': <built-in function next>, 'oct': <built-in function oct>, 'ord': <built-in function ord>, 'pow': <built-in function pow>, 'print': <built-in function print>, 'repr': <built-in function repr>, 'round': <built-in function round>, 'setattr': <built-in function setattr>, 'sorted': <built-in function sorted>, 'sum': <built-in function sum>, 'vars': <built-in function vars>, 'None': None, 'Ellipsis': Ellipsis, 'NotImplemented': NotImplemented, 'False': False, 'True': True, 'bool': <class 'bool'>, 'memoryview': <class 'memoryview'>, 'bytearray': <class 'bytearray'>, 'bytes': <class 'bytes'>, 'classmethod': <class 'classmethod'>, 'complex': <class 'complex'>, 'dict': <class 'dict'>, 'enumerate': <class 'enumerate'>, 'filter': <class 'filter'>, 'float': <class 'float'>, 'frozenset': <class 'frozenset'>, 'property': <class 'property'>, 'int': <class 'int'>, 'list': <class 'list'>, 'map': <class 'map'>, 'object': <class 'object'>, 'range': <class 'range'>, 'reversed': <class 'reversed'>, 'set': <class 'set'>, 'slice': <class 'slice'>, 'staticmethod': <class 'staticmethod'>, 'str': <class 'str'>, 'super': <class 'super'>, 'tuple': <class 'tuple'>, 'type': <class 'type'>, 'zip': <class 'zip'>, '__debug__': True, 'BaseException': <class 'BaseException'>, 'Exception': <class 'Exception'>, 'TypeError': <class 'TypeError'>, 'StopAsyncIteration': <class 'StopAsyncIteration'>, 'StopIteration': <class 'StopIteration'>, 'GeneratorExit': <class 'GeneratorExit'>, 'SystemExit': <class 'SystemExit'>, 'KeyboardInterrupt': <class 'KeyboardInterrupt'>, 'ImportError': <class 'ImportError'>, 'ModuleNotFoundError': <class 'ModuleNotFoundError'>, 'OSError': <class 'OSError'>, 'EnvironmentError': <class 'OSError'>, 'IOError': <class 'OSError'>, 'EOFError': <class 'EOFError'>, 'RuntimeError': <class 'RuntimeError'>, 'RecursionError': <class 'RecursionError'>, 'NotImplementedError': <class 'NotImplementedError'>, 'NameError': <class 'NameError'>, 'UnboundLocalError': <class 'UnboundLocalError'>, 'AttributeError': <class 'AttributeError'>, 'SyntaxError': <class 'SyntaxError'>, 'IndentationError': <class 'IndentationError'>, 'TabError': <class 'TabError'>, 'LookupError': <class 'LookupError'>, 'IndexError': <class 'IndexError'>, 'KeyError': <class 'KeyError'>, 'ValueError': <class 'ValueError'>, 'UnicodeError': <class 'UnicodeError'>, 'UnicodeEncodeError': <class 'UnicodeEncodeError'>, 'UnicodeDecodeError': <class 'UnicodeDecodeError'>, 'UnicodeTranslateError': <class 'UnicodeTranslateError'>, 'AssertionError': <class 'AssertionError'>, 'ArithmeticError': <class 'ArithmeticError'>, 'FloatingPointError': <class 'FloatingPointError'>, 'OverflowError': <class 'OverflowError'>, 'ZeroDivisionError': <class 'ZeroDivisionError'>, 'SystemError': <class 'SystemError'>, 'ReferenceError': <class 'ReferenceError'>, 'MemoryError': <class 'MemoryError'>, 'BufferError': <class 'BufferError'>, 'Warning': <class 'Warning'>, 'UserWarning': <class 'UserWarning'>, 'DeprecationWarning': <class 'DeprecationWarning'>, 'PendingDeprecationWarning': <class 'PendingDeprecationWarning'>, 'SyntaxWarning': <class 'SyntaxWarning'>, 'RuntimeWarning': <class 'RuntimeWarning'>, 'FutureWarning': <class 'FutureWarning'>, 'ImportWarning': <class 'ImportWarning'>, 'UnicodeWarning': <class 'UnicodeWarning'>, 'BytesWarning': <class 'BytesWarning'>, 'ResourceWarning': <class 'ResourceWarning'>, 'ConnectionError': <class 'ConnectionError'>, 'BlockingIOError': <class 'BlockingIOError'>, 'BrokenPipeError': <class 'BrokenPipeError'>, 'ChildProcessError': <class 'ChildProcessError'>, 'ConnectionAbortedError': <class 'ConnectionAbortedError'>, 'ConnectionRefusedError': <class 'ConnectionRefusedError'>, 'ConnectionResetError': <class 'ConnectionResetError'>, 'FileExistsError': <class 'FileExistsError'>, 'FileNotFoundError': <class 'FileNotFoundError'>, 'IsADirectoryError': <class 'IsADirectoryError'>, 'NotADirectoryError': <class 'NotADirectoryError'>, 'InterruptedError': <class 'InterruptedError'>, 'PermissionError': <class 'PermissionError'>, 'ProcessLookupError': <class 'ProcessLookupError'>, 'TimeoutError': <class 'TimeoutError'>, 'open': <built-in function open>, 'copyright': Copyright (c) 2001-2023 Python Software Foundation.All Rights Reserved.Copyright (c) 2000 BeOpen.com.All Rights Reserved.Copyright (c) 1995-2001 Corporation for National Research Initiatives.All Rights Reserved.Copyright (c) 1991-1995 Stichting Mathematisch Centrum, Amsterdam.All Rights Reserved., 'credits':     Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands    for supporting Python development.  See www.python.org for more information., 'license': Type license() to see the full license text, 'help': Type help() for interactive help, or help(object) for help about object., '__IPYTHON__': True, 'display': <function display at 0x7fc2eb22bf70>, 'exit': Use exit() or Ctrl-D (i.e. EOF) to exit, 'quit': Use quit() or Ctrl-D (i.e. EOF) to exit}, '__doc__': '\\nConnections Among U.S. Airports Interactive\\n-------------------------------------------\\nThis example shows all the connections between major U.S. airports. Lookup transformations \\nare used to find the coordinates of each airport and connecting airports. Connections \\nare displayed on mouseover via a single selection.\\n', 'alt': <module 'altair' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/altair-viz+altair/altair-viz+altair/altair/__init__.py'>, 'data': <vega_datasets.core.DataLoader object at 0x7fc2ea693370>, 'airports': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv', 'flights_airport': 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/flights-airport.csv', 'states': UrlData({  format: TopoDataFormat({    feature: 'states',    type: 'topojson'  }),  url: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/us-10m.json'}), 'select_city': Parameter('param_1', SelectionParameter({  name: 'param_1',  select: PointSelectionConfig({    fields: ['origin'],    nearest: True,    on: 'mouseover',    type: 'point'  })})), 'lookup_data': LookupData({  data: 'https://cdn.jsdelivr.net/npm/vega-datasets@v1.29.0/data/airports.csv',  fields: ['state', 'latitude', 'longitude'],  key: 'iata'}), 'background': alt.Chart(...), 'connections': alt.Chart(...), 'points': alt.Chart(...)}"]], "filename": [[1, "'<string>'"]], "tree": [[8.0, "{body=[<ast.Expr object at 0x7fc2e898dfa0>, <ast.Import object at 0x7fc2e898df10>, <ast.ImportFrom object at 0x7fc2e898de50>, <ast.Assign object at 0x7fc2e898de20>, <ast.Assign object at 0x7fc2e898dcd0>, <ast.Assign object at 0x7fc2e898dbe0>, <ast.Assign object at 0x7fc2e898da30>, <ast.Assign object at 0x7fc2e898d760>, <ast.Assign object at 0x7fc2e898d4f0>, <ast.Assign object at 0x7fc2e898c700>, <ast.Assign object at 0x7fc2e9ac7f40>, <ast.Expr object at 0x7fc39279b9d0>], type_ignores=[]}"]], "catch_display": [[11.0, "{output=None}"], [22.0, "{output=None, old_hook=<built-in function displayhook>}"], [27.0, "{output=alt.LayerChart(...), old_hook=<built-in function displayhook>}"]], "to_exec": [[14.0, "[<ast.Expr object at 0x7fc2e898dfa0>, <ast.Import object at 0x7fc2e898df10>, <ast.ImportFrom object at 0x7fc2e898de50>, <ast.Assign object at 0x7fc2e898de20>, <ast.Assign object at 0x7fc2e898dcd0>, <ast.Assign object at 0x7fc2e898dbe0>, <ast.Assign object at 0x7fc2e898da30>, <ast.Assign object at 0x7fc2e898d760>, <ast.Assign object at 0x7fc2e898d4f0>, <ast.Assign object at 0x7fc2e898c700>, <ast.Assign object at 0x7fc2e9ac7f40>]"]], "to_eval": [[14.0, "[<ast.Expr object at 0x7fc39279b9d0>]"]], "node": [[18.0, "{value=<ast.Constant object at 0x7fc2e898df70>, lineno=1, col_offset=0, end_lineno=7, end_col_offset=3}"], [18.0, "{names=[<ast.alias object at 0x7fc2e898dee0>], lineno=9, col_offset=0, end_lineno=9, end_col_offset=20}"], [18.0, "{module='vega_datasets', names=[<ast.alias object at 0x7fc2e898ddf0>], level=0, lineno=10, col_offset=0, end_lineno=10, end_col_offset=30}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dd90>], value=<ast.Attribute object at 0x7fc2e898dd60>, type_comment=None, lineno=13, col_offset=0, end_lineno=13, end_col_offset=28}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dca0>], value=<ast.Attribute object at 0x7fc2e898dc70>, type_comment=None, lineno=14, col_offset=0, end_lineno=14, end_col_offset=42}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898dbb0>], value=<ast.Call object at 0x7fc2e898db80>, type_comment=None, lineno=16, col_offset=0, end_lineno=16, end_col_offset=60}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d9d0>], value=<ast.Call object at 0x7fc2e898d9a0>, type_comment=None, lineno=19, col_offset=0, end_lineno=21, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d730>], value=<ast.Call object at 0x7fc2e898d700>, type_comment=None, lineno=24, col_offset=0, end_lineno=26, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898d4c0>], value=<ast.Call object at 0x7fc2e898d490>, type_comment=None, lineno=28, col_offset=0, end_lineno=34, end_col_offset=22}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e898c6d0>], value=<ast.Call object at 0x7fc2e898c6a0>, type_comment=None, lineno=36, col_offset=0, end_lineno=50, end_col_offset=1}"], [18.0, "{targets=[<ast.Name object at 0x7fc2e9ac7f10>], value=<ast.Call object at 0x7fc2e9ac79a0>, type_comment=None, lineno=52, col_offset=0, end_lineno=68, end_col_offset=1}"], [23.0, "{value=<ast.Call object at 0x7fc39279b820>, lineno=70, col_offset=0, end_lineno=70, end_col_offset=63}"]], "compiled": [[19.0, "<code object <module> at 0x7fc2e9732450, file \"<string>\", line 1>"], [19.0, "<code object <module> at 0x7fc2e973c870, file \"<string>\", line 9>"], [19.0, "<code object <module> at 0x7fc2e973cea0, file \"<string>\", line 10>"], [19.0, "<code object <module> at 0x7fc2e973c450, file \"<string>\", line 13>"], [19.0, "<code object <module> at 0x7fc2e96e5ea0, file \"<string>\", line 14>"], [19.0, "<code object <module> at 0x7fc2e96e8ea0, file \"<string>\", line 16>"], [19.0, "<code object <module> at 0x7fc2e95e7be0, file \"<string>\", line 19>"], [19.0, "<code object <module> at 0x7fc2e93ef7c0, file \"<string>\", line 24>"], [19.0, "<code object <module> at 0x7fc2e91a2f50, file \"<string>\", line 28>"], [19.0, "<code object <module> at 0x7fc2e93a09d0, file \"<string>\", line 36>"], [19.0, "<code object <module> at 0x7fc2e10453a0, file \"<string>\", line 52>"], [24.0, "<code object <module> at 0x7fc2e9a60b30, file \"<string>\", line 70>"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 183, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def to_values(data: DataType) -> ToValuesReturnType:\n    \"\"\"Replace a DataFrame by a data model with values.\"\"\"\n    check_data_type(data)\n    if hasattr(data, \"__geo_interface__\"):\n        if isinstance(data, pd.DataFrame):\n            data = sanitize_dataframe(data)\n        # Maybe the type could be further clarified here that it is\n        # SupportGeoInterface and then the ignore statement is not needed?\n        data_sanitized = sanitize_geo_interface(data.__geo_interface__)  # type: ignore[arg-type]\n        return {\"values\": data_sanitized}\n    elif isinstance(data, pd.DataFrame):\n        data = sanitize_dataframe(data)\n        return {\"values\": data.to_dict(orient=\"records\")}\n    elif isinstance(data, dict):\n        if \"values\" not in data:\n            raise KeyError(\"values expected in data dict, but not present.\")\n        return data\n    elif hasattr(data, \"__dataframe__\"):\n        # experimental interchange dataframe support\n        pi = import_pyarrow_interchange()\n        pa_table = sanitize_arrow_table(pi.from_dataframe(data))\n        return {\"values\": pa_table.to_pylist()}\n    else:\n        # Should never reach this state as tested by check_data_type\n        raise ValueError(\"Unrecognized data type: {}\".format(type(data)))\n\nto_values(data=           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns])", "Selected Statement": "data = sanitize_dataframe(data)", "Function Input": {"data": "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"}, "Variable Values Before Statement": {"data": "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"}, "Value After Statement Execution": "date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]", "Variable States During Runtime": {"data": [[1, "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [12.0, "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 184, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def sanitize_dataframe(df: pd.DataFrame) -> pd.DataFrame:  # noqa: C901\n    \"\"\"Sanitize a DataFrame to prepare it for serialization.\n\n    * Make a copy\n    * Convert RangeIndex columns to strings\n    * Raise ValueError if column names are not strings\n    * Raise ValueError if it has a hierarchical index.\n    * Convert categoricals to strings.\n    * Convert np.bool_ dtypes to Python bool objects\n    * Convert np.int dtypes to Python int objects\n    * Convert floats to objects and replace NaNs/infs with None.\n    * Convert DateTime dtypes into appropriate string representations\n    * Convert Nullable integers to objects and replace NaN with None\n    * Convert Nullable boolean to objects and replace NaN with None\n    * convert dedicated string column to objects and replace NaN with None\n    * Raise a ValueError for TimeDelta dtypes\n    \"\"\"\n    df = df.copy()\n\n    if isinstance(df.columns, pd.RangeIndex):\n        df.columns = df.columns.astype(str)\n\n    for col_name in df.columns:\n        if not isinstance(col_name, str):\n            raise ValueError(\n                \"Dataframe contains invalid column name: {0!r}. \"\n                \"Column names must be strings\".format(col_name)\n            )\n\n    if isinstance(df.index, pd.MultiIndex):\n        raise ValueError(\"Hierarchical indices not supported\")\n    if isinstance(df.columns, pd.MultiIndex):\n        raise ValueError(\"Hierarchical indices not supported\")\n\n    def to_list_if_array(val):\n        if isinstance(val, np.ndarray):\n            return val.tolist()\n        else:\n            return val\n\n    for dtype_item in df.dtypes.items():\n        # We know that the column names are strings from the isinstance check\n        # further above but mypy thinks it is of type Hashable and therefore does not\n        # let us assign it to the col_name variable which is already of type str.\n        col_name = cast(str, dtype_item[0])\n        dtype = dtype_item[1]\n        dtype_name = str(dtype)\n        if dtype_name == \"category\":\n            # Work around bug in to_json for categorical types in older versions\n            # of pandas as they do not properly convert NaN values to null in to_json.\n            # We can probably remove this part once we require pandas >= 1.0\n            col = df[col_name].astype(object)\n            df[col_name] = col.where(col.notnull(), None)\n        elif dtype_name == \"string\":\n            # dedicated string datatype (since 1.0)\n            # https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html#dedicated-string-data-type\n            col = df[col_name].astype(object)\n            df[col_name] = col.where(col.notnull(), None)\n        elif dtype_name == \"bool\":\n            # convert numpy bools to objects; np.bool is not JSON serializable\n            df[col_name] = df[col_name].astype(object)\n        elif dtype_name == \"boolean\":\n            # dedicated boolean datatype (since 1.0)\n            # https://pandas.io/docs/user_guide/boolean.html\n            col = df[col_name].astype(object)\n            df[col_name] = col.where(col.notnull(), None)\n        elif dtype_name.startswith(\"datetime\") or dtype_name.startswith(\"timestamp\"):\n            # Convert datetimes to strings. This needs to be a full ISO string\n            # with time, which is why we cannot use ``col.astype(str)``.\n            # This is because Javascript parses date-only times in UTC, but\n            # parses full ISO-8601 dates as local time, and dates in Vega and\n            # Vega-Lite are displayed in local time by default.\n            # (see https://github.com/altair-viz/altair/issues/1027)\n            df[col_name] = (\n                df[col_name].apply(lambda x: x.isoformat()).replace(\"NaT\", \"\")\n            )\n        elif dtype_name.startswith(\"timedelta\"):\n            raise ValueError(\n                'Field \"{col_name}\" has type \"{dtype}\" which is '\n                \"not supported by Altair. Please convert to \"\n                \"either a timestamp or a numerical value.\"\n                \"\".format(col_name=col_name, dtype=dtype)\n            )\n        elif dtype_name.startswith(\"geometry\"):\n            # geopandas >=0.6.1 uses the dtype geometry. Continue here\n            # otherwise it will give an error on np.issubdtype(dtype, np.integer)\n            continue\n        elif (\n            dtype_name\n            in {\n                \"Int8\",\n                \"Int16\",\n                \"Int32\",\n                \"Int64\",\n                \"UInt8\",\n                \"UInt16\",\n                \"UInt32\",\n                \"UInt64\",\n                \"Float32\",\n                \"Float64\",\n            }\n        ):  # nullable integer datatypes (since 24.0) and nullable float datatypes (since 1.2.0)\n            # https://pandas.pydata.org/pandas-docs/version/0.25/whatsnew/v0.24.0.html#optional-integer-na-support\n            col = df[col_name].astype(object)\n            df[col_name] = col.where(col.notnull(), None)\n        elif numpy_is_subtype(dtype, np.integer):\n            # convert integers to objects; np.int is not JSON serializable\n            df[col_name] = df[col_name].astype(object)\n        elif numpy_is_subtype(dtype, np.floating):\n            # For floats, convert to Python float: np.float is not JSON serializable\n            # Also convert NaN/inf values to null, as they are not JSON serializable\n            col = df[col_name]\n            bad_values = col.isnull() | np.isinf(col)\n            df[col_name] = col.astype(object).where(~bad_values, None)\n        elif dtype == object:\n            # Convert numpy arrays saved as objects to lists\n            # Arrays are not JSON serializable\n            col = df[col_name].astype(object).apply(to_list_if_array)\n            df[col_name] = col.where(col.notnull(), None)\n    return df\n\nsanitize_dataframe(df=           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns])", "Selected Statement": "col = df[col_name].astype(object).apply(to_list_if_array)", "Function Input": {"df": "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"}, "Variable Values Before Statement": {"to_list_if_array": "<function sanitize_dataframe.<locals>.to_list_if_array at 0x7fc2dcd75700>"}, "Value After Statement Execution": "0       drizzle1          rain2          rain3          rain4          rain         ...   1456        fog1457        fog1458        fog1459        sun1460        sunName: weather, Length: 1461, dtype: object", "Variable States During Runtime": {"df": [[1, "           date  precipitation  temp_max  temp_min  wind  weather0    2012-01-01            0.0      12.8       5.0   4.7  drizzle1    2012-01-02           10.9      10.6       2.8   4.5     rain2    2012-01-03            0.8      11.7       7.2   2.3     rain3    2012-01-04           20.3      12.2       5.6   4.7     rain4    2012-01-05            1.3       8.9       2.8   6.1     rain...         ...            ...       ...       ...   ...      ...1456 2015-12-27            8.6       4.4       1.7   2.9      fog1457 2015-12-28            1.5       5.0       1.7   1.3      fog1458 2015-12-29            0.0       7.2       0.6   2.6      fog1459 2015-12-30            0.0       5.6      -1.0   3.4      sun1460 2015-12-31            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [74.0, "                     date  precipitation  temp_max  temp_min  wind  weather0     2012-01-01T00:00:00            0.0      12.8       5.0   4.7  drizzle1     2012-01-02T00:00:00           10.9      10.6       2.8   4.5     rain2     2012-01-03T00:00:00            0.8      11.7       7.2   2.3     rain3     2012-01-04T00:00:00           20.3      12.2       5.6   4.7     rain4     2012-01-05T00:00:00            1.3       8.9       2.8   6.1     rain...                   ...            ...       ...       ...   ...      ...1456  2015-12-27T00:00:00            8.6       4.4       1.7   2.9      fog1457  2015-12-28T00:00:00            1.5       5.0       1.7   1.3      fog1458  2015-12-29T00:00:00            0.0       7.2       0.6   2.6      fog1459  2015-12-30T00:00:00            0.0       5.6      -1.0   3.4      sun1460  2015-12-31T00:00:00            0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [114.0, "                     date precipitation  temp_max  temp_min  wind  weather0     2012-01-01T00:00:00           0.0      12.8       5.0   4.7  drizzle1     2012-01-02T00:00:00          10.9      10.6       2.8   4.5     rain2     2012-01-03T00:00:00           0.8      11.7       7.2   2.3     rain3     2012-01-04T00:00:00          20.3      12.2       5.6   4.7     rain4     2012-01-05T00:00:00           1.3       8.9       2.8   6.1     rain...                   ...           ...       ...       ...   ...      ...1456  2015-12-27T00:00:00           8.6       4.4       1.7   2.9      fog1457  2015-12-28T00:00:00           1.5       5.0       1.7   1.3      fog1458  2015-12-29T00:00:00           0.0       7.2       0.6   2.6      fog1459  2015-12-30T00:00:00           0.0       5.6      -1.0   3.4      sun1460  2015-12-31T00:00:00           0.0       5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [114.0, "                     date precipitation temp_max  temp_min  wind  weather0     2012-01-01T00:00:00           0.0     12.8       5.0   4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6       2.8   4.5     rain2     2012-01-03T00:00:00           0.8     11.7       7.2   2.3     rain3     2012-01-04T00:00:00          20.3     12.2       5.6   4.7     rain4     2012-01-05T00:00:00           1.3      8.9       2.8   6.1     rain...                   ...           ...      ...       ...   ...      ...1456  2015-12-27T00:00:00           8.6      4.4       1.7   2.9      fog1457  2015-12-28T00:00:00           1.5      5.0       1.7   1.3      fog1458  2015-12-29T00:00:00           0.0      7.2       0.6   2.6      fog1459  2015-12-30T00:00:00           0.0      5.6      -1.0   3.4      sun1460  2015-12-31T00:00:00           0.0      5.6      -2.1   3.5      sun[1461 rows x 6 columns]"], [114.0, "                     date precipitation temp_max temp_min  wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0   4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8   4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2   2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6   4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8   6.1     rain...                   ...           ...      ...      ...   ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7   2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7   1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6   2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0   3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1   3.5      sun[1461 rows x 6 columns]"], [114.0, "                     date precipitation temp_max temp_min wind  weather0     2012-01-01T00:00:00           0.0     12.8      5.0  4.7  drizzle1     2012-01-02T00:00:00          10.9     10.6      2.8  4.5     rain2     2012-01-03T00:00:00           0.8     11.7      7.2  2.3     rain3     2012-01-04T00:00:00          20.3     12.2      5.6  4.7     rain4     2012-01-05T00:00:00           1.3      8.9      2.8  6.1     rain...                   ...           ...      ...      ...  ...      ...1456  2015-12-27T00:00:00           8.6      4.4      1.7  2.9      fog1457  2015-12-28T00:00:00           1.5      5.0      1.7  1.3      fog1458  2015-12-29T00:00:00           0.0      7.2      0.6  2.6      fog1459  2015-12-30T00:00:00           0.0      5.6     -1.0  3.4      sun1460  2015-12-31T00:00:00           0.0      5.6     -2.1  3.5      sun[1461 rows x 6 columns]"]], "col_name": [[23.0, "'date'"], [23.0, "'precipitation'"], [23.0, "'temp_max'"], [23.0, "'temp_min'"], [23.0, "'wind'"], [23.0, "'weather'"], [45.0, "'date'"], [45.0, "'precipitation'"], [45.0, "'temp_max'"], [45.0, "'temp_min'"], [45.0, "'wind'"], [45.0, "'weather'"]], "to_list_if_array": [[35.0, "<function sanitize_dataframe.<locals>.to_list_if_array at 0x7fc2dcd75700>"]], "dtype_item": [[41.0, "('date', dtype('<M8[ns]'))"], [41.0, "('precipitation', dtype('float64'))"], [41.0, "('temp_max', dtype('float64'))"], [41.0, "('temp_min', dtype('float64'))"], [41.0, "('wind', dtype('float64'))"], [41.0, "('weather', dtype('O'))"]], "dtype": [[46.0, "dtype('<M8[ns]')"], [46.0, "dtype('float64')"], [46.0, "dtype('O')"]], "dtype_name": [[47.0, "'datetime64[ns]'"], [47.0, "'float64'"], [47.0, "'object'"]], "col": [[112.0, "0        0.01       10.92        0.83       20.34        1.3        ... 1456     8.61457     1.51458     0.01459     0.01460     0.0Name: precipitation, Length: 1461, dtype: float64"], [112.0, "0       12.81       10.62       11.73       12.24        8.9        ... 1456     4.41457     5.01458     7.21459     5.61460     5.6Name: temp_max, Length: 1461, dtype: float64"], [112.0, "0       5.01       2.82       7.23       5.64       2.8       ... 1456    1.71457    1.71458    0.61459   -1.01460   -2.1Name: temp_min, Length: 1461, dtype: float64"], [112.0, "0       4.71       4.52       2.33       4.74       6.1       ... 1456    2.91457    1.31458    2.61459    3.41460    3.5Name: wind, Length: 1461, dtype: float64"], [118.0, "0       drizzle1          rain2          rain3          rain4          rain         ...   1456        fog1457        fog1458        fog1459        sun1460        sunName: weather, Length: 1461, dtype: object"]], "bad_values": [[113.0, "0       False1       False2       False3       False4       False        ...  1456    False1457    False1458    False1459    False1460    FalseName: precipitation, Length: 1461, dtype: bool"], [113.0, "0       False1       False2       False3       False4       False        ...  1456    False1457    False1458    False1459    False1460    FalseName: temp_max, Length: 1461, dtype: bool"], [113.0, "0       False1       False2       False3       False4       False        ...  1456    False1457    False1458    False1459    False1460    FalseName: temp_min, Length: 1461, dtype: bool"], [113.0, "0       False1       False2       False3       False4       False        ...  1456    False1457    False1458    False1459    False1460    FalseName: wind, Length: 1461, dtype: bool"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 185, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def lineAfterContext(line, prefix):\n    if line.startswith(prefix):\n        line = line[len(prefix):]\n\n    toks = line.split(' in ', 1)\n    if len(toks) == 2:\n        rest = toks[1].split(' ')\n        line = ' '.join(rest[1:])\n\n    return line\n\nlineAfterContext(line='ic| eins: zwei', prefix='ic| ')", "Selected Statement": "line = line[len(prefix):]", "Function Input": {"line": "'ic| eins: zwei'", "prefix": "'ic| '"}, "Variable Values Before Statement": {"prefix": "'ic| '"}, "Value After Statement Execution": "'eins: zwei'", "Variable States During Runtime": {"line": [[1, "'ic| eins: zwei'"], [3.0, "'eins: zwei'"]], "prefix": [[1, "'ic| '"]], "toks": [[5.0, "['eins: zwei']"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 186, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def argumentToString(obj):\n    s = DEFAULT_ARG_TO_STRING_FUNCTION(obj)\n    s = s.replace('\\\\n', '\\n')  # Preserve string newlines in output.\n    return s\n\nargumentToString(obj=1)", "Selected Statement": "s = DEFAULT_ARG_TO_STRING_FUNCTION(obj)", "Function Input": {"obj": "1"}, "Variable Values Before Statement": {"obj": "1"}, "Value After Statement Execution": "'1'", "Variable States During Runtime": {"obj": [[1, "1"]], "s": [[2.0, "'1'"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 187, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def lineIsContextAndTime(line):\n    line = stripPrefix(line)  # ic| f.py:33 in foo() at 08:08:51.389\n    context, time = line.split(' at ')\n\n    return (\n        lineIsContext(context) and\n        len(time.split(':')) == 3 and\n        len(time.split('.')) == 2)\n\nlineIsContextAndTime(line='ic| test_icecream.py:229 in testAsArgument() at 01:15:24.779')", "Selected Statement": "line = stripPrefix(line)  # ic| f.py:33 in foo() at 08:08:51.389", "Function Input": {"line": "'ic| test_icecream.py:229 in testAsArgument() at 01:15:24.779'"}, "Variable Values Before Statement": {"line": "'ic| test_icecream.py:229 in testAsArgument() at 01:15:24.779'"}, "Value After Statement Execution": "'test_icecream.py:229 in testAsArgument() at 01:15:24.779'", "Variable States During Runtime": {"line": [[1, "'ic| test_icecream.py:229 in testAsArgument() at 01:15:24.779'"], [2.0, "'test_icecream.py:229 in testAsArgument() at 01:15:24.779'"]], "context": [[3.0, "'test_icecream.py:229 in testAsArgument()'"]], "time": [[3.0, "'01:15:24.779'"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 188, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def lineIsContext(line):\n    line = stripPrefix(line)  # ic| f.py:33 in foo()\n    sourceLocation, function = line.split(' in ')  # f.py:33 in foo()\n    filename, lineNumber = sourceLocation.split(':')  # f.py:33\n    name, ext = splitext(filename)\n\n    return (\n        int(lineNumber) > 0 and\n        ext in ['.py', '.pyc', '.pyo'] and\n        name == splitext(MY_FILENAME)[0] and\n        (function == '<module>' or function.endswith('()')))\n\nlineIsContext(line='test_icecream.py:229 in testAsArgument()')", "Selected Statement": "name, ext = splitext(filename)", "Function Input": {"line": "'test_icecream.py:229 in testAsArgument()'"}, "Variable Values Before Statement": {"filename": "'test_icecream.py'"}, "Value After Statement Execution": "'test_icecream'", "Variable States During Runtime": {"line": [[1, "'test_icecream.py:229 in testAsArgument()'"]], "sourceLocation": [[3.0, "'test_icecream.py:229'"]], "function": [[3.0, "'testAsArgument()'"]], "filename": [[4.0, "'test_icecream.py'"]], "lineNumber": [[4.0, "'229'"]], "name": [[5.0, "'test_icecream'"]], "ext": [[5.0, "'.py'"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 189, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def format_pair(prefix, arg, value):\n    if arg is _arg_source_missing:\n        arg_lines = []\n        value_prefix = prefix\n    else:\n        arg_lines = indented_lines(prefix, arg)\n        value_prefix = arg_lines[-1] + ': '\n\n    looksLikeAString = value[0] + value[-1] in [\"''\", '\"\"']\n    if looksLikeAString:  # Align the start of multiline strings.\n        value = prefixLinesAfterFirst(' ', value)\n\n    value_lines = indented_lines(value_prefix, value)\n    lines = arg_lines[:-1] + value_lines\n    return '\\n'.join(lines)\n\nformat_pair(prefix='    ', arg='multilineStr', value=\"'line1\\nline2'\")", "Selected Statement": "arg_lines = indented_lines(prefix, arg)", "Function Input": {"prefix": "'    '", "arg": "'multilineStr'", "value": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {"prefix": "'    '", "arg": "'multilineStr'"}, "Value After Statement Execution": "['    multilineStr']", "Variable States During Runtime": {"prefix": [[1, "'    '"]], "arg": [[1, "'multilineStr'"]], "value": [[1, "\"'line1\\nline2'\""], [11.0, "\"'line1\\n line2'\""]], "arg_lines": [[6.0, "['    multilineStr']"]], "value_prefix": [[7.0, "'    multilineStr: '"]], "looksLikeAString": [[9.0, "True"]], "value_lines": [[13.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]], "lines": [[14.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 190, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def appendTo(s):\n            lst.append(s)\n\nappendTo(s='ic| a: 1', lst=[])", "Selected Statement": "lst.append(s)", "Function Input": {"s": "'ic| a: 1'", "lst": "[]"}, "Variable Values Before Statement": {"s": "'ic| a: 1'"}, "Value After Statement Execution": "['ic| a: 1']", "Variable States During Runtime": {"s": [[1, "'ic| a: 1'"]], "lst": [[1, "[]"], [2.0, "['ic| a: 1']"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 191, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def call_on_comment(*args, **kwargs):\n    global events\n    repo_full_name = kwargs[\"repo_full_name\"]\n    pr_id = kwargs[\"pr_number\"]\n    key = f\"{repo_full_name}-{pr_id}\"\n\n    # Check if a previous process exists for the same key, cancel it\n    thread = events.get(key, None)\n    if thread:\n        terminate_thread(thread)\n\n    thread = threading.Thread(target=run_comment, args=args, kwargs=kwargs)\n    events[key] = thread\n    thread.start()\n\ncall_on_comment(args=(), kwargs={'repo_full_name': 'exampleRepo', 'pr_number': 1})", "Selected Statement": "thread = events.get(key, None)", "Function Input": {"args": "()", "kwargs": "{'repo_full_name': 'exampleRepo', 'pr_number': 1}"}, "Variable Values Before Statement": {"key": "'exampleRepo-1'"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"args": [[1, "()"]], "kwargs": [[1, "{'repo_full_name': 'exampleRepo', 'pr_number': 1}"]], "repo_full_name": [[3.0, "'exampleRepo'"]], "pr_id": [[4.0, "1"]], "key": [[5.0, "'exampleRepo-1'"]], "thread": [[8.0, "None"], [12.0, "<Thread(Thread-1, initial)>"], [14.0, "<Thread(Thread-1, started 140445971379776)>"]]}, "Program Information": "Project Name: sweepai+sweep", "idx": 192, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def hmac_digest(secret, message, encoding=\"utf-8\"):\n    \"\"\"Return hex digest of a message HMAC using secret\"\"\"\n    if isinstance(secret, str):\n        secret = secret.encode(encoding)\n    return hmac.new(secret, message.encode(encoding), hashlib.sha256).hexdigest()\n\nhmac_digest(secret='secret_hmac_for_userids', message='mat:secret', encoding='utf-8')", "Selected Statement": "secret = secret.encode(encoding)", "Function Input": {"secret": "'secret_hmac_for_userids'", "message": "'mat:secret'", "encoding": "'utf-8'"}, "Variable Values Before Statement": {"encoding": "'utf-8'"}, "Value After Statement Execution": "b'secret_hmac_for_userids'", "Variable States During Runtime": {"secret": [[1, "'secret_hmac_for_userids'"], [4.0, "b'secret_hmac_for_userids'"]], "message": [[1, "'mat:secret'"]], "encoding": [[1, "'utf-8'"]]}, "Program Information": "Project Name: Kinto+kinto", "idx": 193, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_csv(csv):\n    lines = csv.strip().split('\\n')\n    lines = [line for line in lines if line.strip()]\n    csv = '\\n'.join(lines)\n    if autoeq_pattern.match(csv):  # Matches AutoEq produced CSV files\n        columns = lines[0].split(',')\n        return {column: [float(line.split(',')[i]) for line in lines[1:]] for i, column in enumerate(columns)}\n\n    if rew_pattern.match(csv) or crinacle_pattern.match(csv):\n        # These two have all sort of junk in them but the first column is frequency and the second SPL, so all good\n        csv = '\\n'.join([re.sub(r'(?:, ?| |\\t)', '\\t', line) for line in lines if numeric_start.match(line) and '?' not in line])\n        lines = csv.split('\\n')\n\n    column_separator, decimal_separator = find_csv_separators(csv)\n    columns = find_csv_columns(csv, column_separator)\n\n    # Find indexes of frequency and raw columns\n    if columns is None:\n        # No header, assume first column is frequency and the second is SPL\n        ixs = {'frequency': 0, 'raw': 1}\n    else:\n        ixs = {'frequency': None, 'raw': None}\n        for i, column in enumerate(columns):\n            if re.match(r'^freq', column, flags=re.IGNORECASE):\n                ixs['frequency'] = i\n            if re.match(r'^(?:spl|gain|ampl|raw)', column, flags=re.IGNORECASE):\n                ixs['raw'] = i\n        if ixs['frequency'] is None:\n            if len(columns) == 2:  # Can't find proper columns but there's only two, assuming freq + raw\n                ixs = {'frequency': 0, 'raw': 1}\n            else:\n                raise CsvParseError('Failed to find frequency column')\n        if ixs['raw'] is None:\n            raise CsvParseError('Failed to find SPL column')\n\n    # Read and parse data lines\n    data_line_pattern = re.compile(rf'^-?\\d+(?:{column_separator}\\d+)?')\n    data = {'frequency': [], 'raw': []}\n    for line in lines:\n        if not data_line_pattern.match(line):\n            continue\n        cells = line.split(column_separator)\n        if decimal_separator == ',':\n            cells = [float(cell.replace(',', '.')) for cell in cells]\n        else:\n            cells = [float(cell) for cell in cells]\n        for column, ix in ixs.items():\n            data[column].append(cells[ix])\n    return data\n\nparse_csv(csv='frequency,raw\\n20,0\\n1000,3\\n20000,0\\n')", "Selected Statement": "csv = '\\n'.join(lines)", "Function Input": {"csv": "'frequency,raw\\n20,0\\n1000,3\\n20000,0\\n'"}, "Variable Values Before Statement": {"lines": "['frequency,raw', '20,0', '1000,3', '20000,0']"}, "Value After Statement Execution": "'frequency,raw\\n20,0\\n1000,3\\n20000,0'", "Variable States During Runtime": {"csv": [[1, "'frequency,raw\\n20,0\\n1000,3\\n20000,0\\n'"], [4.0, "'frequency,raw\\n20,0\\n1000,3\\n20000,0'"]], "lines": [[2.0, "['frequency,raw', '20,0', '1000,3', '20000,0']"]], "columns": [[6.0, "['frequency', 'raw']"]]}, "Program Information": "Project Name: jaakkopasanen+AutoEq", "idx": 194, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _sort(a, aux, lo, hi):\n        if lo >= hi:\n            return\n\n        if hi - lo + 1 < MergeSort.CUTOFF:\n            InsertionSort.sort(a, lo, hi)\n            return\n\n        mid = lo + (hi - lo) // 2\n        MergeSort._sort(a, aux, lo, mid)\n        MergeSort._sort(a, aux, mid + 1, hi)\n        MergeSort._merge(a, aux, lo, mid, hi)\n\n_sort(a=[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, hi=7)", "Selected Statement": "MergeSort._merge(a, aux, lo, mid, hi)", "Function Input": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "hi": "7"}, "Variable Values Before Statement": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Value After Statement Execution": "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]", "Variable States During Runtime": {"a": [[1, "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [10.0, "[1, 2, 4, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [11.0, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [12.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "hi": [[1, "7"]], "mid": [[9.0, "3"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 195, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def partition(a, lo, hi):\n        i = lo\n        j = hi\n\n        while True:\n            while not util.less(a[lo], a[i]):\n                i += 1\n                if i >= hi:\n                    break\n\n            while util.less(a[lo], a[j]):\n                j -= 1\n                if j <= lo:\n                    break\n\n            if i >= j:\n                break\n\n            util.exchange(a, i, j)\n\n        util.exchange(a, lo, j)\n        return j\n\npartition(a=[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66], lo=0, hi=14)", "Selected Statement": "util.exchange(a, i, j)", "Function Input": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "lo": "0", "hi": "14"}, "Variable Values Before Statement": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "i": "4", "j": "3"}, "Value After Statement Execution": "[4, 2, 1, 4, 23, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "Variable States During Runtime": {"a": [[1, "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [19.0, "[4, 2, 1, 4, 23, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"]], "lo": [[1, "0"]], "hi": [[1, "14"]], "i": [[2.0, "0"], [7.0, "1"], [7.0, "2"], [7.0, "3"], [7.0, "4"]], "j": [[3.0, "14"], [12.0, "13"], [12.0, "12"], [12.0, "11"], [12.0, "10"], [12.0, "9"], [12.0, "8"], [12.0, "7"], [12.0, "6"], [12.0, "5"], [12.0, "4"], [12.0, "3"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 196, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_google_drive_folder_location():\n    \"\"\"\n    Try to locate the Google Drive folder.\n\n    Returns:\n        (str) Full path to the current Google Drive folder\n    \"\"\"\n    gdrive_db_path = \"Library/Application Support/Google/Drive/sync_config.db\"\n    yosemite_gdrive_db_path = (\n        \"Library/Application Support/Google/Drive/\" \"user_default/sync_config.db\"\n    )\n    yosemite_gdrive_db = os.path.join(os.environ[\"HOME\"], yosemite_gdrive_db_path)\n    if os.path.isfile(yosemite_gdrive_db):\n        gdrive_db_path = yosemite_gdrive_db\n\n    googledrive_home = None\n\n    gdrive_db = os.path.join(os.environ[\"HOME\"], gdrive_db_path)\n    if os.path.isfile(gdrive_db):\n        con = sqlite3.connect(gdrive_db)\n        if con:\n            cur = con.cursor()\n            query = (\n                \"SELECT data_value \"\n                \"FROM data \"\n                \"WHERE entry_key = 'local_sync_root_path';\"\n            )\n            cur.execute(query)\n            data = cur.fetchone()\n            googledrive_home = str(data[0])\n            con.close()\n\n    if not googledrive_home:\n        error(\n            constants.ERROR_UNABLE_TO_FIND_STORAGE.format(\n                provider=\"Google Drive install\"\n            )\n        )\n\n    return googledrive_home\n\nget_google_drive_folder_location()", "Selected Statement": "con = sqlite3.connect(gdrive_db)", "Function Input": {}, "Variable Values Before Statement": {"gdrive_db": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/sync_config.db'"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"gdrive_db_path": [[8.0, "'Library/Application Support/Google/Drive/sync_config.db'"]], "yosemite_gdrive_db_path": [[9.0, "'Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "yosemite_gdrive_db": [[12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "googledrive_home": [[16.0, "None"], [30.0, "'/Users/whatever/Google Drive'"]], "gdrive_db": [[18.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/sync_config.db'"]], "con": [[20.0, "REPR FAILED"]], "cur": [[22.0, "REPR FAILED"]], "query": [[23.0, "\"SELECT data_value FROM data WHERE entry_key = 'local_sync_root_path';\""]], "data": [[29.0, "('/Users/whatever/Google Drive',)"]]}, "Program Information": "Project Name: lra+mackup", "idx": 197, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def can_file_be_synced_on_current_platform(path):\n    \"\"\"\n    Check if the given path can be synced locally.\n\n    Check if it makes sense to sync the file at the given path on the current\n    platform.\n    For now we don't sync any file in the ~/Library folder on GNU/Linux.\n    There might be other exceptions in the future.\n\n    Args:\n        (str): Path to the file or folder to check. If relative, prepend it\n               with the home folder.\n               'abc' becomes '~/abc'\n               '/def' stays '/def'\n\n    Returns:\n        (bool): True if given file can be synced\n    \"\"\"\n    can_be_synced = True\n\n    # If the given path is relative, prepend home\n    fullpath = os.path.join(os.environ[\"HOME\"], path)\n\n    # Compute the ~/Library path on macOS\n    # End it with a slash because we are looking for this specific folder and\n    # not any file/folder named LibrarySomething\n    library_path = os.path.join(os.environ[\"HOME\"], \"Library/\")\n\n    if platform.system() == constants.PLATFORM_LINUX:\n        if fullpath.startswith(library_path):\n            can_be_synced = False\n\n    return can_be_synced\n\ncan_file_be_synced_on_current_platform(path='some/file')", "Selected Statement": "fullpath = os.path.join(os.environ[\"HOME\"], path)", "Function Input": {"path": "'some/file'"}, "Variable Values Before Statement": {"path": "'some/file'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/some/file'", "Variable States During Runtime": {"path": [[1, "'some/file'"]], "can_be_synced": [[19.0, "True"]], "fullpath": [[22.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/some/file'"]], "library_path": [[27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/'"]]}, "Program Information": "Project Name: lra+mackup", "idx": 198, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _compare_parts(self, a, b, decimal):\n        if decimal:\n            if a == \"\": a = \"0\"\n            if b == \"\": b = \"0\"\n            return int(a) - int(b)\n        else:\n            i = 0\n            while i < (min(len(a), len(b)) + 1):\n                res = self._order(self._get_empty_str_on_index_error(a, i)) \\\n                        - self._order(self._get_empty_str_on_index_error(b, i))\n                if res != 0:\n                    return res\n                i += 1\n            else:\n                return 0\n\n_compare_parts(self=2.2.0~rc5, a='', b='', decimal=False, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "res = self._order(self._get_empty_str_on_index_error(a, i)) \\", "Function Input": {"self": "2.2.0~rc5", "a": "''", "b": "''", "decimal": "False", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"a": "''", "i": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "a": [[1, "''"]], "b": [[1, "''"]], "decimal": [[1, "False"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "i": [[7.0, "0"], [13.0, "1"]], "res": [[9.0, "0"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 199, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def getorcreatesubcontext(self, path):\n        for name in path:\n            that = self.resolvables.get(name)\n            if that is None:\n                self.resolvables[name] = that = Context(self)\n            self = that\n        return self\n\ngetorcreatesubcontext(self=Context(SuperContext(), False), path=('woo',), self.islist=False, self.parent=SuperContext(), self.resolvables=OrderedDict())", "Selected Statement": "self.resolvables[name] = that = Context(self)", "Function Input": {"self": "Context(SuperContext(), False)", "path": "('woo',)", "self.islist": "False", "self.parent": "SuperContext()", "self.resolvables": "OrderedDict()"}, "Variable Values Before Statement": {"self": "Context(SuperContext(), False)"}, "Value After Statement Execution": "Context(Context(SuperContext(), False), False)", "Variable States During Runtime": {"self": [[1, "Context(SuperContext(), False)"], [6.0, "Context(Context(SuperContext(), False), False)"]], "path": [[1, "('woo',)"]], "self.islist": [[1, "False"]], "self.parent": [[1, "SuperContext()"], [6.0, "Context(SuperContext(), False)"]], "self.resolvables": [[1, "OrderedDict()"], [5.0, "OrderedDict([('woo', Context(Context(SuperContext(), False), False))])"], [6.0, "OrderedDict()"]], "name": [[2.0, "'woo'"]], "that": [[3.0, "None"], [5.0, "Context(Context(SuperContext(), False), False)"]]}, "Program Information": "Project Name: combatopera+aridity", "idx": 200, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def execute(self, entry):\n        directives = []\n        for i, word in enumerate(entry.words()):\n            def append(resolvable):\n                directives.append((resolvable.directivevalue, i))\n                raise self.Enough\n            try:\n                self.getresolvables(word.cat(), append)\n            except (AttributeError, CatNotSupportedException, self.Enough):\n                pass\n        if 1 != len(directives):\n            raise UnsupportedEntryException(\"Expected 1 directive but %s found: %s\" % (directives, entry))\n        d, i = directives[0]\n        d(entry.subentry(0, i), entry.phrase(i + 1), self)\n\nexecute(self=Context(SuperContext(), False), entry=Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')]), self.islist=False, self.parent=SuperContext(), self.resolvables=OrderedDict([('here', Text('/tmp'))]))", "Selected Statement": "d(entry.subentry(0, i), entry.phrase(i + 1), self)", "Function Input": {"self": "Context(SuperContext(), False)", "entry": "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])", "self.islist": "False", "self.parent": "SuperContext()", "self.resolvables": "OrderedDict([('here', Text('/tmp'))])"}, "Variable Values Before Statement": {"i": "2"}, "Value After Statement Execution": "OrderedDict([('here', Text('/tmp')), ('ns', Context(Context(SuperContext(), False), False))])", "Variable States During Runtime": {"self": [[1, "Context(SuperContext(), False)"]], "entry": [[1, "Entry([Text('ns'), Text('woo'), Blank(' '), Text('='), Blank(' '), Text('yay')])"]], "self.islist": [[1, "False"]], "self.parent": [[1, "SuperContext()"]], "self.resolvables": [[1, "OrderedDict([('here', Text('/tmp'))])"], [14.0, "OrderedDict([('here', Text('/tmp')), ('ns', Context(Context(SuperContext(), False), False))])"]], "directives": [[2.0, "[]"], [8.0, "[(<aridimpl.directives.Equals object at 0x7fe13ba8cd60>, 2)]"]], "word": [[3.0, "Text('ns')"], [3.0, "Text('woo')"], [3.0, "Text('=')"], [3.0, "Text('yay')"]], "i": [[3.0, "0"], [3.0, "1"], [3.0, "2"], [3.0, "3"], [13.0, "2"]], "append": [[4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b030d0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139b035e0>"], [4.0, "<function AbstractContext.execute.<locals>.append at 0x7fe139c4a790>"]], "d": [[13.0, "{}"]]}, "Program Information": "Project Name: combatopera+aridity", "idx": 201, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def static_bool_env(varname: str, default: bool) -> bool:\n  \"\"\"Read an environment variable and interpret it as a boolean.\n\n  This is deprecated. Please use bool_flag() unless your flag\n  will be used in a static method and does not require runtime updates.\n\n  True values are (case insensitive): 'y', 'yes', 't', 'true', 'on', and '1';\n  false values are 'n', 'no', 'f', 'false', 'off', and '0'.\n  Args:\n    varname: the name of the variable\n    default: the default boolean value\n  Returns:\n    boolean return value derived from defaults and environment.\n  Raises: ValueError if the environment variable is anything else.\n  \"\"\"\n  val = os.getenv(varname, str(default))\n  val = val.lower()\n  if val in ('y', 'yes', 't', 'true', 'on', '1'):\n    return True\n  elif val in ('n', 'no', 'f', 'false', 'off', '0'):\n    return False\n  else:\n    raise ValueError(\n      'invalid truth value {!r} for environment {!r}'.format(val, varname)\n    )\n\nstatic_bool_env(varname='FLAX_LAZY_RNG', default=True)", "Selected Statement": "val = os.getenv(varname, str(default))", "Function Input": {"varname": "'FLAX_LAZY_RNG'", "default": "True"}, "Variable Values Before Statement": {"varname": "'FLAX_LAZY_RNG'"}, "Value After Statement Execution": "'True'", "Variable States During Runtime": {"varname": [[1, "'FLAX_LAZY_RNG'"]], "default": [[1, "True"]], "val": [[16.0, "'True'"], [17.0, "'true'"]]}, "Program Information": "Project Name: google+flax", "idx": 202, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def splitdrive(path):\n    \"\"\"\n    Split the path into a pair (drive, tail) where drive is either a\n    mount point or the empty string. On systems which do not use drive\n    specifications, drive will always be the empty string.\n\n    In all cases, drive + tail will be the same as path.\n\n    Equivalent to \"os.path.splitdrive\".\n\n    Args:\n        path (path-like object): Path or URL.\n\n    Returns:\n        tuple of str: drive, tail.\n    \"\"\"\n    relative = get_instance(path).relpath(path)\n    drive = path.rsplit(relative, 1)[0]\n    if drive and not drive[-2:] == '//':\n        # Keep \"/\" tail side\n        relative = '/' + relative\n        drive = drive.rstrip('/')\n    return drive, relative\n\nsplitdrive(path='dummy://dir1/dir2/dir3')", "Selected Statement": "relative = get_instance(path).relpath(path)", "Function Input": {"path": "'dummy://dir1/dir2/dir3'"}, "Variable Values Before Statement": {"path": "'dummy://dir1/dir2/dir3'"}, "Value After Statement Execution": "'dir1/dir2/dir3'", "Variable States During Runtime": {"path": [[1, "'dummy://dir1/dir2/dir3'"]], "relative": [[17.0, "'dir1/dir2/dir3'"]], "drive": [[18.0, "'dummy://'"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 203, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _copy(src, dst, src_is_storage, dst_is_storage):\n    \"\"\"\n    Copies file from source to destination\n\n    Args:\n        src (str or file-like object): Source file.\n        dst (str or file-like object): Destination file.\n        src_is_storage (bool): Source is storage.\n        dst_is_storage (bool): Destination is storage.\n    \"\"\"\n    # If both storage: Tries to perform same storage direct copy\n    if src_is_storage and dst_is_storage:\n        system = get_instance(src)\n        if system is get_instance(dst):\n\n            # Checks if same file\n            if system.relpath(src) == system.relpath(dst):\n                raise same_file_error(\n                    \"'%s' and '%s' are the same file\" % (src, dst))\n\n            # Tries to copy\n            try:\n                return system.copy(src, dst)\n            except (UnsupportedOperation, ObjectException):\n                pass\n\n    # At least one storage object: copies streams\n    with cos_open(src, 'rb') as fsrc:\n        with cos_open(dst, 'wb') as fdst:\n\n            # Get stream buffer size\n            for stream in (fdst, fsrc):\n                try:\n                    buffer_size = getattr(stream, '_buffer_size')\n                    break\n                except AttributeError:\n                    continue\n            else:\n                buffer_size = 16384\n\n            # Read and write\n            copyfileobj(fsrc, fdst, buffer_size)\n\n_copy(src='dummy_read://file.txt', dst='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt', src_is_storage=True, dst_is_storage=False)", "Selected Statement": "with cos_open(dst, 'wb') as fdst:", "Function Input": {"src": "'dummy_read://file.txt'", "dst": "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'", "src_is_storage": "True", "dst_is_storage": "False"}, "Variable Values Before Statement": {"dst": "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'"}, "Value After Statement Execution": "<_io.BufferedWriter name", "Variable States During Runtime": {"src": [[1, "'dummy_read://file.txt'"]], "dst": [[1, "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'"]], "src_is_storage": [[1, "True"]], "dst_is_storage": [[1, "False"]], "fsrc": [[28.0, "{}"]], "fdst": [[29.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"]], "stream": [[32.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"], [32.0, "{}"]], "buffer_size": [[39.0, "16384"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 204, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _getmtime_from_header(header):\n        \"\"\"\n        Return the time from header\n\n        Args:\n            header (dict): Object header.\n\n        Returns:\n            float: The number of seconds since the epoch\n        \"\"\"\n        # By default, assumes that information are in a standard HTTP header\n        for key in ('Last-Modified', 'last-modified'):\n            try:\n                return mktime(parsedate(header.pop(key)))\n            except KeyError:\n                continue\n        else:\n            raise UnsupportedOperation('getmtime')\n\n_getmtime_from_header(header={'Accept-Ranges': 'bytes', 'Content-Length': '100', 'Last-Modified': 'Wed, 03 Apr 2024 20:18:10 GMT'})", "Selected Statement": "return mktime(parsedate(header.pop(key)))", "Function Input": {"header": "{'Accept-Ranges': 'bytes', 'Content-Length': '100', 'Last-Modified': 'Wed, 03 Apr 2024 20:18:10 GMT'}"}, "Variable Values Before Statement": {"key": "'Last-Modified'"}, "Value After Statement Execution": "{'Accept-Ranges': 'bytes', 'Content-Length': '100'}", "Variable States During Runtime": {"header": [[1, "{'Accept-Ranges': 'bytes', 'Content-Length': '100', 'Last-Modified': 'Wed, 03 Apr 2024 20:18:10 GMT'}"], [14.0, "{'Accept-Ranges': 'bytes', 'Content-Length': '100'}"]], "key": [[12.0, "'Last-Modified'"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 205, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _getsize_from_header(header):\n        \"\"\"\n        Return the size from header\n\n        Args:\n            header (dict): Object header.\n\n        Returns:\n            int: Size in bytes.\n        \"\"\"\n        # By default, assumes that information are in a standard HTTP header\n        for key in ('Content-Length', 'content-length'):\n            try:\n                return int(header.pop(key))\n            except KeyError:\n                continue\n        else:\n            raise UnsupportedOperation('getsize')\n\n_getsize_from_header(header={'Accept-Ranges': 'bytes', 'Content-Length': '100'})", "Selected Statement": "return int(header.pop(key))", "Function Input": {"header": "{'Accept-Ranges': 'bytes', 'Content-Length': '100'}"}, "Variable Values Before Statement": {"key": "'Content-Length'"}, "Value After Statement Execution": "{'Accept-Ranges': 'bytes'}", "Variable States During Runtime": {"header": [[1, "{'Accept-Ranges': 'bytes', 'Content-Length': '100'}"], [14.0, "{'Accept-Ranges': 'bytes'}"]], "key": [[12.0, "'Content-Length'"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 206, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def put_object(key=None, data=None, **_):\n            \"\"\"Check arguments and returns fake value\"\"\"\n            assert key.startswith(key_value)\n            if key[-1] == '/':\n                assert data == b''\n            else:\n                assert len(data) == len(ossobject._write_buffer)\n            put_object_called.append(1)\n\nput_object(key='key/', data=b'', _={}, key_value='key', ossobject=None, put_object_called=[])", "Selected Statement": "assert key.startswith(key_value)", "Function Input": {"key": "'key/'", "data": "b''", "_": "{}", "key_value": "'key'", "ossobject": "None", "put_object_called": "[]"}, "Variable Values Before Statement": {"key_value": "'key'"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"key": [[1, "'key/'"]], "data": [[1, "b''"]], "_": [[1, "{}"]], "key_value": [[1, "'key'"]], "ossobject": [[1, "None"]], "put_object_called": [[1, "[]"], [8.0, "[1]"]], "@py_assert1": [[3.0, "None"]], "@py_assert4": [[3.0, "None"]], "@py_assert2": [[5.0, "None"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 207, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def readHarFileInfo(filename: str) -> HarFileInfoObj:\n        \"\"\"\n        :param filename: Filename.\n        :return: An `dict`, with the key-value pairs:\n\n        \"\"\"\n        hfiObj = HarFileInfoObj(file=filename)\n\n        with open(filename, \"rb\") as f:\n            f.seek(0)\n            while True:\n                # Read all header names\n                pos, name, end_pos = HarFileIO._readHeaderPosName(f)\n                if not name:\n                    break\n                hfiObj.addHAInfo(name, pos, end_pos)\n                hfi=hfiObj.ha_infos[name]\n                (hfi.version, hfi.data_type, hfi.storage_type,  hfi.long_name, hfi.file_dims) = HarFileIO._getHeaderInfo(f, name)\n        return hfiObj\n\nreadHarFileInfo(filename='test_remove_header_array.har')", "Selected Statement": "with open(filename, \"rb\") as f:", "Function Input": {"filename": "'test_remove_header_array.har'"}, "Variable Values Before Statement": {"filename": "'test_remove_header_array.har'"}, "Value After Statement Execution": "<_io.BufferedReader name", "Variable States During Runtime": {"filename": [[1, "'test_remove_header_array.har'"]], "hfiObj": [[7.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict()}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>), ('INTA', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334280>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>), ('INTA', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334280>), ('SIMP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163341c0>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>), ('INTA', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334280>), ('SIMP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163341c0>), ('SIM2', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163503a0>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>), ('INTA', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334280>), ('SIMP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163341c0>), ('SIM2', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163503a0>), ('NH01', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016350430>)])}"], [16.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/GEMPACKsoftware+HARPY/GEMPACKsoftware+HARPY/test_remove_header_array.har', _mtime=1708906163.399167, _ha_infos=OrderedDict([('XXCD', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334730>), ('XXCR', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163345e0>), ('XXCP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163347c0>), ('XXHS', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334910>), ('CHST', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163340a0>), ('INTA', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016334280>), ('SIMP', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163341c0>), ('SIM2', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163503a0>), ('NH01', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd016350430>), ('ARR7', <harpy.har_file_io.HarFileInfoObj._HAInfo object at 0x7fd0163342b0>)])}"]], "f": [[9.0, "<_io.BufferedReader name='test_remove_header_array.har'>"]], "pos": [[13.0, "0"], [13.0, "206"], [13.0, "482"], [13.0, "624"], [13.0, "3940"], [13.0, "4136"], [13.0, "4352"], [13.0, "4490"], [13.0, "4630"], [13.0, "5088"], [13.0, "6127"]], "name": [[13.0, "'XXCD'"], [13.0, "'XXCR'"], [13.0, "'XXCP'"], [13.0, "'XXHS'"], [13.0, "'CHST'"], [13.0, "'INTA'"], [13.0, "'SIMP'"], [13.0, "'SIM2'"], [13.0, "'NH01'"], [13.0, "'ARR7'"], [13.0, "None"]], "end_pos": [[13.0, "12"], [13.0, "218"], [13.0, "494"], [13.0, "636"], [13.0, "3952"], [13.0, "4148"], [13.0, "4364"], [13.0, "4502"], [13.0, "4642"], [13.0, "5100"], [13.0, "6127"]], "hfi": [[17.0, "{name='XXCD', pos_name=0, pos_data=12, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='XXCD', pos_name=0, pos_data=12, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='Creation Date and Time                                                ', file_dims=(1, 70), sets=None, coeff_name=None}"], [17.0, "{name='XXCR', pos_name=206, pos_data=218, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='XXCR', pos_name=206, pos_data=218, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='Creating Program                                                      ', file_dims=(2, 70), sets=None, coeff_name=None}"], [17.0, "{name='XXCP', pos_name=482, pos_data=494, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='XXCP', pos_name=482, pos_data=494, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='compiler used to make EXE which created this file                     ', file_dims=(1, 6), sets=None, coeff_name=None}"], [17.0, "{name='XXHS', pos_name=624, pos_data=636, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='XXHS', pos_name=624, pos_data=636, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='File History                                                          ', file_dims=(53, 60), sets=None, coeff_name=None}"], [17.0, "{name='CHST', pos_name=3940, pos_data=3952, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='CHST', pos_name=3940, pos_data=3952, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='Simple set of strings                                                 ', file_dims=(5, 12), sets=None, coeff_name=None}"], [17.0, "{name='INTA', pos_name=4136, pos_data=4148, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='INTA', pos_name=4136, pos_data=4148, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='2I', storage_type='FULL', long_name='2D integer array                                                      ', file_dims=(4, 4), sets=None, coeff_name=None}"], [17.0, "{name='SIMP', pos_name=4352, pos_data=4364, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='SIMP', pos_name=4352, pos_data=4364, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='Set SimpleSet Simple 2 item set                                       ', file_dims=(2, 1), sets=None, coeff_name=None}"], [17.0, "{name='SIM2', pos_name=4490, pos_data=4502, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='SIM2', pos_name=4490, pos_data=4502, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='1C', storage_type='FULL', long_name='Set SimpleSet2 Simple set 2                                           ', file_dims=(2, 2), sets=None, coeff_name=None}"], [17.0, "{name='NH01', pos_name=4630, pos_data=4642, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='NH01', pos_name=4630, pos_data=4642, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='RE', storage_type='FULL', long_name='Simple 2 dimensional array                                            ', file_dims=(2, 2, 1, 1, 1, 1, 1), sets=None, coeff_name=None}"], [17.0, "{name='ARR7', pos_name=5088, pos_data=5100, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=0, data_type=None, storage_type=None, long_name=None, file_dims=None, sets=None, coeff_name=None}"], [18.0, "{name='ARR7', pos_name=5088, pos_data=5100, parent_har_file=<harpy.har_file_io.HarFileInfoObj object at 0x7fd016334ee0>, version=1, data_type='RE', storage_type='FULL', long_name='7-Dimensional Array                                                   ', file_dims=(2, 2, 2, 2, 2, 2, 2), sets=None, coeff_name=None}"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 208, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _unpack_args(args, nargs_spec):\n    \"\"\"Given an iterable of arguments and an iterable of nargs specifications,\n    it returns a tuple with all the unpacked arguments at the first index\n    and all remaining arguments as the second.\n\n    The nargs specification is the number of arguments that should be consumed\n    or `-1` to indicate that this position should eat up all the remainders.\n\n    Missing items are filled with `None`.\n    \"\"\"\n    args = deque(args)\n    nargs_spec = deque(nargs_spec)\n    rv = []\n    spos = None\n\n    def _fetch(c):\n        try:\n            if spos is None:\n                return c.popleft()\n            else:\n                return c.pop()\n        except IndexError:\n            return None\n\n    while nargs_spec:\n        nargs = _fetch(nargs_spec)\n        if nargs == 1:\n            rv.append(_fetch(args))\n        elif nargs > 1:\n            x = [_fetch(args) for _ in range(nargs)]\n            # If we're reversed, we're pulling in the arguments in reverse,\n            # so we need to turn them around.\n            if spos is not None:\n                x.reverse()\n            rv.append(tuple(x))\n        elif nargs < 0:\n            if spos is not None:\n                raise TypeError('Cannot have two nargs < 0')\n            spos = len(rv)\n            rv.append(None)\n\n    # spos is the position of the wildcard (star).  If it's not `None`,\n    # we fill it with the remainder.\n    if spos is not None:\n        rv[spos] = tuple(args)\n        args = []\n        rv[spos + 1:] = reversed(rv[spos + 1:])\n\n    return tuple(rv), list(args)\n\n_unpack_args(args=['foo.txt', 'bar.txt', 'dir'], nargs_spec=[-1, 1])", "Selected Statement": "rv[spos] = tuple(args)", "Function Input": {"args": "['foo.txt', 'bar.txt', 'dir']", "nargs_spec": "[-1, 1]"}, "Variable Values Before Statement": {"args": "deque(['foo.txt', 'bar.txt'])"}, "Value After Statement Execution": "[('foo.txt', 'bar.txt'), 'dir']", "Variable States During Runtime": {"args": [[1, "['foo.txt', 'bar.txt', 'dir']"], [11.0, "deque(['foo.txt', 'bar.txt', 'dir'])"], [28.0, "deque(['foo.txt', 'bar.txt'])"], [46.0, "[]"]], "nargs_spec": [[1, "[-1, 1]"], [12.0, "deque([-1, 1])"], [26.0, "deque([1])"], [26.0, "deque([])"]], "rv": [[13.0, "[]"], [40.0, "[None]"], [28.0, "[None, 'dir']"], [45.0, "[('foo.txt', 'bar.txt'), 'dir']"]], "spos": [[14.0, "None"], [39.0, "0"]], "_fetch": [[16.0, "<function _unpack_args.<locals>._fetch at 0x7fe6e9431b80>"]], "nargs": [[26.0, "-1"], [26.0, "1"]]}, "Program Information": "Project Name: MrTango+click", "idx": 209, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def join_options(options):\n    \"\"\"Given a list of option strings this joins them in the most appropriate\n    way and returns them in the form ``(formatted_string,\n    any_prefix_is_slash)`` where the second item in the tuple is a flag that\n    indicates if any of the option prefixes was a slash.\n    \"\"\"\n    rv = []\n    any_prefix_is_slash = False\n    for opt in options:\n        prefix = split_opt(opt)[0]\n        if prefix == '/':\n            any_prefix_is_slash = True\n        rv.append((len(prefix), opt))\n\n    rv.sort(key=lambda x: x[0])\n\n    rv = ', '.join(x[1] for x in rv)\n    return rv, any_prefix_is_slash\n\njoin_options(options=['--help'])", "Selected Statement": "rv.append((len(prefix), opt))", "Function Input": {"options": "['--help']"}, "Variable Values Before Statement": {"prefix": "'--'"}, "Value After Statement Execution": "[(2, '--help')]", "Variable States During Runtime": {"options": [[1, "['--help']"]], "rv": [[7.0, "[]"], [13.0, "[(2, '--help')]"], [17.0, "'--help'"]], "any_prefix_is_slash": [[8.0, "False"]], "opt": [[9.0, "'--help'"]], "prefix": [[10.0, "'--'"]]}, "Program Information": "Project Name: MrTango+click", "idx": 210, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def format_filename(filename, shorten=False):\n    \"\"\"Formats a filename for user display.  The main purpose of this\n    function is to ensure that the filename can be displayed at all.  This\n    will decode the filename to unicode if necessary in a way that it will\n    not fail.  Optionally, it can shorten the filename to not include the\n    full path to the filename.\n\n    :param filename: formats a filename for UI display.  This will also convert\n                     the filename into unicode without failing.\n    :param shorten: this optionally shortens the filename to strip of the\n                    path that leads up to it.\n    \"\"\"\n    if shorten:\n        filename = os.path.basename(filename)\n    return filename_to_ui(filename)\n\nformat_filename(filename='/x/foo.txt', shorten=True)", "Selected Statement": "filename = os.path.basename(filename)", "Function Input": {"filename": "'/x/foo.txt'", "shorten": "True"}, "Variable Values Before Statement": {"filename": "'/x/foo.txt'"}, "Value After Statement Execution": "'foo.txt'", "Variable States During Runtime": {"filename": [[1, "'/x/foo.txt'"], [14.0, "'foo.txt'"]], "shorten": [[1, "True"]]}, "Program Information": "Project Name: MrTango+click", "idx": 211, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_echo_via_pager(monkeypatch, capfd, cat):\n    monkeypatch.setitem(os.environ, 'PAGER', cat)\n    monkeypatch.setattr(click._termui_impl, 'isatty', lambda x: True)\n    click.echo_via_pager('haha')\n    out, err = capfd.readouterr()\n    assert out == 'haha\\n'\n\ntest_echo_via_pager(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, capfd={request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}, cat='cat')", "Selected Statement": "monkeypatch.setitem(os.environ, 'PAGER', cat)", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "capfd": "{request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}", "cat": "'cat'"}, "Variable Values Before Statement": {"cat": "'cat'"}, "Value After Statement Execution": "{_setattr", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [2.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/MrTango+click', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(MrTango+click) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'cat', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'MrTango+click', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/MrTango+click/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/MrTango+click/bin/python', 'PYTEST_CURRENT_TEST': 'tests/test_utils.py::test_echo_via_pager[cat] (call)'}), 'PAGER', 'less')], _cwd=None, _savesyspath=None}"], [3.0, "{_setattr=[(<module 'click._termui_impl' from '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click/click/_termui_impl.py'>, 'isatty', <function isatty at 0x7fe6e9757e50>)], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/MrTango+click', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(MrTango+click) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'cat', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'MrTango+click', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/MrTango+click/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/MrTango+click/bin/python', 'PYTEST_CURRENT_TEST': 'tests/test_utils.py::test_echo_via_pager[cat] (call)'}), 'PAGER', 'less')], _cwd=None, _savesyspath=None}"]], "capfd": [[1, "{request=<SubRequest 'capfd' for <Function test_echo_via_pager[cat]>>, _capture=<MultiCapture out=<FDCapture 1 oldfd=6 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=7 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='started' tmpfile=<_io.TextIOWrapper name=\"<_io.FileIO name=9 mode='rb+' closefd=True>\" mode='r+' encoding='utf-8'>> in_=None _state='started' _in_suspended=False>, _captured_out='', _captured_err=''}"]], "cat": [[1, "'cat'"]], "out": [[5.0, "'haha\\n'"]], "err": [[5.0, "''"]], "@py_assert2": [[6.0, "None"]], "@py_assert1": [[6.0, "None"]]}, "Program Information": "Project Name: MrTango+click", "idx": 212, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _pipepager(text, cmd, color):\n    \"\"\"Page through text by feeding it to another program.  Invoking a\n    pager through this might support colors.\n    \"\"\"\n    import subprocess\n    env = dict(os.environ)\n\n    # If we're piping to less we might support colors under the\n    # condition that\n    cmd_detail = cmd.rsplit('/', 1)[-1].split()\n    if color is None and cmd_detail[0] == 'less':\n        less_flags = os.environ.get('LESS', '') + ' '.join(cmd_detail[1:])\n        if not less_flags:\n            env['LESS'] = '-R'\n            color = True\n        elif 'r' in less_flags or 'R' in less_flags:\n            color = True\n\n    if not color:\n        text = strip_ansi(text)\n\n    c = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,\n                         env=env)\n    encoding = get_best_encoding(c.stdin)\n    try:\n        c.stdin.write(text.encode(encoding, 'replace'))\n        c.stdin.close()\n    except (IOError, KeyboardInterrupt):\n        pass\n\n    # Less doesn't respect ^C, but catches it for its own UI purposes (aborting\n    # search or other commands inside less).\n    #\n    # That means when the user hits ^C, the parent process (click) terminates,\n    # but less is still alive, paging the output and messing up the terminal.\n    #\n    # If the user wants to make the pager exit on ^C, they should set\n    # `LESS='-K'`. It's not our decision to make.\n    while True:\n        try:\n            c.wait()\n        except KeyboardInterrupt:\n            pass\n        else:\n            break\n\n_pipepager(text='haha\\n', cmd='cat', color=None)", "Selected Statement": "c = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE,", "Function Input": {"text": "'haha\\n'", "cmd": "'cat'", "color": "None"}, "Variable Values Before Statement": {"cmd": "'cat'"}, "Value After Statement Execution": "<Popen: returncode: None args: 'cat'>", "Variable States During Runtime": {"text": [[1, "'haha\\n'"]], "cmd": [[1, "'cat'"]], "color": [[1, "None"]], "subprocess": [[5.0, "<module 'subprocess' from '/local/rcs/XXX/miniforge3/envs/MrTango+click/lib/python3.9/subprocess.py'>"]], "env": [[6.0, "{'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/MrTango+click', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(MrTango+click) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/MrTango+click/MrTango+click', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'cat', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'MrTango+click', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/MrTango+click/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/MrTango+click/bin/python', 'PYTEST_CURRENT_TEST': 'tests/test_utils.py::test_echo_via_pager[cat] (call)'}"]], "cmd_detail": [[10.0, "['cat']"]], "c": [[22.0, "<Popen: returncode: None args: 'cat'>"], [41.0, "<Popen: returncode: 0 args: 'cat'>"]], "encoding": [[24.0, "'utf-8'"]]}, "Program Information": "Project Name: MrTango+click", "idx": 213, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def encode_request(*args):\n    \"\"\"Pack a series of arguments into a RESP array of bulk strings.\"\"\"\n    result = [\"*\" + str(len(args)) + CRLF]\n    \n    for arg in args:\n        if arg is None:\n            result.append('$-1' + CRLF)\n        else:\n            s = str(arg)\n            result.append('$' + str(len(s)) + CRLF + s + CRLF)\n\n    return \"\".join(result)\n\nencode_request(args=('ping',))", "Selected Statement": "s = str(arg)", "Function Input": {"args": "('ping',)"}, "Variable Values Before Statement": {"arg": "'ping'"}, "Value After Statement Execution": "'ping'", "Variable States During Runtime": {"args": [[1, "('ping',)"]], "result": [[3.0, "['*1\\r\\n']"], [10.0, "['*1\\r\\n', '$4\\r\\nping\\r\\n']"]], "arg": [[5.0, "'ping'"]], "s": [[9.0, "'ping'"]]}, "Program Information": "Project Name: SpotlightKid+picoredis", "idx": 214, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def bar_factory(chars=None, *, tip=None, background=None, borders=None, errors=None):\n    \"\"\"Create a factory of a bar with the given styling parameters.\n    Supports unicode grapheme clusters and emoji chars (those that has length one but when on\n    screen occupies two cells).\n\n    Now supports transparent fills! Just send a tip, and leave `chars` as None.\n    Also tips are now considered for the 100%, which means it smoothly enters and exits the\n    frame to get to 100%!! The effect is super cool, use a multi-char tip to see.\n\n    Args:\n        chars (Optional[str]): the sequence of increasing glyphs to fill the bar\n            can be None for a transparent fill, unless tip is also None.\n        tip (Optional[str): the tip in front of the bar\n            can be None, unless chars is also None.\n        background (Optional[str]): the pattern to be used underneath the bar\n        borders (Optional[Union[str, Tuple[str, str]]): the pattern or patterns to be used\n            before and after the bar\n        errors (Optional[Union[str, Tuple[str, str]]): the pattern or patterns to be used\n            when an underflow or overflow occurs\n\n    Returns:\n        a styled bar factory\n\n    \"\"\"\n\n    @bar_controller\n    def inner_bar_factory(length, spinner_factory=None):\n        if chars:\n            if is_wide(chars[-1]):  # previous chars can be anything.\n                def fill_style(complete, filling):  # wide chars fill.\n                    odd = bool(complete % 2)\n                    fill = (None,) if odd != bool(filling) else ()  # odd XOR filling.\n                    fill += (chars[-1], None) * int(complete / 2)  # already marked wide chars.\n                    if filling and odd:\n                        fill += mark_graphemes((chars[filling - 1],))\n                    return fill\n            else:  # previous chars cannot be wide.\n                def fill_style(complete, filling):  # narrow chars fill.\n                    fill = (chars[-1],) * complete  # unneeded marks here.\n                    if filling:\n                        fill += (chars[filling - 1],)  # no widies here.\n                    return fill\n        else:\n            def fill_style(complete, filling):  # invisible fill.\n                return fix_cells(padding[:complete + bool(filling)])\n\n        def running(fill):\n            return None, (fix_cells(padding[len(fill) + len_tip:]),)  # this is a 1-tuple.\n\n        def ended(fill):\n            border = None if len(fill) + len(underflow) <= length else underflow\n            texts = *(() if border else (underflow,)), blanks\n            return border, texts\n\n        @bordered(borders, '||')\n        def draw_known(apply_state, percent):\n            virtual_fill = round(virtual_length * max(0., min(1., percent)))\n            fill = fill_style(*divmod(virtual_fill, num_graphemes))\n            border, texts = apply_state(fill)\n            border = overflow if percent > 1. else None if percent == 1. else border\n            return fix_cells(combine_cells(fill, tip, *texts)[len_tip:length + len_tip]), border\n\n        if spinner_factory:\n            @bordered(borders, '||')\n            def draw_unknown(_percent=None):\n                return next(player), None\n\n            player = spinner_player(spinner_factory(length))\n        else:\n            draw_unknown = None\n\n        padding = (' ',) * len_tip + background * math.ceil((length + len_tip) / len(background))\n        virtual_length, blanks = num_graphemes * (length + len_tip), (' ',) * length\n        return draw_known, running, ended, draw_unknown\n\n    assert chars or tip, 'tip is mandatory for transparent bars'\n    assert not (chars and not is_wide(chars[-1]) and has_wide(chars)), \\\n        'cannot use grapheme with a narrow last char'\n\n    chars = split_graphemes(chars or '')  # the only one not yet marked.\n    tip, background = (to_cells(x) for x in (tip, background or ' '))\n    underflow, overflow = extract_fill_graphemes(errors, (f'⚠{VS_15}', f'✗{VS_15}'))\n    num_graphemes, len_tip = len(chars) or 1, len(tip)\n    return inner_bar_factory\n\nbar_factory(chars='▏▎▍▌▋▊▉█', tip=None, background=None, borders=None, errors=None)", "Selected Statement": "underflow, overflow = extract_fill_graphemes(errors, (f'⚠{VS_15}', f'✗{VS_15}'))", "Function Input": {"chars": "'▏▎▍▌▋▊▉█'", "tip": "None", "background": "None", "borders": "None", "errors": "None"}, "Variable Values Before Statement": {"errors": "None"}, "Value After Statement Execution": "('✗︎',)", "Variable States During Runtime": {"chars": [[1, "'▏▎▍▌▋▊▉█'"], [80.0, "('▏', '▎', '▍', '▌', '▋', '▊', '▉', '█')"]], "tip": [[1, "None"], [81.0, "()"]], "background": [[1, "None"], [81.0, "(' ',)"]], "borders": [[1, "None"]], "errors": [[1, "None"]], "inner_bar_factory": [[27.0, "<function bar_controller.<locals>.bar_assembler_factory at 0x7f35540940d0>"]], "overflow": [[82.0, "('✗︎',)"]], "underflow": [[82.0, "('⚠︎',)"]], "len_tip": [[83.0, "0"]], "num_graphemes": [[83.0, "8"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 215, "quantized value": "Non-Empty tuple", "mapping_info": {"len(value) == 0": "Empty tuple", "len(value) > 0": "Non-Empty tuple"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def static_sliding_window(sep, gap, contents, length, right, initial):\n    \"\"\"Implement a sliding window over some content interspersed with a separator.\n    It is very efficient, storing data in only one string.\n\n    Note that the implementation is \"static\" in the sense that the content is pre-\n    calculated and maintained static, but actually when the window slides both the\n    separator and content seem to be moved.\n    Also keep in mind that `right` is for the content, not the window.\n    \"\"\"\n\n    def sliding_window():\n        pos = initial\n        while True:\n            if pos < 0:\n                pos += original\n            elif pos >= original:\n                pos -= original\n            yield content[pos:pos + length]\n            pos += step\n\n    adjusted_sep = fix_cells((sep * math.ceil(gap / len(sep)))[:gap]) if gap else ''\n    content = tuple(chain.from_iterable(chain.from_iterable(zip(repeat(adjusted_sep), contents))))\n    original, step = len(content), -1 if right else 1\n    assert length <= original, f'window slides inside content, {length} must be <= {original}'\n    content += content[:length]\n    return sliding_window()\n\nstatic_sliding_window(sep=(' ',), gap=3, contents=(('a', 'b', 'c'),), length=3, right=True, initial=0)", "Selected Statement": "original, step = len(content), -1 if right else 1", "Function Input": {"sep": "(' ',)", "gap": "3", "contents": "(('a', 'b', 'c'),)", "length": "3", "right": "True", "initial": "0"}, "Variable Values Before Statement": {"content": "(' ', ' ', ' ', 'a', 'b', 'c')"}, "Value After Statement Execution": "6", "Variable States During Runtime": {"sep": [[1, "(' ',)"]], "gap": [[1, "3"]], "contents": [[1, "(('a', 'b', 'c'),)"]], "length": [[1, "3"]], "right": [[1, "True"]], "initial": [[1, "0"]], "sliding_window": [[11.0, "<function static_sliding_window.<locals>.sliding_window at 0x7f354c6a3dc0>"]], "adjusted_sep": [[21.0, "(' ', ' ', ' ')"]], "content": [[22.0, "(' ', ' ', ' ', 'a', 'b', 'c')"], [25.0, "(' ', ' ', ' ', 'a', 'b', 'c', ' ', ' ', ' ')"]], "original": [[23.0, "6"]], "step": [[23.0, "-1"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 216, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_split_options(param, expected):\n    if expected is SAME:\n        expected = param\n    assert split_options(param) == expected\n\ntest_split_options(param=None, expected=(None, None))", "Selected Statement": "assert split_options(param) == expected", "Function Input": {"param": "None", "expected": "(None, None)"}, "Variable Values Before Statement": {"param": "None"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"param": [[1, "None"]], "expected": [[1, "(None, None)"]], "@py_assert2": [[4.0, "None"]], "@py_assert4": [[4.0, "None"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 217, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def calibrated_fps(calibrate):\n    \"\"\"Calibration of the dynamic frames per second engine.\n\n    I've started with the equation y = log10(x + m) * k + n, where:\n      y is the desired fps, m and n are horizontal and vertical translation,\n      k is a calibration factor, computed from some user input c (see readme for details).\n\n    Considering minfps and maxfps as given constants, I came to:\n      fps = log10(x + 1) * k + minfps, which must be equal to maxfps for x = c,\n    so the factor k = (maxfps - minfps) / log10(c + 1), and\n      fps = log10(x + 1) * (maxfps - minfps) / log10(c + 1) + minfps\n\n    Neat! ;)\n\n    Args:\n        calibrate (float): user provided\n\n    Returns:\n        a callable to calculate the fps\n\n    \"\"\"\n    min_fps, max_fps = 2., 60.\n    calibrate = max(1e-6, calibrate)\n    adjust_log_curve = 100. / min(calibrate, 100.)  # adjust the curve for small numbers\n    factor = (max_fps - min_fps) / math.log10((calibrate * adjust_log_curve) + 1.)\n\n    def fps(rate):\n        if rate <= 0:\n            return 10.  # bootstrap speed\n        if rate < calibrate:\n            return math.log10((rate * adjust_log_curve) + 1.) * factor + min_fps\n        return max_fps\n\n    return fps\n\ncalibrated_fps(calibrate=-5.0)", "Selected Statement": "calibrate = max(1e-6, calibrate)", "Function Input": {"calibrate": "-5.0"}, "Variable Values Before Statement": {"calibrate": "-5.0"}, "Value After Statement Execution": "1e-06", "Variable States During Runtime": {"calibrate": [[1, "-5.0"], [23.0, "1e-06"]], "max_fps": [[22.0, "60.0"]], "min_fps": [[22.0, "2.0"]], "adjust_log_curve": [[24.0, "100000000.0"]], "factor": [[25.0, "28.93747517671773"]], "fps": [[27.0, "<function calibrated_fps.<locals>.fps at 0x7f355669f1f0>"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 218, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def elapsed_text(seconds, precise, prefix=''):\n    seconds = round(seconds, 1 if precise else 0)\n    if seconds < 60.:\n        return '{}{:{}f}s'.format(prefix, seconds, .1 if precise else .0)\n\n    minutes, seconds = divmod(seconds, 60.)\n    if minutes < 60.:\n        return '{}{:.0f}:{:0{}f}'.format(prefix, minutes, seconds, 4.1 if precise else 2.0)\n\n    hours, minutes = divmod(minutes, 60.)\n    return '{}{:.0f}:{:02.0f}:{:0{}f}'.format(prefix, hours, minutes, seconds,\n                                              4.1 if precise else 2.0)\n\nelapsed_text(seconds=1.23, precise=True, prefix='')", "Selected Statement": "seconds = round(seconds, 1 if precise else 0)", "Function Input": {"seconds": "1.23", "precise": "True", "prefix": "''"}, "Variable Values Before Statement": {"seconds": "1.23"}, "Value After Statement Execution": "1.2", "Variable States During Runtime": {"seconds": [[1, "1.23"], [2.0, "1.2"]], "precise": [[1, "True"]], "prefix": [[1, "''"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 219, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def getblockimpl(lines, first, last, pilcrow):\n    max = len(lines) - 1\n    first -= 1\n    last -= 1\n    i = first\n    while i < max and not hastext(lines[i]):\n        if i >= last and istoplevel(lines[i + 1]):\n            return None, None, '# Nothing to send.' + pilcrow + eol\n        i += 1\n    while last < max and not istoplevel(lines[last + 1]):\n        last += 1\n    while first < last and not hastext(lines[first]):\n        first += 1\n    while first and not istoplevel(lines[first]):\n        first -= 1\n    lines[last] # Check for out of range.\n    return first, last, eol.join(l for l in lines[first:last + 1] if hastext(l)) + pilcrow + eol\n\ngetblockimpl(lines=['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last'], first=10, last=11, pilcrow='')", "Selected Statement": "max = len(lines) - 1", "Function Input": {"lines": "['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last']", "first": "10", "last": "11", "pilcrow": "''"}, "Variable Values Before Statement": {"lines": "['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last']"}, "Value After Statement Execution": "14", "Variable States During Runtime": {"lines": [[1, "['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last']"]], "first": [[1, "10"], [3.0, "9"], [15.0, "8"], [15.0, "7"], [15.0, "6"], [15.0, "5"], [15.0, "4"]], "last": [[1, "11"], [4.0, "10"]], "pilcrow": [[1, "''"]], "max": [[2.0, "14"]], "i": [[5.0, "9"]]}, "Program Information": "Project Name: combatopera+Concern", "idx": 220, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse(text, *, strip=False, strict=True):\n    parser = loguru._colorizer.AnsiParser()\n    parser.feed(text)\n    tokens = parser.done(strict=strict)\n\n    if strip:\n        return parser.strip(tokens)\n    return parser.colorize(tokens, \"\")\n\nparse(text='<red>Foo</red>\\n', strip=False, strict=True)", "Selected Statement": "parser.feed(text)", "Function Input": {"text": "'<red>Foo</red>\\n'", "strip": "False", "strict": "True"}, "Variable Values Before Statement": {"text": "'<red>Foo</red>\\n'"}, "Value After Statement Execution": "{_tokens", "Variable States During Runtime": {"text": [[1, "'<red>Foo</red>\\n'"]], "strip": [[1, "False"]], "strict": [[1, "True"]], "parser": [[2.0, "{_tokens=[], _tags=[], _color_tokens=[]}"], [3.0, "{_tokens=[(1, ''), (2, '\\x1b[31m'), (1, 'Foo'), (4, '\\x1b[0m'), (1, '\\n')], _tags=[], _color_tokens=[]}"]], "tokens": [[4.0, "[(1, ''), (2, '\\x1b[31m'), (1, 'Foo'), (4, '\\x1b[0m'), (1, '\\n')]"]]}, "Program Information": "Project Name: Delgan+loguru", "idx": 221, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def random_port():\n        port = helper.random_port()\n        while port in generated_ports:\n            port = helper.random_port()\n        generated_ports.add(port)\n        return port\n\nrandom_port(generated_ports=set())", "Selected Statement": "generated_ports.add(port)", "Function Input": {"generated_ports": "set()"}, "Variable Values Before Statement": {"port": "56663"}, "Value After Statement Execution": "{56663}", "Variable States During Runtime": {"generated_ports": [[1, "set()"], [5.0, "{56663}"]], "port": [[2.0, "56663"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 222, "quantized value": "Non-Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_split_img_txt_da(inputs):\n    txt_da = DocumentArray()\n    img_da = DocumentArray()\n    for doc in inputs[0]:\n        split_img_txt_da(doc, img_da, txt_da)\n    assert len(txt_da) == inputs[1][0]\n    assert len(img_da) == inputs[1][1]\n\ntest_split_img_txt_da(inputs=(<DocumentArray (length=4) at 140538627068688>, (3, 1)))", "Selected Statement": "assert len(txt_da) == inputs[1][0]", "Function Input": {"inputs": "(<DocumentArray (length=4) at 140538627068688>, (3, 1))"}, "Variable Values Before Statement": {"txt_da": "<DocumentArray (length=3) at 140537876329136>"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"inputs": [[1, "(<DocumentArray (length=4) at 140538627068688>, (3, 1))"]], "txt_da": [[2.0, "<DocumentArray (length=0) at 140537876329136>"], [5.0, "<DocumentArray (length=1) at 140537876329136>"], [5.0, "<DocumentArray (length=2) at 140537876329136>"], [5.0, "<DocumentArray (length=3) at 140537876329136>"]], "img_da": [[3.0, "<DocumentArray (length=0) at 140537876330432>"], [5.0, "<DocumentArray (length=1) at 140537876330432>"]], "doc": [[4.0, "<Document ('id', 'text') at 4f6626f35426c735426ec7292e9a1f16>"], [4.0, "<Document ('id', 'text') at d6d91a560e93b578961de0cda87d7354>"], [4.0, "<Document ('id', 'mime_type', 'text', 'uri') at 0bc25489570139a4fb1df04f2c8f3441>"], [4.0, "<Document ('id', 'mime_type', 'uri') at 661ab035d871096f43200d69a11270ad>"]], "@py_assert2": [[6.0, "None"]], "@py_assert5": [[6.0, "None"]], "@py_assert4": [[6.0, "None"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 223, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_server_preprocess_ndarray_image(image_uri, size):\n    d1 = Document(uri=image_uri)\n    d1.load_uri_to_blob()\n    d2 = Document(uri=image_uri)\n    d2.load_uri_to_image_tensor()\n\n    t1 = _transform_blob(size)(d1.blob).numpy()\n    t2 = _transform_ndarray(size)(d2.tensor).numpy()\n    assert t1.shape == t2.shape\n\ntest_server_preprocess_ndarray_image(image_uri='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg', size=224)", "Selected Statement": "t2 = _transform_ndarray(size)(d2.tensor).numpy()", "Function Input": {"image_uri": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg'", "size": "224"}, "Variable Values Before Statement": {"size": "224"}, "Value After Statement Execution": "array([[[-1.8293927 ,  0.99326   ,  1.218778  , ..., -0.76831955,         -0.69819516, -0.6261791 ],        [-1.871253  ,  0.83835363,  1.1161801 , ..., -0.71867406,         -0.66353786, -0.5779885 ],        [-1.8495831 ,  0.3691529 ,  1.0339135 , ..., -0.60506105,         -0.5474743 , -0.5001206 ],        ...,        [-1.8324506 ,  0.46106532,  0.7589506 , ..., -1.3229892 ,         -1.4584173 , -1.509373  ],        [-1.8534997 ,  0.37634084,  0.6575078 , ..., -1.3002565 ,         -1.4684434 , -1.5584292 ],        [-1.8524398 ,  0.32740185,  0.56791097, ..., -1.275775  ,         -1.4632285 , -1.5475469 ]],       [[-1.8205297 ,  1.0893543 ,  1.31915   , ..., -0.27816093,         -0.18627533, -0.11378706],        [-1.8304325 ,  0.9543234 ,  1.2362387 , ..., -0.30391544,         -0.20329967, -0.11902631],        [-1.8111343 ,  0.4697153 ,  1.1526138 , ..., -0.29344058,         -0.21467075, -0.16618787],        ...,        [-1.6441311 ,  0.7576508 ,  1.1757797 , ..., -1.7395262 ,         -1.7533139 , -1.7488168 ],        [-1.5793352 ,  0.84063566,  1.2314364 , ..., -1.6973344 ,         -1.7601075 , -1.7529469 ],        [-1.4979699 ,  0.8915888 ,  1.2598896 , ..., -1.6417253 ,         -1.7217588 , -1.75764   ]],       [[-1.3964468 ,  1.3654916 ,  1.5833169 , ...,  0.11189864,          0.14282744,  0.18943931],        [-1.4222968 ,  1.2280223 ,  1.4979748 , ...,  0.10506461,          0.13882811,  0.19719559],        [-1.3639748 ,  0.79668385,  1.4436656 , ...,  0.11625384,          0.14236891,  0.16509578],        ...,        [-1.539558  ,  0.6254223 ,  0.88010895, ..., -1.4571475 ,         -1.4812293 , -1.4754997 ],        [-1.5454704 ,  0.67148876,  0.92816603, ..., -1.4164418 ,         -1.4880763 , -1.4814891 ],        [-1.4934982 ,  0.72418857,  0.94967735, ..., -1.371076  ,         -1.4606231 , -1.4841652 ]]], dtype", "Variable States During Runtime": {"image_uri": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/jina-ai+clip-as-service/jina-ai+clip-as-service/tests/img/00000.jpg'"]], "size": [[1, "224"]], "d1": [[2.0, "<Document ('id', 'mime_type', 'uri') at 3b1f02f040a677b8a7dfd83176b52d78>"], [3.0, "<Document ('id', 'blob', 'mime_type', 'uri') at 3b1f02f040a677b8a7dfd83176b52d78>"]], "d2": [[4.0, "<Document ('id', 'mime_type', 'uri') at eee52bb275edc026b2fb333d7656e3c6>"], [5.0, "<Document ('id', 'tensor', 'mime_type', 'uri') at eee52bb275edc026b2fb333d7656e3c6>"]], "t1": [[7.0, "array([[[-1.7922626 ,  0.99603695,  1.2296118 , ..., -0.7703726 ,         -0.6973805 , -0.6243884 ],        [-1.7922626 ,  0.8354542 ,  1.1274228 , ..., -0.72657734,         -0.6681836 , -0.5805931 ],        [-1.7922626 ,  0.36830464,  1.0252337 , ..., -0.59519154,         -0.5367978 , -0.50760096],        ...,        [-1.7922626 ,  0.4704936 ,  0.76246214, ..., -1.3251129 ,         -1.4564987 , -1.5148925 ],        [-1.7922626 ,  0.38290307,  0.6456747 , ..., -1.2959161 ,         -1.4710971 , -1.5586877 ],        [-1.7922626 ,  0.32450938,  0.5726826 , ..., -1.2813176 ,         -1.4710971 , -1.5440893 ]],       [[-1.7520971 ,  1.0843711 ,  1.3244953 , ..., -0.2813358 ,         -0.1912892 , -0.11625037],        [-1.7520971 ,  0.9493012 ,  1.2344488 , ..., -0.31135136,         -0.20629698, -0.11625037],        [-1.7520971 ,  0.46905264,  1.1444021 , ..., -0.29634356,         -0.20629698, -0.16127367],        ...,        [-1.6320349 ,  0.7542002 ,  1.1744177 , ..., -1.7370893 ,         -1.7520971 , -1.7520971 ],        [-1.5720038 ,  0.8442468 ,  1.2344488 , ..., -1.7070738 ,         -1.7520971 , -1.7520971 ],        [-1.496965  ,  0.8892701 ,  1.2494565 , ..., -1.6320349 ,         -1.7220815 , -1.7520971 ]],       [[-1.3948994 ,  1.3637935 ,  1.5770944 , ...,  0.11242763,          0.14086775,  0.18352796],        [-1.4233395 ,  1.2358129 ,  1.4917741 , ...,  0.09820756,          0.14086775,  0.19774802],        [-1.3664593 ,  0.7949909 ,  1.4491138 , ...,  0.11242763,          0.14086775,  0.16930789],        ...,        [-1.4802198 ,  0.6243501 ,  0.88031125, ..., -1.4517797 ,         -1.4802198 , -1.4802198 ],        [-1.4802198 ,  0.6670103 ,  0.93719155, ..., -1.4233395 ,         -1.4802198 , -1.4802198 ],        [-1.4802198 ,  0.72389054,  0.9514116 , ..., -1.3806794 ,         -1.4659997 , -1.4802198 ]]], dtype=float32)"]], "t2": [[8.0, "array([[[-1.8293927 ,  0.99326   ,  1.218778  , ..., -0.76831955,         -0.69819516, -0.6261791 ],        [-1.871253  ,  0.83835363,  1.1161801 , ..., -0.71867406,         -0.66353786, -0.5779885 ],        [-1.8495831 ,  0.3691529 ,  1.0339135 , ..., -0.60506105,         -0.5474743 , -0.5001206 ],        ...,        [-1.8324506 ,  0.46106532,  0.7589506 , ..., -1.3229892 ,         -1.4584173 , -1.509373  ],        [-1.8534997 ,  0.37634084,  0.6575078 , ..., -1.3002565 ,         -1.4684434 , -1.5584292 ],        [-1.8524398 ,  0.32740185,  0.56791097, ..., -1.275775  ,         -1.4632285 , -1.5475469 ]],       [[-1.8205297 ,  1.0893543 ,  1.31915   , ..., -0.27816093,         -0.18627533, -0.11378706],        [-1.8304325 ,  0.9543234 ,  1.2362387 , ..., -0.30391544,         -0.20329967, -0.11902631],        [-1.8111343 ,  0.4697153 ,  1.1526138 , ..., -0.29344058,         -0.21467075, -0.16618787],        ...,        [-1.6441311 ,  0.7576508 ,  1.1757797 , ..., -1.7395262 ,         -1.7533139 , -1.7488168 ],        [-1.5793352 ,  0.84063566,  1.2314364 , ..., -1.6973344 ,         -1.7601075 , -1.7529469 ],        [-1.4979699 ,  0.8915888 ,  1.2598896 , ..., -1.6417253 ,         -1.7217588 , -1.75764   ]],       [[-1.3964468 ,  1.3654916 ,  1.5833169 , ...,  0.11189864,          0.14282744,  0.18943931],        [-1.4222968 ,  1.2280223 ,  1.4979748 , ...,  0.10506461,          0.13882811,  0.19719559],        [-1.3639748 ,  0.79668385,  1.4436656 , ...,  0.11625384,          0.14236891,  0.16509578],        ...,        [-1.539558  ,  0.6254223 ,  0.88010895, ..., -1.4571475 ,         -1.4812293 , -1.4754997 ],        [-1.5454704 ,  0.67148876,  0.92816603, ..., -1.4164418 ,         -1.4880763 , -1.4814891 ],        [-1.4934982 ,  0.72418857,  0.94967735, ..., -1.371076  ,         -1.4606231 , -1.4841652 ]]], dtype=float32)"]], "@py_assert1": [[9.0, "None"]], "@py_assert5": [[9.0, "None"]], "@py_assert3": [[9.0, "None"]]}, "Program Information": "Project Name: jina-ai+clip-as-service", "idx": 224, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _from_timetuple(self, t):\n        self.days_from_epoch = calendar.timegm(t) // Date.DAY\n\n_from_timetuple(self=Date(0), t=time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1))", "Selected Statement": "self.days_from_epoch = calendar.timegm(t) // Date.DAY", "Function Input": {"self": "Date(0)", "t": "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"}, "Variable Values Before Statement": {"t": "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"}, "Value After Statement Execution": "19816", "Variable States During Runtime": {"self": [[1, "Date(0)"], [2.0, "Date(19816)"]], "t": [[1, "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"]], "self.days_from_epoch": [[2.0, "19816"]]}, "Program Information": "Project Name: ArunTejCh+python-driver", "idx": 225, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _insert(self, key, value):\n        flat_key = self._serialize_key(key)\n        i = self._index.get(flat_key, -1)\n        if i >= 0:\n            self._items[i] = (key, value)\n        else:\n            self._items.append((key, value))\n            self._index[flat_key] = len(self._items) - 1\n\n_insert(self=OrderedMapSerializedKey([]), key='みbob', value=199)", "Selected Statement": "flat_key = self._serialize_key(key)", "Function Input": {"self": "OrderedMapSerializedKey([])", "key": "'みbob'", "value": "199"}, "Variable Values Before Statement": {"key": "'みbob'"}, "Value After Statement Execution": "b'\\xe3\\x81\\xbfbob'", "Variable States During Runtime": {"self": [[1, "OrderedMapSerializedKey([])"], [7.0, "OrderedMapSerializedKey([('みbob', 199)])"]], "key": [[1, "'みbob'"]], "value": [[1, "199"]], "flat_key": [[2.0, "b'\\xe3\\x81\\xbfbob'"]], "i": [[3.0, "-1"]], "self['みbob']": [[8.0, "199"]]}, "Program Information": "Project Name: ArunTejCh+python-driver", "idx": 226, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def stringified_dict_contains_value(key, value, str_dict):\n    \"\"\"Checks if dict in for of string like \"{'test': 5}\" contains\n    key/value pair. This works faster, then creating actual dict\n    from string since this operation is called for each task in case\n    of kwargs search.\"\"\"\n    if not str_dict:\n        return False\n    value = str(value)\n    try:\n        # + 3 for key right quote, one for colon and one for space\n        key_index = str_dict.index(key) + len(key) + 3\n    except ValueError:\n        return False\n    try:\n        comma_index = str_dict.index(',', key_index)\n    except ValueError:\n        # last value in dict\n        comma_index = str_dict.index('}', key_index)\n    return str(value) == str_dict[key_index:comma_index].strip('\"\\'')\n\nstringified_dict_contains_value(key='test', value=5, str_dict=\"{'test': 5}\")", "Selected Statement": "comma_index = str_dict.index('}', key_index)", "Function Input": {"key": "'test'", "value": "5", "str_dict": "\"{'test': 5}\""}, "Variable Values Before Statement": {"key_index": "9"}, "Value After Statement Execution": "10", "Variable States During Runtime": {"key": [[1, "'test'"]], "value": [[1, "5"], [8.0, "'5'"]], "str_dict": [[1, "\"{'test': 5}\""]], "key_index": [[11.0, "9"]], "comma_index": [[18.0, "10"]]}, "Program Information": "Project Name: mher+flower", "idx": 227, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def abs_path(path):\n    path = os.path.expanduser(path)\n    if not os.path.isabs(path):\n        cwd = os.environ.get('PWD') or os.getcwd()\n        path = os.path.join(cwd, path)\n    return path\n\nabs_path(path='~/file.txt')", "Selected Statement": "path = os.path.expanduser(path)", "Function Input": {"path": "'~/file.txt'"}, "Variable Values Before Statement": {"path": "'~/file.txt'"}, "Value After Statement Execution": "'/home/XXX/file.txt'", "Variable States During Runtime": {"path": [[1, "'~/file.txt'"], [2.0, "'/home/XXX/file.txt'"]]}, "Program Information": "Project Name: mher+flower", "idx": 228, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def authenticate(pattern, email):\n    if '|' in pattern:\n        return email in pattern.split('|')\n    if '*' in pattern:\n        pattern = re.escape(pattern).replace(r'\\.\\*', r\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\-]*\")\n        return re.fullmatch(pattern, email)\n    return pattern == email\n\nauthenticate(pattern='.*@example.com', email='one@example.com')", "Selected Statement": "pattern = re.escape(pattern).replace(r'\\.\\*', r\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\-]*\")", "Function Input": {"pattern": "'.*@example.com'", "email": "'one@example.com'"}, "Variable Values Before Statement": {"pattern": "'.*@example.com'"}, "Value After Statement Execution": "\"[A-Za-z0-9!#$%&'*+/", "Variable States During Runtime": {"pattern": [[1, "'.*@example.com'"], [5.0, "\"[A-Za-z0-9!#$%&'*+/=?^_`{|}~.\\\\-]*@example\\\\.com\""]], "email": [[1, "'one@example.com'"]]}, "Program Information": "Project Name: mher+flower", "idx": 229, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _add_committer_to_committers(all_committers: List[str], initials: str, name: str, email: str):\n    committer_formatted = f'{initials},{name},{email}\\n'\n    committer_position = _position_of_committer_with_initials(all_committers, initials)\n    if committer_position is _COMMITTER_NOT_PRESENT:\n        all_committers.append(committer_formatted)\n    else:\n        all_committers[committer_position] = committer_formatted\n\n_add_committer_to_committers(all_committers=[], initials='initials3', name='name3', email='email3')", "Selected Statement": "committer_position = _position_of_committer_with_initials(all_committers, initials)", "Function Input": {"all_committers": "[]", "initials": "'initials3'", "name": "'name3'", "email": "'email3'"}, "Variable Values Before Statement": {"all_committers": "[]", "initials": "'initials3'"}, "Value After Statement Execution": "-1", "Variable States During Runtime": {"all_committers": [[1, "[]"], [5.0, "['initials3,name3,email3\\n']"]], "initials": [[1, "'initials3'"]], "name": [[1, "'name3'"]], "email": [[1, "'email3'"]], "committer_formatted": [[2.0, "'initials3,name3,email3\\n'"]], "committer_position": [[3.0, "-1"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 230, "quantized value": "Negative Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def add_committer(initials: str, name: str, email: str, *, file_path: str = _GLOBAL) -> None:\n    all_committers = _read_all_committers_from_file(file_path)\n    _add_committer_to_committers(all_committers, initials, name, email)\n    _write_committers_to_file(all_committers, file_path)\n\nadd_committer(initials='initials3', name='name3', email='email3', file_path='/home/XXX/.guet/committers')", "Selected Statement": "_add_committer_to_committers(all_committers, initials, name, email)", "Function Input": {"initials": "'initials3'", "name": "'name3'", "email": "'email3'", "file_path": "'/home/XXX/.guet/committers'"}, "Variable Values Before Statement": {"all_committers": "['initials1,name1,email1\\n', 'initials2,name2,email2\\n']", "initials": "'initials3'", "name": "'name3'", "email": "'email3'"}, "Value After Statement Execution": "['initials1,name1,email1\\n', 'initials2,name2,email2\\n', 'initials3,name3,email3\\n']", "Variable States During Runtime": {"initials": [[1, "'initials3'"]], "name": [[1, "'name3'"]], "email": [[1, "'email3'"]], "file_path": [[1, "'/home/XXX/.guet/committers'"]], "all_committers": [[2.0, "['initials1,name1,email1\\n', 'initials2,name2,email2\\n']"], [3.0, "['initials1,name1,email1\\n', 'initials2,name2,email2\\n', 'initials3,name3,email3\\n']"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 231, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _load_global_committers(path: str) -> List[Committer]:\n    lines = read_lines(path)\n    committers = []\n    for line in lines:\n        initials, name, email = line.rstrip().split(',')\n        committers.append(GlobalCommitter(initials=initials, name=name, email=email))\n    return committers\n\n_load_global_committers(path='/home/XXX/.guet/committers')", "Selected Statement": "lines = read_lines(path)", "Function Input": {"path": "'/home/XXX/.guet/committers'"}, "Variable Values Before Statement": {"path": "'/home/XXX/.guet/committers'"}, "Value After Statement Execution": "['initials,name,email\\n']", "Variable States During Runtime": {"path": [[1, "'/home/XXX/.guet/committers'"]], "lines": [[2.0, "['initials,name,email\\n']"]], "committers": [[3.0, "[]"], [6.0, "[<guet.committers.global_committer.GlobalCommitter object at 0x7fc0ad6a46a0>]"]], "line": [[4.0, "'initials,name,email\\n'"]], "initials": [[5.0, "'initials'"]], "name": [[5.0, "'name'"]], "email": [[5.0, "'email'"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 232, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _load_local_committers(path: str, path_to_project_root: str) -> List[Committer]:\n    lines = read_lines(path)\n    committers = []\n    for line in lines:\n        initials, name, email = line.rstrip().split(',')\n        committers.append(LocalCommitter(initials=initials, name=name, email=email, project_root=path_to_project_root))\n    return committers\n\n_load_local_committers(path='/path/to/project/root/.guet/committers', path_to_project_root='/path/to/project/root')", "Selected Statement": "lines = read_lines(path)", "Function Input": {"path": "'/path/to/project/root/.guet/committers'", "path_to_project_root": "'/path/to/project/root'"}, "Variable Values Before Statement": {"path": "'/path/to/project/root/.guet/committers'"}, "Value After Statement Execution": "['initials1,othername1,otheremail1\\n']", "Variable States During Runtime": {"path": [[1, "'/path/to/project/root/.guet/committers'"]], "path_to_project_root": [[1, "'/path/to/project/root'"]], "lines": [[2.0, "['initials1,othername1,otheremail1\\n']"]], "committers": [[3.0, "[]"], [6.0, "[<guet.committers.local_committer.LocalCommitter object at 0x7fc0ad2c3d00>]"]], "line": [[4.0, "'initials1,othername1,otheremail1\\n'"]], "initials": [[5.0, "'initials1'"]], "name": [[5.0, "'othername1'"]], "email": [[5.0, "'otheremail1'"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 233, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _add_to_current_set_lines(current_set, formatted_set_committers_information):\n    git_path = git_path_from_cwd()\n    line_with_git_path = next((line for line in current_set if line.endswith(git_path)), None)\n    if line_with_git_path:\n        index = current_set.index(line_with_git_path)\n        current_set[index] = formatted_set_committers_information\n    else:\n        current_set.append(formatted_set_committers_information)\n\n_add_to_current_set_lines(current_set=['initials3,initials4,1000000000000,/absolute/path/to/other/.git'], formatted_set_committers_information='initials1,initials2,1000000000000,/absolute/path/to/.git')", "Selected Statement": "line_with_git_path = next((line for line in current_set if line.endswith(git_path)), None)", "Function Input": {"current_set": "['initials3,initials4,1000000000000,/absolute/path/to/other/.git']", "formatted_set_committers_information": "'initials1,initials2,1000000000000,/absolute/path/to/.git'"}, "Variable Values Before Statement": {"git_path": "'/absolute/path/to/.git'"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"current_set": [[1, "['initials3,initials4,1000000000000,/absolute/path/to/other/.git']"], [8.0, "['initials3,initials4,1000000000000,/absolute/path/to/other/.git', 'initials1,initials2,1000000000000,/absolute/path/to/.git']"]], "formatted_set_committers_information": [[1, "'initials1,initials2,1000000000000,/absolute/path/to/.git'"]], "git_path": [[2.0, "'/absolute/path/to/.git'"]], "line_with_git_path": [[3.0, "None"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 234, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _parse_file_content(create, path_to_hook):\n        _content = Hook._get_file_content(path_to_hook, create)\n        if _content != GUET_HOOK_FILE:\n            _content = Hook._handle_mismatched_content(_content, create)\n        return _content\n\n_parse_file_content(create=True, path_to_hook='/path/to/.git/hooks/name')", "Selected Statement": "_content = Hook._handle_mismatched_content(_content, create)", "Function Input": {"create": "True", "path_to_hook": "'/path/to/.git/hooks/name'"}, "Variable Values Before Statement": {"_content": "['Other', 'Content']", "create": "True"}, "Value After Statement Execution": "['#! /usr/bin/env python3', 'from guet.hooks import manage', 'import sys', 'manage(sys.argv[0])']", "Variable States During Runtime": {"create": [[1, "True"]], "path_to_hook": [[1, "'/path/to/.git/hooks/name'"]], "_content": [[2.0, "['Other', 'Content']"], [4.0, "['#! /usr/bin/env python3', 'from guet.hooks import manage', 'import sys', 'manage(sys.argv[0])']"]]}, "Program Information": "Project Name: chiptopher+guet", "idx": 235, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def which(exe=None):\n    \"\"\"\n    Python clone of /usr/bin/which\n    \"\"\"\n\n    if not exe:\n        log.error(\"No executable was passed to be searched by salt.utils.path.which()\")\n        return None\n\n    ## define some utilities (we use closures here because our predecessor used them)\n    def is_executable_common(path):\n        \"\"\"\n        This returns truth if posixy semantics (which python simulates on\n        windows) states that this is executable.\n        \"\"\"\n        return os.path.isfile(path) and os.access(path, os.X_OK)\n\n    def resolve(path):\n        \"\"\"\n        This will take a path and recursively follow the link until we get to a\n        real file.\n        \"\"\"\n        while os.path.islink(path):\n            res = readlink(path)\n\n            # if the link points to a relative target, then convert it to an\n            # absolute path relative to the original path\n            if not os.path.isabs(res):\n                directory, _ = os.path.split(path)\n                res = join(directory, res)\n            path = res\n        return path\n\n    # windows-only\n    def has_executable_ext(path, ext_membership):\n        \"\"\"\n        Extract the extension from the specified path, lowercase it so we\n        can be insensitive, and then check it against the available exts.\n        \"\"\"\n        p, ext = os.path.splitext(path)\n        return ext.lower() in ext_membership\n\n    ## prepare related variables from the environment\n    res = salt.utils.stringutils.to_unicode(os.environ.get(\"PATH\", \"\"))\n    system_path = res.split(os.pathsep)\n\n    # add some reasonable defaults in case someone's PATH is busted\n    if not salt.utils.platform.is_windows():\n        res = set(system_path)\n        extended_path = [\n            \"/sbin\",\n            \"/bin\",\n            \"/usr/sbin\",\n            \"/usr/bin\",\n            \"/usr/local/sbin\",\n            \"/usr/local/bin\",\n        ]\n        system_path.extend([p for p in extended_path if p not in res])\n\n    ## now to define the semantics of what's considered executable on a given platform\n    if salt.utils.platform.is_windows():\n        # executable semantics on windows requires us to search PATHEXT\n        res = salt.utils.stringutils.to_str(os.environ.get(\"PATHEXT\", \".EXE\"))\n\n        # generate two variables, one of them for O(n) searches (but ordered)\n        # and another for O(1) searches. the previous guy was trying to use\n        # memoization with a function that has no arguments, this provides\n        # the exact same benefit\n        pathext = res.split(os.pathsep)\n        res = {ext.lower() for ext in pathext}\n\n        # check if our caller already specified a valid extension as then we don't need to match it\n        _, ext = os.path.splitext(exe)\n        if ext.lower() in res:\n            pathext = [\"\"]\n\n            is_executable = is_executable_common\n\n        # The specified extension isn't valid, so we just assume it's part of the\n        # filename and proceed to walk the pathext list\n        else:\n            is_executable = lambda path, membership=res: is_executable_common(\n                path\n            ) and has_executable_ext(path, membership)\n\n    else:\n        # in posix, there's no such thing as file extensions..only zuul\n        pathext = [\"\"]\n\n        # executable semantics are pretty simple on reasonable platforms...\n        is_executable = is_executable_common\n\n    ## search for the executable\n\n    # check to see if the full path was specified as then we don't need\n    # to actually walk the system_path for any reason\n    if is_executable(exe):\n        return exe\n\n    # now to search through our system_path\n    for path in system_path:\n        p = join(path, exe)\n\n        # iterate through all extensions to see which one is executable\n        for ext in pathext:\n            pext = p + ext\n            rp = resolve(pext)\n            if is_executable(rp):\n                return p + ext\n            continue\n        continue\n\n    ## if something was executable, we should've found it already...\n    log.trace(\n        \"'%s' could not be found in the following search path: '%s'\", exe, system_path\n    )\n    return None\n\nwhich(exe='true')", "Selected Statement": "res = set(system_path)", "Function Input": {"exe": "'true'"}, "Variable Values Before Statement": {"system_path": "['/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/home/XXX/.gvm/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/local/rcs/XXX/miniforge3/condabin', '/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', '/sbin', '/bin', '/usr/games', '/usr/local/games', '/snap/bin', '/home/XXX/.local/bin', '/home/XXX/.local/bin']"}, "Value After Statement Execution": "{'/usr/games', '/sbin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.local/bin', '/snap/bin', '/usr/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/usr/local/games', '/usr/local/sbin', '/home/XXX/.gdrive-downloader', '/local/rcs/XXX/miniforge3/condabin', '/local/arise/XXX/miniforge3/bin', '/usr/sbin', '/usr/local/bin'}", "Variable States During Runtime": {"exe": [[1, "'true'"]], "is_executable_common": [[11.0, "<function which.<locals>.is_executable_common at 0x7f27d3207c10>"]], "resolve": [[18.0, "<function which.<locals>.resolve at 0x7f27d3207820>"]], "has_executable_ext": [[35.0, "<function which.<locals>.has_executable_ext at 0x7f27d31c20d0>"]], "res": [[44.0, "'/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin'"], [49.0, "{'/usr/games', '/sbin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.local/bin', '/snap/bin', '/usr/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/usr/local/games', '/usr/local/sbin', '/home/XXX/.gdrive-downloader', '/local/rcs/XXX/miniforge3/condabin', '/local/arise/XXX/miniforge3/bin', '/usr/sbin', '/usr/local/bin'}"]], "system_path": [[45.0, "['/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/bin', '/home/XXX/.gvm/gos/go1.19.1/bin', '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin', '/home/XXX/.gvm/bin', '/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin', '/local/rcs/XXX/miniforge3/condabin', '/home/XXX/.gdrive-downloader', '/local/arise/XXX/miniforge3/bin', '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli', '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', '/sbin', '/bin', '/usr/games', '/usr/local/games', '/snap/bin', '/home/XXX/.local/bin', '/home/XXX/.local/bin']"]], "extended_path": [[50.0, "['/sbin', '/bin', '/usr/sbin', '/usr/bin', '/usr/local/sbin', '/usr/local/bin']"]], "pathext": [[88.0, "['']"]], "is_executable": [[91.0, "<function which.<locals>.is_executable_common at 0x7f27d3207c10>"]], "path": [[101.0, "'/home/XXX/.gdrive-downloader'"], [101.0, "'/local/arise/XXX/miniforge3/bin'"], [101.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/bin'"], [101.0, "'/home/XXX/.gvm/gos/go1.19.1/bin'"], [101.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin'"], [101.0, "'/home/XXX/.gvm/bin'"], [101.0, "'/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin'"], [101.0, "'/local/rcs/XXX/miniforge3/condabin'"], [101.0, "'/home/XXX/.gdrive-downloader'"], [101.0, "'/local/arise/XXX/miniforge3/bin'"], [101.0, "'/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli'"], [101.0, "'/usr/local/sbin'"], [101.0, "'/usr/local/bin'"], [101.0, "'/usr/sbin'"], [101.0, "'/usr/bin'"]], "p": [[102.0, "'/home/XXX/.gdrive-downloader/true'"], [102.0, "'/local/arise/XXX/miniforge3/bin/true'"], [102.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true'"], [102.0, "'/home/XXX/.gvm/gos/go1.19.1/bin/true'"], [102.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true'"], [102.0, "'/home/XXX/.gvm/bin/true'"], [102.0, "'/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true'"], [102.0, "'/local/rcs/XXX/miniforge3/condabin/true'"], [102.0, "'/home/XXX/.gdrive-downloader/true'"], [102.0, "'/local/arise/XXX/miniforge3/bin/true'"], [102.0, "'/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true'"], [102.0, "'/usr/local/sbin/true'"], [102.0, "'/usr/local/bin/true'"], [102.0, "'/usr/sbin/true'"], [102.0, "'/usr/bin/true'"]], "ext": [[105.0, "''"]], "pext": [[106.0, "'/home/XXX/.gdrive-downloader/true'"], [106.0, "'/local/arise/XXX/miniforge3/bin/true'"], [106.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true'"], [106.0, "'/home/XXX/.gvm/gos/go1.19.1/bin/true'"], [106.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true'"], [106.0, "'/home/XXX/.gvm/bin/true'"], [106.0, "'/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true'"], [106.0, "'/local/rcs/XXX/miniforge3/condabin/true'"], [106.0, "'/home/XXX/.gdrive-downloader/true'"], [106.0, "'/local/arise/XXX/miniforge3/bin/true'"], [106.0, "'/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true'"], [106.0, "'/usr/local/sbin/true'"], [106.0, "'/usr/local/bin/true'"], [106.0, "'/usr/sbin/true'"], [106.0, "'/usr/bin/true'"]], "rp": [[107.0, "'/home/XXX/.gdrive-downloader/true'"], [107.0, "'/local/arise/XXX/miniforge3/bin/true'"], [107.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/bin/true'"], [107.0, "'/home/XXX/.gvm/gos/go1.19.1/bin/true'"], [107.0, "'/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin/true'"], [107.0, "'/home/XXX/.gvm/bin/true'"], [107.0, "'/local/rcs/XXX/miniforge3/envs/saltstack+salt/bin/true'"], [107.0, "'/local/rcs/XXX/miniforge3/condabin/true'"], [107.0, "'/home/XXX/.gdrive-downloader/true'"], [107.0, "'/local/arise/XXX/miniforge3/bin/true'"], [107.0, "'/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli/true'"], [107.0, "'/usr/local/sbin/true'"], [107.0, "'/usr/local/bin/true'"], [107.0, "'/usr/sbin/true'"], [107.0, "'/usr/bin/true'"]]}, "Program Information": "Project Name: saltstack+salt", "idx": 236, "quantized value": "Non-Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def join(*parts, **kwargs):\n    \"\"\"\n    This functions tries to solve some issues when joining multiple absolute\n    paths on both *nix and windows platforms.\n\n    See tests/unit/utils/path_join_test.py for some examples on what's being\n    talked about here.\n\n    The \"use_posixpath\" kwarg can be be used to force joining using poxixpath,\n    which is useful for Salt fileserver paths on Windows masters.\n    \"\"\"\n    parts = [salt.utils.stringutils.to_str(part) for part in parts]\n\n    kwargs = salt.utils.args.clean_kwargs(**kwargs)\n    use_posixpath = kwargs.pop(\"use_posixpath\", False)\n    if kwargs:\n        salt.utils.args.invalid_kwargs(kwargs)\n\n    pathlib = posixpath if use_posixpath else os.path\n\n    # Normalize path converting any os.sep as needed\n    parts = [pathlib.normpath(p) for p in parts]\n\n    try:\n        root = parts.pop(0)\n    except IndexError:\n        # No args passed to func\n        return \"\"\n\n    root = salt.utils.stringutils.to_unicode(root)\n    if not parts:\n        ret = root\n    else:\n        stripped = [p.lstrip(os.sep) for p in parts]\n        ret = pathlib.join(root, *salt.utils.data.decode(stripped))\n    return pathlib.normpath(ret)\n\njoin(parts=('/home/XXX/.gdrive-downloader', 'true'), kwargs={})", "Selected Statement": "ret = pathlib.join(root, *salt.utils.data.decode(stripped))", "Function Input": {"parts": "('/home/XXX/.gdrive-downloader', 'true')", "kwargs": "{}"}, "Variable Values Before Statement": {"stripped": "['true']"}, "Value After Statement Execution": "'/home/XXX/.gdrive-downloader/true'", "Variable States During Runtime": {"parts": [[1, "('/home/XXX/.gdrive-downloader', 'true')"], [12.0, "['/home/XXX/.gdrive-downloader', 'true']"], [25.0, "['true']"]], "kwargs": [[1, "{}"]], "use_posixpath": [[15.0, "False"]], "pathlib": [[19.0, "<module 'posixpath' from '/local/rcs/XXX/miniforge3/envs/saltstack+salt/lib/python3.9/posixpath.py'>"]], "root": [[25.0, "'/home/XXX/.gdrive-downloader'"]], "stripped": [[34.0, "['true']"]], "ret": [[35.0, "'/home/XXX/.gdrive-downloader/true'"]]}, "Program Information": "Project Name: saltstack+salt", "idx": 237, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse(theme_file):\n    \"\"\"Parse the theme file.\"\"\"\n    data = util.read_file_json(theme_file)\n\n    if \"wallpaper\" not in data:\n        data[\"wallpaper\"] = \"None\"\n\n    if \"alpha\" not in data:\n        data[\"alpha\"] = util.Color.alpha_num\n\n    # Terminal.sexy format.\n    if \"color\" in data:\n        data = terminal_sexy_to_wal(data)\n\n    return data\n\nparse(theme_file='tests/test_files/test_file.json')", "Selected Statement": "data = util.read_file_json(theme_file)", "Function Input": {"theme_file": "'tests/test_files/test_file.json'"}, "Variable Values Before Statement": {"theme_file": "'tests/test_files/test_file.json'"}, "Value After Statement Execution": "{'wallpaper': '5.png', 'alpha': '100', 'special': {'background': '#1F211E', 'foreground': '#F5F1F4', 'cursor': '#F5F1F4'}, 'colors': {'color0': '#1F211E', 'color1': '#4B7A85', 'color2': '#CC6A93', 'color3': '#5C9894', 'color4': '#A0A89B', 'color5': '#D1B9A9', 'color6': '#E3D6D8', 'color7': '#F5F1F4', 'color8': '#666666', 'color9': '#4B7A85', 'color10': '#CC6A93', 'color11': '#5C9894', 'color12': '#A0A89B', 'color13': '#D1B9A9', 'color14': '#E3D6D8', 'color15': '#F5F1F4'}}", "Variable States During Runtime": {"theme_file": [[1, "'tests/test_files/test_file.json'"]], "data": [[3.0, "{'wallpaper': '5.png', 'alpha': '100', 'special': {'background': '#1F211E', 'foreground': '#F5F1F4', 'cursor': '#F5F1F4'}, 'colors': {'color0': '#1F211E', 'color1': '#4B7A85', 'color2': '#CC6A93', 'color3': '#5C9894', 'color4': '#A0A89B', 'color5': '#D1B9A9', 'color6': '#E3D6D8', 'color7': '#F5F1F4', 'color8': '#666666', 'color9': '#4B7A85', 'color10': '#CC6A93', 'color11': '#5C9894', 'color12': '#A0A89B', 'color13': '#D1B9A9', 'color14': '#E3D6D8', 'color15': '#F5F1F4'}}"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 238, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get(img, cache_dir=CACHE_DIR, iterative=False, recursive=False):\n    \"\"\"Validate image input.\"\"\"\n    if os.path.isfile(img):\n        wal_img = img\n\n    elif os.path.isdir(img):\n        if iterative:\n            wal_img = get_next_image(img, recursive)\n\n        else:\n            wal_img = get_random_image(img, recursive)\n\n    else:\n        logging.error(\"No valid image file found.\")\n        sys.exit(1)\n\n    wal_img = os.path.abspath(wal_img)\n\n    # Cache the image file path.\n    util.save_file(wal_img, os.path.join(cache_dir, \"wal\"))\n\n    logging.info(\"Using image \\033[1;37m%s\\033[0m.\", os.path.basename(wal_img))\n    return wal_img\n\nget(img='tests/test_files/test.jpg', cache_dir='/home/XXX/.cache/wal', iterative=False, recursive=False)", "Selected Statement": "wal_img = os.path.abspath(wal_img)", "Function Input": {"img": "'tests/test_files/test.jpg'", "cache_dir": "'/home/XXX/.cache/wal'", "iterative": "False", "recursive": "False"}, "Variable Values Before Statement": {"wal_img": "'tests/test_files/test.jpg'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/tests/test_files/test.jpg'", "Variable States During Runtime": {"img": [[1, "'tests/test_files/test.jpg'"]], "cache_dir": [[1, "'/home/XXX/.cache/wal'"]], "iterative": [[1, "False"]], "recursive": [[1, "False"]], "wal_img": [[4.0, "'tests/test_files/test.jpg'"], [17.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/tests/test_files/test.jpg'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 239, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_random_image(img_dir, recursive):\n    \"\"\"Pick a random image file from a directory.\"\"\"\n    if recursive:\n        images, current_wall = get_image_dir_recursive(img_dir)\n    else:\n        images, current_wall = get_image_dir(img_dir)\n\n    if len(images) > 2 and current_wall in images:\n        images.remove(current_wall)\n\n    elif not images:\n        logging.error(\"No images found in directory.\")\n        sys.exit(1)\n\n    random.shuffle(images)\n    return os.path.join(img_dir if not recursive else \"\", images[0])\n\nget_random_image(img_dir='tests/test_files', recursive=False)", "Selected Statement": "random.shuffle(images)", "Function Input": {"img_dir": "'tests/test_files'", "recursive": "False"}, "Variable Values Before Statement": {"images": "['test2.jpg', 'test.png']"}, "Value After Statement Execution": "['test.png', 'test2.jpg']", "Variable States During Runtime": {"img_dir": [[1, "'tests/test_files'"]], "recursive": [[1, "False"]], "images": [[6.0, "['test2.jpg', 'test.jpg', 'test.png']"], [9.0, "['test2.jpg', 'test.png']"], [15.0, "['test.png', 'test2.jpg']"]], "current_wall": [[6.0, "'test.jpg'"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 240, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_image_dir(img_dir):\n    \"\"\"Get all images in a directory.\"\"\"\n    current_wall = wallpaper.get()\n    current_wall = os.path.basename(current_wall)\n\n    file_types = (\".png\", \".jpg\", \".jpeg\", \".jpe\", \".gif\")\n\n    return [img.name for img in os.scandir(img_dir)\n            if img.name.lower().endswith(file_types)], current_wall\n\nget_image_dir(img_dir='tests/test_files')", "Selected Statement": "current_wall = os.path.basename(current_wall)", "Function Input": {"img_dir": "'tests/test_files'"}, "Variable Values Before Statement": {"current_wall": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/tests/test_files/test.jpg'"}, "Value After Statement Execution": "'test.jpg'", "Variable States During Runtime": {"img_dir": [[1, "'tests/test_files'"]], "current_wall": [[3.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dylanaraps+pywal/dylanaraps+pywal/tests/test_files/test.jpg'"], [4.0, "'test.jpg'"]], "file_types": [[6.0, "('.png', '.jpg', '.jpeg', '.jpe', '.gif')"]]}, "Program Information": "Project Name: dylanaraps+pywal", "idx": 241, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def check_impl_detail(**guards):\n    \"\"\"This function returns True or False depending on the host platform.\n       Examples:\n          if check_impl_detail():               # only on CPython (default)\n          if check_impl_detail(jython=True):    # only on Jython\n          if check_impl_detail(cpython=False):  # everywhere except on CPython\n    \"\"\"\n    guards, default = _parse_guards(guards)\n    return guards.get(sys.implementation.name, default)\n\ncheck_impl_detail(guards={})", "Selected Statement": "guards, default = _parse_guards(guards)", "Function Input": {"guards": "{}"}, "Variable Values Before Statement": {"guards": "{}"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"guards": [[1, "{}"], [8.0, "{'cpython': True}"]], "default": [[8.0, "False"]]}, "Program Information": "Project Name: brython-dev+brython", "idx": 242, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _find_and_replace_patterns(content, patterns_and_insertions):\n  r\"\"\"content: str\n\n  patterns_and_insertions: List[Dict]\n\n  Example for patterns_and_insertions:\n\n      [\n          {\n              \"pattern\" :\n              r\"(?:\\\\figcompfigures{\\s*)(?P<first>.*?)\\s*}\\s*{\\s*(?P<second>.*?)\\s*}\\s*{\\s*(?P<third>.*?)\\s*}\",\n              \"insertion\" :\n              r\"\\parbox[c]{{{second}\\linewidth}}{{\\includegraphics[width={third}\\linewidth]{{figures/{first}}}}}}\",\n              \"description\": \"Replace figcompfigures\"\n          },\n      ]\n  \"\"\"\n  for pattern_and_insertion in patterns_and_insertions:\n    pattern = pattern_and_insertion['pattern']\n    insertion = pattern_and_insertion['insertion']\n    description = pattern_and_insertion['description']\n    logging.info('Processing pattern: %s.', description)\n    p = regex.compile(pattern)\n    m = p.search(content)\n    while m is not None:\n      local_insertion = insertion.format(**m.groupdict())\n      if pattern_and_insertion.get('strip_whitespace', True):\n        local_insertion = strip_whitespace(local_insertion)\n      logging.info(f'Found {content[m.start():m.end()]:<70}')\n      logging.info(f'Replacing with {local_insertion:<30}')\n      content = content[: m.start()] + local_insertion + content[m.end() :]\n      m = p.search(content)\n    logging.info('Finished pattern: %s.', description)\n  return content\n\n_find_and_replace_patterns(content='& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}', patterns_and_insertions=[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}])", "Selected Statement": "p = regex.compile(pattern)", "Function Input": {"content": "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'", "patterns_and_insertions": "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"}, "Variable Values Before Statement": {"pattern": "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'"}, "Value After Statement Execution": "regex.Regex('(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', flags", "Variable States During Runtime": {"content": [[1, "'& \\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'"], [31.0, "'& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}\\n& \\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]], "patterns_and_insertions": [[1, "[{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}]"]], "pattern_and_insertion": [[18.0, "{'pattern': '(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', 'insertion': '\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} ', 'description': 'Replace figcompfigures'}"]], "pattern": [[19.0, "'(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}'"]], "insertion": [[20.0, "'\\\\parbox[c]{{\\n            {second}\\\\linewidth\\n        }}{{\\n            \\\\includegraphics[\\n                width={third}\\\\linewidth\\n            ]{{\\n                figures/{first}\\n            }}\\n        }} '"]], "description": [[21.0, "'Replace figcompfigures'"]], "p": [[23.0, "regex.Regex('(?:\\\\\\\\figcompfigures{\\\\s*)(?P<first>.*?)\\\\s*}\\\\s*{\\\\s*(?P<second>.*?)\\\\s*}\\\\s*{\\\\s*(?P<third>.*?)\\\\s*}', flags=regex.V0)"]], "m": [[24.0, "<regex.Match object; span=(2, 49), match='\\\\figcompfigures{\\n\\timage1.jpg\\n}{\\n\\t\\\\ww\\n}{\\n\\t1.0\\n\\t}'>"], [32.0, "<regex.Match object; span=(89, 126), match='\\\\figcompfigures{image2.jpg}{\\\\ww}{1.0}'>"], [32.0, "None"]], "local_insertion": [[26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}'"], [26.0, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image2.jpg\\n            }\\n        } '"], [28.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image2.jpg}}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 243, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def strip_whitespace(text):\n  \"\"\"Strips all whitespace characters.\n\n  https://stackoverflow.com/questions/8270092/remove-all-whitespace-in-a-string\n  \"\"\"\n  pattern = regex.compile(r'\\s+')\n  text = regex.sub(pattern, '', text)\n  return text\n\nstrip_whitespace(text='\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } ')", "Selected Statement": "text = regex.sub(pattern, '', text)", "Function Input": {"text": "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"}, "Variable Values Before Statement": {"pattern": "regex.Regex('\\\\s+', flags=regex.V0)", "text": "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"}, "Value After Statement Execution": "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width", "Variable States During Runtime": {"text": [[1, "'\\\\parbox[c]{\\n            \\\\ww\\\\linewidth\\n        }{\\n            \\\\includegraphics[\\n                width=1.0\\\\linewidth\\n            ]{\\n                figures/image1.jpg\\n            }\\n        } '"], [7.0, "'\\\\parbox[c]{\\\\ww\\\\linewidth}{\\\\includegraphics[width=1.0\\\\linewidth]{figures/image1.jpg}}'"]], "pattern": [[6.0, "regex.Regex('\\\\s+', flags=regex.V0)"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 244, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def merge_args_into_config(args, config_params):\n  final_args = copy.deepcopy(config_params)\n  config_keys = config_params.keys()\n  for key, value in args.items():\n    if key in config_keys:\n      if any([isinstance(value, t) for t in [str, bool, float, int]]):\n        # Overwrites config value with args value.\n        final_args[key] = value\n      elif isinstance(value, list):\n        # Appends args values to config values.\n        final_args[key] = value + config_params[key]\n      elif isinstance(value, dict):\n        # Updates config params with args params.\n        final_args[key].update(**value)\n    else:\n      final_args[key] = value\n  return final_args\n\nmerge_args_into_config(args={'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}, config_params={'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'})", "Selected Statement": "final_args = copy.deepcopy(config_params)", "Function Input": {"args": "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}", "config_params": "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"}, "Variable Values Before Statement": {"config_params": "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"}, "Value After Statement Execution": "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}", "Variable States During Runtime": {"args": [[1, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_params": [[1, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"]], "final_args": [[2.0, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [14.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [11.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_keys": [[3.0, "dict_keys(['input_folder', 'resize_images', 'im_size', 'compress_pdf', 'pdf_im_resolution', 'images_allowlist', 'commands_to_delete', 'use_external_tikz'])"]], "key": [[4.0, "'input_folder'"], [4.0, "'resize_images'"], [4.0, "'im_size'"], [4.0, "'compress_pdf'"], [4.0, "'pdf_im_resolution'"], [4.0, "'images_allowlist'"], [4.0, "'commands_to_delete'"], [4.0, "'use_external_tikz'"]], "value": [[4.0, "'foo/bar'"], [4.0, "False"], [4.0, "500"], [4.0, "False"], [4.0, "500"], [4.0, "{'path1/': 1000}"], [4.0, "['\\\\todo1']"], [4.0, "'foo/bar/tikz'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 245, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _remove_comments_inline(text):\n  \"\"\"Removes the comments from the string 'text' and ignores % inside \\\\url{}.\"\"\"\n  if 'auto-ignore' in text:\n    return text\n  if text.lstrip(' ').lstrip('\\t').startswith('%'):\n    return ''\n\n  url_pattern = r'\\\\url\\{(?>[^{}]|(?R))*\\}'\n\n  def remove_comments(segment):\n    \"\"\"Remove comments from a segment of text.\"\"\"\n    if segment.lstrip().startswith('%'):\n      return ''\n    match = regex.search(r'(?<!\\\\)%', segment)\n    if match:\n      return segment[: match.end()] + '\\n'\n    else:\n      return segment\n\n  # split the text into segments based on \\url{} tags\n  segments = regex.split(f'({url_pattern})', text)\n\n  for i in range(len(segments)):\n    # only process segments that are not part of a \\url{} tag\n    if not regex.match(url_pattern, segments[i]):\n      segments[i] = remove_comments(segments[i])\n\n  final_text = ''.join(segments)\n  return (\n      final_text\n      if final_text.endswith('\\n') or final_text.endswith('\\\\n')\n      else final_text + '\\n'\n  )\n\n_remove_comments_inline(text='Foo %Comment\\n')", "Selected Statement": "segments = regex.split(f'({url_pattern})', text)", "Function Input": {"text": "'Foo %Comment\\n'"}, "Variable Values Before Statement": {"text": "'Foo %Comment\\n'"}, "Value After Statement Execution": "['Foo %Comment\\n']", "Variable States During Runtime": {"text": [[1, "'Foo %Comment\\n'"]], "url_pattern": [[8.0, "'\\\\\\\\url\\\\{(?>[^{}]|(?R))*\\\\}'"]], "remove_comments": [[10.0, "<function _remove_comments_inline.<locals>.remove_comments at 0x7f185616f280>"]], "segments": [[21.0, "['Foo %Comment\\n']"], [26.0, "['Foo %\\n']"]], "i": [[23.0, "0"]], "final_text": [[28.0, "'Foo %\\n'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 246, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _replace_includesvg(content, svg_inkscape_files):\n  def repl_svg(matchobj):\n    svg_path = matchobj.group(2)\n    svg_filename = os.path.basename(svg_path)\n    # search in svg_inkscape split if pdf_tex file is available\n    matching_pdf_tex_files = _keep_pattern(\n        svg_inkscape_files, ['/' + svg_filename + '-tex.pdf_tex']\n    )\n    if len(matching_pdf_tex_files) == 1:\n      options = '' if matchobj.group(1) is None else matchobj.group(1)\n      return f'\\\\includeinkscape{options}{{{matching_pdf_tex_files[0]}}}'\n    else:\n      return matchobj.group(0)\n\n  content = regex.sub(r'\\\\includesvg(\\[.*?\\])?{(.*?)}', repl_svg, content)\n\n  return content\n\n_replace_includesvg(content='Foo\\\\includesvg{test2}\\nFoo', svg_inkscape_files=['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex'])", "Selected Statement": "content = regex.sub(r'\\\\includesvg(\\[.*?\\])?{(.*?)}', repl_svg, content)", "Function Input": {"content": "'Foo\\\\includesvg{test2}\\nFoo'", "svg_inkscape_files": "['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex']"}, "Variable Values Before Statement": {"repl_svg": "<function _replace_includesvg.<locals>.repl_svg at 0x7f1855304550>", "content": "'Foo\\\\includesvg{test2}\\nFoo'"}, "Value After Statement Execution": "'Foo\\\\includeinkscape{ext_svg/test2-tex.pdf_tex}\\nFoo'", "Variable States During Runtime": {"content": [[1, "'Foo\\\\includesvg{test2}\\nFoo'"], [15.0, "'Foo\\\\includeinkscape{ext_svg/test2-tex.pdf_tex}\\nFoo'"]], "svg_inkscape_files": [[1, "['ext_svg/test1-tex.pdf_tex', 'ext_svg/test2-tex.pdf_tex']"]], "repl_svg": [[2.0, "<function _replace_includesvg.<locals>.repl_svg at 0x7f1855304550>"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 247, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "filename_path = Path(filename)", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"filename": "'to/img.ext'"}, "Value After Statement Execution": "PosixPath('to/img.ext')", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 248, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def run_arxiv_cleaner(parameters):\n  \"\"\"Core of the code, runs the actual arXiv cleaner.\"\"\"\n\n  files_to_delete = [\n      r'\\.aux$',\n      r'\\.sh$',\n      r'\\.blg$',\n      r'\\.brf$',\n      r'\\.log$',\n      r'\\.out$',\n      r'\\.ps$',\n      r'\\.dvi$',\n      r'\\.synctex.gz$',\n      '~$',\n      r'\\.backup$',\n      r'\\.gitignore$',\n      r'\\.DS_Store$',\n      r'\\.svg$',\n      r'^\\.idea',\n      r'\\.dpth$',\n      r'\\.md5$',\n      r'\\.dep$',\n      r'\\.auxlock$',\n      r'\\.fls$',\n      r'\\.fdb_latexmk$',\n  ]\n\n  if not parameters['keep_bib']:\n    files_to_delete.append(r'\\.bib$')\n\n  parameters.update({\n      'to_delete': files_to_delete,\n      'figures_to_copy_if_referenced': [\n          r'\\.png$',\n          r'\\.jpg$',\n          r'\\.jpeg$',\n          r'\\.pdf$',\n      ],\n  })\n\n  logging.info('Collecting file structure.')\n  parameters['output_folder'] = _create_out_folder(parameters['input_folder'])\n\n  from_zip = parameters['input_folder'].endswith('.zip')\n  tempdir_context = (\n      tempfile.TemporaryDirectory() if from_zip else contextlib.suppress()\n  )\n\n  with tempdir_context as tempdir:\n\n    if from_zip:\n      logging.info('Unzipping input folder.')\n      shutil.unpack_archive(parameters['input_folder'], tempdir)\n      parameters['input_folder'] = tempdir\n\n    splits = _split_all_files(parameters)\n\n    logging.info('Reading all tex files')\n    tex_contents = _read_all_tex_contents(\n        splits['tex_in_root'] + splits['tex_not_in_root'], parameters\n    )\n\n    for tex_file in tex_contents:\n      logging.info('Removing comments in file %s.', tex_file)\n      tex_contents[tex_file] = _remove_comments_and_commands_to_delete(\n          tex_contents[tex_file], parameters\n      )\n\n    for tex_file in tex_contents:\n      logging.info('Replacing \\\\includesvg calls in file %s.', tex_file)\n      tex_contents[tex_file] = _replace_includesvg(\n          tex_contents[tex_file], splits['svg_inkscape']\n      )\n\n    for tex_file in tex_contents:\n      logging.info('Replacing Tikz Pictures in file %s.', tex_file)\n      content = _replace_tikzpictures(\n          tex_contents[tex_file], splits['external_tikz_figures']\n      )\n      # If file ends with '\\n' already, the split in last line would add an extra\n      # '\\n', so we remove it.\n      tex_contents[tex_file] = content.split('\\n')\n\n    _keep_only_referenced_tex(tex_contents, splits)\n    _add_root_tex_files(splits)\n\n    for tex_file in splits['tex_to_copy']:\n      logging.info('Replacing patterns in file %s.', tex_file)\n      content = '\\n'.join(tex_contents[tex_file])\n      content = _find_and_replace_patterns(\n          content, parameters.get('patterns_and_insertions', list())\n      )\n      tex_contents[tex_file] = content\n      new_path = os.path.join(parameters['output_folder'], tex_file)\n      logging.info('Writing modified contents to %s.', new_path)\n      _write_file_content(\n          content,\n          new_path,\n      )\n\n    full_content = '\\n'.join(\n        ''.join(tex_contents[fn]) for fn in splits['tex_to_copy']\n    )\n    _copy_only_referenced_non_tex_not_in_root(parameters, full_content, splits)\n    for non_tex_file in splits['non_tex_in_root']:\n      logging.info('Copying non-tex file %s.', non_tex_file)\n      _copy_file(non_tex_file, parameters)\n\n    _resize_and_copy_figures_if_referenced(parameters, full_content, splits)\n    logging.info('Outputs written to %s', parameters['output_folder'])\n\nrun_arxiv_cleaner(parameters={'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False})", "Selected Statement": "_keep_only_referenced_tex(tex_contents, splits)", "Function Input": {"parameters": "{'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False}"}, "Variable Values Before Statement": {"tex_contents": "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}", "splits": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"}, "Value After Statement Execution": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}", "Variable States During Runtime": {"parameters": [[1, "{'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False}"], [31.0, "{'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$']}"], [42.0, "{'input_folder': 'tex', 'images_allowlist': {'images/im2_included.jpg': 200, 'images/im3_included.png': 400}, 'resize_images': True, 'im_size': 100, 'compress_pdf': False, 'pdf_im_resolution': 500, 'commands_to_delete': ['mytodo'], 'commands_only_to_delete': ['red'], 'environments_to_delete': ['mynote'], 'use_external_tikz': 'ext_tikz', 'keep_bib': False, 'to_delete': ['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$'], 'figures_to_copy_if_referenced': ['\\\\.png$', '\\\\.jpg$', '\\\\.jpeg$', '\\\\.pdf$'], 'output_folder': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv'}"]], "files_to_delete": [[4.0, "['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$']"], [29.0, "['\\\\.aux$', '\\\\.sh$', '\\\\.blg$', '\\\\.brf$', '\\\\.log$', '\\\\.out$', '\\\\.ps$', '\\\\.dvi$', '\\\\.synctex.gz$', '~$', '\\\\.backup$', '\\\\.gitignore$', '\\\\.DS_Store$', '\\\\.svg$', '^\\\\.idea', '\\\\.dpth$', '\\\\.md5$', '\\\\.dep$', '\\\\.auxlock$', '\\\\.fls$', '\\\\.fdb_latexmk$', '\\\\.bib$']"]], "from_zip": [[44.0, "False"]], "tempdir_context": [[45.0, "{_exceptions=()}"]], "tempdir": [[49.0, "None"]], "splits": [[56.0, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"], [84.0, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}"]], "tex_contents": [[59.0, "{'main.tex': ['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n'], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}\\n', '\\\\input{figures/figure_not_included_2.tex}\\n'], 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']}"], [65.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}\\n', '\\\\input{figures/figure_not_included_2.tex}\\n'], 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']}"], [65.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': [], 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']}"], [65.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': ['\\ufeff\\\\tikzsetnextfilename{test2}\\n', '\\\\begin{tikzpicture}\\n', '\\\\node {root}\\n', 'child {node {left}}\\n', 'child {node {right}\\n', 'child {node {child}}\\n', 'child {node {child}}\\n', '};\\n', '\\\\end{tikzpicture}'], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']}"], [65.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}\\n', '\\\\addplot{figures/data_included.txt}\\n']}"], [65.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\tikzsetnextfilename{test1}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test1};\\n\\\\end{tikzpicture}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [82.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': '\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n', 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [82.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': '', 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [82.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\tikzsetnextfilename{test2}\\n\\\\begin{tikzpicture}\\n\\\\node {root}\\nchild {node {left}}\\nchild {node {right}\\nchild {node {child}}\\nchild {node {child}}\\n};\\n\\\\end{tikzpicture}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [82.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [82.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}"], [93.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [93.0, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"], [93.0, "{'main.tex': '\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n', 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': '\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n', 'figures/figure_included.tex': '\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'}"]], "tex_file": [[63.0, "'main.tex'"], [63.0, "'figures/figure_not_included.tex'"], [63.0, "'figures/figure_not_included_2.tex'"], [63.0, "'figures/figure_included.tikz'"], [63.0, "'figures/figure_included.tex'"], [69.0, "'main.tex'"], [69.0, "'figures/figure_not_included.tex'"], [69.0, "'figures/figure_not_included_2.tex'"], [69.0, "'figures/figure_included.tikz'"], [69.0, "'figures/figure_included.tex'"], [75.0, "'main.tex'"], [75.0, "'figures/figure_not_included.tex'"], [75.0, "'figures/figure_not_included_2.tex'"], [75.0, "'figures/figure_included.tikz'"], [75.0, "'figures/figure_included.tex'"], [87.0, "'figures/figure_included.tikz'"], [87.0, "'main.tex'"]], "content": [[77.0, "'\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n'"], [77.0, "'\\\\addplot{figures/data_not_included.txt}\\n\\\\input{figures/figure_not_included_2.tex}\\n'"], [77.0, "''"], [77.0, "'\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n'"], [77.0, "'\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n'"], [89.0, "'\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n'"], [89.0, "'\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n'"]], "new_path": [[94.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/figures/figure_included.tex'"], [94.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/figures/figure_included.tikz'"], [94.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/google-research+arxiv-latex-cleaner/google-research+arxiv-latex-cleaner/tex_arXiv/main.tex'"]], "full_content": [[101.0, "'\\\\includegraphics{images/im2_included.jpg}\\n\\\\addplot{figures/data_included.txt}\\n\\n\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}\\n\\n\\\\begin{document}\\nText\\n\\nText%\\n\\n\\nThis is a percent \\\\%.\\n\\\\includegraphics{images/im1_included.png}\\n\\\\includegraphics{images/im3_included.png}\\n\\\\includegraphics{%\\n  images/im4_included.png%\\n  }\\n\\\\includegraphics[width=.5\\\\linewidth]{%\\n  images/im5_included.jpg}\\n\\n\\\\includegraphics{./images/im3_included.png}\\n\\nThis line should not be separated\\n%\\nfrom this one.\\n\\n\\n\\n\\\\newif\\\\ifvar\\n\\n\\\\ifvar\\n\\\\fi\\n\\n\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\nhello test hello\\ntest hello\\ntest\\n\\n\\n\\\\input{figures/figure_included.tex}\\n\\n\\\\includegraphics{ext_tikz/test1.pdf}\\n\\n\\\\input{figures/figure_included.tikz}\\n\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test3};\\n\\\\end{tikzpicture}\\n\\n\\\\tikzsetnextfilename{test_no_match}\\n\\\\begin{tikzpicture}\\n    \\\\node (test) at (0,0) {Test4};\\n\\\\end{tikzpicture}\\n\\n\\\\end{document}\\n'"]], "non_tex_file": [[105.0, "'main.bbl'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 249, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _read_file_content(filename):\n  with open(filename, 'r', encoding='utf-8') as fp:\n    lines = fp.readlines()\n    lines = _strip_tex_contents(lines, '\\\\end{document}')\n    return lines\n\n_read_file_content(filename='tex/main.tex')", "Selected Statement": "with open(filename, 'r', encoding='utf-8') as fp:", "Function Input": {"filename": "'tex/main.tex'"}, "Variable Values Before Statement": {"filename": "'tex/main.tex'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"filename": [[1, "'tex/main.tex'"]], "fp": [[2.0, "<_io.TextIOWrapper name='tex/main.tex' mode='r' encoding='utf-8'>"]], "lines": [[3.0, "['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n', '\\n', 'This should be ignored.\\n']"], [4.0, "['\\\\begin{document}\\n', 'Text\\n', '% Whole line comment\\n', '\\n', 'Text% Inline comment\\n', '\\\\begin{comment}\\n', 'This is an environment comment.\\n', '\\\\end{comment}\\n', '\\n', 'This is a percent \\\\%.\\n', '% Whole line comment without newline\\n', '\\\\includegraphics{images/im1_included.png}\\n', '%\\\\includegraphics{images/im_not_included}\\n', '\\\\includegraphics{images/im3_included.png}\\n', '\\\\includegraphics{%\\n', '  images/im4_included.png%\\n', '  }\\n', '\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '  images/im5_included.jpg}\\n', '%\\\\includegraphics{%\\n', '%  images/im4_not_included.png\\n', '%  }\\n', '%\\\\includegraphics[width=.5\\\\linewidth]{%\\n', '%  images/im5_not_included.jpg}\\n', '\\n', '% test whatever the path satrting with dot works when include graphics\\n', '\\\\includegraphics{./images/im3_included.png}\\n', '\\n', 'This line should\\\\mytodo{Do this later} not be separated\\n', '\\\\mytodo{This is a todo command with a nested \\\\textit{command}.\\n', 'Please remember that up to \\\\texttt{2 levels} of \\\\textit{nesting} are supported.}\\n', 'from this one.\\n', '\\n', '\\\\begin{mynote}\\n', '  This is a custom environment that could be excluded.\\n', '\\\\end{mynote}\\n', '\\n', '\\\\newif\\\\ifvar\\n', '\\n', '\\\\ifvar\\n', '\\\\if    false\\n', '\\\\if false\\n', '\\\\if 0\\n', '\\\\iffalse\\n', '\\\\ifvar\\n', 'Text\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\\\fi\\n', '\\n', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}\\n', 'hello test \\\\red{hello\\n', 'test \\\\red{hello}}\\n', 'test\\n', '\\n', '% content after this line should not be cleaned if \\\\end{document} is in a comment\\n', '\\n', '\\\\input{figures/figure_included.tex}\\n', '% \\\\input{figures/figure_not_included.tex}\\n', '\\n', '% Test for tikzpicture feature\\n', '% should be replaced\\n', '\\\\tikzsetnextfilename{test1}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test1};\\n', '\\\\end{tikzpicture}\\n', '\\n', '% should be replaced in included file\\n', '\\\\input{figures/figure_included.tikz}\\n', '\\n', '% should not be be replaced - no preceding tikzsetnextfilename command\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test3};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\tikzsetnextfilename{test_no_match}\\n', '\\\\begin{tikzpicture}\\n', '    \\\\node (test) at (0,0) {Test4};\\n', '\\\\end{tikzpicture}\\n', '\\n', '\\\\end{document}\\n']"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 250, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _keep_only_referenced_tex(contents, splits):\n  \"\"\"Returns the filenames referenced from the tex files themselves.\n\n  It needs various iterations in case one file is referenced from an\n  unreferenced file.\n  \"\"\"\n  old_referenced = set(splits['tex_in_root'] + splits['tex_not_in_root'])\n  while True:\n    referenced = set(splits['tex_in_root'])\n    for fn in old_referenced:\n      for fn2 in old_referenced:\n        if regex.search(\n            r'(' + os.path.splitext(fn)[0] + r'[.}])', '\\n'.join(contents[fn2])\n        ):\n          referenced.add(fn)\n\n    if referenced == old_referenced:\n      splits['tex_to_copy'] = list(referenced)\n      return\n\n    old_referenced = referenced.copy()\n\n_keep_only_referenced_tex(contents={'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}, splits={'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []})", "Selected Statement": "splits['tex_to_copy'] = list(referenced)", "Function Input": {"contents": "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}", "splits": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"}, "Variable Values Before Statement": {"referenced": "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"}, "Value After Statement Execution": "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}", "Variable States During Runtime": {"contents": [[1, "{'main.tex': ['\\\\begin{document}', 'Text', '', 'Text%', '', '', 'This is a percent \\\\%.', '\\\\includegraphics{images/im1_included.png}', '\\\\includegraphics{images/im3_included.png}', '\\\\includegraphics{%', '  images/im4_included.png%', '  }', '\\\\includegraphics[width=.5\\\\linewidth]{%', '  images/im5_included.jpg}', '', '\\\\includegraphics{./images/im3_included.png}', '', 'This line should not be separated', '%', 'from this one.', '', '', '', '\\\\newif\\\\ifvar', '', '\\\\ifvar', '\\\\fi', '', '\\\\newcommand{\\\\red}[1]{{\\\\color{red} #1}}', 'hello test hello', 'test hello', 'test', '', '', '\\\\input{figures/figure_included.tex}', '', '\\\\includegraphics{ext_tikz/test1.pdf}', '', '\\\\input{figures/figure_included.tikz}', '', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test3};', '\\\\end{tikzpicture}', '', '\\\\tikzsetnextfilename{test_no_match}', '\\\\begin{tikzpicture}', '    \\\\node (test) at (0,0) {Test4};', '\\\\end{tikzpicture}', '', '\\\\end{document}', ''], 'figures/figure_not_included.tex': ['\\\\addplot{figures/data_not_included.txt}', '\\\\input{figures/figure_not_included_2.tex}', ''], 'figures/figure_not_included_2.tex': [''], 'figures/figure_included.tikz': ['\\ufeff\\\\includegraphics{ext_tikz/test2.pdf}', ''], 'figures/figure_included.tex': ['\\\\includegraphics{images/im2_included.jpg}', '\\\\addplot{figures/data_included.txt}', '']}"]], "splits": [[1, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': []}"], [18.0, "{'all': ['main.bib', 'main.bbl', 'main.tex', 'main.aux', 'ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'in_root': ['main.bib', 'main.bbl', 'main.tex', 'main.aux'], 'not_in_root': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'to_copy_in_root': ['main.bbl', 'main.tex'], 'to_copy_not_in_root': ['figures/data_not_included.txt', 'figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf', 'images/im4_included.png', 'images/im1.png', 'images/im4_not_included.png', 'images/im3_included.png', 'images/im2_included.jpg', 'images/im5_not_included.jpg', 'images/im5_included.jpg', 'images/im1_included.png', 'images/im_not_included.png', 'images/include/images/im3_included.png'], 'tex_in_root': ['main.tex'], 'tex_not_in_root': ['figures/figure_not_included.tex', 'figures/figure_not_included_2.tex', 'figures/figure_included.tikz', 'figures/figure_included.tex'], 'non_tex_in_root': ['main.bbl'], 'non_tex_not_in_root': ['figures/data_not_included.txt', 'figures/data_included.txt', 'not_included/figures/data_included.txt'], 'external_tikz_figures': ['ext_tikz/test2.pdf', 'ext_tikz/test1.pdf', 'ext_tikz/figure_not_included.pdf'], 'svg_inkscape': [], 'tex_to_copy': ['figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex']}"]], "old_referenced": [[7.0, "{'figures/figure_included.tex', 'figures/figure_not_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [21.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "referenced": [[9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex', 'figures/figure_not_included_2.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"], [9.0, "{'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'main.tex'}"], [15.0, "{'figures/figure_included.tex', 'figures/figure_included.tikz', 'main.tex'}"]], "fn": [[10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_not_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"], [10.0, "'figures/figure_not_included_2.tex'"], [10.0, "'figures/figure_included.tex'"], [10.0, "'figures/figure_included.tikz'"], [10.0, "'main.tex'"]], "fn2": [[11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_not_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_not_included_2.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"], [11.0, "'figures/figure_included.tex'"], [11.0, "'figures/figure_included.tikz'"], [11.0, "'main.tex'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 251, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "with open(file_path, \"w\") as f:", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"file_path": "'/tmp/tmp6qrrn_j9'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 252, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def return_logger(name: str) -> logging.Logger:\n    # Set log message format\n\n    logger = logging.getLogger(name)\n\n    if not len(logger.handlers):\n        log_formatter = logging.Formatter('%(asctime)-s: %(levelname)-s %(message)s')\n        # set logging level\n        logger.setLevel(logging.DEBUG)\n\n        # Direct logs to stderr\n        console_handler = logging.StreamHandler()\n        console_handler.setFormatter(log_formatter)\n        logger.addHandler(console_handler)\n\n    return logger\n\nreturn_logger(name='imagededup.handlers.metrics.classification')", "Selected Statement": "logger = logging.getLogger(name)", "Function Input": {"name": "'imagededup.handlers.metrics.classification'"}, "Variable Values Before Statement": {"name": "'imagededup.handlers.metrics.classification'"}, "Value After Statement Execution": "<Logger imagededup.handlers.metrics.classification (WARNING)>", "Variable States During Runtime": {"name": [[1, "'imagededup.handlers.metrics.classification'"]], "logger": [[4.0, "<Logger imagededup.handlers.metrics.classification (WARNING)>"], [9.0, "<Logger imagededup.handlers.metrics.classification (DEBUG)>"]], "log_formatter": [[7.0, "{_style=<logging.PercentStyle object at 0x7fcf18561f10>, _fmt='%(asctime)-s: %(levelname)-s %(message)s', datefmt=None}"]], "console_handler": [[12.0, "<StreamHandler <stderr> (NOTSET)>"]]}, "Program Information": "Project Name: idealo+imagededup", "idx": 253, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def transform_path_to_dotted(sys_path, module_path):\n    \"\"\"\n    Returns the dotted path inside a sys.path as a list of names. e.g.\n\n    >>> transform_path_to_dotted([str(Path(\"/foo\").absolute())], Path('/foo/bar/baz.py').absolute())\n    (('bar', 'baz'), False)\n\n    Returns (None, False) if the path doesn't really resolve to anything.\n    The second return part is if it is a package.\n    \"\"\"\n    # First remove the suffix.\n    module_path = remove_python_path_suffix(module_path)\n    if module_path.name.startswith('.'):\n        return None, False\n\n    # Once the suffix was removed we are using the files as we know them. This\n    # means that if someone uses an ending like .vim for a Python file, .vim\n    # will be part of the returned dotted part.\n\n    is_package = module_path.name == '__init__'\n    if is_package:\n        module_path = module_path.parent\n\n    def iter_potential_solutions():\n        for p in sys_path:\n            if str(module_path).startswith(p):\n                # Strip the trailing slash/backslash\n                rest = str(module_path)[len(p):]\n                # On Windows a path can also use a slash.\n                if rest.startswith(os.path.sep) or rest.startswith('/'):\n                    # Remove a slash in cases it's still there.\n                    rest = rest[1:]\n\n                if rest:\n                    split = rest.split(os.path.sep)\n                    if not all(split):\n                        # This means that part of the file path was empty, this\n                        # is very strange and is probably a file that is called\n                        # `.py`.\n                        return\n                    # Stub folders for foo can end with foo-stubs. Just remove\n                    # it.\n                    yield tuple(re.sub(r'-stubs$', '', s) for s in split)\n\n    potential_solutions = tuple(iter_potential_solutions())\n    if not potential_solutions:\n        return None, False\n    # Try to find the shortest path, this makes more sense usually, because the\n    # user usually has venvs somewhere. This means that a path like\n    # .tox/py37/lib/python3.7/os.py can be normal for a file. However in that\n    # case we definitely want to return ['os'] as a path and not a crazy\n    # ['.tox', 'py37', 'lib', 'python3.7', 'os']. Keep in mind that this is a\n    # heuristic and there's now ay to \"always\" do it right.\n    return sorted(potential_solutions, key=lambda p: len(p))[0], is_package\n\ntransform_path_to_dotted(sys_path=['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg'], module_path=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py'))", "Selected Statement": "module_path = remove_python_path_suffix(module_path)", "Function Input": {"sys_path": "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg']", "module_path": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"}, "Variable Values Before Statement": {"module_path": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"}, "Value After Statement Execution": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example')", "Variable States During Runtime": {"sys_path": [[1, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi', '/local/rcs/XXX/code/pytrace-collector', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python39.zip', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/lib-dynload', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages', '/local/rcs/XXX/miniforge3/envs/davidhalter+jedi/lib/python3.9/site-packages/PySnooper-1.2.0-py3.9.egg']"]], "module_path": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example.py')"], [12.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi/davidhalter+jedi/example')"]], "is_package": [[20.0, "False"]], "iter_potential_solutions": [[24.0, "<function transform_path_to_dotted.<locals>.iter_potential_solutions at 0x7f5855feec10>"]], "potential_solutions": [[45.0, "(('example',), ('logs', 'self_collected', 'tried', 'davidhalter+jedi', 'davidhalter+jedi', 'example'))"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 254, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def infer_node(context, element):\n    if isinstance(context, CompForContext):\n        return _infer_node(context, element)\n\n    if_stmt = element\n    while if_stmt is not None:\n        if_stmt = if_stmt.parent\n        if if_stmt.type in ('if_stmt', 'for_stmt'):\n            break\n        if parser_utils.is_scope(if_stmt):\n            if_stmt = None\n            break\n    predefined_if_name_dict = context.predefined_names.get(if_stmt)\n    # TODO there's a lot of issues with this one. We actually should do\n    # this in a different way. Caching should only be active in certain\n    # cases and this all sucks.\n    if predefined_if_name_dict is None and if_stmt \\\n            and if_stmt.type == 'if_stmt' and context.inference_state.is_analysis:\n        if_stmt_test = if_stmt.children[1]\n        name_dicts = [{}]\n        # If we already did a check, we don't want to do it again -> If\n        # value.predefined_names is filled, we stop.\n        # We don't want to check the if stmt itself, it's just about\n        # the content.\n        if element.start_pos > if_stmt_test.end_pos:\n            # Now we need to check if the names in the if_stmt match the\n            # names in the suite.\n            if_names = get_names_of_node(if_stmt_test)\n            element_names = get_names_of_node(element)\n            str_element_names = [e.value for e in element_names]\n            if any(i.value in str_element_names for i in if_names):\n                for if_name in if_names:\n                    definitions = context.inference_state.infer(context, if_name)\n                    # Every name that has multiple different definitions\n                    # causes the complexity to rise. The complexity should\n                    # never fall below 1.\n                    if len(definitions) > 1:\n                        if len(name_dicts) * len(definitions) > 16:\n                            debug.dbg('Too many options for if branch inference %s.', if_stmt)\n                            # There's only a certain amount of branches\n                            # Jedi can infer, otherwise it will take to\n                            # long.\n                            name_dicts = [{}]\n                            break\n\n                        original_name_dicts = list(name_dicts)\n                        name_dicts = []\n                        for definition in definitions:\n                            new_name_dicts = list(original_name_dicts)\n                            for i, name_dict in enumerate(new_name_dicts):\n                                new_name_dicts[i] = name_dict.copy()\n                                new_name_dicts[i][if_name.value] = ValueSet([definition])\n\n                            name_dicts += new_name_dicts\n                    else:\n                        for name_dict in name_dicts:\n                            name_dict[if_name.value] = definitions\n        if len(name_dicts) > 1:\n            result = NO_VALUES\n            for name_dict in name_dicts:\n                with context.predefine_names(if_stmt, name_dict):\n                    result |= _infer_node(context, element)\n            return result\n        else:\n            return _infer_node_if_inferred(context, element)\n    else:\n        if predefined_if_name_dict:\n            return _infer_node(context, element)\n        else:\n            return _infer_node_if_inferred(context, element)\n\ninfer_node(context=ModuleContext(<ModuleValue: __main__@2-8 is_stub=False>), element=PythonNode(test, [<Name: f@8,11>, <Keyword: if>, PythonNode(atom_expr, [<Name: random@8,16>, PythonNode(trailer, [<Operator: .>, <Name: choice@8,23>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 0>, <Operator: ,>, <Number: 1>]), <Operator: ]>]), <Operator: )>])]), <Keyword: else>, <Name: C@8,42>]))", "Selected Statement": "predefined_if_name_dict = context.predefined_names.get(if_stmt)", "Function Input": {"context": "ModuleContext(<ModuleValue: __main__@2-8 is_stub=False>)", "element": "PythonNode(test, [<Name: f@8,11>, <Keyword: if>, PythonNode(atom_expr, [<Name: random@8,16>, PythonNode(trailer, [<Operator: .>, <Name: choice@8,23>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 0>, <Operator: ,>, <Number: 1>]), <Operator: ]>]), <Operator: )>])]), <Keyword: else>, <Name: C@8,42>])"}, "Variable Values Before Statement": {"if_stmt": "None"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"context": [[1, "ModuleContext(<ModuleValue: __main__@2-8 is_stub=False>)"]], "element": [[1, "PythonNode(test, [<Name: f@8,11>, <Keyword: if>, PythonNode(atom_expr, [<Name: random@8,16>, PythonNode(trailer, [<Operator: .>, <Name: choice@8,23>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 0>, <Operator: ,>, <Number: 1>]), <Operator: ]>]), <Operator: )>])]), <Keyword: else>, <Name: C@8,42>])"]], "if_stmt": [[5.0, "PythonNode(test, [<Name: f@8,11>, <Keyword: if>, PythonNode(atom_expr, [<Name: random@8,16>, PythonNode(trailer, [<Operator: .>, <Name: choice@8,23>]), PythonNode(trailer, [<Operator: (>, PythonNode(atom, [<Operator: [>, PythonNode(testlist_comp, [<Number: 0>, <Operator: ,>, <Number: 1>]), <Operator: ]>]), <Operator: )>])]), <Keyword: else>, <Name: C@8,42>])"], [7.0, "<ExprStmt: variable = f if random.choice([0,1]) else C@8,0>"], [7.0, "<Module: @2-8>"], [11.0, "None"]], "predefined_if_name_dict": [[13.0, "None"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 255, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _search_param_in_docstr(docstr, param_str):\n    \"\"\"\n    Search `docstr` for type(-s) of `param_str`.\n\n    >>> _search_param_in_docstr(':type param: int', 'param')\n    ['int']\n    >>> _search_param_in_docstr('@type param: int', 'param')\n    ['int']\n    >>> _search_param_in_docstr(\n    ...   ':type param: :class:`threading.Thread`', 'param')\n    ['threading.Thread']\n    >>> bool(_search_param_in_docstr('no document', 'param'))\n    False\n    >>> _search_param_in_docstr(':param int param: some description', 'param')\n    ['int']\n\n    \"\"\"\n    # look at #40 to see definitions of those params\n    patterns = [re.compile(p % re.escape(param_str))\n                for p in DOCSTRING_PARAM_PATTERNS]\n    for pattern in patterns:\n        match = pattern.search(docstr)\n        if match:\n            return [_strip_rst_role(match.group(1))]\n\n    return _search_param_in_numpydocstr(docstr, param_str)\n\n_search_param_in_docstr(docstr=':type param: int', param_str='param')", "Selected Statement": "patterns = [re.compile(p % re.escape(param_str))", "Function Input": {"docstr": "':type param: int'", "param_str": "'param'"}, "Variable Values Before Statement": {"param_str": "'param'"}, "Value After Statement Execution": "[re.compile('\\\\s*:type\\\\s+param:\\\\s*([^\\\\n]+)'), re.compile('\\\\s*:param\\\\s+(\\\\w+)\\\\s+param:[^\\\\n]*'), re.compile('\\\\s*@type\\\\s+param:\\\\s*([^\\\\n]+)')]", "Variable States During Runtime": {"docstr": [[1, "':type param: int'"]], "param_str": [[1, "'param'"]], "patterns": [[19.0, "[re.compile('\\\\s*:type\\\\s+param:\\\\s*([^\\\\n]+)'), re.compile('\\\\s*:param\\\\s+(\\\\w+)\\\\s+param:[^\\\\n]*'), re.compile('\\\\s*@type\\\\s+param:\\\\s*([^\\\\n]+)')]"]], "pattern": [[21.0, "re.compile('\\\\s*:type\\\\s+param:\\\\s*([^\\\\n]+)')"]], "match": [[22.0, "<re.Match object; span=(0, 16), match=':type param: int'>"]]}, "Program Information": "Project Name: davidhalter+jedi", "idx": 256, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def generate(resource_types=()):\n    resource_defs = {}\n    definitions = {\n        'resources': resource_defs,\n        'string_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\"type\": \"string\"},\n            },\n        },\n        'basic_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    'oneOf': [\n                        {\"type\": \"string\"},\n                        {\"type\": \"boolean\"},\n                        {\"type\": \"number\"},\n                    ],\n                }\n            },\n        },\n        'iam-statement': {\n            'additionalProperties': False,\n            'type': 'object',\n            'properties': {\n                'Sid': {'type': 'string'},\n                'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']},\n                'Principal': {'anyOf': [\n                    {'type': 'string'},\n                    {'type': 'object'}, {'type': 'array'}]},\n                'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]},\n                'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Condition': {'type': 'object'}\n            },\n            'required': ['Sid', 'Effect'],\n            'oneOf': [\n                {'required': ['Principal', 'Action', 'Resource']},\n                {'required': ['NotPrincipal', 'Action', 'Resource']},\n                {'required': ['Principal', 'NotAction', 'Resource']},\n                {'required': ['NotPrincipal', 'NotAction', 'Resource']},\n                {'required': ['Principal', 'Action', 'NotResource']},\n                {'required': ['NotPrincipal', 'Action', 'NotResource']},\n                {'required': ['Principal', 'NotAction', 'NotResource']},\n                {'required': ['NotPrincipal', 'NotAction', 'NotResource']}\n            ]\n        },\n        'actions': {},\n        'filters': {\n            'value': ValueFilter.schema,\n            'event': EventFilter.schema,\n            'age': AgeFilter.schema,\n            'reduce': ReduceFilter.schema,\n            # Shortcut form of value filter as k=v\n            'valuekv': {\n                'type': 'object',\n                'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'},\n                    {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]},\n                'minProperties': 1,\n                'maxProperties': 1},\n        },\n        'filters_common': {\n            'list_item_attrs': _get_attr_schema(),\n            'comparison_operators': {\n                'enum': list(OPERATORS.keys())},\n            'value_types': {'enum': VALUE_TYPES},\n            'value_from': ValuesFrom.schema,\n            'value': {'oneOf': [\n                {'type': 'array'},\n                {'type': 'string'},\n                {'type': 'boolean'},\n                {'type': 'number'},\n                {'type': 'null'}]},\n        },\n        'policy': {\n            'type': 'object',\n            'required': ['name', 'resource'],\n            'additionalProperties': False,\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'pattern': \"^[A-z][A-z0-9]*(-[A-z0-9]+)*$\"},\n                'conditions': {\n                    'type': 'array',\n                    'items': {'anyOf': [\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'or': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'not': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'and': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'$ref': '#/definitions/filters/value'},\n                        {'$ref': '#/definitions/filters/event'},\n                        {'$ref': '#/definitions/filters/valuekv'}]}},\n                # these should be deprecated for conditions\n                'region': {'type': 'string'},\n                'tz': {'type': 'string'},\n                'start': {'format': 'date-time'},\n                'end': {'format': 'date-time'},\n                'resource': {'oneOf': [\n                    {'type': 'string'},\n                    {'type': 'array', 'items': {'type': 'string'}}]},\n                'max-resources': {'anyOf': [\n                    {'type': 'integer', 'minimum': 1},\n                    {'$ref': '#/definitions/max-resources-properties'}\n                ]},\n                'max-resources-percent': {'type': 'number', 'minimum': 0, 'maximum': 100},\n                'comment': {'type': 'string'},\n                'comments': {'type': 'string'},\n                'description': {'type': 'string'},\n                'tags': {'type': 'array', 'items': {'type': 'string'}},\n                'metadata': {'type': 'object'},\n                'mode': {'$ref': '#/definitions/policy-mode'},\n                'source': {'enum': list(sources.keys())},\n                'actions': {\n                    'type': 'array',\n                },\n                'filters': {\n                    'type': 'array'\n                },\n                #\n                # TODO: source queries should really move under\n                # source. This was initially used for describe sources\n                # to expose server side query mechanisms, however its\n                # important to note it also prevents resource cache\n                # utilization between policies that have different\n                # queries.\n                'query': {\n                    'type': 'array', 'items': {'type': 'object'}}\n\n            },\n        },\n        'policy-mode': {\n            'anyOf': [e.schema for _, e in execution.items()],\n        },\n        'max-resources-properties': {\n            'type': 'object',\n            'additionalProperties': False,\n            'properties': {\n                'amount': {\"type\": 'integer', 'minimum': 1},\n                'op': {'enum': ['or', 'and']},\n                'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}\n            }\n        }\n    }\n\n    resource_refs = []\n    for cloud_name, cloud_type in sorted(clouds.items()):\n        for type_name, resource_type in sorted(cloud_type.resources.items()):\n            r_type_name = \"%s.%s\" % (cloud_name, type_name)\n            if resource_types and r_type_name not in resource_types:\n                if not resource_type.type_aliases:\n                    continue\n                elif not {\"%s.%s\" % (cloud_name, ralias) for ralias\n                        in resource_type.type_aliases}.intersection(\n                        resource_types):\n                    continue\n\n            aliases = []\n            if resource_type.type_aliases:\n                aliases.extend([\"%s.%s\" % (cloud_name, a) for a in resource_type.type_aliases])\n                # aws gets legacy aliases with no cloud prefix\n                if cloud_name == 'aws':\n                    aliases.extend(resource_type.type_aliases)\n\n            # aws gets additional alias for default name\n            if cloud_name == 'aws':\n                aliases.append(type_name)\n\n            resource_refs.append(\n                process_resource(\n                    r_type_name,\n                    resource_type,\n                    resource_defs,\n                    aliases,\n                    definitions,\n                    cloud_name\n                ))\n\n    schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        'id': 'http://schema.cloudcustodian.io/v0/custodian.json',\n        'definitions': definitions,\n        'type': 'object',\n        'required': ['policies'],\n        'additionalProperties': False,\n        'properties': {\n            'vars': {'type': 'object'},\n            'policies': {\n                'type': 'array',\n                'additionalItems': False,\n                'items': {'anyOf': resource_refs}\n            }\n        }\n    }\n\n    # allow empty policies with lazy load\n    if not resource_refs:\n        schema['properties']['policies']['items'] = {'type': 'object'}\n    return schema\n\ngenerate(resource_types=())", "Selected Statement": "process_resource(", "Function Input": {"resource_types": "()"}, "Variable Values Before Statement": {"r_type_name": "'gcp.region'", "resource_type": "<class 'c7n_gcp.region.Region'>", "resource_defs": "{}", "aliases": "[]", "definitions": "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}", "cloud_name": "'gcp'"}, "Value After Statement Execution": "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}", "Variable States During Runtime": {"resource_types": [[1, "()"]], "resource_defs": [[2.0, "{}"], [177.0, "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}"]], "definitions": [[3.0, "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"], [177.0, "{'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"]], "resource_refs": [[153.0, "[]"], [176.0, "[{'$ref': '#/definitions/resources/gcp.region/policy'}]"]], "cloud_type": [[154.0, "<class 'c7n.resources.aws.AWS'>"], [154.0, "<class 'c7n_gcp.provider.GoogleCloud'>"]], "cloud_name": [[154.0, "'aws'"], [154.0, "'gcp'"]], "type_name": [[155.0, "'region'"]], "resource_type": [[155.0, "<class 'c7n_gcp.region.Region'>"]], "r_type_name": [[156.0, "'gcp.region'"]], "aliases": [[165.0, "[]"]], "schema": [[186.0, "{'$schema': 'http://json-schema.org/draft-07/schema#', 'id': 'http://schema.cloudcustodian.io/v0/custodian.json', 'definitions': {'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv'...ype': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}, 'type': 'object', 'required': ['policies'], 'additionalProperties': False, 'properties': {'vars': {'type': 'object'}, 'policies': {'type': 'array', 'additionalItems': False, 'items': {'anyOf': [{'$ref': '#/definitions/resources/gcp.region/policy'}]}}}}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 257, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _get_attr_schema():\n    base_filters = [\n        {'$ref': '#/definitions/filters/value'},\n        {'$ref': '#/definitions/filters/valuekv'},\n    ]\n    any_of = []\n    any_of.extend(base_filters)\n\n    for op in ('and', 'or', 'not',):\n        any_of.append(\n            {\n                'additional_properties': False,\n                'properties': {\n                    op: {\n                        'type': 'array',\n                        'items': {\n                            'anyOf': base_filters\n                        }\n                    }\n                },\n                'type': 'object'\n            }\n        )\n\n    attr_schema = {\n        'items': {\n            'anyOf': any_of\n        },\n        'type': 'array',\n    }\n    return attr_schema\n\n_get_attr_schema()", "Selected Statement": "any_of.extend(base_filters)", "Function Input": {}, "Variable Values Before Statement": {"base_filters": "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]"}, "Value After Statement Execution": "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]", "Variable States During Runtime": {"base_filters": [[2.0, "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]"]], "any_of": [[6.0, "[]"], [7.0, "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]"], [10.0, "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}]"], [10.0, "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}]"], [10.0, "[{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}]"]], "op": [[9.0, "'and'"], [9.0, "'or'"], [9.0, "'not'"]], "attr_schema": [[25.0, "{'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}]}, 'type': 'array'}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 258, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _underscore(word: str) -> str:\n    # https://github.com/jpvanhal/inflection/blob/master/inflection.py\n    word = re.sub(r\"([A-Z]+)([A-Z][a-z])\", r'\\1_\\2', word)\n    word = re.sub(r\"([a-z\\d])([A-Z])\", r'\\1_\\2', word)\n    word = word.replace(\"-\", \"_\")\n    return word.lower()\n\n_underscore(word='TestKlass')", "Selected Statement": "word = re.sub(r\"([a-z\\d])([A-Z])\", r'\\1_\\2', word)", "Function Input": {"word": "'TestKlass'"}, "Variable Values Before Statement": {"word": "'TestKlass'"}, "Value After Statement Execution": "'Test_Klass'", "Variable States During Runtime": {"word": [[1, "'TestKlass'"], [4.0, "'Test_Klass'"]]}, "Program Information": "Project Name: a1fred+carnival", "idx": 259, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def timed_frames(records, min_frame_dur=1, max_frame_dur=None, last_frame_dur=1000):\n    \"\"\"Return a tuple made of the geometry of the screen and a generator of\n    instances of TimedFrame computed from asciicast records\n\n    Asciicast records are first coalesced so that the mininum duration between\n    two frames is at least `min_frame_dur` milliseconds. Events with a duration\n    greater than `max_frame_dur` will see their duration reduced to that value.\n\n    The duration of all frames lasting until the end of the animation\n    will be adjusted so that the last frame of the animation lasts\n    `last_frame_dur`\n\n    :param records: Terminal session record in Asciicast v2 format\n    :param min_frame_dur: Minimum frame duration in milliseconds (integer)\n    :param min_frame_dur: Minimum frame duration in milliseconds (integer)\n    :param max_frame_dur: Maximum frame duration in milliseconds (None or\n    integer)\n    :param last_frame_dur: Duration of the last frame of the animation\n    (integer)\n    \"\"\"\n    if not isinstance(records, Iterator):\n        records = iter(records)\n\n    header = next(records)\n    assert isinstance(header, AsciiCastV2Header)\n\n    if not max_frame_dur and header.idle_time_limit:\n        max_frame_dur = int(header.idle_time_limit * 1000)\n\n    def generator():\n        screen = pyte.Screen(header.width, header.height)\n        stream = pyte.Stream(screen)\n        timed_records = _group_by_time(records, min_frame_dur, max_frame_dur,\n                                       last_frame_dur)\n\n        for record_ in timed_records:\n            assert isinstance(record_, AsciiCastV2Event)\n            for char in record_.event_data:\n                stream.feed(char)\n            yield TimedFrame(int(1000 * record_.time),\n                             int(1000 * record_.duration),\n                             _screen_buffer(screen))\n\n    return (header.width, header.height), generator()\n\ntimed_frames(records=[AsciiCastV2Header(version=2, width=80, height=24, theme=AsciiCastV2Theme(fg='#000000', bg='#FFFFFF', palette='#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456'), idle_time_limit=None), AsciiCastV2Event(time=0, event_type='o', event_data='0\\r\\n', duration=None), AsciiCastV2Event(time=1, event_type='o', event_data='1\\r\\n', duration=None)], min_frame_dur=1, max_frame_dur=None, last_frame_dur=42)", "Selected Statement": "records = iter(records)", "Function Input": {"records": "[AsciiCastV2Header(version=2, width=80, height=24, theme=AsciiCastV2Theme(fg='#000000', bg='#FFFFFF', palette='#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456'), idle_time_limit=None), AsciiCastV2Event(time=0, event_type='o', event_data='0\\r\\n', duration=None), AsciiCastV2Event(time=1, event_type='o', event_data='1\\r\\n', duration=None)]", "min_frame_dur": "1", "max_frame_dur": "None", "last_frame_dur": "42"}, "Variable Values Before Statement": {"records": "[AsciiCastV2Header(version=2, width=80, height=24, theme=AsciiCastV2Theme(fg='#000000', bg='#FFFFFF', palette='#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456'), idle_time_limit=None), AsciiCastV2Event(time=0, event_type='o', event_data='0\\r\\n', duration=None), AsciiCastV2Event(time=1, event_type='o', event_data='1\\r\\n', duration=None)]"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"records": [[1, "[AsciiCastV2Header(version=2, width=80, height=24, theme=AsciiCastV2Theme(fg='#000000', bg='#FFFFFF', palette='#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456'), idle_time_limit=None), AsciiCastV2Event(time=0, event_type='o', event_data='0\\r\\n', duration=None), AsciiCastV2Event(time=1, event_type='o', event_data='1\\r\\n', duration=None)]"], [22.0, "REPR FAILED"]], "min_frame_dur": [[1, "1"]], "max_frame_dur": [[1, "None"]], "last_frame_dur": [[1, "42"]], "header": [[24.0, "AsciiCastV2Header(version=2, width=80, height=24, theme=AsciiCastV2Theme(fg='#000000', bg='#FFFFFF', palette='#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456:#123456'), idle_time_limit=None)"]], "generator": [[30.0, "<function timed_frames.<locals>.generator at 0x7ff5e9385dc0>"]]}, "Program Information": "Project Name: nbedos+termtosvg", "idx": 260, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __get_command_output(command, cwd=None):\n    \"\"\" Execute arbitrary commands.\n\n    Parameters\n    ----------\n    command : list\n        the command and its arguments\n\n    cwd : string\n        the directory where the command should be executed\n\n    Returns\n    -------\n    output : string\n        the raw output of the command executed\n    \"\"\"\n\n    p = subprocess.Popen(command, stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE, cwd=cwd)\n    p.wait()\n    return p.returncode, p.stdout.read(), p.stderr.read()\n\n__get_command_output(command=['git', 'rev-parse'], cwd='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/ASPP+pelita/ASPP+pelita/pelita')", "Selected Statement": "p = subprocess.Popen(command, stdout=subprocess.PIPE,", "Function Input": {"command": "['git', 'rev-parse']", "cwd": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/ASPP+pelita/ASPP+pelita/pelita'"}, "Variable Values Before Statement": {"command": "['git', 'rev-parse']"}, "Value After Statement Execution": "<Popen: returncode: None args: ['git', 'rev-parse']>", "Variable States During Runtime": {"command": [[1, "['git', 'rev-parse']"]], "cwd": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/ASPP+pelita/ASPP+pelita/pelita'"]], "p": [[18.0, "<Popen: returncode: None args: ['git', 'rev-parse']>"], [20.0, "<Popen: returncode: 0 args: ['git', 'rev-parse']>"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 261, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_layout(layout_str):\n    \"\"\"Parse a layout string\n\n    Return a dict\n        {'walls': list_of_wall_coordinates,\n         'food' : list_of_food_coordinates,\n         'bot'  : list_of_4_bot_coordinate}\n\n    A layout string is composed of wall characters '#', food characters '.', and\n    bot characters '0', '1', '2', and '3'.\n\n    Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n\n     ########\n     #0  .  #\n     #2    1#\n     #  .  3#\n     ########\n\n\n    If items are overlapping, several layout strings can be concateneted:\n     ########\n     #0  .  #\n     #     1#\n     #  .  3#\n     ########\n     ########\n     #2  .  #\n     #     1#\n     #  .  3#\n     ########\n\n     In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n    \"\"\"\n    layout_list = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # ignore emptylines\n            continue\n        if not start:\n            # start a new layout\n            # check that row is a valid opening string\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n            current_layout = [row]\n            start = True\n            continue\n        # we are in the middle of a layout, just append to the current\n        # layout unless we detect the closing string\n        current_layout.append(row)\n        if row.count('#') == len(row):\n            # this is a closing string\n            # append the layout to tha layout list\n            layout_list.append('\\n'.join(current_layout))\n            start = False\n\n    if start:\n        # the last layout has not been closed, complain here!\n        raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n\n    # initialize walls, food and bots from the first layout\n    out = parse_single_layout(layout_list.pop(0))\n    for layout in layout_list:\n        items = parse_layout(layout)\n        # walls should always be the same\n        if items['walls'] != out['walls']:\n            raise ValueError('Walls are not equal in all layouts!')\n        # add the food, removing duplicates\n        out['food'] = list(set(out['food'] + items['food']))\n        # add the bots\n        for bot_idx, bot_pos in enumerate(items['bots']):\n            if bot_pos:\n                # this bot position is not None, overwrite whatever we had before\n                out['bots'][bot_idx] = bot_pos\n\n    return out\n\nparse_layout(layout_str='\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "Selected Statement": "layout_list.append('\\n'.join(current_layout))", "Function Input": {"layout_str": "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"}, "Variable Values Before Statement": {"current_layout": "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"}, "Value After Statement Execution": "['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################']", "Variable States During Runtime": {"layout_str": [[1, "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"]], "layout_list": [[35.0, "[]"], [56.0, "['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################']"], [64.0, "[]"]], "start": [[36.0, "False"], [48.0, "True"], [57.0, "False"]], "i": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"], [37.0, "4"], [37.0, "5"], [37.0, "6"], [37.0, "7"], [37.0, "8"]], "line": [[37.0, "''"], [37.0, "'        ##################'"], [37.0, "'        #. ... .##.     3#'"], [37.0, "'        # # #  .  .### #1#'"], [37.0, "'        # # ##.   .      #'"], [37.0, "'        #      .   .## # #'"], [37.0, "'        #0# ###.  .  # # #'"], [37.0, "'        #2     .##. ... .#'"], [37.0, "'        ################## '"]], "row": [[38.0, "''"], [38.0, "'##################'"], [38.0, "'#. ... .##.     3#'"], [38.0, "'# # #  .  .### #1#'"], [38.0, "'# # ##.   .      #'"], [38.0, "'#      .   .## # #'"], [38.0, "'#0# ###.  .  # # #'"], [38.0, "'#2     .##. ... .#'"], [38.0, "'##################'"]], "current_layout": [[47.0, "['##################']"], [52.0, "['##################', '#. ... .##.     3#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "out": [[64.0, "{'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 262, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "rows.append(row)", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {"row": "'##################'"}, "Value After Statement Execution": "['##################']", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 263, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def initial_positions(walls):\n    \"\"\"Calculate initial positions.\n\n    Given the list of walls, returns the free positions that are closest to the\n    bottom left and top right corner. The algorithm starts searching from\n    (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n    for judging what is closest. On equal distances, a smaller distance in the\n    x value is preferred.\n    \"\"\"\n    width = max(walls)[0] + 1\n    height = max(walls)[1] + 1\n\n    left_start = (1, height - 2)\n    left = []\n    right_start = (width - 2, 1)\n    right = []\n\n    dist = 0\n    while len(left) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (left_start[0] + x_dist, left_start[1] - y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                left.append(pos)\n\n            if len(left) == 2:\n                break\n\n        dist += 1\n\n    dist = 0\n    while len(right) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (right_start[0] - x_dist, right_start[1] + y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                right.append(pos)\n\n            if len(right) == 2:\n                break\n\n        dist += 1\n\n    # lower indices start further away\n    left.reverse()\n    right.reverse()\n    return [left[0], right[0], left[1], right[1]]\n\ninitial_positions(walls=[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "Selected Statement": "height = max(walls)[1] + 1", "Function Input": {"walls": "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"}, "Variable Values Before Statement": {"walls": "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"walls": [[1, "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"]], "width": [[10.0, "8"]], "height": [[11.0, "4"]], "left_start": [[13.0, "(1, 2)"]], "left": [[14.0, "[]"], [32.0, "[(1, 2)]"], [32.0, "[(1, 2), (1, 1)]"], [61.0, "[(1, 1), (1, 2)]"]], "right_start": [[15.0, "(6, 1)"]], "right": [[16.0, "[]"], [53.0, "[(6, 1)]"], [53.0, "[(6, 1), (6, 2)]"], [62.0, "[(6, 2), (6, 1)]"]], "dist": [[18.0, "0"], [37.0, "1"], [37.0, "2"], [39.0, "0"], [58.0, "1"], [58.0, "2"]], "x_dist": [[21.0, "0"]], "y_dist": [[22.0, "0"], [22.0, "1"], [43.0, "0"], [43.0, "1"]], "pos": [[23.0, "(1, 2)"], [23.0, "(1, 1)"], [44.0, "(6, 1)"], [44.0, "(6, 2)"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 264, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def deep_extend(*args):\n        \"\"\"\n        Deep copy of each item (\"extend\" makes swallow copy!)\n        \"\"\"\n        def clone_obj(item):\n            if isinstance(item, dict):\n                return dict(**item)\n            if isinstance(item, (list, tuple)):\n                return list(item)\n            return None\n\n        def iterator(item, i, iterable):\n            obj = clone_obj(item)\n            if obj is None:\n                iterable[i] = item\n            else:\n                if isinstance(obj, dict):\n                    iterable[i] = deep_extend({}, obj)\n                elif isinstance(obj, (list, tuple)):\n                    FuncFlow.each(obj, iterator)\n                    iterable[i] = obj\n                else:\n                    raise TypeError(\"deep_copy cannot handle this type: {}\".format(type(obj)))\n            \n        args = list(args)\n        dest = args.pop(0)\n\n        for source in args:\n            if source:\n                for k, v in source.items():\n                    obj = clone_obj(v)\n                    if obj is None:\n                        dest[k] = v\n                    else:\n                        FuncFlow.each(obj, iterator)\n                        dest[k] = obj\n        return dest\n\ndeep_extend(args=(2,))", "Selected Statement": "args = list(args)", "Function Input": {"args": "(2,)"}, "Variable Values Before Statement": {"args": "(2,)"}, "Value After Statement Execution": "[2]", "Variable States During Runtime": {"args": [[1, "(2,)"], [25.0, "[2]"], [26.0, "[]"]], "clone_obj": [[5.0, "<function FuncFlow.deep_extend.<locals>.clone_obj at 0x7f4e6dc12d30>"]], "iterator": [[12.0, "<function FuncFlow.deep_extend.<locals>.iterator at 0x7f4e6dc12c10>"]], "dest": [[26.0, "2"]]}, "Program Information": "Project Name: danwin+fairways_py", "idx": 265, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_nested(d, path, delimiter=\"/\"):\n    \"\"\"\n    Address nested dicts via combined path\n    \"\"\"\n    def item_by_tag(d, tags):\n        # print(\">>>>>>>>>>>>>> running nested\", d, tags)\n        t = tags[-1]\n        if len(tags) == 1:\n            return d[t]\n        return item_by_tag(d[t], tags[:-1])\n\n    tags = path.split(delimiter)\n    tags.reverse()\n    # print(\">>>>>>>>>>>>>> splitted\", tags)\n    return item_by_tag(d, tags)\n\nget_nested(d={'nested': {'data': 'should be unchanged', 'event': None}}, path='nested/event', delimiter='/')", "Selected Statement": "tags = path.split(delimiter)", "Function Input": {"d": "{'nested': {'data': 'should be unchanged', 'event': None}}", "path": "'nested/event'", "delimiter": "'/'"}, "Variable Values Before Statement": {"delimiter": "'/'"}, "Value After Statement Execution": "['nested', 'event']", "Variable States During Runtime": {"d": [[1, "{'nested': {'data': 'should be unchanged', 'event': None}}"]], "path": [[1, "'nested/event'"]], "delimiter": [[1, "'/'"]], "item_by_tag": [[5.0, "<function get_nested.<locals>.item_by_tag at 0x7f4e6dc12d30>"]], "tags": [[12.0, "['nested', 'event']"], [13.0, "['event', 'nested']"]]}, "Program Information": "Project Name: danwin+fairways_py", "idx": 266, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def extend(*args):\n        args = list(args)\n        dest = args.pop(0)\n        for source in args:\n            if source:\n                dest.update(source)\n        return dest\n\nextend(args=({}, {}))", "Selected Statement": "args = list(args)", "Function Input": {"args": "({}, {})"}, "Variable Values Before Statement": {"args": "({}, {})"}, "Value After Statement Execution": "[{}, {}]", "Variable States During Runtime": {"args": [[1, "({}, {})"], [2.0, "[{}, {}]"], [3.0, "[{}]"]], "dest": [[3.0, "{}"]], "source": [[4.0, "{}"]]}, "Program Information": "Project Name: danwin+fairways_py", "idx": 267, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def digit_version(version_str: str, length: int = 4):\n    \"\"\"Convert a version string into a tuple of integers.\n\n    This method is usually used for comparing two versions. For pre-release\n    versions: alpha < beta < rc.\n\n    Args:\n        version_str (str): The version string.\n        length (int): The maximum number of version levels. Default: 4.\n\n    Returns:\n        tuple[int]: The version info in digits (integers).\n    \"\"\"\n    assert 'parrots' not in version_str\n    version = parse(version_str)\n    assert version.release, f'failed to parse version {version_str}'\n    release = list(version.release)\n    release = release[:length]\n    if len(release) < length:\n        release = release + [0] * (length - len(release))\n    if version.is_prerelease:\n        mapping = {'a': -3, 'b': -2, 'rc': -1}\n        val = -4\n        # version.pre can be None\n        if version.pre:\n            if version.pre[0] not in mapping:\n                warnings.warn(f'unknown prerelease version {version.pre[0]}, '\n                              'version checking may go wrong')\n            else:\n                val = mapping[version.pre[0]]\n            release.extend([val, version.pre[-1]])\n        else:\n            release.extend([val, 0])\n\n    elif version.is_postrelease:\n        release.extend([1, version.post])\n    else:\n        release.extend([0, 0])\n    return tuple(release)\n\ndigit_version(version_str='2.2.2+cu121', length=4)", "Selected Statement": "version = parse(version_str)", "Function Input": {"version_str": "'2.2.2+cu121'", "length": "4"}, "Variable Values Before Statement": {"version_str": "'2.2.2+cu121'"}, "Value After Statement Execution": "<Version('2.2.2+cu121')>", "Variable States During Runtime": {"version_str": [[1, "'2.2.2+cu121'"]], "length": [[1, "4"]], "version": [[15.0, "<Version('2.2.2+cu121')>"]], "release": [[17.0, "[2, 2, 2]"], [20.0, "[2, 2, 2, 0]"], [38.0, "[2, 2, 2, 0, 0, 0]"]]}, "Program Information": "Project Name: Mikubill+sd-webui-controlnet", "idx": 268, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def from_file(filepath, delimiter=\"\", blanklines=False):\n    \"\"\"Imports userdata from a file.\n\n    :type filepath: string\n\n    :param filepath  The absolute path to the file.\n\n    :type delimiter: string\n\n    :param: delimiter  Delimiter to use with the troposphere.Join().\n\n    :type blanklines: boolean\n\n    :param blanklines  If blank lines should be ignored\n\n    rtype: troposphere.Base64\n    :return The base64 representation of the file.\n    \"\"\"\n    data = []\n\n    try:\n        with open(filepath, \"r\") as f:\n            for line in f:\n                if blanklines and line.strip(\"\\n\\r \") == \"\":\n                    continue\n\n                data.append(line)\n    except IOError:\n        raise IOError(\"Error opening or reading file: {}\".format(filepath))\n\n    return Base64(Join(delimiter, data))\n\nfrom_file(filepath='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh', delimiter='', blanklines=False)", "Selected Statement": "with open(filepath, \"r\") as f:", "Function Input": {"filepath": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh'", "delimiter": "''", "blanklines": "False"}, "Variable Values Before Statement": {"filepath": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"filepath": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh'"]], "delimiter": [[1, "''"]], "blanklines": [[1, "False"]], "data": [[19.0, "[]"], [27.0, "['\\\\n\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n', '\\n']"], [27.0, "['\\\\n\\n', '\\\\\\n', '    \\n', '?\\n', '\"\"\\n', '\\n', '<>\\n']"]], "f": [[22.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/cloudtools+troposphere/cloudtools+troposphere/tests/userdata_test_scripts/char_escaping.sh' mode='r' encoding='UTF-8'>"]], "line": [[23.0, "'\\\\n\\n'"], [23.0, "'\\\\\\n'"], [23.0, "'    \\n'"], [23.0, "'?\\n'"], [23.0, "'\"\"\\n'"], [23.0, "'\\n'"], [23.0, "'<>\\n'"]]}, "Program Information": "Project Name: cloudtools+troposphere", "idx": 269, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {"args": "['a', 'b', '--']"}, "Value After Statement Execution": "2", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 270, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def prepare_docstring_help(N):\n    \"\"\"Replace docstrings to include the parameters (schema)\"\"\"\n    # at this point, the params have not yet been populated\n\n    args = []\n    if hasattr(N, '__annotations__'):\n        for attr_name, cls in N.__annotations__.items():\n\n            filtered = filter_params(N)\n            parsed = parse_source_for_params(filtered)\n            attr = attr_map(parsed).get(attr_name)\n            if attr is None:\n                continue\n\n            args.append(argument_help(attr_name, attr))\n\n    return '\\n'.join(args)\n\nprepare_docstring_help(N={})", "Selected Statement": "parsed = parse_source_for_params(filtered)", "Function Input": {"N": "{}"}, "Variable Values Before Statement": {"filtered": "['            bar: int = 0\\n']"}, "Value After Statement Execution": "OrderedDict([('bar: int', '0')])", "Variable States During Runtime": {"N": [[1, "{}"]], "args": [[5.0, "[]"], [15.0, "['    --bar (int):  (Default is 0)']"]], "attr_name": [[7.0, "'bar'"]], "cls": [[7.0, "<class 'int'>"]], "filtered": [[9.0, "['            bar: int = 0\\n']"]], "parsed": [[10.0, "OrderedDict([('bar: int', '0')])"]], "attr": [[11.0, "{'type': 'int', 'default': '0', 'description': ''}"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 271, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def filter_params(N):\n    \"\"\"Filter source lines of the class\n    Returns:\n        fields as source lines\n    \"\"\"\n    filtered_source = []\n    for line in inspect.getsourcelines(N.__class__)[0][1:]:\n        # When parsing, post_init would bleed into the attributes without this hack\n        if line.strip().startswith('def '):\n            break\n        filtered_source.append(line)\n    return filtered_source\n\nfilter_params(N={})", "Selected Statement": "filtered_source.append(line)", "Function Input": {"N": "{}"}, "Variable Values Before Statement": {"line": "'            bar: int = 0\\n'"}, "Value After Statement Execution": "['            bar: int", "Variable States During Runtime": {"N": [[1, "{}"]], "filtered_source": [[6.0, "[]"], [11.0, "['            bar: int = 0\\n']"]], "line": [[7.0, "'            bar: int = 0\\n'"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 272, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _ParseFn(args):\n    \"\"\"Parses the list of `args` into (varargs, kwargs), remaining_args.\"\"\"\n    kwargs, remaining_kwargs, remaining_args = _ParseKeywordArgs(\n        args, all_args, fn_spec.varkw)\n\n    # Note: _ParseArgs modifies kwargs.\n    parsed_args, kwargs, remaining_args, capacity = _ParseArgs(\n        fn_spec.args, fn_spec.defaults, num_required_args, kwargs,\n        remaining_args, metadata)\n\n    if fn_spec.varargs or fn_spec.varkw:\n      # If we're allowed *varargs or **kwargs, there's always capacity.\n      capacity = True\n\n    extra_kw = set(kwargs) - set(fn_spec.kwonlyargs)\n    if fn_spec.varkw is None and extra_kw:\n      raise FireError('Unexpected kwargs present:', extra_kw)\n\n    missing_kwonly = set(required_kwonly) - set(kwargs)\n    if missing_kwonly:\n      raise FireError('Missing required flags:', missing_kwonly)\n\n    # If we accept *varargs, then use all remaining arguments for *varargs.\n    if fn_spec.varargs is not None:\n      varargs, remaining_args = remaining_args, []\n    else:\n      varargs = []\n\n    for index, value in enumerate(varargs):\n      varargs[index] = _ParseValue(value, None, None, metadata)\n\n    varargs = parsed_args + varargs\n    remaining_args += remaining_kwargs\n\n    consumed_args = args[:len(args) - len(remaining_args)]\n    return (varargs, kwargs), consumed_args, remaining_args, capacity\n\n_ParseFn(args=['x'], all_args=[], fn_spec={args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}, metadata={'ACCEPTS_POSITIONAL_ARGS': False}, num_required_args=0, required_kwonly=set())", "Selected Statement": "consumed_args = args[:len(args) - len(remaining_args)]", "Function Input": {"args": "['x']", "all_args": "[]", "fn_spec": "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}", "metadata": "{'ACCEPTS_POSITIONAL_ARGS': False}", "num_required_args": "0", "required_kwonly": "set()"}, "Variable Values Before Statement": {"args": "['x']"}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"args": [[1, "['x']"]], "all_args": [[1, "[]"]], "fn_spec": [[1, "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}"]], "metadata": [[1, "{'ACCEPTS_POSITIONAL_ARGS': False}"]], "num_required_args": [[1, "0"]], "required_kwonly": [[1, "set()"]], "kwargs": [[3.0, "{}"]], "remaining_kwargs": [[3.0, "[]"]], "remaining_args": [[3.0, "['x']"]], "parsed_args": [[7.0, "[]"]], "capacity": [[7.0, "False"], [13.0, "True"]], "extra_kw": [[15.0, "set()"]], "missing_kwonly": [[19.0, "set()"]], "varargs": [[27.0, "[]"]], "consumed_args": [[35.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 273, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def config_dict(configuration_tuple):\n    config_dict = {}\n\n    config_file = configuration_tuple._asdict().get('CFG')\n    if config_file is None:\n        config_file = configfile.get_config_path(configuration_tuple)\n\n    if config_file is not None:\n        config_dict = utils.filter_fields(configfile.read_config(config_file), configuration_tuple)\n        config_dict = utils.type_correct_with(config_dict, configuration_tuple)\n\n    return config_dict\n\nconfig_dict(configuration_tuple={})", "Selected Statement": "config_dict = utils.type_correct_with(config_dict, configuration_tuple)", "Function Input": {"configuration_tuple": "{}"}, "Variable Values Before Statement": {"config_dict": "{'bar': '42'}", "configuration_tuple": "{}"}, "Value After Statement Execution": "{'bar': 42}", "Variable States During Runtime": {"configuration_tuple": [[1, "{}"]], "config_dict": [[2.0, "{}"], [9.0, "{'bar': '42'}"], [10.0, "{'bar': 42}"]], "config_file": [[4.0, "None"], [6.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/d3rp+clima/d3rp+clima/foo.cfg')"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 274, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def type_correct_with(cdict, cfg_tuple):\n    \"\"\"Use type hints of the cfg tuple to cast parameters i.e. attributes into their intended types\"\"\"\n    # TODO: This would be cleaner, if the config would use Schema or derivative in the\n    # first place and use its validation process\n    res = {}\n    for k, v in cdict.items():\n        typename = getattr(cfg_tuple, k)\n        res.update({k: type(typename)(v)})\n    return res\n\ntype_correct_with(cdict={'bar': '42'}, cfg_tuple={})", "Selected Statement": "res.update({k: type(typename)(v)})", "Function Input": {"cdict": "{'bar': '42'}", "cfg_tuple": "{}"}, "Variable Values Before Statement": {"typename": "0"}, "Value After Statement Execution": "{'bar': 42}", "Variable States During Runtime": {"cdict": [[1, "{'bar': '42'}"]], "cfg_tuple": [[1, "{}"]], "res": [[5.0, "{}"], [8.0, "{'bar': 42}"]], "k": [[6.0, "'bar'"]], "v": [[6.0, "'42'"]], "typename": [[7.0, "0"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 275, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def is_eq(value, rep=None):\n    if rep is None:\n        rep = repr(value)\n\n    def is_valid(data, explain=False):\n        if not explain:\n            return data == value\n        return (\n            True, 'data is equal to {}'.format(rep)\n        ) if data == value else (\n            False, 'data is not equal to {}'.format(rep)\n        )\n    return is_valid\n\nis_eq(value=0, rep=None)", "Selected Statement": "rep = repr(value)", "Function Input": {"value": "0", "rep": "None"}, "Variable Values Before Statement": {"value": "0"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"value": [[1, "0"]], "rep": [[1, "None"], [3.0, "'0'"]], "is_valid": [[5.0, "<function is_eq.<locals>.is_valid at 0x7fde77983310>"]]}, "Program Information": "Project Name: daanvdk+is_valid", "idx": 276, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def is_geq(value, rep=None):\n    if rep is None:\n        rep = repr(value)\n\n    def is_valid(data, explain=False):\n        if not explain:\n            return data >= value\n        return (\n            True, 'data is greater than or equal to {}'.format(rep)\n        ) if data >= value else (\n            False, 'data is not greater than or equal to {}'.format(rep)\n        )\n    return is_valid\n\nis_geq(value=0, rep=None)", "Selected Statement": "rep = repr(value)", "Function Input": {"value": "0", "rep": "None"}, "Variable Values Before Statement": {"value": "0"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"value": [[1, "0"]], "rep": [[1, "None"], [3.0, "'0'"]], "is_valid": [[5.0, "<function is_geq.<locals>.is_valid at 0x7fde765b6b80>"]]}, "Program Information": "Project Name: daanvdk+is_valid", "idx": 277, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def is_lt(value, rep=None):\n    if rep is None:\n        rep = repr(value)\n\n    def is_valid(data, explain=False):\n        if not explain:\n            return data < value\n        return (\n            True, 'data is lower than {}'.format(rep)\n        ) if data < value else (\n            False, 'data is not lower than {}'.format(rep)\n        )\n    return is_valid\n\nis_lt(value=0, rep=None)", "Selected Statement": "rep = repr(value)", "Function Input": {"value": "0", "rep": "None"}, "Variable Values Before Statement": {"value": "0"}, "Value After Statement Execution": "'0'", "Variable States During Runtime": {"value": [[1, "0"]], "rep": [[1, "None"], [3.0, "'0'"]], "is_valid": [[5.0, "<function is_lt.<locals>.is_valid at 0x7fde765b6040>"]]}, "Program Information": "Project Name: daanvdk+is_valid", "idx": 278, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def make_repo(path=None):\n    if not path:\n        path = \".\"\n    repo = git.Repo.init(path)\n    repo.config_writer().set_value(\"user\", \"name\", \"Test User\").release()\n    repo.config_writer().set_value(\"user\", \"email\", \"testuser@example.com\").release()\n\n    return repo\n\nmake_repo(path='/tmp/tmpbbwa2p3f')", "Selected Statement": "repo = git.Repo.init(path)", "Function Input": {"path": "'/tmp/tmpbbwa2p3f'"}, "Variable Values Before Statement": {"path": "'/tmp/tmpbbwa2p3f'"}, "Value After Statement Execution": "<git.repo.base.Repo '/tmp/tmpbbwa2p3f/.git'>", "Variable States During Runtime": {"path": [[1, "'/tmp/tmpbbwa2p3f'"]], "repo": [[4.0, "<git.repo.base.Repo '/tmp/tmpbbwa2p3f/.git'>"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 279, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def safe_abs_path(res):\n    \"Gives an abs path, which safely returns a full (not 8.3) windows path\"\n    res = Path(res).resolve()\n    return str(res)\n\nsafe_abs_path(res='/tmp/tmpbbwa2p3f')", "Selected Statement": "res = Path(res).resolve()", "Function Input": {"res": "'/tmp/tmpbbwa2p3f'"}, "Variable Values Before Statement": {"res": "'/tmp/tmpbbwa2p3f'"}, "Value After Statement Execution": "PosixPath('/tmp/tmpbbwa2p3f')", "Variable States During Runtime": {"res": [[1, "'/tmp/tmpbbwa2p3f'"], [3.0, "PosixPath('/tmp/tmpbbwa2p3f')"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 280, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def is_image_file(file_name):\n    \"\"\"\n    Check if the given file name has an image file extension.\n    \n    :param file_name: The name of the file to check.\n    :return: True if the file is an image, False otherwise.\n    \"\"\"\n    file_name = str(file_name)  # Convert file_name to string\n    return any(file_name.endswith(ext) for ext in IMAGE_EXTENSIONS)\n\nis_image_file(file_name=PosixPath('/tmp/tmpcr1f5en7/.gitignore'))", "Selected Statement": "file_name = str(file_name)  # Convert file_name to string", "Function Input": {"file_name": "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"}, "Variable Values Before Statement": {"file_name": "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"}, "Value After Statement Execution": "'/tmp/tmpcr1f5en7/.gitignore'", "Variable States During Runtime": {"file_name": [[1, "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"], [8.0, "'/tmp/tmpcr1f5en7/.gitignore'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 281, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def find_original_update_blocks(content, fence=DEFAULT_FENCE):\n    # make sure we end with a newline, otherwise the regex will miss <<UPD on the last line\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    pieces = re.split(split_re, content)\n\n    pieces.reverse()\n    processed = []\n\n    # Keep using the same filename in cases where GPT produces an edit block\n    # without a filename.\n    current_filename = None\n    try:\n        while pieces:\n            cur = pieces.pop()\n\n            if cur in (DIVIDER, UPDATED):\n                processed.append(cur)\n                raise ValueError(f\"Unexpected {cur}\")\n\n            if cur.strip() != HEAD:\n                processed.append(cur)\n                continue\n\n            processed.append(cur)  # original_marker\n\n            filename = strip_filename(processed[-2].splitlines()[-1], fence)\n            try:\n                if not filename:\n                    filename = strip_filename(processed[-2].splitlines()[-2], fence)\n                if not filename:\n                    if current_filename:\n                        filename = current_filename\n                    else:\n                        raise ValueError(missing_filename_err)\n            except IndexError:\n                if current_filename:\n                    filename = current_filename\n                else:\n                    raise ValueError(missing_filename_err)\n\n            current_filename = filename\n\n            original_text = pieces.pop()\n            processed.append(original_text)\n\n            divider_marker = pieces.pop()\n            processed.append(divider_marker)\n            if divider_marker.strip() != DIVIDER:\n                raise ValueError(f\"Expected `{DIVIDER}` not {divider_marker.strip()}\")\n\n            updated_text = pieces.pop()\n            processed.append(updated_text)\n\n            updated_marker = pieces.pop()\n            processed.append(updated_marker)\n            if updated_marker.strip() != UPDATED:\n                raise ValueError(f\"Expected `{UPDATED}` not `{updated_marker.strip()}\")\n\n            yield filename, original_text, updated_text\n    except ValueError as e:\n        processed = \"\".join(processed)\n        err = e.args[0]\n        raise ValueError(f\"{processed}\\n^^^ {err}\")\n    except IndexError:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Incomplete SEARCH/REPLACE block.\")\n    except Exception:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Error parsing SEARCH/REPLACE block.\")\n\nfind_original_update_blocks(content='ok', fence=('<source>', '</source>'))", "Selected Statement": "processed.append(cur)", "Function Input": {"content": "'ok'", "fence": "('<source>', '</source>')"}, "Variable Values Before Statement": {"cur": "'ok\\n'"}, "Value After Statement Execution": "['ok\\n']", "Variable States During Runtime": {"content": [[1, "'ok'"], [4.0, "'ok\\n'"]], "fence": [[1, "('<source>', '</source>')"]], "pieces": [[6.0, "['ok\\n']"], [16.0, "[]"]], "processed": [[9.0, "[]"], [23.0, "['ok\\n']"]], "current_filename": [[13.0, "None"]], "cur": [[16.0, "'ok\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 282, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def do_replace(fname, content, before_text, after_text, fence=None):\n    before_text = strip_quoted_wrapping(before_text, fname, fence)\n    after_text = strip_quoted_wrapping(after_text, fname, fence)\n    fname = Path(fname)\n\n    # does it want to make a new file?\n    if not fname.exists() and not before_text.strip():\n        fname.touch()\n        content = \"\"\n\n    if content is None:\n        return\n\n    if not before_text.strip():\n        # append to existing file, or start a new file\n        new_content = content + after_text\n    else:\n        new_content = replace_most_similar_chunk(content, before_text, after_text)\n\n    return new_content\n\ndo_replace(fname='/tmp/tmp7g7a2csg/file.txt', content='two\\n', before_text='two\\n', after_text='three\\n', fence=('```', '```'))", "Selected Statement": "new_content = replace_most_similar_chunk(content, before_text, after_text)", "Function Input": {"fname": "'/tmp/tmp7g7a2csg/file.txt'", "content": "'two\\n'", "before_text": "'two\\n'", "after_text": "'three\\n'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"content": "'two\\n'", "before_text": "'two\\n'", "after_text": "'three\\n'"}, "Value After Statement Execution": "'three\\n'", "Variable States During Runtime": {"fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"], [4.0, "PosixPath('/tmp/tmp7g7a2csg/file.txt')"]], "content": [[1, "'two\\n'"]], "before_text": [[1, "'two\\n'"]], "after_text": [[1, "'three\\n'"]], "fence": [[1, "('```', '```')"]], "new_content": [[18.0, "'three\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 283, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):\n    \"\"\"\n    Given an input string which may have extra \"wrapping\" around it, remove the wrapping.\n    For example:\n\n    filename.ext\n    ```\n    We just want this content\n    Not the filename and triple quotes\n    ```\n    \"\"\"\n    if not res:\n        return res\n\n    res = res.splitlines()\n\n    if fname and res[0].strip().endswith(Path(fname).name):\n        res = res[1:]\n\n    if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):\n        res = res[1:-1]\n\n    res = \"\\n\".join(res)\n    if res and res[-1] != \"\\n\":\n        res += \"\\n\"\n\n    return res\n\nstrip_quoted_wrapping(res='two\\n', fname='/tmp/tmp7g7a2csg/file.txt', fence=('```', '```'))", "Selected Statement": "res = \"\\n\".join(res)", "Function Input": {"res": "'two\\n'", "fname": "'/tmp/tmp7g7a2csg/file.txt'", "fence": "('```', '```')"}, "Variable Values Before Statement": {"res": "['two']"}, "Value After Statement Execution": "'two'", "Variable States During Runtime": {"res": [[1, "'two\\n'"], [15.0, "['two']"], [23.0, "'two'"], [25.0, "'two\\n'"]], "fname": [[1, "'/tmp/tmp7g7a2csg/file.txt'"]], "fence": [[1, "('```', '```')"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 284, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def replace_most_similar_chunk(whole, part, replace):\n    \"\"\"Best efforts to find the `part` lines in `whole` and replace them with `replace`\"\"\"\n\n    whole, whole_lines = prep(whole)\n    part, part_lines = prep(part)\n    replace, replace_lines = prep(replace)\n\n    res = perfect_or_whitespace(whole_lines, part_lines, replace_lines)\n    if res:\n        return res\n\n    # drop leading empty line, GPT sometimes adds them spuriously (issue #25)\n    if len(part_lines) > 2 and not part_lines[0].strip():\n        skip_blank_line_part_lines = part_lines[1:]\n        res = perfect_or_whitespace(whole_lines, skip_blank_line_part_lines, replace_lines)\n        if res:\n            return res\n\n    # Try to handle when it elides code with ...\n    try:\n        res = try_dotdotdots(whole, part, replace)\n        if res:\n            return res\n    except ValueError:\n        pass\n\n    return\n    # Try fuzzy matching\n    res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)\n    if res:\n        return res\n\nreplace_most_similar_chunk(whole='two\\n', part='two\\n', replace='three\\n')", "Selected Statement": "replace, replace_lines = prep(replace)", "Function Input": {"whole": "'two\\n'", "part": "'two\\n'", "replace": "'three\\n'"}, "Variable Values Before Statement": {"replace": "'three\\n'"}, "Value After Statement Execution": "['three\\n']", "Variable States During Runtime": {"whole": [[1, "'two\\n'"]], "part": [[1, "'two\\n'"]], "replace": [[1, "'three\\n'"]], "whole_lines": [[4.0, "['two\\n']"]], "part_lines": [[5.0, "['two\\n']"]], "replace_lines": [[6.0, "['three\\n']"]], "res": [[8.0, "'three\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 285, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def perfect_or_whitespace(whole_lines, part_lines, replace_lines):\n    # Try for a perfect match\n    res = perfect_replace(whole_lines, part_lines, replace_lines)\n    if res:\n        return res\n\n    # Try being flexible about leading whitespace\n    res = replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines)\n    if res:\n        return res\n\nperfect_or_whitespace(whole_lines=['two\\n'], part_lines=['two\\n'], replace_lines=['three\\n'])", "Selected Statement": "res = perfect_replace(whole_lines, part_lines, replace_lines)", "Function Input": {"whole_lines": "['two\\n']", "part_lines": "['two\\n']", "replace_lines": "['three\\n']"}, "Variable Values Before Statement": {"whole_lines": "['two\\n']", "part_lines": "['two\\n']", "replace_lines": "['three\\n']"}, "Value After Statement Execution": "'three\\n'", "Variable States During Runtime": {"whole_lines": [[1, "['two\\n']"]], "part_lines": [[1, "['two\\n']"]], "replace_lines": [[1, "['three\\n']"]], "res": [[3.0, "'three\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 286, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def perfect_replace(whole_lines, part_lines, replace_lines):\n    part_tup = tuple(part_lines)\n    part_len = len(part_lines)\n\n    for i in range(len(whole_lines) - part_len + 1):\n        whole_tup = tuple(whole_lines[i : i + part_len])\n        if part_tup == whole_tup:\n            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]\n            return \"\".join(res)\n\nperfect_replace(whole_lines=['two\\n'], part_lines=['two\\n'], replace_lines=['three\\n'])", "Selected Statement": "part_tup = tuple(part_lines)", "Function Input": {"whole_lines": "['two\\n']", "part_lines": "['two\\n']", "replace_lines": "['three\\n']"}, "Variable Values Before Statement": {"part_lines": "['two\\n']"}, "Value After Statement Execution": "('two\\n',)", "Variable States During Runtime": {"whole_lines": [[1, "['two\\n']"]], "part_lines": [[1, "['two\\n']"]], "replace_lines": [[1, "['three\\n']"]], "part_tup": [[2.0, "('two\\n',)"]], "part_len": [[3.0, "1"]], "i": [[5.0, "0"]], "whole_tup": [[6.0, "('two\\n',)"]], "res": [[8.0, "['three\\n']"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 287, "quantized value": "Non-Empty tuple", "mapping_info": {"len(value) == 0": "Empty tuple", "len(value) > 0": "Non-Empty tuple"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parse_quoted_filenames(args):\n    filenames = re.findall(r\"\\\"(.+?)\\\"|(\\S+)\", args)\n    filenames = [name for sublist in filenames for name in sublist if name]\n    return filenames\n\nparse_quoted_filenames(args='foo.txt bar.txt')", "Selected Statement": "filenames = re.findall(r\"\\\"(.+?)\\\"|(\\S+)\", args)", "Function Input": {"args": "'foo.txt bar.txt'"}, "Variable Values Before Statement": {"args": "'foo.txt bar.txt'"}, "Value After Statement Execution": "[('', 'foo.txt'), ('', 'bar.txt')]", "Variable States During Runtime": {"args": [[1, "'foo.txt bar.txt'"]], "filenames": [[2.0, "[('', 'foo.txt'), ('', 'bar.txt')]"], [3.0, "['foo.txt', 'bar.txt']"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 288, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def match_but_for_leading_whitespace(whole_lines, part_lines):\n    num = len(whole_lines)\n\n    # does the non-whitespace all agree?\n    if not all(whole_lines[i].lstrip() == part_lines[i].lstrip() for i in range(num)):\n        return\n\n    # are they all offset the same?\n    add = set(\n        whole_lines[i][: len(whole_lines[i]) - len(part_lines[i])]\n        for i in range(num)\n        if whole_lines[i].strip()\n    )\n\n    if len(add) != 1:\n        return\n\n    return add.pop()\n\nmatch_but_for_leading_whitespace(whole_lines=['    line1\\n', '    line2\\n'], part_lines=['line1\\n', 'line2\\n'])", "Selected Statement": "num = len(whole_lines)", "Function Input": {"whole_lines": "['    line1\\n', '    line2\\n']", "part_lines": "['line1\\n', 'line2\\n']"}, "Variable Values Before Statement": {"whole_lines": "['    line1\\n', '    line2\\n']"}, "Value After Statement Execution": "2", "Variable States During Runtime": {"whole_lines": [[1, "['    line1\\n', '    line2\\n']"]], "part_lines": [[1, "['line1\\n', 'line2\\n']"]], "num": [[2.0, "2"]], "add": [[9.0, "{'    '}"], [18.0, "set()"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 289, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def check_gitignore(git_root, io, ask=True):\n    if not git_root:\n        return\n\n    try:\n        repo = git.Repo(git_root)\n        if repo.ignored(\".aider\"):\n            return\n    except git.exc.InvalidGitRepositoryError:\n        pass\n\n    pat = \".aider*\"\n\n    gitignore_file = Path(git_root) / \".gitignore\"\n    if gitignore_file.exists():\n        content = io.read_text(gitignore_file)\n        if content is None:\n            return\n        if pat in content.splitlines():\n            return\n    else:\n        content = \"\"\n\n    if ask and not io.confirm_ask(f\"Add {pat} to .gitignore (recommended)?\"):\n        return\n\n    if content and not content.endswith(\"\\n\"):\n        content += \"\\n\"\n    content += pat + \"\\n\"\n    io.write_text(gitignore_file, content)\n\n    io.tool_output(f\"Added {pat} to .gitignore\")\n\ncheck_gitignore(git_root=PosixPath('/tmp/tmpcr1f5en7'), io={user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}, ask=True)", "Selected Statement": "gitignore_file = Path(git_root) / \".gitignore\"", "Function Input": {"git_root": "PosixPath('/tmp/tmpcr1f5en7')", "io": "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}", "ask": "True"}, "Variable Values Before Statement": {"git_root": "PosixPath('/tmp/tmpcr1f5en7')"}, "Value After Statement Execution": "PosixPath('/tmp/tmpcr1f5en7/.gitignore')", "Variable States During Runtime": {"git_root": [[1, "PosixPath('/tmp/tmpcr1f5en7')"]], "io": [[1, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}"], [24.0, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>, num_user_asks=1}"]], "ask": [[1, "True"]], "repo": [[6.0, "<git.repo.base.Repo '/tmp/tmpcr1f5en7/.git'>"]], "pat": [[12.0, "'.aider*'"]], "gitignore_file": [[14.0, "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"]], "content": [[22.0, "''"], [29.0, "'.aider*\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 290, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def find_diffs(content):\n    # We can always fence with triple-quotes, because all the udiff content\n    # is prefixed with +/-/space.\n\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    lines = content.splitlines(keepends=True)\n    line_num = 0\n    edits = []\n    while line_num < len(lines):\n        while line_num < len(lines):\n            line = lines[line_num]\n            if line.startswith(\"```diff\"):\n                line_num, these_edits = process_fenced_block(lines, line_num + 1)\n                edits += these_edits\n                break\n            line_num += 1\n\n    # For now, just take 1!\n    # edits = edits[:1]\n\n    return edits\n\nfind_diffs(content='\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n')", "Selected Statement": "line_num, these_edits = process_fenced_block(lines, line_num + 1)", "Function Input": {"content": "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"}, "Variable Values Before Statement": {"lines": "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"}, "Value After Statement Execution": "[('file.txt', ['-Original\\n', '+Modified\\n'])]", "Variable States During Runtime": {"content": [[1, "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"]], "lines": [[8.0, "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"]], "line_num": [[9.0, "0"], [18.0, "1"], [18.0, "2"], [18.0, "3"], [15.0, "10"]], "edits": [[10.0, "[]"], [16.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]], "line": [[13.0, "'\\n'"], [13.0, "'Some text...\\n'"], [13.0, "'\\n'"], [13.0, "'```diff\\n'"]], "these_edits": [[15.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 291, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_decorated_processors(partial_val):\n    class ExampleSchema(Schema):\n        \"\"\"Includes different ways to invoke decorators and set up methods\"\"\"\n\n        TAG = \"TAG\"\n\n        value = fields.Integer(as_string=True)\n\n        # Implicit default raw, pre dump, static method.\n        @pre_dump\n        def increment_value(self, item, **kwargs):\n            assert \"many\" in kwargs\n            item[\"value\"] += 1\n            return item\n\n        # Implicit default raw, post dump, class method.\n        @post_dump\n        def add_tag(self, item, **kwargs):\n            assert \"many\" in kwargs\n            item[\"value\"] = self.TAG + item[\"value\"]\n            return item\n\n        # Explicitly raw, post dump, instance method.\n        @post_dump(pass_many=True)\n        def add_envelope(self, data, many, **kwargs):\n            key = self.get_envelope_key(many)\n            return {key: data}\n\n        # Explicitly raw, pre load, instance method.\n        @pre_load(pass_many=True)\n        def remove_envelope(self, data, many, partial, **kwargs):\n            assert partial is partial_val\n            key = self.get_envelope_key(many)\n            return data[key]\n\n        @staticmethod\n        def get_envelope_key(many):\n            return \"data\" if many else \"datum\"\n\n        # Explicitly not raw, pre load, instance method.\n        @pre_load(pass_many=False)\n        def remove_tag(self, item, partial, **kwargs):\n            assert partial is partial_val\n            assert \"many\" in kwargs\n            item[\"value\"] = item[\"value\"][len(self.TAG) :]\n            return item\n\n        # Explicit default raw, post load, instance method.\n        @post_load()\n        def decrement_value(self, item, partial, **kwargs):\n            assert partial is partial_val\n            assert \"many\" in kwargs\n            item[\"value\"] -= 1\n            return item\n\n    schema = ExampleSchema(partial=partial_val)\n\n    # Need to re-create these because the processors will modify in place.\n    make_item = lambda: {\"value\": 3}\n    make_items = lambda: [make_item(), {\"value\": 5}]\n\n    item_dumped = schema.dump(make_item())\n    assert item_dumped == {\"datum\": {\"value\": \"TAG4\"}}\n    item_loaded = schema.load(item_dumped)\n    assert item_loaded == make_item()\n\n    items_dumped = schema.dump(make_items(), many=True)\n    assert items_dumped == {\"data\": [{\"value\": \"TAG4\"}, {\"value\": \"TAG6\"}]}\n    items_loaded = schema.load(items_dumped, many=True)\n    assert items_loaded == make_items()\n\ntest_decorated_processors(partial_val=True)", "Selected Statement": "items_loaded = schema.load(items_dumped, many=True)", "Function Input": {"partial_val": "True"}, "Variable Values Before Statement": {"items_dumped": "{'data': [{'value': 'TAG4'}, {'value': 'TAG6'}]}"}, "Value After Statement Execution": "[{'value': 3}, {'value': 5}]", "Variable States During Runtime": {"partial_val": [[1, "True"]], "ExampleSchema": [[2.0, "<class 'tests.test_decorators.test_decorated_processors.<locals>.ExampleSchema'>"]], "schema": [[56.0, "<ExampleSchema(many=False)>"]], "make_item": [[59.0, "<function test_decorated_processors.<locals>.<lambda> at 0x7f27f9f7d310>"]], "make_items": [[60.0, "<function test_decorated_processors.<locals>.<lambda> at 0x7f27f9158550>"]], "item_dumped": [[62.0, "{'datum': {'value': 'TAG4'}}"], [64.0, "{'datum': {'value': '4'}}"]], "@py_assert2": [[63.0, "None"]], "@py_assert1": [[63.0, "None"]], "item_loaded": [[64.0, "{'value': 3}"]], "@py_assert3": [[65.0, "None"]], "items_dumped": [[67.0, "{'data': [{'value': 'TAG4'}, {'value': 'TAG6'}]}"], [69.0, "{'data': [{'value': '4'}, {'value': '6'}]}"]], "items_loaded": [[69.0, "[{'value': 3}, {'value': 5}]"]]}, "Program Information": "Project Name: marshmallow-code+marshmallow", "idx": 292, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _addpoint(sol, i, distances, prec):\n    \"\"\"\n    Try to add point i to a given solution-approach.\n\n    gives all possibilties and a status about the solution:\n        state = 0: possibilities found\n        state = 1: no possibilities but no contradiction\n        state = 2: solution-approach has a contradiction with point i\n    \"\"\"\n    res = []\n\n    # if i is already part of the solution return it\n    if np.ndim(sol[i]) != 0:\n        return [sol], 0\n\n    # collect the points already present in the solution\n    solpnts = []\n    for n, m in enumerate(sol):\n        if np.ndim(m) != 0:\n            solpnts.append(n)\n\n    # number of present points\n    pntscount = len(solpnts)\n\n    # try to add the point in all possible constellations\n    for n in range(pntscount - 1):\n        for m in range(n + 1, pntscount):\n            tmppnt, state = _pntcoord(\n                sol, i, solpnts[n], solpnts[m], distances, prec\n            )\n\n            # if possiblities are found, add them (at most 2! (think about))\n            if state == 0:\n                for pnt in tmppnt:\n                    res.append(dcopy(sol))\n                    res[-1][i] = pnt\n\n            # if one possiblity or a contradiction is found, return the result\n            if state != 1:\n                return res, state\n\n    # if the state remaind 1, return empty result and no contradiction\n    return res, state\n\n_addpoint(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "for m in range(n + 1, pntscount):", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"pntscount": "2"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "res": [[10.0, "[]"], [35.0, "[[array([0., 0.]), array([3., 0.]), 0, 0]]"], [36.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0]]"], [35.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), 0, 0]]"], [36.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0]]"]], "solpnts": [[17.0, "[]"], [20.0, "[0]"], [20.0, "[0, 1]"]], "n": [[18.0, "0"], [18.0, "1"], [18.0, "2"], [18.0, "3"], [26.0, "0"]], "m": [[18.0, "array([0., 0.])"], [18.0, "array([3., 0.])"], [18.0, "0"], [27.0, "1"]], "pntscount": [[23.0, "2"]], "tmppnt": [[28.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[28.0, "0"]], "pnt": [[34.0, "array([3.5       , 1.93649167])"], [34.0, "array([ 3.5       , -1.93649167])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 293, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _pntcoord(sol, i, n, m, distances, prec):\n    \"\"\"\n    Generate coordinates for point i in constellation to points m and n.\n\n    Check if these coordinates are valid with all other points in the solution.\n    \"\"\"\n    tmppnt = []\n\n    state = 1\n\n    pntscount = len(sol)\n\n    # if no distances known, return empty result and the unknown-state\n    if distances[i, n] < -0.5 or distances[i, m] < -0.5:\n        return tmppnt, state\n\n    # if the Triangle inequality is not fullfilled give a contradiction\n    if distances[i, n] + distances[i, m] < _dist(sol[n], sol[m]):\n        state = 2\n        return tmppnt, state\n\n    # generate the affine rotation to bring the points in the right place\n    g = _affinef(*_invtranmat(*_tranmat(sol[n], sol[m])))\n\n    # generate the coordinates\n    x = _xvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n    y1, y2 = _yvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n\n    # generate the possible positons\n    pos1 = g(np.array([x, y1]))\n    pos2 = g(np.array([x, y2]))\n\n    valid1 = True\n    valid2 = True\n\n    # check if the possible positions are valid\n    for k in range(pntscount):\n        if np.ndim(sol[k]) != 0 and distances[i, k] > -0.5:\n            valid1 &= abs(_dist(sol[k], pos1) - distances[i, k]) < prec\n            valid2 &= abs(_dist(sol[k], pos2) - distances[i, k]) < prec\n\n    # if any position is valid, add it to the result\n    if valid1 or valid2:\n        state = 0\n        same = abs(y1 - y2) < prec / 4.0\n        if valid1:\n            tmppnt.append(dcopy(pos1))\n        if valid2 and not same:\n            tmppnt.append(dcopy(pos2))\n    # if the positions are not valid, give a contradiction\n    else:\n        state = 2\n\n    return tmppnt, state\n\n_pntcoord(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, n=0, m=1, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "tmppnt.append(dcopy(pos2))", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "n": "0", "m": "1", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"pos2": "array([ 3.5       , -1.93649167])"}, "Value After Statement Execution": "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "n": [[1, "0"]], "m": [[1, "1"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "tmppnt": [[7.0, "[]"], [47.0, "[array([3.5       , 1.93649167])]"], [49.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[9.0, "1"], [44.0, "0"]], "pntscount": [[11.0, "4"]], "g": [[23.0, "<function _affinef.<locals>.func at 0x7f9d2f5dc9d0>"]], "x": [[26.0, "3.5"]], "y1": [[27.0, "1.9364916731037083"]], "y2": [[27.0, "-1.9364916731037083"]], "pos1": [[30.0, "array([3.5       , 1.93649167])"]], "pos2": [[31.0, "array([ 3.5       , -1.93649167])"]], "valid1": [[33.0, "True"]], "valid2": [[34.0, "True"]], "k": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"]], "same": [[45.0, "False"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 294, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _tranmat(a, b):\n    \"\"\"\n    Get the coefficents for the affine-linear function f(x)=Ax+s.\n\n    Which fullfills that A is a rotation-matrix,\n    f(a) = [0,0] and f(b) = [|b-a|,0].\n    \"\"\"\n    A = np.zeros((2, 2))\n    A[0, 0] = b[0] - a[0]\n    A[1, 1] = b[0] - a[0]\n    A[1, 0] = -(b[1] - a[1])\n    A[0, 1] = +(b[1] - a[1])\n    A /= _dist(a, b)\n    s = -np.dot(A, a)\n    return A, s\n\n_tranmat(a=array([0., 0.]), b=array([3., 0.]))", "Selected Statement": "s = -np.dot(A, a)", "Function Input": {"a": "array([0., 0.])", "b": "array([3., 0.])"}, "Variable Values Before Statement": {"A": "array([[ 1.,  0.],       [-0.,  1.]])", "a": "array([0., 0.])"}, "Value After Statement Execution": "array([-0., -0.])", "Variable States During Runtime": {"a": [[1, "array([0., 0.])"]], "b": [[1, "array([3., 0.])"]], "A": [[8.0, "array([[0., 0.],       [0., 0.]])"], [9.0, "array([[3., 0.],       [0., 0.]])"], [10.0, "array([[3., 0.],       [0., 3.]])"], [11.0, "array([[ 3.,  0.],       [-0.,  3.]])"], [13.0, "array([[ 1.,  0.],       [-0.,  1.]])"]], "s": [[14.0, "array([-0., -0.])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 295, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _yvalue(b, a, c):\n    \"\"\"\n    Get the two possible y-values for the upper point of a triangle.\n\n    where c is the length of the down side starting in the origin and\n    lying on the x-axes, a is the distance of the unknown point to the origen\n    and b is the distance of the unknown point to the righter given point\n    \"\"\"\n    # ckeck flatness to eliminate numerical errors when the triangle is flat\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 0.0, -0.0\n\n    res = 2 * ((a * b) ** 2 + (a * c) ** 2 + (b * c) ** 2)\n    res -= a ** 4 + b ** 4 + c ** 4\n    # in case of numerical errors set res to 0 (hope you check validty before)\n    res = max(res, 0.0)\n    res = np.sqrt(res)\n    res /= 2 * c\n    return res, -res\n\n_yvalue(b=4.0, a=2.0, c=3.0)", "Selected Statement": "res = np.sqrt(res)", "Function Input": {"b": "4.0", "a": "2.0", "c": "3.0"}, "Variable Values Before Statement": {"res": "135.0"}, "Value After Statement Execution": "11.61895003862225", "Variable States During Runtime": {"b": [[1, "4.0"]], "a": [[1, "2.0"]], "c": [[1, "3.0"]], "res": [[13.0, "488.0"], [14.0, "135.0"], [17.0, "11.61895003862225"], [18.0, "1.9364916731037083"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 296, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _solequal(sol1, sol2, prec):\n    \"\"\"\n    Compare two different solutions with a given precicion.\n\n    Return True if they equal.\n    \"\"\"\n    res = True\n\n    for sol_1, sol_2 in zip(sol1, sol2):\n        if np.ndim(sol_1) != 0 and np.ndim(sol_2) != 0:\n            res &= _dist(sol_1, sol_2) < prec\n        elif np.ndim(sol_1) != 0 and np.ndim(sol_2) == 0:\n            return False\n        elif np.ndim(sol_1) == 0 and np.ndim(sol_2) != 0:\n            return False\n\n    return res\n\n_solequal(sol1=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])], sol2=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])], prec=0.1)", "Selected Statement": "res &= _dist(sol_1, sol_2) < prec", "Function Input": {"sol1": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]", "sol2": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]", "prec": "0.1"}, "Variable Values Before Statement": {"sol_1": "array([ 0.16666667, -0.9860133 ])", "sol_2": "array([0.16666667, 0.9860133 ])"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"sol1": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]"]], "sol2": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]"]], "prec": [[1, "0.1"]], "res": [[7.0, "True"], [11.0, "False"]], "sol_1": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([ 0.16666667, -0.9860133 ])"]], "sol_2": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([0.16666667, 0.9860133 ])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 297, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _process_namespace(name, namespaces, ns_sep=':', attr_prefix='@'):\n    if not namespaces:\n        return name\n    try:\n        ns, name = name.rsplit(ns_sep, 1)\n    except ValueError:\n        pass\n    else:\n        ns_res = namespaces.get(ns.strip(attr_prefix))\n        name = '{}{}{}{}'.format(\n            attr_prefix if ns.startswith(attr_prefix) else '',\n            ns_res, ns_sep, name) if ns_res else name\n    return name\n\n_process_namespace(name='http://defaultns.com/:root', namespaces={'http://defaultns.com/': '', 'http://a.com/': 'a', 'http://b.com/': 'b'}, ns_sep=':', attr_prefix='@')", "Selected Statement": "ns, name = name.rsplit(ns_sep, 1)", "Function Input": {"name": "'http://defaultns.com/:root'", "namespaces": "{'http://defaultns.com/': '', 'http://a.com/': 'a', 'http://b.com/': 'b'}", "ns_sep": "':'", "attr_prefix": "'@'"}, "Variable Values Before Statement": {"ns_sep": "':'"}, "Value After Statement Execution": "'http://defaultns.com/'", "Variable States During Runtime": {"name": [[1, "'http://defaultns.com/:root'"], [5.0, "'root'"]], "namespaces": [[1, "{'http://defaultns.com/': '', 'http://a.com/': 'a', 'http://b.com/': 'b'}"]], "ns_sep": [[1, "':'"]], "attr_prefix": [[1, "'@'"]], "ns": [[5.0, "'http://defaultns.com/'"]], "ns_res": [[9.0, "''"]]}, "Program Information": "Project Name: martinblech+xmltodict", "idx": 298, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def response_error(code_status, message=None):\n    payload = {'error': HTTP_STATUS_CODES.get(code_status, \"something went wrong\")}\n    if message:\n        payload['message'] = message\n    response = jsonify(payload)\n    response.status_code = code_status\n    return response\n\nresponse_error(code_status=400, message='Invalid input')", "Selected Statement": "response = jsonify(payload)", "Function Input": {"code_status": "400", "message": "'Invalid input'"}, "Variable Values Before Statement": {"payload": "{'error': 'Bad Request', 'message': 'Invalid input'}"}, "Value After Statement Execution": "<Response 50 bytes [200 OK]>", "Variable States During Runtime": {"code_status": [[1, "400"]], "message": [[1, "'Invalid input'"]], "payload": [[2.0, "{'error': 'Bad Request'}"], [4.0, "{'error': 'Bad Request', 'message': 'Invalid input'}"]], "response": [[5.0, "<Response 50 bytes [200 OK]>"], [6.0, "<Response 50 bytes [400 BAD REQUEST]>"]]}, "Program Information": "Project Name: arc53+DocsGPT", "idx": 299, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def check_data(a, b):\n    if not isinstance(a, np.ndarray):\n        a = np.array(a)\n\n    if not isinstance(b, np.ndarray):\n        b = np.array(b)\n\n    if type(a) != type(b):\n        raise ValueError(\"Type mismatch: %s and %s\" % (type(a), type(b)))\n\n    if a.size != b.size:\n        raise ValueError(\"Arrays must be equal in length.\")\n    return a, b\n\ncheck_data(a=[], b=1)", "Selected Statement": "b = np.array(b)", "Function Input": {"a": "[]", "b": "1"}, "Variable Values Before Statement": {"b": "1"}, "Value After Statement Execution": "array(1)", "Variable States During Runtime": {"a": [[1, "[]"], [3.0, "array([], dtype=float64)"]], "b": [[1, "1"], [6.0, "array(1)"]]}, "Program Information": "Project Name: rushter+MLAlgorithms", "idx": 300, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def clasifier(optimizer):\n    X, y = make_classification(\n        n_samples=1000, n_features=100, n_informative=75, random_state=1111, n_classes=2, class_sep=2.5\n    )\n    y = one_hot(y)\n\n    X -= np.mean(X, axis=0)\n    X /= np.std(X, axis=0)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=1111)\n\n    model = NeuralNet(\n        layers=[\n            Dense(128, Parameters(init=\"uniform\")),\n            Activation(\"relu\"),\n            Dropout(0.5),\n            Dense(64, Parameters(init=\"normal\")),\n            Activation(\"relu\"),\n            Dense(2),\n            Activation(\"softmax\"),\n        ],\n        loss=\"categorical_crossentropy\",\n        optimizer=optimizer,\n        metric=\"accuracy\",\n        batch_size=64,\n        max_epochs=10,\n    )\n    model.fit(X_train, y_train)\n    predictions = model.predict(X_test)\n    return roc_auc_score(y_test[:, 0], predictions[:, 0])\n\nclasifier(optimizer={rho=0.95, eps=1e-08, lr=1.0})", "Selected Statement": "predictions = model.predict(X_test)", "Function Input": {"optimizer": "{rho=0.95, eps=1e-08, lr=1.0}"}, "Variable Values Before Statement": {"X_test": "array([[-0.56004849,  0.34018962,  1.01535167, ..., -0.84997967,         2.09726856, -0.93988689],       [ 0.27941223,  0.49234387,  0.22399796, ...,  1.26554326,         0.00246477, -0.44601728],       [ 0.31621209,  0.07147743, -0.76119601, ...,  0.89775686,         0.76871988,  1.87124925],       ...,       [-0.14644015, -0.945898  , -1.7625167 , ...,  1.07582814,        -1.2681324 ,  0.89124254],       [ 2.11886151, -0.81978169,  0.9298373 , ..., -0.14101579,        -0.75876976, -1.79802492],       [-2.15698547, -0.11529033, -0.13576962, ...,  0.58981803,        -1.0836584 ,  0.09128275]])"}, "Value After Statement Execution": "array([[1.35235888e-02, 9.86476411e-01],       [1.66726720e-02, 9.83327328e-01],       [9.99999994e-01, 5.90208114e-09],       [9.98244393e-01, 1.75560676e-03],       [7.40176791e-01, 2.59823209e-01],       [3.71724770e-05, 9.99962828e-01],       [9.99713566e-01, 2.86434297e-04],       [9.18564614e-01, 8.14353861e-02],       [8.86055945e-01, 1.13944055e-01],       [9.99811079e-01, 1.88920895e-04],       [4.07889501e-03, 9.95921105e-01],       [9.97496720e-01, 2.50328006e-03],       [8.84405282e-01, 1.15594718e-01],       [8.87751398e-01, 1.12248602e-01],       [9.99998858e-01, 1.14232539e-06],       [1.48689622e-02, 9.85131038e-01],       [1.39868786e-01, 8.60131214e-01],       [4.59735284e-04, 9.99540265e-01],       [8.10085291e-01, 1.89914709e-01],       [4.53483673e-04, 9.99546516e-01],       [2.54536929e-05, 9.99974546e-01],       [1.00000000e+00, 2.95234428e-10],       [9.99999994e-01, 5.67815508e-09],       [3.58133366e-04, 9.99641867e-01],       [9.99841916e-01, 1.58084197e-04],       [9.99916089e-01, 8.39110353e-05],       [2.87906452e-01, 7.12093548e-01],       [2.94657253e-03, 9.97053427e-01],       [1.29650123e-05, 9.99987035e-01],       [5.50214872e-05, 9.99944979e-01],       [9.95252480e-05, 9.99900475e-01],       [7.23698056e-05, 9.99927630e-01],       [9.96809259e-01, 3.19074119e-03],       [1.07959433e-06, 9.99998920e-01],       [9.88249217e-01, 1.17507825e-02],       [2.97550757e-05, 9.99970245e-01],       [8.57948547e-08, 9.99999914e-01],       [8.01493506e-01, 1.98506494e-01],       [1.09917929e-01, 8.90082071e-01],       [9.21897555e-04, 9.99078102e-01],       [9.99999987e-01, 1.25416177e-08],       [9.99999998e-01, 2.12806072e-09],       [8.99300702e-01, 1.00699298e-01],       [8.24316542e-02, 9.17568346e-01],       [5.67859947e-10, 9.99999999e-01],       [9.79143160e-01, 2.08568400e-02],       [1.08458105e-02, 9.89154189e-01],       [8.11828923e-01, 1.88171077e-01],       [9.99999997e-01, 3.48283036e-09],       [3.63447084e-03, 9.96365529e-01],       [9.42074990e-01, 5.79250098e-02],       [8.03211756e-04, 9.99196788e-01],       [9.99988213e-01, 1.17866694e-05],       [9.99998358e-01, 1.64225648e-06],       [9.72622763e-02, 9.02737724e-01],       [2.11943736e-01, 7.88056264e-01],       [1.62273056e-08, 9.99999984e-01],       [1.62848262e-06, 9.99998372e-01],       [1.44160831e-04, 9.99855839e-01],       [9.13952621e-01, 8.60473792e-02],       [9.99812916e-01, 1.87083698e-04],       [9.52723540e-01, 4.72764602e-02],       [9.99988339e-01, 1.16607282e-05],       [9.86051929e-01, 1.39480708e-02],       [9.99865345e-01, 1.34654685e-04],       [9.13378149e-03, 9.90866219e-01],       [9.97440609e-01, 2.55939080e-03],       [9.63875042e-01, 3.61249578e-02],       [1.48619796e-04, 9.99851380e-01],       [5.28682244e-01, 4.71317756e-01],       [9.99718892e-01, 2.81108349e-04],       [9.94642754e-01, 5.35724604e-03],       [6.75869852e-01, 3.24130148e-01],       [5.28322536e-01, 4.71677464e-01],       [2.30777115e-02, 9.76922289e-01],       [6.54557813e-01, 3.45442187e-01],       [9.93999608e-01, 6.00039239e-03],       [3.57095748e-01, 6.42904252e-01],       [8.79406665e-02, 9.12059333e-01],       [3.85768901e-01, 6.14231099e-01],       [9.98609603e-01, 1.39039719e-03],       [3.34849170e-02, 9.66515083e-01],       [3.98038731e-03, 9.96019613e-01],       [1.74548424e-02, 9.82545158e-01],       [9.00595452e-01, 9.94045476e-02],       [4.81287456e-02, 9.51871254e-01],       [8.31075240e-01, 1.68924760e-01],       [2.61540350e-02, 9.73845965e-01],       [1.86037392e-01, 8.13962608e-01],       [1.74708127e-04, 9.99825292e-01],       [1.02657966e-03, 9.98973420e-01],       [1.18972214e-06, 9.99998810e-01],       [5.85900774e-03, 9.94140992e-01],       [1.07627613e-06, 9.99998924e-01],       [3.40652630e-01, 6.59347370e-01],       [9.83588586e-01, 1.64114140e-02],       [9.97918350e-01, 2.08165016e-03],       [9.72075551e-01, 2.79244493e-02],       [8.92673320e-03, 9.91073267e-01],       [9.99997418e-01, 2.58224639e-06],       [9.36717962e-03, 9.90632820e-01],       [9.99845583e-01, 1.54416829e-04],       [7.07307425e-03, 9.92926926e-01],       [9.95053730e-01, 4.94627014e-03],       [1.41115970e-02, 9.85888403e-01],       [3.25889450e-04, 9.99674111e-01],       [9.81332495e-04, 9.99018668e-01],       [9.60401982e-01, 3.95980180e-02],       [9.99952843e-01, 4.71566138e-05],       [9.99999947e-01, 5.34044573e-08],       [6.00106898e-07, 9.99999400e-01],       [9.99129133e-01, 8.70867188e-04],       [9.94286308e-01, 5.71369203e-03],       [9.99981113e-01, 1.88874698e-05],       [7.92336020e-02, 9.20766398e-01],       [9.95091548e-01, 4.90845229e-03],       [2.88767388e-05, 9.99971123e-01],       [2.07836444e-01, 7.92163556e-01],       [9.92386903e-01, 7.61309722e-03],       [5.25658178e-06, 9.99994743e-01],       [1.88273783e-04, 9.99811726e-01],       [9.97402679e-01, 2.59732143e-03],       [1.33733905e-04, 9.99866266e-01],       [9.99999885e-01, 1.15261224e-07],       [5.70741250e-05, 9.99942926e-01],       [2.62490629e-03, 9.97375094e-01],       [8.76013445e-01, 1.23986555e-01],       [2.61776408e-04, 9.99738224e-01],       [2.14964444e-02, 9.78503556e-01],       [8.69490648e-01, 1.30509352e-01],       [3.07479580e-05, 9.99969252e-01],       [8.02048076e-02, 9.19795192e-01],       [9.99889581e-01, 1.10418878e-04],       [7.93254407e-03, 9.92067456e-01],       [1.92176072e-01, 8.07823928e-01],       [1.71791819e-03, 9.98282082e-01],       [7.20407537e-07, 9.99999280e-01],       [9.97076828e-01, 2.92317157e-03],       [2.17317964e-07, 9.99999783e-01],       [2.00199637e-02, 9.79980036e-01],       [7.18304676e-04, 9.99281695e-01],       [9.86816819e-01, 1.31831806e-02],       [9.99991335e-01, 8.66460511e-06],       [9.81203923e-01, 1.87960770e-02],       [9.99999989e-01, 1.09012882e-08],       [2.16560536e-01, 7.83439464e-01],       [9.97841732e-01, 2.15826773e-03],       [9.98825819e-01, 1.17418094e-03],       [9.99999183e-01, 8.17282702e-07],       [8.47976914e-01, 1.52023086e-01]])", "Variable States During Runtime": {"optimizer": [[1, "{rho=0.95, eps=1e-08, lr=1.0}"], [27.0, "{rho=0.95, eps=1e-08, lr=1.0, accu=defaultdict(<class 'dict'>, {0: {'W': array([[1.02189175, 2.3577819 , 1.51764535, ..., 1.23169299, 3.07867511,        1.19097088],       [1.79837931, 2.15850133, 1.2952417 , ..., 1.41157237, 3.53508698,        0.8306613 ],       [1.00176246, 1.54970328, 1.14835514, ..., 0.73988777, 1.25295484,        1.04732108],       ...,       [0.79315582, 3.22064122, 1.98634498, ..., 1.07047564, 3.86998562,        1.81093538],       [1.33685355, 3.58025666, 1.43485979, ..., 1.33567161, 3.23535237,        1.16139226],       [1.24049738, 1.51520559, 1.38728968, ..., 1.28467756, 2.21665017,        0.67544222]]), 'b': array([1.24701152, 1.07898568, 1.26096616, 0.66303548, 1.09491793,       0.54777342, 0.82933226, 1.75515187, 0.8513086 , 2.26192259,       2.72603508, 1.57643474, 1.2351254 , 0.75682709, 3.12175382,       0.77849592, 1.53979515, 1.4790363 , 0.38903597, 1.87158323,       0.58569118, 4.60743107, 1.69568258, 0.90741705, 2.06461702,       2.76816931, 7.2805068 , 0.55199615, 1.2509025 , 2.41554144,       1.34352201, 2.37986267, 0.951207  , 1.47112046, 1.68694724,       1.04600856, 1.29258354, 3.88751626, 1.28381194, 1.26565436,       0.75323325, 2.31465107, 2.97211929, 3.72470318, 2.21997122,       1.88024124, 1.8445207 , 1.44853005, 6.43703821, 0.76357415,       0.78398435, 0.92437006, 2.01051995, 0.92685549, 0.95741625,       2.8152029 , 1.65657328, 2.51121866, 0.76184199, 3.03258657,       0.82002141, 1.683818  , 1.16362865, 0.85883003, 1.67069222,       1.43642043, 1.42787622, 1.64186725, 2.87486294, 0.60191759,       1.04036702, 0.56923805, 0.72624993, 0.70411294, 0.86654488,       0.85618806, 1.2281543 , 3.17203227, 1.50408587, 5.44372238,       5.41533707, 2.6395759 , 0.76130033, 0.6537063 , 0.81457075,       1.52755936, 1.35928077, 2.51945851, 1.39940071, 1.03681584,       0.62675816, 1.10998426, 6.40240473, 3.09963192, 1.1592539 ,       1.65955604, 1.0511133 , 1.36365397, 7.82102101, 0.98689887,       1.68746735, 1.21605589, 3.51047096, 1.98145413, 4.11055627,       1.72070386, 0.91946021, 0.74963646, 0.86630747, 4.49418519,       1.44151991, 0.79929557, 1.46259457, 6.83458282, 2.15505599,       2.70513408, 0.58877512, 1.35986934, 0.5661188 , 0.72856421,       1.82468196, 0.67120413, 5.35308901, 1.12292561, 0.72621126,       1.13444081, 2.16178393, 1.24055574])}, 1: {'W': array([[5.45915482e-03, 3.81760910e+00, 6.68676861e-01, ...,        1.62601232e+00, 2.37464367e+00, 7.82253766e+00],       [2.80223833e-03, 2.64129159e+00, 9.75193808e-01, ...,        2.82929786e+00, 4.66502013e+00, 1.00737594e+01],       [4.18466499e-03, 2.41653114e+00, 5.32879422e-01, ...,        1.31616525e+00, 1.60943697e+00, 5.59325401e+00],       ...,       [7.50449189e-03, 3.08985722e+00, 6.08991330e-01, ...,        1.25975188e+00, 2.28575080e+00, 5.10920038e+00],       [1.02523637e-02, 2.80714882e+00, 7.59856834e-01, ...,        1.58756775e+00, 3.46716116e+00, 6.43149821e+00],       [5.19958341e-03, 1.81792849e+00, 7.96020678e-01, ...,        2.10411693e+00, 2.89889679e+00, 9.25088996e+00]]), 'b': array([1.72037866e-03, 8.52788541e-01, 2.03837881e-01, 2.70120698e-03,       2.94283040e-01, 1.42170655e-01, 1.99078716e-01, 8.47160049e-03,       1.75972220e-01, 2.96368082e-01, 2.51724630e-02, 2.55886116e-01,       1.01855555e-01, 1.71679531e-01, 1.78645767e+00, 6.73317331e-03,       7.25939768e-01, 4.81054772e-04, 2.76793720e-01, 1.70717882e-01,       3.79590767e-02, 6.15495787e-02, 1.93435756e-02, 1.17812435e-02,       4.74578506e-02, 2.14499691e-01, 2.99670015e-02, 3.14822188e-03,       4.81733071e-02, 3.79465426e-01, 2.90130739e-01, 9.16535823e-01,       2.88197944e-01, 7.11741172e-01, 9.73335398e-01, 2.07337546e-01,       5.75103522e-02, 3.37785925e-02, 4.13675660e-01, 9.47900102e-01,       5.86283077e-01, 5.08640921e-01, 2.09856011e-01, 3.38311887e-01,       1.29053101e+00, 2.77363522e-03, 2.70998310e-03, 2.46111881e-02,       8.54615474e-02, 6.25665813e-01, 4.91633314e-02, 3.08387019e-01,       2.92374899e-01, 4.91648012e-01, 1.32740282e-02, 2.80214646e-01,       5.02608457e-01, 1.07545128e+00, 1.32504353e...  [1.41998934e-08, 4.12162325e-08, 3.72964210e-08, ...,        2.58398721e-08, 2.77508189e-08, 2.89419047e-08],       [1.49778686e-08, 3.66735246e-08, 5.15109023e-08, ...,        8.23728033e-08, 4.11718362e-08, 4.31269308e-08],       [3.30872245e-08, 5.72617422e-08, 5.33931305e-08, ...,        7.32284551e-08, 5.40883796e-08, 8.58946913e-08]]), 'b': array([1.17888086e-08, 4.18146562e-08, 3.60881249e-08, 5.18557473e-08,       2.91998964e-08, 3.42123777e-08, 3.18925816e-08, 9.25540109e-09,       3.06530327e-08, 1.28270243e-08, 1.70761826e-07, 1.51483393e-08,       2.36069742e-08, 2.14715175e-08, 2.24245352e-08, 1.47149097e-08,       1.66178146e-08, 2.83299615e-08, 1.57570188e-08, 3.48429714e-08,       3.90471086e-08, 2.06303777e-08, 1.43108136e-08, 4.60835373e-07,       4.64843554e-08, 1.31061724e-08, 1.35750428e-08, 5.47091382e-08,       2.95749720e-08, 2.03399523e-08, 4.24908236e-08, 4.30961153e-08,       2.81917199e-08, 3.73151130e-08, 2.55720749e-08, 1.98067123e-08,       1.93753723e-08, 9.80365144e-08, 3.27053239e-08, 1.48941176e-08,       3.33476933e-08, 2.66562346e-08, 2.47807546e-08, 2.85980386e-08,       2.54295013e-08, 1.12543136e-07, 1.32799243e-08, 2.02992493e-08,       2.54887755e-08, 2.83518944e-08, 2.87884961e-08, 1.83564032e-08,       1.52904998e-08, 1.49334920e-08, 6.33896441e-08, 1.57731193e-08,       2.29820217e-08, 2.67215806e-08, 2.54295085e-08, 9.53098238e-09,       4.31910696e-08, 2.29492198e-08, 2.44853474e-08, 3.93343049e-08])}, 2: {'W': array([[3.10732781e-08, 3.10732781e-08],       [6.19962700e-08, 6.19962700e-08],       [7.73977157e-08, 7.73977157e-08],       [4.83289756e-08, 4.83289756e-08],       [3.78004173e-08, 3.78004173e-08],       [4.84615343e-08, 4.84615343e-08],       [5.74666461e-08, 5.74666461e-08],       [1.53238393e-08, 1.53238393e-08],       [4.36786598e-08, 4.36786598e-08],       [1.99940867e-08, 1.99940867e-08],       [7.68494943e-08, 7.68494943e-08],       [2.07098289e-08, 2.07098289e-08],       [3.01331056e-08, 3.01331056e-08],       [2.91989326e-08, 2.91989326e-08],       [2.67265242e-08, 2.67265242e-08],       [2.36300030e-08, 2.36300030e-08],       [2.58964847e-08, 2.58964847e-08],       [3.99345822e-08, 3.99345822e-08],       [2.01764981e-08, 2.01764981e-08],       [3.67492839e-08, 3.67492839e-08],       [2.83350533e-08, 2.83350533e-08],       [4.39402672e-08, 4.39402672e-08],       [2.34148753e-08, 2.34148753e-08],       [5.33241909e-08, 5.33241909e-08],       [7.61694040e-08, 7.61694040e-08],       [1.84145885e-08, 1.84145885e-08],       [1.54214201e-08, 1.54214201e-08],       [5.89606035e-08, 5.89606035e-08],       [1.89748688e-08, 1.89748688e-08],       [2.69561781e-08, 2.69561781e-08],       [4.49638283e-08, 4.49638283e-08],       [8.57936955e-08, 8.57936955e-08],       [4.51625998e-08, 4.51625998e-08],       [4.59436138e-08, 4.59436138e-08],       [1.94678893e-08, 1.94678893e-08],       [3.60432758e-08, 3.60432758e-08],       [2.46571720e-08, 2.46571720e-08],       [4.15556922e-08, 4.15556922e-08],       [3.98907824e-08, 3.98907824e-08],       [2.52991261e-08, 2.52991261e-08],       [3.52945761e-08, 3.52945761e-08],       [3.05025137e-08, 3.05025137e-08],       [3.18059511e-08, 3.18059511e-08],       [3.00007683e-08, 3.00007683e-08],       [4.50742973e-08, 4.50742973e-08],       [2.11498438e-08, 2.11498438e-08],       [3.52900462e-08, 3.52900462e-08],       [5.08926177e-08, 5.08926177e-08],       [2.76334304e-08, 2.76334304e-08],       [4.72636263e-08, 4.72636263e-08],       [3.55281110e-08, 3.55281110e-08],       [2.45108154e-08, 2.45108154e-08],       [3.18376221e-08, 3.18376221e-08],       [1.96264395e-08, 1.96264395e-08],       [8.07458957e-08, 8.07458957e-08],       [2.01687708e-08, 2.01687708e-08],       [2.99927221e-08, 2.99927221e-08],       [3.63644472e-08, 3.63644472e-08],       [3.40271673e-08, 3.40271673e-08],       [4.44372350e-08, 4.44372350e-08],       [3.60026618e-08, 3.60026618e-08],       [3.96703308e-08, 3.96703308e-08],       [3.92369616e-08, 3.92369616e-08],       [3.40291803e-08, 3.40291803e-08]]), 'b': array([1.84589942e-08, 1.84589942e-08])}})}"]], "X": [[2.0, "array([[  7.80780096,   0.40627657,  -1.48027083, ...,  -6.41386247,         -8.43409921,   0.5602089 ],       [  1.19388878,  -1.47559934,   6.08370626, ...,  -0.97569605,         10.78028251,  -1.31354468],       [ -6.1613578 ,  -0.43920608,  -1.28034138, ...,   4.39277501,          0.02982879,   0.06733291],       ...,       [ -5.51466423, -13.26000331,  10.36091139, ...,   1.89534754,         -3.35155079,  -1.19447879],       [  9.13942123,  -1.21728958,   1.84978723, ...,  -1.75954701,          7.32589326,   3.2035972 ],       [-10.31153907,  -5.04412657,  -0.1021587 , ...,  10.74854013,         -0.48404546,   4.45441204]])"], [7.0, "array([[  8.25628211,   2.00699085,  -0.11353115, ...,  -6.52294682,         -7.31335416,   0.61603347],       [  1.64236993,   0.12511495,   7.45044595, ...,  -1.0847804 ,         11.90102756,  -1.25772012],       [ -5.71287665,   1.1615082 ,   0.0863983 , ...,   4.28369067,          1.15057384,   0.12315747],       ...,       [ -5.06618308, -11.65928903,  11.72765107, ...,   1.78626319,         -2.23080574,  -1.13865422],       [  9.58790238,   0.3834247 ,   3.21652692, ...,  -1.86863135,          8.44663831,   3.25942177],       [ -9.86305793,  -3.44341228,   1.26458099, ...,  10.63945579,          0.63669959,   4.5102366 ]])"], [8.0, "array([[ 1.41230729,  0.34829269, -0.02025944, ..., -1.16753788,        -1.35048696,  0.11621826],       [ 0.28094135,  0.02171242,  1.32951954, ..., -0.19416412,         2.1976486 , -0.23727615],       [-0.97723615,  0.20156784,  0.01541763, ...,  0.76673492,         0.21246543,  0.02323437],       ...,       [-0.86661371, -2.0233501 ,  2.09277959, ...,  0.31972205,        -0.4119415 , -0.21481368],       [ 1.64009226,  0.06653943,  0.57398381, ..., -0.33446507,         1.55975967,  0.61490871],       [-1.68715996, -0.59756891,  0.22566235, ...,  1.90434906,         0.11757321,  0.85088213]])"]], "y": [[2.0, "array([1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1,       1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0,       0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0,       0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0,       1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0,       0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0,       1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1,       0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1,       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,       0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1,       0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0,       1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0,       0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1,       0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1,       1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0,       1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1,       0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1,       1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,       0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0,       0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0,       0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,       1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1,       0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1,       0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0,       1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1,       1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1,       0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0,       0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1,       1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1,       1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0,       1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0,       1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1,       1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,       0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,       0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0,       1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1,       0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1,       1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1,       1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,       0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0,       0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1,       0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1,       0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1,       0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,       1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0,       1, 0, 1, 0, 0, 1, 0, 0, 1, 0])"], [5.0, "array([[0., 1.],       [1., 0.],       [1., 0.],       ...,       [1., 0.],       [0., 1.],       [1., 0.]])"]], "X_train": [[9.0, "array([[ 0.52035826, -1.70073552, -0.50697874, ..., -0.74790479,         0.16039734,  1.0323546 ],       [ 0.96925333, -0.29561268,  0.86400006, ...,  1.4457464 ,        -1.32196293, -0.0653791 ],       [ 0.24562753,  0.62176281,  0.95963704, ..., -0.16747796,        -0.60033504,  1.64606491],       ...,       [ 1.14501028,  1.07221843,  1.2764346 , ..., -0.83624018,        -1.87719572,  0.57666069],       [ 1.98506244, -0.27254282,  1.58679531, ..., -0.73272139,         2.03923433, -1.41719355],       [-0.82634613,  1.99698567,  0.0889722 , ...,  0.83719252,        -0.88980401,  0.81743782]])"]], "X_test": [[9.0, "array([[-0.56004849,  0.34018962,  1.01535167, ..., -0.84997967,         2.09726856, -0.93988689],       [ 0.27941223,  0.49234387,  0.22399796, ...,  1.26554326,         0.00246477, -0.44601728],       [ 0.31621209,  0.07147743, -0.76119601, ...,  0.89775686,         0.76871988,  1.87124925],       ...,       [-0.14644015, -0.945898  , -1.7625167 , ...,  1.07582814,        -1.2681324 ,  0.89124254],       [ 2.11886151, -0.81978169,  0.9298373 , ..., -0.14101579,        -0.75876976, -1.79802492],       [-2.15698547, -0.11529033, -0.13576962, ...,  0.58981803,        -1.0836584 ,  0.09128275]])"]], "y_train": [[9.0, "array([[1., 0.],       [1., 0.],       [1., 0.],       ...,       [0., 1.],       [1., 0.],       [1., 0.]])"]], "y_test": [[9.0, "arraymodel": [[11.0, "{verbose=True, shuffle=False, optimizer=<mla.neuralnet.optimizers.Adadelta object at 0x7f43904a38e0>, layers=[<mla.neuralnet.layers.basic.Dense object at 0x7f43904a3610>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a33d0>, <mla.neuralnet.layers.basic.Dropout object at 0x7f43904a32b0>, <mla.neuralnet.layers.basic.Dense object at 0x7f43904a3c70>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a3550>, <mla.neuralnet.layers.basic.Dense object at 0x7f43904a3820>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a3730>], batch_size=64, max_epochs=10, _n_layers=0, log_metric=True, metric_name='accuracy', bprop_entry=-1, training=False, _initialized=False}"], [27.0, "{verbose=True, shuffle=False, optimizer=<mla.neuralnet.optimizers.Adadelta object at 0x7f43904a38e0>, layers=[<mla.neuralnet.layers.basic.Dense object at 0x7f43904a3610>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a33d0>, <mla.neuralnet.layers.basic.Dropout object at 0x7f43904a32b0>, <mla.neuralnet.layers.basic.Dense object at 0x7f43904a3c70>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a3550>, <mla.neuralnet.layers.basic.Dense object at 0x7f43904a3820>, <mla.neuralnet.layers.basic.Activation object at 0x7f43904a3730>], batch_size=64, max_epochs=10, _n_layers=7, log_metric=True, metric_name='accuracy', bprop_entry=-1, training=False, _initialized=True, n_samples=850, n_features=100, X=array([[ 0.52035826, -1.70073552, -0.50697874, ..., -0.74790479,         0.16039734,  1.0323546 ],       [ 0.96925333, -0.29561268,  0.86400006, ...,  1.4457464 ,        -1.32196293, -0.0653791 ],       [ 0.24562753,  0.62176281,  0.95963704, ..., -0.16747796,        -0.60033504,  1.64606491],       ...,       [ 1.14501028,  1.07221843,  1.2764346 , ..., -0.83624018,        -1.87719572,  0.57666069],       [ 1.98506244, -0.27254282,  1.58679531, ..., -0.73272139,         2.03923433, -1.41719355],       [-0.82634613,  1.99698567,  0.0889722 , ...,  0.83719252,        -0.88980401,  0.81743782]]), y=array([[1., 0.],       [1., 0.],       [1., 0.],       ...,       [0., 1.],       [1., 0.],       [1., 0.]])}"]], "predictions": [[28.0, "array([[1.35235888e-02, 9.86476411e-01],       [1.66726720e-02, 9.83327328e-01],       [9.99999994e-01, 5.90208114e-09],       [9.98244393e-01, 1.75560676e-03],       [7.40176791e-01, 2.59823209e-01],       [3.71724770e-05, 9.99962828e-01],       [9.99713566e-01, 2.86434297e-04],       [9.18564614e-01, 8.14353861e-02],       [8.86055945e-01, 1.13944055e-01],       [9.99811079e-01, 1.88920895e-04],       [4.07889501e-03, 9.95921105e-01],       [9.97496720e-01, 2.50328006e-03],       [8.84405282e-01, 1.15594718e-01],       [8.87751398e-01, 1.12248602e-01],       [9.99998858e-01, 1.14232539e-06],       [1.48689622e-02, 9.85131038e-01],       [1.39868786e-01, 8.60131214e-01],       [4.59735284e-04, 9.99540265e-01],       [8.10085291e-01, 1.89914709e-01],       [4.53483673e-04, 9.99546516e-01],       [2.54536929e-05, 9.99974546e-01],       [1.00000000e+00, 2.95234428e-10],       [9.99999994e-01, 5.67815508e-09],       [3.58133366e-04, 9.99641867e-01],       [9.99841916e-01, 1.58084197e-04],       [9.99916089e-01, 8.39110353e-05],       [2.87906452e-01, 7.12093548e-01],       [2.94657253e-03, 9.97053427e-01],       [1.29650123e-05, 9.99987035e-01],       [5.50214872e-05, 9.99944979e-01],       [9.95252480e-05, 9.99900475e-01],       [7.23698056e-05, 9.99927630e-01],       [9.96809259e-01, 3.19074119e-03],       [1.07959433e-06, 9.99998920e-01],       [9.88249217e-01, 1.17507825e-02],       [2.97550757e-05, 9.99970245e-01],       [8.57948547e-08, 9.99999914e-01],       [8.01493506e-01, 1.98506494e-01],       [1.09917929e-01, 8.90082071e-01],       [9.21897555e-04, 9.99078102e-01],       [9.99999987e-01, 1.25416177e-08],       [9.99999998e-01, 2.12806072e-09],       [8.99300702e-01, 1.00699298e-01],       [8.24316542e-02, 9.17568346e-01],       [5.67859947e-10, 9.99999999e-01],       [9.79143160e-01, 2.08568400e-02],       [1.08458105e-02, 9.89154189e-01],       [8.11828923e-01, 1.88171077e-01],       [9.99999997e-01, 3.48283036e-09],       [3.63447084e-03, 9.96365529e-01],       [9.42074990e-01, 5.79250098e-02],       [8.03211756e-04, 9.99196788e-01],       [9.99988213e-01, 1.17866694e-05],       [9.99998358e-01, 1.64225648e-06],       [9.72622763e-02, 9.02737724e-01],       [2.11943736e-01, 7.88056264e-01],       [1.62273056e-08, 9.99999984e-01],       [1.62848262e-06, 9.99998372e-01],       [1.44160831e-04, 9.99855839e-01],       [9.13952621e-01, 8.60473792e-02],       [9.99812916e-01, 1.87083698e-04],       [9.52723540e-01, 4.72764602e-02],       [9.99988339e-01, 1.16607282e-05],       [9.86051929e-01, 1.39480708e-02],       [9.99865345e-01, 1.34654685e-04],       [9.13378149e-03, 9.90866219e-01],       [9.97440609e-01, 2.55939080e-03],       [9.63875042e-01, 3.61249578e-02],       [1.48619796e-04, 9.99851380e-01],       [5.28682244e-01, 4.71317756e-01],       [9.99718892e-01, 2.81108349e-04],       [9.94642754e-01, 5.35724604e-03],       [6.75869852e-01, 3.24130148e-01],       [5.28322536e-01, 4.71677464e-01],       [2.30777115e-02, 9.76922289e-01],       [6.54557813e-01, 3.45442187e-01],       [9.93999608e-01, 6.00039239e-03],       [3.57095748e-01, 6.42904252e-01],       [8.79406665e-02, 9.12059333e-01],       [3.85768901e-01, 6.14231099e-01],       [9.98609603e-01, 1.39039719e-03],       [3.34849170e-02, 9.66515083e-01],       [3.98038731e-03, 9.96019613e-01],       [1.74548424e-02, 9.82545158e-01],       [9.00595452e-01, 9.94045476e-02],       [4.81287456e-02, 9.51871254e-01],       [8.31075240e-01, 1.68924760e-01],       [2.61540350e-02, 9.73845965e-01],       [1.86037392e-01, 8.13962608e-01],       [1.74708127e-04, 9.99825292e-01],       [1.02657966e-03, 9.98973420e-01],       [1.18972214e-06, 9.99998810e-01],       [5.85900774e-03, 9.94140992e-01],       [1.07627613e-06, 9.99998924e-01],       [3.40652630e-01, 6.59347370e-01],       [9.83588586e-01, 1.64114140e-02],       [9.97918350e-01, 2.08165016e-03],       [9.72075551e-01, 2.79244493e-02],       [8.92673320e-03, 9.91073267e-01],       [9.99997418e-01, 2.58224639e-06],       [9.36717962e-03, 9.90632820e-01],       [9.99845583e-01, 1.54416829e-04],       [7.07307425e-03, 9.92926926e-01],       [9.95053730e-01, 4.94627014e-03],       [1.41115970e-02, 9.85888403e-01],       [3.25889450e-04, 9.99674111e-01],       [9.81332495e-04, 9.99018668e-01],       [9.60401982e-01, 3.95980180e-02],       [9.99952843e-01, 4.71566138e-05],       [9.99999947e-01, 5.34044573e-08],       [6.00106898e-07, 9.99999400e-01],       [9.99129133e-01, 8.70867188e-04],       [9.94286308e-01, 5.71369203e-03],       [9.99981113e-01, 1.88874698e-05],       [7.92336020e-02, 9.20766398e-01],       [9.95091548e-01, 4.90845229e-03],       [2.88767388e-05, 9.99971123e-01],       [2.07836444e-01, 7.92163556e-01],       [9.92386903e-01, 7.61309722e-03],       [5.25658178e-06, 9.99994743e-01],       [1.88273783e-04, 9.99811726e-01],       [9.97402679e-01, 2.59732143e-03],       [1.33733905e-04, 9.99866266e-01],       [9.99999885e-01, 1.15261224e-07],       [5.70741250e-05, 9.99942926e-01],       [2.62490629e-03, 9.97375094e-01],       [8.76013445e-01, 1.23986555e-01],       [2.61776408e-04, 9.99738224e-01],       [2.14964444e-02, 9.78503556e-01],       [8.69490648e-01, 1.30509352e-01],       [3.07479580e-05, 9.99969252e-01],       [8.02048076e-02, 9.19795192e-01],       [9.99889581e-01, 1.10418878e-04],       [7.93254407e-03, 9.92067456e-01],       [1.92176072e-01, 8.07823928e-01],       [1.71791819e-03, 9.98282082e-01],       [7.20407537e-07, 9.99999280e-01],       [9.97076828e-01, 2.92317157e-03],       [2.17317964e-07, 9.99999783e-01],       [2.00199637e-02, 9.79980036e-01],       [7.18304676e-04, 9.99281695e-01],       [9.86816819e-01, 1.31831806e-02],       [9.99991335e-01, 8.66460511e-06],       [9.81203923e-01, 1.87960770e-02],       [9.99999989e-01, 1.09012882e-08],       [2.16560536e-01, 7.83439464e-01],       [9.97841732e-01, 2.15826773e-03],       [9.98825819e-01, 1.17418094e-03],       [9.99999183e-01, 8.17282702e-07],       [8.47976914e-01, 1.52023086e-01]])"]]}, "Program Information": "Project Name: rushter+MLAlgorithms", "idx": 301, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def str2datetime(string):\n    \"\"\"\n    Convert a normalized Benthos timestamp to a datetime object\n\n    Parameters\n    ----------\n    string : str\n        String to convert\n    \"\"\"\n\n    if string == \"0000-00-00T24:60:60Z\":\n        return None\n\n    ms = string[20:-1]\n    ms += \"000000\"[:6 - len(ms)]\n    return datetime.datetime(\n        int(string[:4]),\n        int(string[5:7]),\n        int(string[8:10]),\n        int(string[11:13]),\n        int(string[14:16]),\n        int(string[17:19]),\n        int(ms))\n\nstr2datetime(string='1970-01-01T00:00:00.0Z')", "Selected Statement": "ms += \"000000\"[:6 - len(ms)]", "Function Input": {"string": "'1970-01-01T00:00:00.0Z'"}, "Variable Values Before Statement": {"ms": "'0'"}, "Value After Statement Execution": "'000000'", "Variable States During Runtime": {"string": [[1, "'1970-01-01T00:00:00.0Z'"]], "ms": [[14.0, "'0'"], [15.0, "'000000'"]]}, "Program Information": "Project Name: SkyTruth+gpsd_format", "idx": 302, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def getLogger(name, stdout=None):\n    \"\"\" Return logger suitable for Cumulus \"\"\"\n    logger = logging.getLogger(name)\n    # clear existing handlers\n    logger.handlers = []\n    if (stdout is None):\n        logger.addHandler(logging.NullHandler())\n    if stdout is not None:\n        handler = logging.StreamHandler()\n        handler.setLevel(stdout['level'])\n        handler.setFormatter(CumulusFormatter())\n        logger.addHandler(handler)\n    # logging level\n    logger.setLevel(1)\n    return logger\n\ngetLogger(name='cumulus.aws', stdout=None)", "Selected Statement": "logger = logging.getLogger(name)", "Function Input": {"name": "'cumulus.aws'", "stdout": "None"}, "Variable Values Before Statement": {"name": "'cumulus.aws'"}, "Value After Statement Execution": "<Logger cumulus.aws (WARNING)>", "Variable States During Runtime": {"name": [[1, "'cumulus.aws'"]], "stdout": [[1, "None"]], "logger": [[3.0, "<Logger cumulus.aws (WARNING)>"], [14.0, "<Logger cumulus.aws (Level 1)>"]]}, "Program Information": "Project Name: amarouane-ABDLHAK+cumulus-process-py", "idx": 303, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def load_json_dict(filename, *args):\n    \"\"\"Checks if file exists. Returns {} if something fails.\"\"\"\n    data = {}\n    if os.path.exists(filename):\n        lock.acquire()\n        with open(filename, \"r\") as f:\n            try:\n                data = _json.load(f)\n                if not isinstance(data, dict):\n                    data = {}\n            except:\n                data = {}  # TODO: issue a warning and bubble it up\n        lock.release()\n        if args:\n            return {key: data[key] for key in args if key in data}\n    return data\n\nload_json_dict(filename='/home/XXX/.plotly/.config', args=())", "Selected Statement": "with open(filename, \"r\") as f:", "Function Input": {"filename": "'/home/XXX/.plotly/.config'", "args": "()"}, "Variable Values Before Statement": {"filename": "'/home/XXX/.plotly/.config'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"filename": [[1, "'/home/XXX/.plotly/.config'"]], "args": [[1, "()"]], "data": [[3.0, "{}"], [8.0, "{'plotly_domain': 'https://plot.ly', 'plotly_streaming_domain': 'stream.plot.ly', 'plotly_api_domain': 'https://api.plot.ly', 'plotly_ssl_verification': True, 'plotly_proxy_authorization': False, 'world_readable': True, 'sharing': 'public', 'auto_open': True}"]], "f": [[6.0, "<_io.TextIOWrapper name='/home/XXX/.plotly/.config' mode='r' encoding='UTF-8'>"]]}, "Program Information": "Project Name: plotly+plotly.py", "idx": 304, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _get_logger(name):\n    \"\"\"Gets a logger by name, or creates and configures it for the first time.\"\"\"\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    # If the logger is configured, skip the configure\n    if not logger.handlers and not logging.getLogger().handlers:\n        handler = logging.StreamHandler(sys.stderr)\n        logger.addHandler(handler)\n    return logger\n\n_get_logger(name='hyperopt.utils')", "Selected Statement": "logger = logging.getLogger(name)", "Function Input": {"name": "'hyperopt.utils'"}, "Variable Values Before Statement": {"name": "'hyperopt.utils'"}, "Value After Statement Execution": "<Logger hyperopt.utils (WARNING)>", "Variable States During Runtime": {"name": [[1, "'hyperopt.utils'"]], "logger": [[3.0, "<Logger hyperopt.utils (WARNING)>"], [4.0, "<Logger hyperopt.utils (INFO)>"]]}, "Program Information": "Project Name: hyperopt+hyperopt", "idx": 305, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def delete(self, *, ip_parameter, cascade):\n\n        as_address = clean_address(ip_parameter)\n        as_network = clean_network(ip_parameter)\n\n        if as_address in self.__description:\n            return self.__remove_ip_object(as_address)\n        elif as_network in self.__description:\n            return self.__remove_ip_object(as_network)\n\n        raise IPObjectNotInSpaceError(\"cannot delete undescribed IP object\")\n\ndelete(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_parameter='203.0.113.128', cascade=True, self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "as_address = clean_address(ip_parameter)", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_parameter": "'203.0.113.128'", "cascade": "True", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"ip_parameter": "'203.0.113.128'"}, "Value After Statement Execution": "IPv4Address('203.0.113.128')", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [7.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_parameter": [[1, "'203.0.113.128'"]], "cascade": [[1, "True"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [7.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [7.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [7.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "as_address": [[3.0, "IPv4Address('203.0.113.128')"]], "as_network": [[4.0, "IPv4Network('203.0.113.128/32')"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 306, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __remove_ip_object(self, ip_object):\n\n        if ip_object not in self.__description:\n            raise IPObjectNotInSpaceError(\n                \"cannot remove undescribed IP object\"\n            )\n\n        if isinstance(ip_object, IPAddressTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            self.__children_ip_object[supernet].remove(ip_object)\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        elif isinstance(ip_object, IPNetworkTuple):\n\n            supernet = self.__parent_supernet[ip_object]\n            children_of_supernet = (\n                self.__children_ip_object.setdefault(supernet, set())\n            )\n\n            for child in self.__children_ip_object[ip_object]:\n                self.__parent_supernet[child] = supernet\n                children_of_supernet.add(child)\n\n            del self.__children_ip_object[ip_object]\n            del self.__parent_supernet[ip_object]\n            del self.__description[ip_object]\n\n        else:\n\n            raise TypeError(\"ip_parameter must be a valid IP object\")\n\n        return True\n\n__remove_ip_object(self=AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}), ip_object=IPv4Address('203.0.113.128'), self._AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, self._AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}}, self._AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, self._AddressSpace__networks={}, self._AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, self._AddressSpace__strict=False)", "Selected Statement": "self.__children_ip_object[supernet].remove(ip_object)", "Function Input": {"self": "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})", "ip_object": "IPv4Address('203.0.113.128')", "self._AddressSpace__addresses": "{4: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__children_ip_object": "{None: {IPv4Address('203.0.113.128')}}", "self._AddressSpace__description": "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}", "self._AddressSpace__networks": "{}", "self._AddressSpace__parent_supernet": "{IPv4Address('203.0.113.128'): None}", "self._AddressSpace__strict": "False"}, "Variable Values Before Statement": {"ip_object": "IPv4Address('203.0.113.128')"}, "Value After Statement Execution": "AddressSpace(_AddressSpace__strict", "Variable States During Runtime": {"self": [[1, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: {IPv4Address('203.0.113.128')}})"], [11.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={IPv4Address('203.0.113.128'): None}, _AddressSpace__children_ip_object={None: set()})"], [12.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={IPv4Address('203.0.113.128'): 'an IPv4 test net address'}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"], [13.0, "AddressSpace(_AddressSpace__strict=False, _AddressSpace__description={}, _AddressSpace__networks={}, _AddressSpace__addresses={4: {IPv4Address('203.0.113.128')}}, _AddressSpace__parent_supernet={}, _AddressSpace__children_ip_object={None: set()})"]], "ip_object": [[1, "IPv4Address('203.0.113.128')"]], "self._AddressSpace__addresses": [[1, "{4: {IPv4Address('203.0.113.128')}}"]], "self._AddressSpace__children_ip_object": [[1, "{None: {IPv4Address('203.0.113.128')}}"], [11.0, "{None: set()}"]], "self._AddressSpace__description": [[1, "{IPv4Address('203.0.113.128'): 'an IPv4 test net address'}"], [13.0, "{}"]], "self._AddressSpace__networks": [[1, "{}"]], "self._AddressSpace__parent_supernet": [[1, "{IPv4Address('203.0.113.128'): None}"], [12.0, "{}"]], "self._AddressSpace__strict": [[1, "False"]], "supernet": [[10.0, "None"]]}, "Program Information": "Project Name: ayharano+pppipam", "idx": 307, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _test_grad_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    slices = tuple([slice(1,-1,None)] * ndim)\n    for i in range(ndim):\n        assert grad(u, axis=i) == pytest.approx(2*xc[i][slices])\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad_nd(n=92, ndim=1)", "Selected Statement": "assert grad(u, axis=i) == pytest.approx(2*xc[i][slices])", "Function Input": {"n": "92", "ndim": "1"}, "Variable Values Before Statement": {"u": "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"n": [[1, "92"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "u": [[6.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "ucopy": [[7.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "slices": [[10.0, "(slice(1, -1, None),)"]], "i": [[11.0, "0"]], "@py_assert3": [[12.0, "None"]], "@py_assert7": [[12.0, "None"]], "@py_assert9": [[12.0, "None"]], "@py_assert11": [[12.0, "None"]], "@py_assert13": [[12.0, "None"]], "@py_assert14": [[12.0, "None"]], "@py_assert5": [[12.0, "None"]], "@py_assert1": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 308, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _test_grad2_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    gu = np.zeros(tuple([n-2]*ndim))\n    gu2 = gu + 2.0\n    for i in range(ndim):\n        for j in range(ndim):\n            if i == j:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu2)\n            else:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad2_nd(n=32, ndim=1)", "Selected Statement": "coords = [np.arange(n)] * ndim", "Function Input": {"n": "32", "ndim": "1"}, "Variable Values Before Statement": {"n": "32"}, "Value After Statement Execution": "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]", "Variable States During Runtime": {"n": [[1, "32"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "u": [[6.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ucopy": [[7.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "gu": [[10.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "gu2": [[11.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "i": [[12.0, "0"]], "j": [[13.0, "0"]], "@py_assert2": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]], "@py_assert11": [[15.0, "None"]], "@py_assert6": [[15.0, "None"]], "@py_assert1": [[20.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 309, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def det_hess(u):\n    \"\"\"\n    Get the determinant of the Hessian matrix of `u`.\n\n    Parameters\n    ----------\n    * `u` : numpy.ndarray\n        The ndarray input with shape (n0+2, n1+2, ..., nd1+2).\n\n    Returns\n    -------\n    * numpy.ndarray\n        The ndarray of the second grad of `u` with shape (n0, n1, ..., nd1).\n    \"\"\"\n    ndim = np.ndim(u)\n    inshape = np.asarray(u.shape)\n    outshape = list(inshape - 2)\n\n    # obtain the second gradient per each pairs of axes\n    hess_unarranged = np.zeros([ndim, ndim] + outshape)\n    for i in range(ndim):\n        for j in range(i,ndim):\n            grad2_val = grad2(u, (i,j))\n            hess_unarranged[i,j] = grad2_val\n            hess_unarranged[j,i] = grad2_val\n\n    # rearrange hessian to have shape: outshape + [ndim, ndim]\n    perm_idx = list(range(2,ndim+2)) + list(range(2))\n    hess = np.transpose(hess_unarranged, perm_idx)\n\n    # calculate and return the determinant\n    return np.linalg.det(hess)\n\ndet_hess(u=array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.]))", "Selected Statement": "hess = np.transpose(hess_unarranged, perm_idx)", "Function Input": {"u": "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"}, "Variable Values Before Statement": {"hess_unarranged": "array([[[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,         2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]]])", "perm_idx": "[2, 0, 1]"}, "Value After Statement Execution": "array([[[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]]])", "Variable States During Runtime": {"u": [[1, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ndim": [[15.0, "1"]], "inshape": [[16.0, "array([32])"]], "outshape": [[17.0, "[30]"]], "hess_unarranged": [[20.0, "array([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])"], [24.0, "array([[[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,         2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]]])"]], "i": [[21.0, "0"]], "j": [[22.0, "0"]], "grad2_val": [[23.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "perm_idx": [[28.0, "[2, 0, 1]"]], "hess": [[29.0, "array([[[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]]])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 310, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def forward(source, phi):\n    \"\"\"\n    Obtain the target density distribution given the source distribution and\n    the mapping potential, phi.\n    The mapping from source coordinate, $x$, to the target coordinate, $y$, is\n    given by:\n\n    $$\n    y = x + \\nabla phi(x).\n    $$\n\n    The coordinate in i-th dimension is given by `np.arange(source.shape[i])`.\n\n    Parameters\n    ----------\n    * `source` : numpy.ndarray\n        The source density distribution in n-dimensional array.\n    * `phi` : numpy.ndarray\n        The mapping potential given above. It must have the same shape as\n        `source`.\n\n    Returns\n    -------\n    * numpy.ndarray\n        The target density distribution in n-dimensional array.\n    \"\"\"\n    # convert to np.ndarray\n    source = np.asarray(source)\n    phi = np.asarray(phi)\n    # check the shapes of inputs\n    if source.shape != phi.shape:\n        raise ValueError(\"The source and phi must have the same shape.\")\n\n    # calculate the total potential so that $y = \\nabla u(x)$\n    u0, u, phi_pad = _get_full_potential(phi)\n    ndim = np.ndim(phi)\n\n    # calculate the determinant of the hessian\n    det_hess_s = det_hess(u)\n\n    # get the displacement in (n x D) format\n    x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n    y = np.array([grad(u , axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n\n    # interpolate the values\n    interp = lambda s: griddata(y, s.flatten(), x, \"linear\").reshape(s.shape)\n    target_s = source / det_hess_s\n    target = interp(target_s)\n\n    # fill nan values with zeros\n    target[np.isnan(target)] = 0.0\n    return target\n\nforward(source=array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06]), phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T", "Function Input": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])", "Variable States During Runtime": {"source": [[1, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "phi_pad": [[35.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "u": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "u0": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "ndim": [[36.0, "1"]], "det_hess_s": [[39.0, "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]], "x": [[42.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "y": [[43.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "interp": [[46.0, "<function forward.<locals>.<lambda> at 0x7fab7f2e3700>"]], "target_s": [[47.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "target": [[48.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 311, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _get_default_expanded_coordinate(shape, ndim):\n    x_coords = []\n    for i in range(ndim):\n        idx = [None] * ndim\n        idx[i] = slice(None, None, None)\n        x_coords.append(np.arange(shape[i])[tuple(idx)])\n    return x_coords\n\n_get_default_expanded_coordinate(shape=array([102]), ndim=1)", "Selected Statement": "x_coords.append(np.arange(shape[i])[tuple(idx)])", "Function Input": {"shape": "array([102])", "ndim": "1"}, "Variable Values Before Statement": {"idx": "[slice(None, None, None)]"}, "Value After Statement Execution": "[array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101])]", "Variable States During Runtime": {"shape": [[1, "array([102])"]], "ndim": [[1, "1"]], "x_coords": [[2.0, "[]"], [6.0, "[array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101])]"]], "i": [[3.0, "0"]], "idx": [[4.0, "[None]"], [5.0, "[slice(None, None, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 312, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _pad_conserve_grads(phi):\n    # pad by conserving the edge gradients\n    ndim = np.ndim(phi)\n    pw = [1, 1]\n    pp = np.pad(phi, [tuple(pw)]*ndim, mode=\"constant\")\n    for dim in range(ndim):\n        # get the indices first\n        idx_pad0_l = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))\n        idx_pad0 = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_fill = _get_idx(ndim, dim, slice(None, pw[0], None))\n        idx_pad1_l = _get_idx(ndim, dim, slice(-pw[1]-2, -pw[1]-1, None))\n        idx_pad1_r = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1 = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1_fill = _get_idx(ndim, dim, slice(-pw[1], None, None))\n\n        # now get the padded values\n        grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)\n        grad1 = pp[idx_pad1_r] - pp[idx_pad1_l]\n        pad_arange0 = np.arange(-pw[0],0) # (1, ..., ndim=pw[i], ..., 1)\n        pad_arange1 = np.arange(1,pw[0]+1)\n        pad0 = pad_arange0 * grad0 + pp[idx_pad0] # (n0,...,ndim=pw[i],...,nd1)\n        pad1 = pad_arange1 * grad1 + pp[idx_pad1]\n        pp[idx_pad0_fill] = pad0\n        pp[idx_pad1_fill] = pad1\n\n    return pp\n\n_pad_conserve_grads(phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))", "Function Input": {"phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"ndim": "1", "dim": "0"}, "Value After Statement Execution": "(slice(2, 3, None),)", "Variable States During Runtime": {"phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "ndim": [[3.0, "1"]], "pw": [[4.0, "[1, 1]"]], "pp": [[5.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "dim": [[6.0, "0"]], "idx_pad0_l": [[8.0, "(slice(1, 2, None),)"]], "idx_pad0_r": [[9.0, "(slice(2, 3, None),)"]], "idx_pad0": [[10.0, "(slice(1, 2, None),)"]], "idx_pad0_fill": [[11.0, "(slice(None, 1, None),)"]], "idx_pad1_l": [[12.0, "(slice(-3, -2, None),)"]], "idx_pad1_r": [[13.0, "(slice(-2, -1, None),)"]], "idx_pad1": [[14.0, "(slice(-2, -1, None),)"]], "idx_pad1_fill": [[15.0, "(slice(-1, None, None),)"]], "grad0": [[18.0, "array([0.])"]], "grad1": [[19.0, "array([0.])"]], "pad_arange0": [[20.0, "array([-1])"]], "pad_arange1": [[21.0, "array([1])"]], "pad0": [[22.0, "array([0.])"]], "pad1": [[23.0, "array([0.])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 313, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _test_forward_nd_slanted_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is slanted on the first dimension, so the target will be shifted\n    # source on the first dimension by A\n    A = n / 6.0\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = xs[0] * A\n    target = sb.forward(source, phi)\n\n    xs2 = np.copy(xs)\n    xs2[0] -= A\n    xs2_sq = reduce(lambda x,y:x+y*y, xs2, 0.0)\n    target_calc = np.exp(-xs2_sq / (2*sigma**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_slanted_pot(n=100, ndim=1, abs=None)", "Selected Statement": "xs2_sq = reduce(lambda x,y:x+y*y, xs2, 0.0)", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {"xs2": "array([[-66.66666667, -65.66666667, -64.66666667, -63.66666667,        -62.66666667, -61.66666667, -60.66666667, -59.66666667,        -58.66666667, -57.66666667, -56.66666667, -55.66666667,        -54.66666667, -53.66666667, -52.66666667, -51.66666667,        -50.66666667, -49.66666667, -48.66666667, -47.66666667,        -46.66666667, -45.66666667, -44.66666667, -43.66666667,        -42.66666667, -41.66666667, -40.66666667, -39.66666667,        -38.66666667, -37.66666667, -36.66666667, -35.66666667,        -34.66666667, -33.66666667, -32.66666667, -31.66666667,        -30.66666667, -29.66666667, -28.66666667, -27.66666667,        -26.66666667, -25.66666667, -24.66666667, -23.66666667,        -22.66666667, -21.66666667, -20.66666667, -19.66666667,        -18.66666667, -17.66666667, -16.66666667, -15.66666667,        -14.66666667, -13.66666667, -12.66666667, -11.66666667,        -10.66666667,  -9.66666667,  -8.66666667,  -7.66666667,         -6.66666667,  -5.66666667,  -4.66666667,  -3.66666667,         -2.66666667,  -1.66666667,  -0.66666667,   0.33333333,          1.33333333,   2.33333333,   3.33333333,   4.33333333,          5.33333333,   6.33333333,   7.33333333,   8.33333333,          9.33333333,  10.33333333,  11.33333333,  12.33333333,         13.33333333,  14.33333333,  15.33333333,  16.33333333,         17.33333333,  18.33333333,  19.33333333,  20.33333333,         21.33333333,  22.33333333,  23.33333333,  24.33333333,         25.33333333,  26.33333333,  27.33333333,  28.33333333,         29.33333333,  30.33333333,  31.33333333,  32.33333333]])"}, "Value After Statement Execution": "array([4.44444444e+03, 4.31211111e+03, 4.18177778e+03, 4.05344444e+03,       3.92711111e+03, 3.80277778e+03, 3.68044444e+03, 3.56011111e+03,       3.44177778e+03, 3.32544444e+03, 3.21111111e+03, 3.09877778e+03,       2.98844444e+03, 2.88011111e+03, 2.77377778e+03, 2.66944444e+03,       2.56711111e+03, 2.46677778e+03, 2.36844444e+03, 2.27211111e+03,       2.17777778e+03, 2.08544444e+03, 1.99511111e+03, 1.90677778e+03,       1.82044444e+03, 1.73611111e+03, 1.65377778e+03, 1.57344444e+03,       1.49511111e+03, 1.41877778e+03, 1.34444444e+03, 1.27211111e+03,       1.20177778e+03, 1.13344444e+03, 1.06711111e+03, 1.00277778e+03,       9.40444444e+02, 8.80111111e+02, 8.21777778e+02, 7.65444444e+02,       7.11111111e+02, 6.58777778e+02, 6.08444444e+02, 5.60111111e+02,       5.13777778e+02, 4.69444444e+02, 4.27111111e+02, 3.86777778e+02,       3.48444444e+02, 3.12111111e+02, 2.77777778e+02, 2.45444444e+02,       2.15111111e+02, 1.86777778e+02, 1.60444444e+02, 1.36111111e+02,       1.13777778e+02, 9.34444444e+01, 7.51111111e+01, 5.87777778e+01,       4.44444444e+01, 3.21111111e+01, 2.17777778e+01, 1.34444444e+01,       7.11111111e+00, 2.77777778e+00, 4.44444444e-01, 1.11111111e-01,       1.77777778e+00, 5.44444444e+00, 1.11111111e+01, 1.87777778e+01,       2.84444444e+01, 4.01111111e+01, 5.37777778e+01, 6.94444444e+01,       8.71111111e+01, 1.06777778e+02, 1.28444444e+02, 1.52111111e+02,       1.77777778e+02, 2.05444444e+02, 2.35111111e+02, 2.66777778e+02,       3.00444444e+02, 3.36111111e+02, 3.73777778e+02, 4.13444444e+02,       4.55111111e+02, 4.98777778e+02, 5.44444444e+02, 5.92111111e+02,       6.41777778e+02, 6.93444444e+02, 7.47111111e+02, 8.02777778e+02,       8.60444444e+02, 9.20111111e+02, 9.81777778e+02, 1.04544444e+03])", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [21.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "A": [[8.0, "16.666666666666668"]], "sigma": [[9.0, "3.3333333333333335"]], "source": [[10.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[12.0, "array([-833.33333333, -816.66666667, -800.        , -783.33333333,       -766.66666667, -750.        , -733.33333333, -716.66666667,       -700.        , -683.33333333, -666.66666667, -650.        ,       -633.33333333, -616.66666667, -600.        , -583.33333333,       -566.66666667, -550.        , -533.33333333, -516.66666667,       -500.        , -483.33333333, -466.66666667, -450.        ,       -433.33333333, -416.66666667, -400.        , -383.33333333,       -366.66666667, -350.        , -333.33333333, -316.66666667,       -300.        , -283.33333333, -266.66666667, -250.        ,       -233.33333333, -216.66666667, -200.        , -183.33333333,       -166.66666667, -150.        , -133.33333333, -116.66666667,       -100.        ,  -83.33333333,  -66.66666667,  -50.        ,        -33.33333333,  -16.66666667,    0.        ,   16.66666667,         33.33333333,   50.        ,   66.66666667,   83.33333333,        100.        ,  116.66666667,  133.33333333,  150.        ,        166.66666667,  183.33333333,  200.        ,  216.66666667,        233.33333333,  250.        ,  266.66666667,  283.33333333,        300.        ,  316.66666667,  333.33333333,  350.        ,        366.66666667,  383.33333333,  400.        ,  416.66666667,        433.33333333,  450.        ,  466.66666667,  483.33333333,        500.        ,  516.66666667,  533.33333333,  550.        ,        566.66666667,  583.33333333,  600.        ,  616.66666667,        633.33333333,  650.        ,  666.66666667,  683.33333333,        700.        ,  716.66666667,  733.33333333,  750.        ,        766.66666667,  783.33333333,  800.        ,  816.66666667])"]], "target": [[13.0, "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 4.06920181e-48, 3.20724834e-46, 2.31075854e-44,       1.52188819e-42, 9.16273954e-41, 5.04302641e-39, 2.53740658e-37,       1.16716481e-35, 4.90827418e-34, 1.88708742e-32, 6.63337857e-31,       2.13192075e-29, 6.26492385e-28, 1.68339106e-26, 4.13614560e-25,       9.29322466e-24, 1.90948503e-22, 3.58811078e-21, 6.16647454e-20,       9.69287214e-19, 1.39359494e-17, 1.83279714e-16, 2.20501882e-15,       2.42693184e-14, 2.44387199e-13, 2.25166580e-12, 1.89829483e-11,       1.46449459e-10, 1.03396690e-09, 6.68114154e-09, 3.95139172e-08,       2.13911719e-07, 1.06006637e-06, 4.80920541e-06, 1.99747687e-05,       7.59596517e-05, 2.64484047e-04, 8.43240507e-04, 2.46182046e-03,       6.58155885e-03, 1.61131343e-02, 3.61258608e-02, 7.41733503e-02,       1.39466583e-01, 2.40149955e-01, 3.78685730e-01, 5.46827108e-01,       7.23074611e-01, 8.75512635e-01, 9.70664988e-01, 9.85332494e-01,       9.15755058e-01, 7.79172411e-01, 6.06901959e-01, 4.32718993e-01,       2.82401211e-01, 1.68682641e-01, 9.22119378e-02, 4.61303118e-02,       2.11172721e-02, 8.84527769e-03, 3.38983023e-03, 1.18852559e-03,       3.81219734e-04, 1.11854006e-04, 3.00200330e-05, 7.36935486e-06,       1.65456117e-06, 3.39741645e-07, 6.37978546e-08, 1.09555606e-08,       1.72034467e-09, 2.47019294e-10, 3.24312866e-11, 3.89313794e-12,       4.27290433e-13, 4.28766413e-14, 3.93350717e-15, 3.29905094e-16,       2.52951417e-17, 1.77302216e-18, 1.13608506e-19, 6.65454790e-21])"]], "xs2": [[15.0, "array([[-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,        -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,        -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,        -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,         -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,          5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,         16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,         27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,         38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,         49.]])"], [16.0, "array([[-66.66666667, -65.66666667, -64.66666667, -63.66666667,        -62.66666667, -61.66666667, -60.66666667, -59.66666667,        -58.66666667, -57.66666667, -56.66666667, -55.66666667,        -54.66666667, -53.66666667, -52.66666667, -51.66666667,        -50.66666667, -49.66666667, -48.66666667, -47.66666667,        -46.66666667, -45.66666667, -44.66666667, -43.66666667,        -42.66666667, -41.66666667, -40.66666667, -39.66666667,        -38.66666667, -37.66666667, -36.66666667, -35.66666667,        -34.66666667, -33.66666667, -32.66666667, -31.66666667,        -30.66666667, -29.66666667, -28.66666667, -27.66666667,        -26.66666667, -25.66666667, -24.66666667, -23.66666667,        -22.66666667, -21.66666667, -20.66666667, -19.66666667,        -18.66666667, -17.66666667, -16.66666667, -15.66666667,        -14.66666667, -13.66666667, -12.66666667, -11.66666667,        -10.66666667,  -9.66666667,  -8.66666667,  -7.66666667,         -6.66666667,  -5.66666667,  -4.66666667,  -3.66666667,         -2.66666667,  -1.66666667,  -0.66666667,   0.33333333,          1.33333333,   2.33333333,   3.33333333,   4.33333333,          5.33333333,   6.33333333,   7.33333333,   8.33333333,          9.33333333,  10.33333333,  11.33333333,  12.33333333,         13.33333333,  14.33333333,  15.33333333,  16.33333333,         17.33333333,  18.33333333,  19.33333333,  20.33333333,         21.33333333,  22.33333333,  23.33333333,  24.33333333,         25.33333333,  26.33333333,  27.33333333,  28.33333333,         29.33333333,  30.33333333,  31.33333333,  32.33333333]])"]], "xs2_sq": [[17.0, "array([4.44444444e+03, 4.31211111e+03, 4.18177778e+03, 4.05344444e+03,       3.92711111e+03, 3.80277778e+03, 3.68044444e+03, 3.56011111e+03,       3.44177778e+03, 3.32544444e+03, 3.21111111e+03, 3.09877778e+03,       2.98844444e+03, 2.88011111e+03, 2.77377778e+03, 2.66944444e+03,       2.56711111e+03, 2.46677778e+03, 2.36844444e+03, 2.27211111e+03,       2.17777778e+03, 2.08544444e+03, 1.99511111e+03, 1.90677778e+03,       1.82044444e+03, 1.73611111e+03, 1.65377778e+03, 1.57344444e+03,       1.49511111e+03, 1.41877778e+03, 1.34444444e+03, 1.27211111e+03,       1.20177778e+03, 1.13344444e+03, 1.06711111e+03, 1.00277778e+03,       9.40444444e+02, 8.80111111e+02, 8.21777778e+02, 7.65444444e+02,       7.11111111e+02, 6.58777778e+02, 6.08444444e+02, 5.60111111e+02,       5.13777778e+02, 4.69444444e+02, 4.27111111e+02, 3.86777778e+02,       3.48444444e+02, 3.12111111e+02, 2.77777778e+02, 2.45444444e+02,       2.15111111e+02, 1.86777778e+02, 1.60444444e+02, 1.36111111e+02,       1.13777778e+02, 9.34444444e+01, 7.51111111e+01, 5.87777778e+01,       4.44444444e+01, 3.21111111e+01, 2.17777778e+01, 1.34444444e+01,       7.11111111e+00, 2.77777778e+00, 4.44444444e-01, 1.11111111e-01,       1.77777778e+00, 5.44444444e+00, 1.11111111e+01, 1.87777778e+01,       2.84444444e+01, 4.01111111e+01, 5.37777778e+01, 6.94444444e+01,       8.71111111e+01, 1.06777778e+02, 1.28444444e+02, 1.52111111e+02,       1.77777778e+02, 2.05444444e+02, 2.35111111e+02, 2.66777778e+02,       3.00444444e+02, 3.36111111e+02, 3.73777778e+02, 4.13444444e+02,       4.55111111e+02, 4.98777778e+02, 5.44444444e+02, 5.92111111e+02,       6.41777778e+02, 6.93444444e+02, 7.47111111e+02, 8.02777778e+02,       8.60444444e+02, 9.20111111e+02, 9.81777778e+02, 1.04544444e+03])"]], "target_calc": [[18.0, "array([1.38389653e-87, 5.33736937e-85, 1.88132746e-82, 6.06059172e-80,       1.78434636e-77, 4.80127724e-75, 1.18072268e-72, 2.65370429e-70,       5.45093048e-68, 1.02329831e-65, 1.75568810e-63, 2.75299848e-61,       3.94528221e-59, 5.16729996e-57, 6.18532849e-55, 6.76667568e-53,       6.76552418e-51, 6.18217132e-49, 5.16290482e-47, 3.94058498e-45,       2.74878501e-43, 1.75240444e-41, 1.02103685e-39, 5.43703314e-38,       2.64603779e-36, 1.17691094e-34, 4.78414856e-33, 1.77737558e-31,       6.03486081e-30, 1.87270255e-28, 5.31109225e-27, 1.37661464e-25,       3.26102718e-24, 7.06008534e-23, 1.39694394e-21, 2.52616378e-20,       4.17501006e-19, 6.30618989e-18, 8.70542662e-17, 1.09831413e-15,       1.26641655e-14, 1.33456608e-13, 1.28533723e-12, 1.13137762e-11,       9.10147076e-11, 6.69158609e-10, 4.49634946e-09, 2.76124246e-08,       1.54975314e-07, 7.94939362e-07, 3.72665317e-06, 1.59667839e-05,       6.25215038e-05, 2.23745794e-04, 7.31802419e-04, 2.18749112e-03,       5.97602290e-03, 1.49207861e-02, 3.40474547e-02, 7.10053537e-02,       1.35335283e-01, 2.35746077e-01, 3.75311099e-01, 5.46074427e-01,       7.26149037e-01, 8.82496903e-01, 9.80198673e-01, 9.95012479e-01,       9.23116346e-01, 7.82704538e-01, 6.06530660e-01, 4.29557358e-01,       2.78037300e-01, 1.64474457e-01, 8.89216175e-02, 4.39369336e-02,       1.98410947e-02, 8.18870101e-03, 3.08871541e-03, 1.06476624e-03,       3.35462628e-04, 9.65934137e-05, 2.54193465e-05, 6.11356797e-06,       1.34381228e-06, 2.69957850e-07, 4.95640532e-08, 8.31670246e-09,       1.27540763e-09, 1.78755887e-10, 2.28973485e-11, 2.68054764e-12,       2.86797501e-13, 2.80440474e-14, 2.50622189e-15, 2.04697171e-16,       1.52797997e-17, 1.04240618e-18, 6.49934797e-20, 3.70353198e-21])"]], "@py_assert3": [[22.0, "None"]], "@py_assert7": [[22.0, "None"]], "@py_assert1": [[22.0, "None"]], "@py_assert4": [[25.0, "None"]], "@py_assert6": [[25.0, "None"]], "@py_assert8": [[28.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 314, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _test_forward_nd_quad_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is quadratic on all dimension, so the target will be scaled\n    # source on all dimension by (1+B)\n    B = 1.0\n    scale = 1 + B\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = 0.5*B*xs_sq\n    target = sb.forward(source, phi)\n\n    target_calc = (scale**-ndim)*np.exp(-xs_sq / (2*(sigma*scale)**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_quad_pot(n=100, ndim=1, abs=None)", "Selected Statement": "assert target == pytest.approx(target_calc, abs=abs)", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {"target_calc": "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [19.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "B": [[8.0, "1.0"]], "scale": [[9.0, "2.0"]], "sigma": [[10.0, "3.3333333333333335"]], "source": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[12.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[13.0, "array([1.2500e+03, 1.2005e+03, 1.1520e+03, 1.1045e+03, 1.0580e+03,       1.0125e+03, 9.6800e+02, 9.2450e+02, 8.8200e+02, 8.4050e+02,       8.0000e+02, 7.6050e+02, 7.2200e+02, 6.8450e+02, 6.4800e+02,       6.1250e+02, 5.7800e+02, 5.4450e+02, 5.1200e+02, 4.8050e+02,       4.5000e+02, 4.2050e+02, 3.9200e+02, 3.6450e+02, 3.3800e+02,       3.1250e+02, 2.8800e+02, 2.6450e+02, 2.4200e+02, 2.2050e+02,       2.0000e+02, 1.8050e+02, 1.6200e+02, 1.4450e+02, 1.2800e+02,       1.1250e+02, 9.8000e+01, 8.4500e+01, 7.2000e+01, 6.0500e+01,       5.0000e+01, 4.0500e+01, 3.2000e+01, 2.4500e+01, 1.8000e+01,       1.2500e+01, 8.0000e+00, 4.5000e+00, 2.0000e+00, 5.0000e-01,       0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03])"]], "target": [[14.0, "array([3.05096834e-13, 1.53620093e-12, 2.76730504e-12, 1.28535587e-11,       2.29398124e-11, 9.83671882e-11, 1.73794564e-10, 6.88577891e-10,       1.20336122e-09, 4.40917555e-09, 7.61498987e-09, 2.58279429e-08,       4.40408960e-08, 1.38413341e-07, 2.32785786e-07, 6.78656885e-07,       1.12452798e-06, 3.04464007e-06, 4.96475215e-06, 1.24987004e-05,       2.00326487e-05, 4.69534144e-05, 7.38741801e-05, 1.61425945e-04,       2.48977711e-04, 5.07941525e-04, 7.66905340e-04, 1.46291267e-03,       2.15892000e-03, 3.85670914e-03, 5.55449827e-03, 9.30760160e-03,       1.30607049e-02, 2.05640432e-02, 2.80673814e-02, 4.15963220e-02,       5.51252627e-02, 7.70373061e-02, 9.89493495e-02, 1.30637792e-01,       1.62326234e-01, 2.02851181e-01, 2.43376128e-01, 2.88432267e-01,       3.33488405e-01, 3.75561756e-01, 4.17635106e-01, 4.47816923e-01,       4.77998741e-01, 4.88999370e-01, 5.00000000e-01, 4.88999370e-01,       4.77998741e-01, 4.47816923e-01, 4.17635106e-01, 3.75561756e-01,       3.33488405e-01, 2.88432267e-01, 2.43376128e-01, 2.02851181e-01,       1.62326234e-01, 1.30637792e-01, 9.89493495e-02, 7.70373061e-02,       5.51252627e-02, 4.15963220e-02, 2.80673814e-02, 2.05640432e-02,       1.30607049e-02, 9.30760160e-03, 5.55449827e-03, 3.85670914e-03,       2.15892000e-03, 1.46291267e-03, 7.66905340e-04, 5.07941525e-04,       2.48977711e-04, 1.61425945e-04, 7.38741801e-05, 4.69534144e-05,       2.00326487e-05, 1.24987004e-05, 4.96475215e-06, 3.04464007e-06,       1.12452798e-06, 6.78656885e-07, 2.32785786e-07, 1.38413341e-07,       4.40408960e-08, 2.58279429e-08, 7.61498987e-09, 4.40917555e-09,       1.20336122e-09, 6.88577891e-10, 1.73794564e-10, 9.83671882e-11,       2.29398124e-11, 1.28535587e-11, 2.76730504e-12, 1.53620093e-12])"]], "target_calc": [[16.0, "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"]], "@py_assert3": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert1": [[20.0, "None"]], "@py_assert4": [[23.0, "None"]], "@py_assert6": [[23.0, "None"]], "@py_assert8": [[26.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 315, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_audioclip_stereo_max_volume(nchannels, channel_muted):\n    def make_frame(t):\n        frame = []\n        # build channels (one of each pair muted)\n        for i in range(int(nchannels / 2)):\n            if channel_muted == \"left\":\n                # if muted channel is left, [0, sound, 0, sound...]\n                frame.append(np.sin(t * 0))\n                frame.append(np.sin(440 * 2 * np.pi * t))\n            else:\n                # if muted channel is right, [sound, 0, sound, 0...]\n                frame.append(np.sin(440 * 2 * np.pi * t))\n                frame.append(np.sin(t * 0))\n        return np.array(frame).T\n\n    clip = AudioClip(make_frame, fps=44100, duration=1)\n    max_volume = clip.max_volume(stereo=True)\n    # if `stereo == True`, `AudioClip.max_volume` returns a Numpy array`\n    assert isinstance(max_volume, np.ndarray)\n    assert len(max_volume) == nchannels\n\n    # check channels muted and with sound\n    for i, channel_max_volume in enumerate(max_volume):\n        if i % 2 == 0:\n            if channel_muted == \"left\":\n                assert channel_max_volume == 0\n            else:\n                assert channel_max_volume > 0\n        else:\n            if channel_muted == \"right\":\n                assert channel_max_volume == 0\n            else:\n                assert channel_max_volume > 0\n\ntest_audioclip_stereo_max_volume(nchannels=2, channel_muted='left')", "Selected Statement": "assert len(max_volume) == nchannels", "Function Input": {"nchannels": "2", "channel_muted": "'left'"}, "Variable Values Before Statement": {"max_volume": "array([0.        , 0.99999975])"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"nchannels": [[1, "2"]], "channel_muted": [[1, "'left'"]], "make_frame": [[2.0, "<function test_audioclip_stereo_max_volume.<locals>.make_frame at 0x7f8c02a8e670>"]], "clip": [[16.0, "{start=0, end=1, duration=1, memoize=False, memoized_t=None, memoized_frame=None, fps=44100, nchannels=2}"]], "max_volume": [[17.0, "array([0.        , 0.99999975])"]], "@py_assert3": [[19.0, "None"]], "@py_assert5": [[19.0, "None"]], "@py_assert2": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "i": [[23.0, "0"], [23.0, "1"]], "channel_max_volume": [[23.0, "0.0"], [23.0, "0.999999746257887"]], "@py_assert1": [[26.0, "None"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 316, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_clip_with_end(duration, start, end, expected_start, expected_duration):\n    clip = ColorClip(color=(255, 0, 0), size=(2, 2), duration=duration).with_fps(1)\n    if start is not None:\n        clip = clip.with_start(start)\n    else:\n        clip.start = None\n    clip = clip.with_end(end)\n\n    assert clip.start == expected_start\n    assert clip.duration == expected_duration\n\ntest_clip_with_end(duration=3, start=1, end=2, expected_start=1, expected_duration=1)", "Selected Statement": "clip = clip.with_start(start)", "Function Input": {"duration": "3", "start": "1", "end": "2", "expected_start": "1", "expected_duration": "1"}, "Variable Values Before Statement": {"start": "1"}, "Value After Statement Execution": "{start", "Variable States During Runtime": {"duration": [[1, "3"]], "start": [[1, "1"]], "end": [[1, "2"]], "expected_start": [[1, "1"]], "expected_duration": [[1, "1"]], "clip": [[2.0, "{start=0, end=3, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"], [4.0, "{start=1, end=4, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"], [7.0, "{start=1, end=2, duration=1, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(2, 2), img=array([[[255,   0,   0],        [255,   0,   0]],       [[255,   0,   0],        [255,   0,   0]]]), fps=1}"]], "@py_assert1": [[9.0, "None"]], "@py_assert3": [[9.0, "None"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 317, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def subprocess_call(cmd, logger=\"bar\"):\n    \"\"\"Executes the given subprocess command.\n\n    Set logger to None or a custom Proglog logger to avoid printings.\n    \"\"\"\n    logger = proglog.default_bar_logger(logger)\n    logger(message=\"MoviePy - Running:\\n>>> \" + \" \".join(cmd))\n\n    popen_params = cross_platform_popen_params(\n        {\"stdout\": sp.DEVNULL, \"stderr\": sp.PIPE, \"stdin\": sp.DEVNULL}\n    )\n\n    proc = sp.Popen(cmd, **popen_params)\n\n    out, err = proc.communicate()  # proc.wait()\n    proc.stderr.close()\n\n    if proc.returncode:\n        logger(message=\"MoviePy - Command returned an error\")\n        raise IOError(err.decode(\"utf8\"))\n    else:\n        logger(message=\"MoviePy - Command successful\")\n\n    del proc\n\nsubprocess_call(cmd=['unset', '-background', 'transparent', '-fill', 'white', '-font', 'Liberation-Mono', '-pointsize', '25', '-size', '640x480', '-gravity', 'center', 'caption:@/tmp/tmp6pdbi5v3.txt', '-type', 'truecolormatte', 'PNG32:/tmp/tmpkd0efulh.png'], logger=None)", "Selected Statement": "logger = proglog.default_bar_logger(logger)", "Function Input": {"cmd": "['unset', '-background', 'transparent', '-fill', 'white', '-font', 'Liberation-Mono', '-pointsize', '25', '-size', '640x480', '-gravity', 'center', 'caption:@/tmp/tmp6pdbi5v3.txt', '-type', 'truecolormatte', 'PNG32:/tmp/tmpkd0efulh.png']", "logger": "None"}, "Variable Values Before Statement": {"logger": "None"}, "Value After Statement Execution": "{state", "Variable States During Runtime": {"cmd": [[1, "['unset', '-background', 'transparent', '-fill', 'white', '-font', 'Liberation-Mono', '-pointsize', '25', '-size', '640x480', '-gravity', 'center', 'caption:@/tmp/tmp6pdbi5v3.txt', '-type', 'truecolormatte', 'PNG32:/tmp/tmpkd0efulh.png']"]], "logger": [[1, "None"], [6.0, "{state={'bars': OrderedDict()}, stored={}, logs=[], log_indent=0, ignored_bars=None, logged_bars='all', min_time_interval=0, ignore_bars_under=0}"], [7.0, "{state={'bars': OrderedDict(), 'message': 'MoviePy - Running:\\n>>> unset -background transparent -fill white -font Liberation-Mono -pointsize 25 -size 640x480 -gravity center caption:@/tmp/tmp6pdbi5v3.txt -type truecolormatte PNG32:/tmp/tmpkd0efulh.png'}, stored={}, logs=[], log_indent=0, ignored_bars=None, logged_bars='all', min_time_interval=0, ignore_bars_under=0}"]], "popen_params": [[9.0, "{'stdout': -3, 'stderr': -1, 'stdin': -3}"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 318, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def ffmpeg_write_image(filename, image, logfile=False, pixel_format=None):\n    \"\"\"Writes an image (HxWx3 or HxWx4 numpy array) to a file, using ffmpeg.\n\n    Parameters\n    ----------\n\n    filename : str\n        Path to the output file.\n\n    image : np.ndarray\n        Numpy array with the image data.\n\n    logfile : bool, optional\n        Writes the ffmpeg output inside a logging file (``True``) or not\n        (``False``).\n\n    pixel_format : str, optional\n        Pixel format for ffmpeg. If not defined, it will be discovered checking\n        if the image data contains an alpha channel (``\"rgba\"``) or not\n        (``\"rgb24\"``).\n    \"\"\"\n    if image.dtype != \"uint8\":\n        image = image.astype(\"uint8\")\n    if not pixel_format:\n        pixel_format = \"rgba\" if (image.shape[2] == 4) else \"rgb24\"\n\n    cmd = [\n        FFMPEG_BINARY,\n        \"-y\",\n        \"-s\",\n        \"%dx%d\" % (image.shape[:2][::-1]),\n        \"-f\",\n        \"rawvideo\",\n        \"-pix_fmt\",\n        pixel_format,\n        \"-i\",\n        \"-\",\n        filename,\n    ]\n\n    if logfile:\n        log_file = open(filename + \".log\", \"w+\")\n    else:\n        log_file = sp.PIPE\n\n    popen_params = cross_platform_popen_params(\n        {\"stdout\": sp.DEVNULL, \"stderr\": log_file, \"stdin\": sp.PIPE}\n    )\n\n    proc = sp.Popen(cmd, **popen_params)\n    out, err = proc.communicate(image.tobytes())\n\n    if proc.returncode:\n        error = (\n            f\"{err}\\n\\nMoviePy error: FFMPEG encountered the following error while \"\n            f\"writing file {filename} with command {cmd}:\\n\\n {err.decode()}\"\n        )\n\n        raise IOError(error)\n\n    del proc\n\nffmpeg_write_image(filename='/tmp/moviepy_ffmpeg_write_image.png', image=array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]]), logfile=False, pixel_format=None)", "Selected Statement": "proc = sp.Popen(cmd, **popen_params)", "Function Input": {"filename": "'/tmp/moviepy_ffmpeg_write_image.png'", "image": "array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]])", "logfile": "False", "pixel_format": "None"}, "Variable Values Before Statement": {"cmd": "['/local/rcs/XXX/miniforge3/envs/Zulko+moviepy/lib/python3.9/site-packages/imageio_ffmpeg/binaries/ffmpeg-linux64-v4.2.2', '-y', '-s', '5x1', '-f', 'rawvideo', '-pix_fmt', 'rgb24', '-i', '-', '/tmp/moviepy_ffmpeg_write_image.png']"}, "Value After Statement Execution": "<Popen: returncode: None args: ['/local/rcs/XXX/miniforge3/envs/Zulko+mov...>", "Variable States During Runtime": {"filename": [[1, "'/tmp/moviepy_ffmpeg_write_image.png'"]], "image": [[1, "array([[[  0., 255.,   0.],        [ 51., 204.,   0.],        [102., 153.,   0.],        [153., 102.,   0.],        [204.,  51.,   0.]]])"], [23.0, "array([[[  0, 255,   0],        [ 51, 204,   0],        [102, 153,   0],        [153, 101,   0],        [204,  50,   0]]], dtype=uint8)"]], "logfile": [[1, "False"]], "pixel_format": [[1, "None"], [25.0, "'rgb24'"]], "cmd": [[27.0, "['/local/rcs/XXX/miniforge3/envs/Zulko+moviepy/lib/python3.9/site-packages/imageio_ffmpeg/binaries/ffmpeg-linux64-v4.2.2', '-y', '-s', '5x1', '-f', 'rawvideo', '-pix_fmt', 'rgb24', '-i', '-', '/tmp/moviepy_ffmpeg_write_image.png']"]], "log_file": [[44.0, "-1"]], "popen_params": [[46.0, "{'stdout': -3, 'stderr': -1, 'stdin': -1}"]], "proc": [[50.0, "<Popen: returncode: None args: ['/local/rcs/XXX/miniforge3/envs/Zulko+mov...>"], [51.0, "<Popen: returncode: 0 args: ['/local/rcs/XXX/miniforge3/envs/Zulko+moviep...>"]], "out": [[51.0, "None"]], "err": [[51.0, "b\"ffmpeg version 4.2.2-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2019 the FFmpeg developers\\n  built with gcc 8 (Debian 8.3.0-6)\\n  configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg\\n  libavutil      56. 31.100 / 56. 31.100\\n  libavcodec     58. 54.100 / 58. 54.100\\n  libavformat    58. 29.100 / 58. 29.100\\n  libavdevice    58.  8.100 / 58.  8.100\\n  libavfilter     7. 57.100 /  7. 57.100\\n  libswscale      5.  5.100 /  5.  5.100\\n  libswresample   3.  5.100 /  3.  5.100\\n  libpostproc    55.  5.100 / 55.  5.100\\nInput #0, rawvideo, from 'pipe:':\\n  Duration: N/A, start: 0.000000, bitrate: 3 kb/s\\n    Stream #0:0: Video: rawvideo (RGB[24] / 0x18424752), rgb24, 5x1, 3 kb/s, 25 tbr, 25 tbn, 25 tbc\\nStream mapping:\\n  Stream #0:0 -> #0:0 (rawvideo (native) -> png (native))\\nOutput #0, image2, to '/tmp/moviepy_ffmpeg_write_image.png':\\n  Metadata:\\n    encoder         : Lavf58.29.100\\n    Stream #0:0: Video: png, rgb24, 5x1, q=2-31, 200 kb/s, 25 fps, 25 tbn, 25 tbc\\n    Metadata:\\n      encoder         : Lavc58.54.100 png\\nframe=    1 fps=0.0 q=-0.0 Lsize=N/A time=00:00:00.04 bitrate=N/A speed=1.64x    \\nvideo:0kB audio:0kB subtitle:0kB other streams:0kB global headers:0kB muxing overhead: unknown\\n\""]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 319, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_freeze(t, freeze_duration, total_duration, padding_end, output_frames):\n    input_frames = [\"R\", \"G\", \"B\"]\n    clip_duration = len(input_frames)\n\n    # create BitmapClip with predefined set of colors, during 1 second each one\n    clip = BitmapClip([list(color) for color in input_frames], fps=1).with_duration(\n        clip_duration\n    )\n\n    # build kwargs passed to `freeze`\n    possible_kwargs = {\n        \"t\": t,\n        \"freeze_duration\": freeze_duration,\n        \"total_duration\": total_duration,\n        \"padding_end\": padding_end,\n    }\n    kwargs = {\n        kw_name: kw_value\n        for kw_name, kw_value in possible_kwargs.items()\n        if kw_value is not None\n    }\n\n    # freeze clip\n    if hasattr(output_frames, \"__traceback__\"):\n        with pytest.raises(output_frames):\n            freeze(clip, **kwargs)\n        return\n    else:\n        freezed_clip = freeze(clip, **kwargs)\n\n    # assert new duration\n    expected_freeze_duration = (\n        freeze_duration\n        if freeze_duration is not None\n        else total_duration - clip_duration\n    )\n    assert freezed_clip.duration == clip_duration + expected_freeze_duration\n\n    # assert colors are the expected\n    for i, color in enumerate(freezed_clip.iter_frames()):\n        expected_color = list(BitmapClip.DEFAULT_COLOR_DICT[output_frames[i]])\n        assert list(color[0][0]) == expected_color\n\ntest_freeze(t=None, freeze_duration=1, total_duration=None, padding_end=None, output_frames=['R', 'R', 'G', 'B'])", "Selected Statement": "freezed_clip = freeze(clip, **kwargs)", "Function Input": {"t": "None", "freeze_duration": "1", "total_duration": "None", "padding_end": "None", "output_frames": "['R', 'R', 'G', 'B']"}, "Variable Values Before Statement": {"clip": "{color_dict={'R': (255, 0, 0), 'G': (0, 255, 0), 'B': (0, 0, 255), 'O': (0, 0, 0), 'W': (255, 255, 255), 'A': (89, 225, 62), 'C': (113, 157, 108), 'D': (215, 182, 143), 'E': (57, 26, 252), 'F': (225, 135, 33)}, total_frames=3, start=0, end=3, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True, fps=1}"}, "Value After Statement Execution": "{start", "Variable States During Runtime": {"t": [[1, "None"]], "freeze_duration": [[1, "1"]], "total_duration": [[1, "None"]], "padding_end": [[1, "None"]], "output_frames": [[1, "['R', 'R', 'G', 'B']"]], "input_frames": [[2.0, "['R', 'G', 'B']"]], "clip_duration": [[3.0, "3"]], "clip": [[6.0, "{color_dict={'R': (255, 0, 0), 'G': (0, 255, 0), 'B': (0, 0, 255), 'O': (0, 0, 0), 'W': (255, 255, 255), 'A': (89, 225, 62), 'C': (113, 157, 108), 'D': (215, 182, 143), 'E': (57, 26, 252), 'F': (225, 135, 33)}, total_frames=3, start=0, end=3, duration=3, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True, fps=1}"]], "possible_kwargs": [[11.0, "{'t': None, 'freeze_duration': 1, 'total_duration': None, 'padding_end': None}"]], "kwargs": [[17.0, "{'freeze_duration': 1}"]], "freezed_clip": [[29.0, "{start=0, end=4, duration=4, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True, timings=array([0, 1, 4]), start_times=array([0, 1]), fps=1}"]], "expected_freeze_duration": [[32.0, "1"]], "@py_assert1": [[37.0, "None"]], "@py_assert6": [[37.0, "None"]], "@py_assert3": [[37.0, "None"]], "i": [[40.0, "0"], [40.0, "1"], [40.0, "2"], [40.0, "3"]], "color": [[40.0, "array([[[255,   0,   0]]])"], [40.0, "array([[[  0, 255,   0]]])"], [40.0, "array([[[  0,   0, 255]]])"]], "expected_color": [[41.0, "[255, 0, 0]"], [41.0, "[0, 255, 0]"], [41.0, "[0, 0, 255]"]], "@py_assert5": [[42.0, "None"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 320, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_mask_and(image_from, duration, color, mask_color, expected_color):\n    \"\"\"Checks ``mask_and`` FX behaviour.\"\"\"\n    clip_size = tuple(random.randint(3, 10) for i in range(2))\n\n    if duration == \"random\":\n        duration = round(random.uniform(0, 0.5), 2)\n\n    # test ImageClip and np.ndarray types as mask argument\n    clip = ColorClip(color=color, size=clip_size).with_duration(duration)\n    mask_clip = ColorClip(color=mask_color, size=clip.size)\n    masked_clip = mask_and(\n        clip, mask_clip if image_from == \"ImageClip\" else mask_clip.get_frame(0)\n    )\n\n    assert masked_clip.duration == clip.duration\n    assert np.array_equal(masked_clip.get_frame(0)[0][0], np.array(expected_color))\n\n    # test VideoClip as mask argument\n    color_frame, mask_color_frame = (np.array([[color]]), np.array([[mask_color]]))\n    clip = VideoClip(lambda t: color_frame).with_duration(duration)\n    mask_clip = VideoClip(lambda t: mask_color_frame).with_duration(duration)\n    masked_clip = mask_and(clip, mask_clip)\n\n    assert np.array_equal(masked_clip.get_frame(0)[0][0], np.array(expected_color))\n\ntest_mask_and(image_from='np.ndarray', duration=None, color=(0, 0, 0), mask_color=(255, 255, 255), expected_color=(0, 0, 0))", "Selected Statement": "mask_clip = VideoClip(lambda t: mask_color_frame).with_duration(duration)", "Function Input": {"image_from": "'np.ndarray'", "duration": "None", "color": "(0, 0, 0)", "mask_color": "(255, 255, 255)", "expected_color": "(0, 0, 0)"}, "Variable Values Before Statement": {"duration": "None"}, "Value After Statement Execution": "{start", "Variable States During Runtime": {"image_from": [[1, "'np.ndarray'"]], "duration": [[1, "None"]], "color": [[1, "(0, 0, 0)"]], "mask_color": [[1, "(255, 255, 255)"]], "expected_color": [[1, "(0, 0, 0)"]], "clip_size": [[3.0, "(8, 3)"]], "clip": [[9.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]]])}"], [20.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "mask_clip": [[10.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]],       [[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]],       [[255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255],        [255, 255, 255]]])}"], [21.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "masked_clip": [[11.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, is_mask=False, has_constant_size=True, size=(8, 3), img=array([[[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]],       [[0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0],        [0, 0, 0]]])}"], [22.0, "{start=0, end=None, duration=None, memoize=False, memoized_t=None, memoized_frame=None, mask=None, audio=None, relative_pos=False, layer=0, size=(1, 1), is_mask=False, has_constant_size=True}"]], "@py_assert1": [[15.0, "None"]], "@py_assert5": [[15.0, "None"]], "@py_assert3": [[15.0, "None"]], "@py_assert6": [[16.0, "None"]], "@py_assert9": [[16.0, "None"]], "@py_assert11": [[16.0, "None"]], "color_frame": [[19.0, "array([[[0, 0, 0]]])"]], "mask_color_frame": [[19.0, "array([[[255, 255, 255]]])"]]}, "Program Information": "Project Name: Zulko+moviepy", "idx": 321, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _validate_htype_overwrites(htype: str, htype_overwrite: dict):\n    \"\"\"Raises errors if ``htype_overwrite`` has invalid keys or was missing required values.\"\"\"\n\n    defaults = HTYPE_CONFIGURATIONS[htype]\n\n    for key, value in htype_overwrite.items():\n        if key not in defaults:\n            raise TensorMetaInvalidHtypeOverwriteKey(htype, key, list(defaults.keys()))\n\n        if isinstance(value, str) and value == UNSPECIFIED:\n            if defaults[key] == REQUIRE_USER_SPECIFICATION:\n                raise TensorMetaMissingRequiredValue(htype, key)\n\n    sc = htype_overwrite[\"sample_compression\"]\n    cc = htype_overwrite[\"chunk_compression\"]\n    compr = sc if cc in (None, UNSPECIFIED) else cc\n    actual_htype = f\"link[{htype}]\" if htype_overwrite[\"is_link\"] else htype\n    if htype.startswith(\"image\") and sc == UNSPECIFIED and cc == UNSPECIFIED:\n        raise TensorMetaMissingRequiredValue(\n            actual_htype, [\"chunk_compression\", \"sample_compression\"]  # type: ignore\n        )\n    if htype in (\"audio\", \"video\", \"point_cloud\", \"mesh\", \"nifti\"):\n        if cc not in (UNSPECIFIED, None):\n            raise UnsupportedCompressionError(\"Chunk compression\", htype=htype)\n        elif sc == UNSPECIFIED:\n            raise TensorMetaMissingRequiredValue(\n                actual_htype, \"sample_compression\"  # type: ignore\n            )\n    supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)\n    if (\n        compr\n        and compr != UNSPECIFIED\n        and supported_compressions\n        and compr not in supported_compressions\n    ):\n        raise UnsupportedCompressionError(compr, htype=htype)\n\n_validate_htype_overwrites(htype='generic', htype_overwrite={'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True})", "Selected Statement": "supported_compressions = HTYPE_SUPPORTED_COMPRESSIONS.get(htype)", "Function Input": {"htype": "'generic'", "htype_overwrite": "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"}, "Variable Values Before Statement": {"htype": "'generic'"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"htype": [[1, "'generic'"]], "htype_overwrite": [[1, "{'sample_compression': 'unspecified', 'chunk_compression': 'unspecified', 'dtype': 'unspecified', 'hidden': False, 'tiling_threshold': None, 'max_chunk_size': 2000000, 'is_sequence': False, 'is_link': False, 'verify': True}"]], "defaults": [[4.0, "{'dtype': None, 'sample_compression': None, 'chunk_compression': None, 'typestr': None, 'max_chunk_size': None, 'tiling_threshold': None, 'is_sequence': False, 'is_link': False, 'hidden': False, 'links': None, 'verify': False}"]], "key": [[6.0, "'sample_compression'"], [6.0, "'chunk_compression'"], [6.0, "'dtype'"], [6.0, "'hidden'"], [6.0, "'tiling_threshold'"], [6.0, "'max_chunk_size'"], [6.0, "'is_sequence'"], [6.0, "'is_link'"], [6.0, "'verify'"]], "value": [[6.0, "'unspecified'"], [6.0, "False"], [6.0, "None"], [6.0, "2000000"], [6.0, "False"], [6.0, "True"]], "sc": [[14.0, "'unspecified'"]], "cc": [[15.0, "'unspecified'"]], "compr": [[16.0, "'unspecified'"]], "actual_htype": [[17.0, "'generic'"]], "supported_compressions": [[29.0, "None"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 322, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def serialize_chunkids(version: str, arr: np.ndarray) -> memoryview:\n    \"\"\"Serializes chunk ID encoders into a single byte stream. This is how the encoders will be written to the storage provider.\n\n    Args:\n        version: (str) Version of deeplake library.\n        arr: (np.ndarray) Encoded chunk ids from a `ChunkIdEncoder` instance.\n\n    Returns:\n        Serialized chunk ids as memoryview.\n    \"\"\"\n    len_version = len(version)\n    write_dtype = version_compare(version, \"2.7.6\") >= 0\n    flatbuff = bytearray(1 + int(write_dtype) + len_version + arr.nbytes)\n\n    # Write version\n    len_version = len(version)\n    flatbuff[0] = len_version\n    flatbuff[1 : 1 + len_version] = version.encode(\"ascii\")\n    offset = 1 + len_version\n\n    # write encoder dtype\n    if write_dtype:\n        dtype = arr.dtype\n        num_bytes = int(dtype.itemsize)\n        flatbuff[offset] = num_bytes\n        offset += 1\n\n    # Write ids\n    flatbuff[offset : offset + arr.nbytes] = arr.tobytes()\n    offset += arr.nbytes\n    return memoryview(flatbuff)\n\nserialize_chunkids(version='3.8.18', arr=array([], shape=(0, 2), dtype=uint64))", "Selected Statement": "write_dtype = version_compare(version, \"2.7.6\") >= 0", "Function Input": {"version": "'3.8.18'", "arr": "array([], shape=(0, 2), dtype=uint64)"}, "Variable Values Before Statement": {"version": "'3.8.18'"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"version": [[1, "'3.8.18'"]], "arr": [[1, "array([], shape=(0, 2), dtype=uint64)"]], "len_version": [[11.0, "6"]], "write_dtype": [[12.0, "True"]], "flatbuff": [[13.0, "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [17.0, "bytearray(b'\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [18.0, "bytearray(b'\\x063.8.18\\x00')"], [25.0, "bytearray(b'\\x063.8.18\\x08')"]], "offset": [[19.0, "7"], [26.0, "8"]], "dtype": [[23.0, "dtype('uint64')"]], "num_bytes": [[24.0, "8"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 323, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _draw_random_tile(self):\n        random_index = random.randrange(0, len(self.tile_bag))\n        selected_tile = self.tile_bag.pop(random_index)\n\n        return selected_tile\n\n_draw_random_tile(self=REPR FAILED, self.tile_bag=[*, *, A, A, A, A, A, A, A, A, A, B, B, C, C, D, D, D, D, E, E, E, E, E, E, E, E, E, E, E, E, F, F, G, G, G, H, H, I, I, I, I, I, I, I, I, I, J, K, L, L, L, L, M, M, N, N, N, N, N, N, O, O, O, O, O, O, O, O, P, P, Q, R, R, R, R, R, R, S, S, S, S, T, T, T, T, T, T, U, U, U, U, V, V, W, W, X, Y, Y, Z])", "Selected Statement": "selected_tile = self.tile_bag.pop(random_index)", "Function Input": {"self": "REPR FAILED", "self.tile_bag": "[*, *, A, A, A, A, A, A, A, A, A, B, B, C, C, D, D, D, D, E, E, E, E, E, E, E, E, E, E, E, E, F, F, G, G, G, H, H, I, I, I, I, I, I, I, I, I, J, K, L, L, L, L, M, M, N, N, N, N, N, N, O, O, O, O, O, O, O, O, P, P, Q, R, R, R, R, R, R, S, S, S, S, T, T, T, T, T, T, U, U, U, U, V, V, W, W, X, Y, Y, Z]"}, "Variable Values Before Statement": {"random_index": "89"}, "Value After Statement Execution": "U", "Variable States During Runtime": {"self": [[1, "REPR FAILED"]], "self.tile_bag": [[1, "[*, *, A, A, A, A, A, A, A, A, A, B, B, C, C, D, D, D, D, E, E, E, E, E, E, E, E, E, E, E, E, F, F, G, G, G, H, H, I, I, I, I, I, I, I, I, I, J, K, L, L, L, L, M, M, N, N, N, N, N, N, O, O, O, O, O, O, O, O, P, P, Q, R, R, R, R, R, R, S, S, S, S, T, T, T, T, T, T, U, U, U, U, V, V, W, W, X, Y, Y, Z]"], [3.0, "[*, *, A, A, A, A, A, A, A, A, A, B, B, C, C, D, D, D, D, E, E, E, E, E, E, E, E, E, E, E, E, F, F, G, G, G, H, H, I, I, I, I, I, I, I, I, I, J, K, L, L, L, L, M, M, N, N, N, N, N, N, O, O, O, O, O, O, O, O, P, P, Q, R, R, R, R, R, R, S, S, S, S, T, T, T, T, T, T, U, U, U, V, V, W, W, X, Y, Y, Z]"]], "random_index": [[2.0, "89"]], "selected_tile": [[3.0, "U"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 324, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def move_is_sublist(letter_list_1, letter_list_2):\n    letter_counter_1 = collections.Counter(letter_list_1)\n    letter_counter_2 = collections.Counter(letter_list_2)\n    for letter, cardinality in letter_counter_1.items():\n        if cardinality > letter_counter_2[letter]:\n            # print('Not enough {} tiles in rack.'.format(letter))\n            return False\n\n    return True\n\nmove_is_sublist(letter_list_1=[1, 2, 3], letter_list_2=[1, 2, 3, 4])", "Selected Statement": "letter_counter_2 = collections.Counter(letter_list_2)", "Function Input": {"letter_list_1": "[1, 2, 3]", "letter_list_2": "[1, 2, 3, 4]"}, "Variable Values Before Statement": {"letter_list_2": "[1, 2, 3, 4]"}, "Value After Statement Execution": "Counter({1: 1, 2: 1, 3: 1, 4: 1})", "Variable States During Runtime": {"letter_list_1": [[1, "[1, 2, 3]"]], "letter_list_2": [[1, "[1, 2, 3, 4]"]], "letter_counter_1": [[2.0, "Counter({1: 1, 2: 1, 3: 1})"]], "letter_counter_2": [[3.0, "Counter({1: 1, 2: 1, 3: 1, 4: 1})"]], "letter": [[4.0, "1"], [4.0, "2"], [4.0, "3"]], "cardinality": [[4.0, "1"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 325, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def place_word(self, word, start_location, is_vertical_move):\n        letter_location_set = get_word_letter_location_set(word,\n                                                           start_location,\n                                                           is_vertical_move)\n\n        return self.next_player_move(letter_location_set)\n\nplace_word(self=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0, word='BAKER', start_location=('h', 8), is_vertical_move=False, self.board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, self.move_number=0, self.player_rack_list=[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]], self.player_score_list_list=[[], [], [], []], self.tile_bag=[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y])", "Selected Statement": "letter_location_set = get_word_letter_location_set(word,", "Function Input": {"self": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0", "word": "'BAKER'", "start_location": "('h', 8)", "is_vertical_move": "False", "self.board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "self.move_number": "0", "self.player_rack_list": "[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]", "self.player_score_list_list": "[[], [], [], []]", "self.tile_bag": "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"}, "Variable Values Before Statement": {"word": "'BAKER'", "start_location": "('h', 8)", "is_vertical_move": "False"}, "Value After Statement Execution": "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}", "Variable States During Runtime": {"self": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [6.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 1Player 2's move72 tiles remain in bagPlayer 1: 24Player 2: 0Player 3: 0Player 4: 0"]], "word": [[1, "'BAKER'"]], "start_location": [[1, "('h', 8)"]], "is_vertical_move": [[1, "False"]], "self.board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [6.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "self.move_number": [[1, "0"], [6.0, "1"]], "self.player_rack_list": [[1, "[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [6.0, "[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"]], "self.player_score_list_list": [[1, "[[], [], [], []]"], [6.0, "[[24], [], [], []]"]], "self.tile_bag": [[1, "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"]], "letter_location_set": [[2.0, "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 326, "quantized value": "Non-Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_word_letter_location_set(word, start_location, is_vertical_move):\n    letter_location_set = set()\n    next_location_func = get_next_location_function(\n        use_positive_seek=True,\n        use_vertical_words=is_vertical_move\n    )\n\n    current_location = start_location\n    word_iterator = iter(word)\n    for character in word_iterator:\n        if character == '(':  # characters in parenthesis are existing tiles\n            character = next(word_iterator, None)\n            while character != ')':\n                current_location = next_location_func(current_location)\n                character = next(word_iterator, None)\n\n            character = next(word_iterator, None)\n\n        if character:\n            letter_location_set.add((character, current_location))\n            current_location = next_location_func(current_location)\n\n    return letter_location_set\n\nget_word_letter_location_set(word='BAKER', start_location=('h', 8), is_vertical_move=False)", "Selected Statement": "word_iterator = iter(word)", "Function Input": {"word": "'BAKER'", "start_location": "('h', 8)", "is_vertical_move": "False"}, "Variable Values Before Statement": {"word": "'BAKER'"}, "Value After Statement Execution": "REPR FAILED", "Variable States During Runtime": {"word": [[1, "'BAKER'"]], "start_location": [[1, "('h', 8)"]], "is_vertical_move": [[1, "False"]], "letter_location_set": [[2.0, "set()"], [20.0, "{('B', ('h', 8))}"], [20.0, "{('B', ('h', 8)), ('A', ('i', 8))}"], [20.0, "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8))}"], [20.0, "{('K', ('j', 8)), ('B', ('h', 8)), ('E', ('k', 8)), ('A', ('i', 8))}"], [20.0, "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}"]], "next_location_func": [[3.0, "<function get_next_location_function.<locals>.<lambda> at 0x7feb6dd68f70>"]], "current_location": [[8.0, "('h', 8)"], [21.0, "('i', 8)"], [21.0, "('j', 8)"], [21.0, "('k', 8)"], [21.0, "('l', 8)"], [21.0, "('m', 8)"]], "word_iterator": [[9.0, "REPR FAILED"]], "character": [[10.0, "'B'"], [10.0, "'A'"], [10.0, "'K'"], [10.0, "'E'"], [10.0, "'R'"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 327, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def next_player_move(self, letter_location_set):\n        player_to_move_id, player_rack = get_current_player_data(\n            self.move_number,\n            self.player_rack_list\n        )\n\n        is_legal_move = move_is_legal(self.board,\n                                      self.move_number,\n                                      letter_location_set,\n                                      player_rack)\n\n        if is_legal_move:\n            if move_successfully_challenged():\n                letter_location_set = set()\n\n            for move_letter, board_location in letter_location_set:\n                tile_index = get_rack_tile_index(player_rack, move_letter)\n                tile_obj = player_rack.pop(tile_index)\n                self.board[board_location] = tile_obj\n\n            move_score = score_move(letter_location_set, self.board)\n            self.player_score_list_list[player_to_move_id].append(move_score)\n            self._refill_player_rack(player_rack)\n            self._cancel_bonus_squares(letter_location_set)\n\n            if len(player_rack) == 0 and len(self.tile_bag) == 0:  # Final move\n                last_move_score_list = score_end_of_game(self.player_rack_list,\n                                                         player_to_move_id)\n\n                for i, last_move_score in enumerate(last_move_score_list):\n                    self.player_score_list_list[i].append(last_move_score)\n\n                conclude_game(self.player_score_list_list)\n\n            self.move_number += 1\n            return True\n        else:\n            return False\n\nnext_player_move(self=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0, letter_location_set={('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}, self.board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, self.move_number=0, self.player_rack_list=[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]], self.player_score_list_list=[[], [], [], []], self.tile_bag=[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y])", "Selected Statement": "move_score = score_move(letter_location_set, self.board)", "Function Input": {"self": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0", "letter_location_set": "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}", "self.board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "self.move_number": "0", "self.player_rack_list": "[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]", "self.player_score_list_list": "[[], [], [], []]", "self.tile_bag": "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"}, "Variable Values Before Statement": {"letter_location_set": "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}"}, "Value After Statement Execution": "24", "Variable States During Runtime": {"self": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [18.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, B, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [18.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______B_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [18.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______B_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAK_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, E, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [18.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAK_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKE____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [18.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKE____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 0Player 2: 0Player 3: 0Player 4: 0"], [22.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 0Player 1's move72 tiles remain in bagPlayer 1: 24Player 2: 0Player 3: 0Player 4: 0"], [35.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]Moves played: 1Player 2's move72 tiles remain in bagPlayer 1: 24Player 2: 0Player 3: 0Player 4: 0"]], "letter_location_set": [[1, "{('K', ('j', 8)), ('B', ('h', 8)), ('A', ('i', 8)), ('E', ('k', 8)), ('R', ('l', 8))}"]], "self.board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______B_K_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAK_____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKE____9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"], [19.0, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "self.move_number": [[1, "0"], [35.0, "1"]], "self.player_rack_list": [[1, "[[Q, E, O, S, G, H, E, B, A, K, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [18.0, "[[Q, E, O, S, G, H, E, B, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [18.0, "[[Q, E, O, S, G, H, E, A, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [18.0, "[[Q, E, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [18.0, "[[Q, O, S, G, H, E, E, R], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"], [18.0, "[[Q, O, S, G, H, E, E], [R, Z, L, A, U, L, A], [W, C, E, T, N, E, E], [T, R, O, B, T, N, N]]"]], "self.player_score_list_list": [[1, "[[], [], [], []]"], [22.0, "[[24], [], [], []]"]], "self.tile_bag": [[1, "[*, *, A, A, A, A, A, A, A, B, C, D, D, D, D, E, E, E, E, E, E, E, F, F, G, G, H, I, I, I, I, I, I, I, I, I, J, K, L, L, M, M, N, N, N, O, O, O, O, O, O, P, P, R, R, R, R, S, S, S, T, T, T, U, U, U, V, V, W, X, Y, Y]"]], "player_to_move_id": [[2.0, "0"]], "player_rack": [[2.0, "[Q, E, O, S, G, H, E, B, A, K, E, R]"], [18.0, "[Q, E, O, S, G, H, E, B, A, E, R]"], [18.0, "[Q, E, O, S, G, H, E, A, E, R]"], [18.0, "[Q, E, O, S, G, H, E, E, R]"], [18.0, "[Q, O, S, G, H, E, E, R]"], [18.0, "[Q, O, S, G, H, E, E]"]], "is_legal_move": [[7.0, "True"]], "move_letter": [[16.0, "'K'"], [16.0, "'B'"], [16.0, "'A'"], [16.0, "'E'"], [16.0, "'R'"]], "board_location": [[16.0, "('j', 8)"], [16.0, "('h', 8)"], [16.0, "('i', 8)"], [16.0, "('k', 8)"], [16.0, "('l', 8)"]], "tile_index": [[17.0, "9"], [17.0, "7"], [17.0, "1"], [17.0, "7"]], "tile_obj": [[18.0, "K"], [18.0, "B"], [18.0, "A"], [18.0, "E"], [18.0, "R"]], "move_score": [[21.0, "24"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 328, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def all_move_tiles_connected(board, location_set):\n    column_list = [column for column, _ in location_set]\n    row_list = [row for _, row in location_set]\n    move_is_vertical = (len(set(column_list)) == 1)\n\n    if move_is_vertical:\n        this_column = column_list[0]\n        for this_row in range(min(row_list), max(row_list) + 1):\n            this_tile = board[(this_column, this_row)]\n            if not (this_tile or (this_column, this_row) in location_set):\n                # print('Not all tiles in vertical move are connected: '\n                #       'location {} is empty'.format((this_column, this_row)))\n\n                return False\n    else:\n        column_range = range(\n            config.LETTER_CODE_DICT[min(column_list)],\n            config.LETTER_CODE_DICT[max(column_list)] + 1\n        )\n\n        this_row = row_list[0]\n        for this_column_num in column_range:\n            this_column = chr(this_column_num)\n            this_tile = board[(this_column, this_row)]\n            if not (this_tile or (this_column, this_row) in location_set):\n                # print('Not all tiles in horizontal move are connected: '\n                #       'location {} is empty'.format((this_column, this_row)))\n\n                return False\n\n    return True\n\nall_move_tiles_connected(board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, location_set={('j', 8), ('l', 8), ('h', 8), ('i', 8), ('k', 8)})", "Selected Statement": "move_is_vertical = (len(set(column_list)) == 1)", "Function Input": {"board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "location_set": "{('j', 8), ('l', 8), ('h', 8), ('i', 8), ('k', 8)}"}, "Variable Values Before Statement": {"column_list": "['j', 'l', 'h', 'i', 'k']"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______★_______9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "location_set": [[1, "{('j', 8), ('l', 8), ('h', 8), ('i', 8), ('k', 8)}"]], "column_list": [[2.0, "['j', 'l', 'h', 'i', 'k']"]], "row_list": [[3.0, "[8, 8, 8, 8, 8]"]], "move_is_vertical": [[4.0, "False"]], "column_range": [[16.0, "range(104, 109)"]], "this_row": [[21.0, "8"]], "this_column_num": [[22.0, "104"], [22.0, "105"], [22.0, "106"], [22.0, "107"], [22.0, "108"]], "this_column": [[23.0, "'h'"], [23.0, "'i'"], [23.0, "'j'"], [23.0, "'k'"], [23.0, "'l'"]], "this_tile": [[24.0, "None"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 329, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def location_touches_tile(board, location):\n    adjacent_location_set = get_adjacent_location_set(location)\n    for adjacent_location in adjacent_location_set:\n        if board[adjacent_location]:\n            return True\n\n    return False\n\nlocation_touches_tile(board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______SCRAB___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, location=('i', 13))", "Selected Statement": "adjacent_location_set = get_adjacent_location_set(location)", "Function Input": {"board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______SCRAB___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "location": "('i', 13)"}, "Variable Values Before Statement": {"location": "('i', 13)"}, "Value After Statement Execution": "{('j', 13), ('h', 13), ('i', 14), ('i', 12)}", "Variable States During Runtime": {"board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______SCRAB___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "location": [[1, "('i', 13)"]], "adjacent_location_set": [[2.0, "{('j', 13), ('h', 13), ('i', 14), ('i', 12)}"]], "adjacent_location": [[3.0, "('j', 13)"], [3.0, "('h', 13)"], [3.0, "('i', 14)"], [3.0, "('i', 12)"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 330, "quantized value": "Non-Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def rolling_mean_by_h(x, h, w, name):\n    \"\"\"Compute a rolling mean of x, after first aggregating by h.\n\n    Right-aligned. Computes a single mean for each unique value of h. Each\n    mean is over at least w samples.\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling mean of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    df2 = (\n        df.groupby('h').agg(['sum', 'count']).reset_index().sort_values('h')\n    )\n    xs = df2['x']['sum'].values\n    ns = df2['x']['count'].values\n    hs = df2.h.values\n\n    trailing_i = len(df2) - 1\n    x_sum = 0\n    n_sum = 0\n    # We don't know output size but it is bounded by len(df2)\n    res_x = np.empty(len(df2))\n\n    # Start from the right and work backwards\n    for i in range(len(df2) - 1, -1, -1):\n        x_sum += xs[i]\n        n_sum += ns[i]\n        while n_sum >= w:\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise weight the mean by the difference\n            excess_n = n_sum - w\n            excess_x = excess_n * xs[i] / ns[i]\n            res_x[trailing_i] = (x_sum - excess_x)/ w\n            x_sum -= xs[trailing_i]\n            n_sum -= ns[trailing_i]\n            trailing_i -= 1\n\n    res_h = hs[(trailing_i + 1):]\n    res_x = res_x[(trailing_i + 1):]\n\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_mean_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "trailing_i = len(df2) - 1", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"df2": "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"}, "Value After Statement Execution": "9", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[19.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "df2": [[20.0, "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"]], "xs": [[23.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "ns": [[24.0, "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]], "hs": [[25.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "trailing_i": [[27.0, "9"], [45.0, "8"], [45.0, "7"], [45.0, "6"], [45.0, "5"], [45.0, "4"], [45.0, "3"], [45.0, "2"], [45.0, "1"], [45.0, "0"], [45.0, "-1"]], "x_sum": [[28.0, "0"], [35.0, "9"], [43.0, "0"], [35.0, "8"], [43.0, "0"], [35.0, "7"], [43.0, "0"], [35.0, "6"], [43.0, "0"], [35.0, "5"], [43.0, "0"], [35.0, "4"], [43.0, "0"], [35.0, "3"], [43.0, "0"], [35.0, "2"], [43.0, "0"], [35.0, "1"], [43.0, "0"]], "n_sum": [[29.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"]], "res_x": [[31.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 4.4e-323])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 4.0e+000, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.e+000, 5.e-324, 1.e-323, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0.e+000, 5.e-324, 2.e+000, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"]], "i": [[34.0, "9"], [34.0, "8"], [34.0, "7"], [34.0, "6"], [34.0, "5"], [34.0, "4"], [34.0, "3"], [34.0, "2"], [34.0, "1"], [34.0, "0"]], "excess_n": [[40.0, "0"]], "excess_x": [[41.0, "0.0"]], "res_h": [[47.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 331, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "i = len(hs) - 1", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"hs": "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"}, "Value After Statement Execution": "9", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 332, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def create_request_parameters(parent, request_model, params=None, index=None):\n    \"\"\"\n    Handle request parameters that can be filled in from identifiers,\n    resource data members or constants.\n\n    By passing ``params``, you can invoke this method multiple times and\n    build up a parameter dict over time, which is particularly useful\n    for reverse JMESPath expressions that append to lists.\n\n    :type parent: ServiceResource\n    :param parent: The resource instance to which this action is attached.\n    :type request_model: :py:class:`~boto3.resources.model.Request`\n    :param request_model: The action request model.\n    :type params: dict\n    :param params: If set, then add to this existing dict. It is both\n                   edited in-place and returned.\n    :type index: int\n    :param index: The position of an item within a list\n    :rtype: dict\n    :return: Pre-filled parameters to be sent to the request operation.\n    \"\"\"\n    if params is None:\n        params = {}\n\n    for param in request_model.params:\n        source = param.source\n        target = param.target\n\n        if source == 'identifier':\n            # Resource identifier, e.g. queue.url\n            value = getattr(parent, xform_name(param.name))\n        elif source == 'data':\n            # If this is a data member then it may incur a load\n            # action before returning the value.\n            value = get_data_member(parent, param.path)\n        elif source in ['string', 'integer', 'boolean']:\n            # These are hard-coded values in the definition\n            value = param.value\n        elif source == 'input':\n            # This is provided by the user, so ignore it here\n            continue\n        else:\n            raise NotImplementedError(f'Unsupported source type: {source}')\n\n        build_param_structure(params, target, value, index)\n\n    return params\n\ncreate_request_parameters(parent=dynamodb.Table(name='MyTable'), request_model={_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}, params=None, index=None)", "Selected Statement": "build_param_structure(params, target, value, index)", "Function Input": {"parent": "dynamodb.Table(name='MyTable')", "request_model": "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}", "params": "None", "index": "None"}, "Variable Values Before Statement": {"params": "{}", "target": "'TableName'", "value": "'MyTable'", "index": "None"}, "Value After Statement Execution": "{'TableName': 'MyTable'}", "Variable States During Runtime": {"parent": [[1, "dynamodb.Table(name='MyTable')"]], "request_model": [[1, "{_definition=OrderedDict([('operation', 'Scan'), ('params', [OrderedDict([('target', 'TableName'), ('source', 'identifier'), ('name', 'Name')])])]), operation='Scan'}"]], "params": [[1, "None"], [23.0, "{}"], [45.0, "{'TableName': 'MyTable'}"]], "index": [[1, "None"]], "param": [[25.0, "{target='TableName', source='identifier', name='Name', path=None, value=None}"]], "source": [[26.0, "'identifier'"]], "target": [[27.0, "'TableName'"]], "value": [[31.0, "'MyTable'"]]}, "Program Information": "Project Name: boto+boto3", "idx": 333, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_lexer_single_token(expression, result):\n    lexer = MOALexer()\n    tokens = tuple(token.type for token in lexer.tokenize(expression))\n    assert tokens == result\n\ntest_lexer_single_token(expression='1234', result=('INTEGER',))", "Selected Statement": "tokens = tuple(token.type for token in lexer.tokenize(expression))", "Function Input": {"expression": "'1234'", "result": "('INTEGER',)"}, "Variable Values Before Statement": {"expression": "'1234'"}, "Value After Statement Execution": "('INTEGER',)", "Variable States During Runtime": {"expression": [[1, "'1234'"]], "result": [[1, "('INTEGER',)"]], "lexer": [[2.0, "{}"], [3.0, "{text='1234', index=4, lineno=1}"]], "tokens": [[3.0, "('INTEGER',)"]], "@py_assert1": [[4.0, "None"]]}, "Program Information": "Project Name: Quansight-Labs+python-moa", "idx": 334, "quantized value": "Non-Empty tuple", "mapping_info": {"len(value) == 0": "Empty tuple", "len(value) > 0": "Non-Empty tuple"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def suggest_type(full_text, text_before_cursor):\n    \"\"\"Takes the full_text that is typed so far and also the text before the\n    cursor to suggest completion type and scope.\n\n    Returns a tuple with a type of entity ('table', 'column' etc) and a scope.\n    A scope for a column category will be a list of tables.\n    \"\"\"\n\n    word_before_cursor = last_word(text_before_cursor,\n            include='many_punctuations')\n\n    identifier = None\n\n    # here should be removed once sqlparse has been fixed\n    try:\n        # If we've partially typed a word then word_before_cursor won't be an empty\n        # string. In that case we want to remove the partially typed string before\n        # sending it to the sqlparser. Otherwise the last token will always be the\n        # partially typed string which renders the smart completion useless because\n        # it will always return the list of keywords as completion.\n        if word_before_cursor:\n            if word_before_cursor.endswith(\n                    '(') or word_before_cursor.startswith('\\\\'):\n                parsed = sqlparse.parse(text_before_cursor)\n            else:\n                parsed = sqlparse.parse(\n                    text_before_cursor[:-len(word_before_cursor)])\n\n                # word_before_cursor may include a schema qualification, like\n                # \"schema_name.partial_name\" or \"schema_name.\", so parse it\n                # separately\n                p = sqlparse.parse(word_before_cursor)[0]\n\n                if p.tokens and isinstance(p.tokens[0], Identifier):\n                    identifier = p.tokens[0]\n        else:\n            parsed = sqlparse.parse(text_before_cursor)\n    except (TypeError, AttributeError):\n        return [{'type': 'keyword'}]\n\n    if len(parsed) > 1:\n        # Multiple statements being edited -- isolate the current one by\n        # cumulatively summing statement lengths to find the one that bounds the\n        # current position\n        current_pos = len(text_before_cursor)\n        stmt_start, stmt_end = 0, 0\n\n        for statement in parsed:\n            stmt_len = len(str(statement))\n            stmt_start, stmt_end = stmt_end, stmt_end + stmt_len\n\n            if stmt_end >= current_pos:\n                text_before_cursor = full_text[stmt_start:current_pos]\n                full_text = full_text[stmt_start:]\n                break\n\n    elif parsed:\n        # A single statement\n        statement = parsed[0]\n    else:\n        # The empty string\n        statement = None\n\n    # Check for special commands and handle those separately\n    if statement:\n        # Be careful here because trivial whitespace is parsed as a statement,\n        # but the statement won't have a first token\n        tok1 = statement.token_first()\n        if tok1 and (tok1.value == 'source' or tok1.value.startswith('\\\\')):\n            return suggest_special(text_before_cursor)\n\n    last_token = statement and statement.token_prev(len(statement.tokens))[1] or ''\n\n    return suggest_based_on_last_token(last_token, text_before_cursor,\n                                       full_text, identifier)\n\nsuggest_type(full_text='SELECT  FROM tabl', text_before_cursor='SELECT ')", "Selected Statement": "word_before_cursor = last_word(text_before_cursor,", "Function Input": {"full_text": "'SELECT  FROM tabl'", "text_before_cursor": "'SELECT '"}, "Variable Values Before Statement": {"text_before_cursor": "'SELECT '"}, "Value After Statement Execution": "''", "Variable States During Runtime": {"full_text": [[1, "'SELECT  FROM tabl'"]], "text_before_cursor": [[1, "'SELECT '"]], "word_before_cursor": [[9.0, "''"]], "identifier": [[12.0, "None"]], "parsed": [[37.0, "(<Statement 'SELECT ' at 0x7F95D0DD9D60>,)"]], "statement": [[59.0, "<Statement 'SELECT ' at 0x7F95D0DD9D60>"]], "tok1": [[68.0, "<DML 'SELECT' at 0x7F95D0B3E0A0>"]], "last_token": [[72.0, "<DML 'SELECT' at 0x7F95D0B3E0A0>"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 335, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_mylogin_cnf_path():\n    \"\"\"Return the path to the login path file or None if it doesn't exist.\"\"\"\n    mylogin_cnf_path = os.getenv('MYSQL_TEST_LOGIN_FILE')\n\n    if mylogin_cnf_path is None:\n        app_data = os.getenv('APPDATA')\n        default_dir = os.path.join(app_data, 'MySQL') if app_data else '~'\n        mylogin_cnf_path = os.path.join(default_dir, '.mylogin.cnf')\n\n    mylogin_cnf_path = os.path.expanduser(mylogin_cnf_path)\n\n    if exists(mylogin_cnf_path):\n        logger.debug(\"Found login path file at '{0}'\".format(mylogin_cnf_path))\n        return mylogin_cnf_path\n    return None\n\nget_mylogin_cnf_path()", "Selected Statement": "mylogin_cnf_path = os.path.expanduser(mylogin_cnf_path)", "Function Input": {}, "Variable Values Before Statement": {"mylogin_cnf_path": "'~/.mylogin.cnf'"}, "Value After Statement Execution": "'/home/XXX/.mylogin.cnf'", "Variable States During Runtime": {"mylogin_cnf_path": [[3.0, "None"], [8.0, "'~/.mylogin.cnf'"], [10.0, "'/home/XXX/.mylogin.cnf'"]], "app_data": [[6.0, "None"]], "default_dir": [[7.0, "'~'"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 336, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def read_config_file(f, list_values=True):\n    \"\"\"Read a config file.\n\n    *list_values* set to `True` is the default behavior of ConfigObj.\n    Disabling it causes values to not be parsed for lists,\n    (e.g. 'a,b,c' -> ['a', 'b', 'c']. Additionally, the config values are\n    not unquoted. We are disabling list_values when reading MySQL config files\n    so we can correctly interpret commas in passwords.\n\n    \"\"\"\n\n    if isinstance(f, basestring):\n        f = os.path.expanduser(f)\n\n    try:\n        config = ConfigObj(f, interpolation=False, encoding='utf8',\n                           list_values=list_values)\n    except ConfigObjError as e:\n        log(logger, logging.WARNING, \"Unable to parse line {0} of config file \"\n            \"'{1}'.\".format(e.line_number, f))\n        log(logger, logging.WARNING, \"Using successfully parsed config values.\")\n        return e.config\n    except (IOError, OSError) as e:\n        log(logger, logging.WARNING, \"You don't have permission to read \"\n            \"config file '{0}'.\".format(e.filename))\n        return None\n\n    return config\n\nread_config_file(f={}, list_values=True)", "Selected Statement": "config = ConfigObj(f, interpolation=False, encoding='utf8',", "Function Input": {"f": "{}", "list_values": "True"}, "Variable Values Before Statement": {"f": "{}"}, "Value After Statement Execution": "ConfigObj({'main': {'weather': 'cloudy with a chance of meatballs'}})", "Variable States During Runtime": {"f": [[1, "{}"]], "list_values": [[1, "True"]], "config": [[16.0, "ConfigObj({'main': {'weather': 'cloudy with a chance of meatballs'}})"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 337, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def format_uptime(uptime_in_seconds):\n    \"\"\"Format number of seconds into human-readable string.\n\n    :param uptime_in_seconds: The server uptime in seconds.\n    :returns: A human-readable string representing the uptime.\n\n    >>> uptime = format_uptime('56892')\n    >>> print(uptime)\n    15 hours 48 min 12 sec\n    \"\"\"\n\n    m, s = divmod(int(uptime_in_seconds), 60)\n    h, m = divmod(m, 60)\n    d, h = divmod(h, 24)\n\n    uptime_values = []\n\n    for value, unit in ((d, 'days'), (h, 'hours'), (m, 'min'), (s, 'sec')):\n        if value == 0 and not uptime_values:\n            # Don't include a value/unit if the unit isn't applicable to\n            # the uptime. E.g. don't do 0 days 0 hours 1 min 30 sec.\n            continue\n        elif value == 1 and unit.endswith('s'):\n            # Remove the \"s\" if the unit is singular.\n            unit = unit[:-1]\n        uptime_values.append('{0} {1}'.format(value, unit))\n\n    uptime = ' '.join(uptime_values)\n    return uptime\n\nformat_uptime(uptime_in_seconds=59)", "Selected Statement": "m, s = divmod(int(uptime_in_seconds), 60)", "Function Input": {"uptime_in_seconds": "59"}, "Variable Values Before Statement": {"uptime_in_seconds": "59"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"uptime_in_seconds": [[1, "59"]], "m": [[12.0, "0"]], "s": [[12.0, "59"]], "h": [[13.0, "0"]], "d": [[14.0, "0"]], "uptime_values": [[16.0, "[]"], [26.0, "['59 sec']"]], "value": [[18.0, "0"], [18.0, "59"]], "unit": [[18.0, "'days'"], [18.0, "'hours'"], [18.0, "'min'"], [18.0, "'sec'"]], "uptime": [[28.0, "'59 sec'"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 338, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def read_config_files(files, list_values=True):\n    \"\"\"Read and merge a list of config files.\"\"\"\n\n    config = create_default_config(list_values=list_values)\n    _files = copy(files)\n    while _files:\n        _file = _files.pop(0)\n        _config = read_config_file(_file, list_values=list_values)\n\n        # expand includes only if we were able to parse config\n        # (otherwise we'll just encounter the same errors again)\n        if config is not None:\n            _files = get_included_configs(_file) + _files\n        if bool(_config) is True:\n            config.merge(_config)\n            config.filename = _config.filename\n\n    return config\n\nread_config_files(files=['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc'], list_values=True)", "Selected Statement": "_files = copy(files)", "Function Input": {"files": "['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']", "list_values": "True"}, "Variable Values Before Statement": {"files": "['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"}, "Value After Statement Execution": "['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']", "Variable States During Runtime": {"files": [[1, "['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"]], "list_values": [[1, "True"]], "config": [[4.0, "ConfigObj({'main': {'smart_completion': 'True', 'multi_line': 'False', 'destructive_warning': 'True', 'log_file': '~/.mycli.log', 'log_level': 'INFO', 'timing': 'True', 'beep_after_seconds': '0', 'table_format': 'ascii', 'syntax_style': 'default', 'key_bindings': 'emacs', 'wider_completion_menu': 'False', 'prompt': '\\\\t \\\\u@\\\\h:\\\\d> ', 'prompt_continuation': '->', 'less_chatty': 'False', 'login_path_as_host': 'False', 'auto_vertical_output': 'False', 'keyword_casing': 'auto', 'enable_pager': 'True', 'pager': 'less'}, 'colors': {'completion-menu.completion.current': 'bg:#ffffff #000000', 'completion-menu.completion': 'bg:#008888 #ffffff', 'completion-menu.meta.completion.current': 'bg:#44aaaa #000000', 'completion-menu.meta.completion': 'bg:#448888 #ffffff', 'completion-menu.multi-column-meta': 'bg:#aaffff #000000', 'scrollbar.arrow': 'bg:#003333', 'scrollbar': 'bg:#00aaaa', 'selected': '#ffffff bg:#6666aa', 'search': '#ffffff bg:#4444aa', 'search.current': '#ffffff bg:#44aa44', 'bottom-toolbar': 'bg:#222222 #aaaaaa', 'bottom-toolbar.off': 'bg:#222222 #888888', 'bottom-toolbar.on': 'bg:#222222 #ffffff', 'search-toolbar': 'noinherit bold', 'search-toolbar.text': 'nobold', 'system-toolbar': 'noinherit bold', 'arg-toolbar': 'noinherit bold', 'arg-toolbar.text': 'nobold', 'bottom-toolbar.transaction.valid': 'bg:#222222 #00ff5f bold', 'bottom-toolbar.transaction.failed': 'bg:#222222 #ff005f bold', 'output.header': '#00ff5f bold', 'output.odd-row': '', 'output.even-row': '', 'output.null': '#808080'}, 'favorite_queries': {}, 'alias_dsn': {}})"]], "_files": [[5.0, "['/etc/myclirc', '/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"], [7.0, "['/home/XXX/.config/mycli/myclirc', '~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"], [7.0, "['~/.myclirc', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"], [7.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc']"], [7.0, "[]"]], "_file": [[7.0, "'/etc/myclirc'"], [7.0, "'/home/XXX/.config/mycli/myclirc'"], [7.0, "'~/.myclirc'"], [7.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/dbcli+mycli/dbcli+mycli/.myclirc'"]], "_config": [[8.0, "ConfigObj({})"], [8.0, "ConfigObj({'main': {'smart_completion': 'True', 'multi_line': 'False', 'destructive_warning': 'True', 'log_file': '~/.mycli.log', 'log_level': 'INFO', 'timing': 'True', 'beep_after_seconds': '0', 'table_format': 'ascii', 'syntax_style': 'default', 'key_bindings': 'emacs', 'wider_completion_menu': 'False', 'prompt': '\\\\t \\\\u@\\\\h:\\\\d> ', 'prompt_continuation': '->', 'less_chatty': 'False', 'login_path_as_host': 'False', 'auto_vertical_output': 'False', 'keyword_casing': 'auto', 'enable_pager': 'True', 'pager': 'less'}, 'colors': {'completion-menu.completion.current': 'bg:#ffffff #000000', 'completion-menu.completion': 'bg:#008888 #ffffff', 'completion-menu.meta.completion.current': 'bg:#44aaaa #000000', 'completion-menu.meta.completion': 'bg:#448888 #ffffff', 'completion-menu.multi-column-meta': 'bg:#aaffff #000000', 'scrollbar.arrow': 'bg:#003333', 'scrollbar': 'bg:#00aaaa', 'selected': '#ffffff bg:#6666aa', 'search': '#ffffff bg:#4444aa', 'search.current': '#ffffff bg:#44aa44', 'bottom-toolbar': 'bg:#222222 #aaaaaa', 'bottom-toolbar.off': 'bg:#222222 #888888', 'bottom-toolbar.on': 'bg:#222222 #ffffff', 'search-toolbar': 'noinherit bold', 'search-toolbar.text': 'nobold', 'system-toolbar': 'noinherit bold', 'arg-toolbar': 'noinherit bold', 'arg-toolbar.text': 'nobold', 'bottom-toolbar.transaction.valid': 'bg:#222222 #00ff5f bold', 'bottom-toolbar.transaction.failed': 'bg:#222222 #ff005f bold', 'output.header': '#00ff5f bold', 'output.odd-row': '', 'output.even-row': '', 'output.null': '#808080'}, 'favorite_queries': {}, 'alias_dsn': {}})"], [8.0, "ConfigObj({})"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 339, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def style_factory_output(name, cli_style):\n    try:\n        style = pygments.styles.get_style_by_name(name).styles\n    except ClassNotFound:\n        style = pygments.styles.get_style_by_name('native').styles\n\n    for token in cli_style:\n        if token.startswith('Token.'):\n            token_type, style_value = parse_pygments_style(\n                token, style, cli_style)\n            style.update({token_type: style_value})\n        elif token in PROMPT_STYLE_TO_TOKEN:\n            token_type = PROMPT_STYLE_TO_TOKEN[token]\n            style.update({token_type: cli_style[token]})\n        elif token in OVERRIDE_STYLE_TO_TOKEN:\n            token_type = OVERRIDE_STYLE_TO_TOKEN[token]\n            style.update({token_type: cli_style[token]})\n        else:\n            # TODO: cli helpers will have to switch to ptk.Style\n            logger.error('Unhandled style / class name: %s', token)\n\n    class OutputStyle(PygmentsStyle):\n        default_style = \"\"\n        styles = style\n\n    return OutputStyle\n\nstyle_factory_output(name='default', cli_style={'completion-menu.completion.current': 'bg:#ffffff #000000', 'completion-menu.completion': 'bg:#008888 #ffffff', 'completion-menu.meta.completion.current': 'bg:#44aaaa #000000', 'completion-menu.meta.completion': 'bg:#448888 #ffffff', 'completion-menu.multi-column-meta': 'bg:#aaffff #000000', 'scrollbar.arrow': 'bg:#003333', 'scrollbar': 'bg:#00aaaa', 'selected': '#ffffff bg:#6666aa', 'search': '#ffffff bg:#4444aa', 'search.current': '#ffffff bg:#44aa44', 'bottom-toolbar': 'bg:#222222 #aaaaaa', 'bottom-toolbar.off': 'bg:#222222 #888888', 'bottom-toolbar.on': 'bg:#222222 #ffffff', 'search-toolbar': 'noinherit bold', 'search-toolbar.text': 'nobold', 'system-toolbar': 'noinherit bold', 'arg-toolbar': 'noinherit bold', 'arg-toolbar.text': 'nobold', 'bottom-toolbar.transaction.valid': 'bg:#222222 #00ff5f bold', 'bottom-toolbar.transaction.failed': 'bg:#222222 #ff005f bold', 'output.header': '#00ff5f bold', 'output.odd-row': '', 'output.even-row': '', 'output.null': '#808080'})", "Selected Statement": "style = pygments.styles.get_style_by_name(name).styles", "Function Input": {"name": "'default'", "cli_style": "{'completion-menu.completion.current': 'bg:#ffffff #000000', 'completion-menu.completion': 'bg:#008888 #ffffff', 'completion-menu.meta.completion.current': 'bg:#44aaaa #000000', 'completion-menu.meta.completion': 'bg:#448888 #ffffff', 'completion-menu.multi-column-meta': 'bg:#aaffff #000000', 'scrollbar.arrow': 'bg:#003333', 'scrollbar': 'bg:#00aaaa', 'selected': '#ffffff bg:#6666aa', 'search': '#ffffff bg:#4444aa', 'search.current': '#ffffff bg:#44aa44', 'bottom-toolbar': 'bg:#222222 #aaaaaa', 'bottom-toolbar.off': 'bg:#222222 #888888', 'bottom-toolbar.on': 'bg:#222222 #ffffff', 'search-toolbar': 'noinherit bold', 'search-toolbar.text': 'nobold', 'system-toolbar': 'noinherit bold', 'arg-toolbar': 'noinherit bold', 'arg-toolbar.text': 'nobold', 'bottom-toolbar.transaction.valid': 'bg:#222222 #00ff5f bold', 'bottom-toolbar.transaction.failed': 'bg:#222222 #ff005f bold', 'output.header': '#00ff5f bold', 'output.odd-row': '', 'output.even-row': '', 'output.null': '#808080'}"}, "Variable Values Before Statement": {"name": "'default'"}, "Value After Statement Execution": "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: ''}", "Variable States During Runtime": {"name": [[1, "'default'"]], "cli_style": [[1, "{'completion-menu.completion.current': 'bg:#ffffff #000000', 'completion-menu.completion': 'bg:#008888 #ffffff', 'completion-menu.meta.completion.current': 'bg:#44aaaa #000000', 'completion-menu.meta.completion': 'bg:#448888 #ffffff', 'completion-menu.multi-column-meta': 'bg:#aaffff #000000', 'scrollbar.arrow': 'bg:#003333', 'scrollbar': 'bg:#00aaaa', 'selected': '#ffffff bg:#6666aa', 'search': '#ffffff bg:#4444aa', 'search.current': '#ffffff bg:#44aa44', 'bottom-toolbar': 'bg:#222222 #aaaaaa', 'bottom-toolbar.off': 'bg:#222222 #888888', 'bottom-toolbar.on': 'bg:#222222 #ffffff', 'search-toolbar': 'noinherit bold', 'search-toolbar.text': 'nobold', 'system-toolbar': 'noinherit bold', 'arg-toolbar': 'noinherit bold', 'arg-toolbar.text': 'nobold', 'bottom-toolbar.transaction.valid': 'bg:#222222 #00ff5f bold', 'bottom-toolbar.transaction.failed': 'bg:#222222 #ff005f bold', 'output.header': '#00ff5f bold', 'output.odd-row': '', 'output.even-row': '', 'output.null': '#808080'}"]], "style": [[3.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: ''}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold', Token.Toolbar.Transaction.Failed: 'bg:#222222 #ff005f bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold', Token.Toolbar.Transaction.Failed: 'bg:#222222 #ff005f bold', Token.Output.Header: '#00ff5f bold'}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold', Token.Toolbar.Transaction.Failed: 'bg:#222222 #ff005f bold', Token.Output.Header: '#00ff5f bold', Token.Output.OddRow: ''}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold', Token.Toolbar.Transaction.Failed: 'bg:#222222 #ff005f bold', Token.Output.Header: '#00ff5f bold', Token.Output.OddRow: '', Token.Output.EvenRow: ''}"], [14.0, "{Token.Text.Whitespace: '#bbbbbb', Token.Comment: 'italic #3D7B7B', Token.Comment.Preproc: 'noitalic #9C6500', Token.Keyword: 'bold #008000', Token.Keyword.Pseudo: 'nobold', Token.Keyword.Type: 'nobold #B00040', Token.Operator: '#666666', Token.Operator.Word: 'bold #AA22FF', Token.Name.Builtin: '#008000', Token.Name.Function: '#0000FF', Token.Name.Class: 'bold #0000FF', Token.Name.Namespace: 'bold #0000FF', Token.Name.Exception: 'bold #CB3F38', Token.Name.Variable: '#19177C', Token.Name.Constant: '#880000', Token.Name.Label: '#767600', Token.Name.Entity: 'bold #717171', Token.Name.Attribute: '#687822', Token.Name.Tag: 'bold #008000', Token.Name.Decorator: '#AA22FF', Token.Literal.String: '#BA2121', Token.Literal.String.Doc: 'italic', Token.Literal.String.Interpol: 'bold #A45A77', Token.Literal.String.Escape: 'bold #AA5D1F', Token.Literal.String.Regex: '#A45A77', Token.Literal.String.Symbol: '#19177C', Token.Literal.String.Other: '#008000', Token.Literal.Number: '#666666', Token.Generic.Heading: 'bold #000080', Token.Generic.Subheading: 'bold #800080', Token.Generic.Deleted: '#A00000', Token.Generic.Inserted: '#008400', Token.Generic.Error: '#E40000', Token.Generic.Emph: 'italic', Token.Generic.Strong: 'bold', Token.Generic.EmphStrong: 'bold italic', Token.Generic.Prompt: 'bold #000080', Token.Generic.Output: '#717171', Token.Generic.Traceback: '#04D', Token.Error: 'border:#FF0000', Token: '', Token.Text: '', Token.Escape: '', Token.Other: '', Token.Keyword.Constant: '', Token.Keyword.Declaration: '', Token.Keyword.Namespace: '', Token.Keyword.Reserved: '', Token.Name: '', Token.Name.Builtin.Pseudo: '', Token.Name.Function.Magic: '', Token.Name.Property: '', Token.Name.Other: '', Token.Name.Variable.Class: '', Token.Name.Variable.Global: '', Token.Name.Variable.Instance: '', Token.Name.Variable.Magic: '', Token.Literal: '', Token.Literal.Date: '', Token.Literal.String.Affix: '', Token.Literal.String.Backtick: '', Token.Literal.String.Char: '', Token.Literal.String.Delimiter: '', Token.Literal.String.Double: '', Token.Literal.String.Heredoc: '', Token.Literal.String.Single: '', Token.Literal.Number.Bin: '', Token.Literal.Number.Float: '', Token.Literal.Number.Hex: '', Token.Literal.Number.Integer: '', Token.Literal.Number.Integer.Long: '', Token.Literal.Number.Oct: '', Token.Punctuation: '', Token.Punctuation.Marker: '', Token.Comment.Hashbang: '', Token.Comment.Multiline: '', Token.Comment.PreprocFile: '', Token.Comment.Single: '', Token.Comment.Special: '', Token.Generic: '', Token.Menu.Completions.Completion.Current: 'bg:#ffffff #000000', Token.Menu.Completions.Completion: 'bg:#008888 #ffffff', Token.Menu.Completions.Meta.Current: 'bg:#44aaaa #000000', Token.Menu.Completions.Meta: 'bg:#448888 #ffffff', Token.Menu.Completions.MultiColumnMeta: 'bg:#aaffff #000000', Token.Menu.Completions.ProgressButton: 'bg:#003333', Token.Menu.Completions.ProgressBar: 'bg:#00aaaa', Token.SelectedText: '#ffffff bg:#6666aa', Token.SearchMatch: '#ffffff bg:#4444aa', Token.SearchMatch.Current: '#ffffff bg:#44aa44', Token.Toolbar: 'bg:#222222 #aaaaaa', Token.Toolbar.Off: 'bg:#222222 #888888', Token.Toolbar.On: 'bg:#222222 #ffffff', Token.Toolbar.Search: 'noinherit bold', Token.Toolbar.Search.Text: 'nobold', Token.Toolbar.System: 'noinherit bold', Token.Toolbar.Arg: 'noinherit bold', Token.Toolbar.Arg.Text: 'nobold', Token.Toolbar.Transaction.Valid: 'bg:#222222 #00ff5f bold', Token.Toolbar.Transaction.Failed: 'bg:#222222 #ff005f bold', Token.Output.Header: '#00ff5f bold', Token.Output.OddRow: '', Token.Output.EvenRow: '', Token.Output.Null: '#808080'}"]], "token": [[7.0, "'completion-menu.completion.current'"], [7.0, "'completion-menu.completion'"], [7.0, "'completion-menu.meta.completion.current'"], [7.0, "'completion-menu.meta.completion'"], [7.0, "'completion-menu.multi-column-meta'"], [7.0, "'scrollbar.arrow'"], [7.0, "'scrollbar'"], [7.0, "'selected'"], [7.0, "'search'"], [7.0, "'search.current'"], [7.0, "'bottom-toolbar'"], [7.0, "'bottom-toolbar.off'"], [7.0, "'bottom-toolbar.on'"], [7.0, "'search-toolbar'"], [7.0, "'search-toolbar.text'"], [7.0, "'system-toolbar'"], [7.0, "'arg-toolbar'"], [7.0, "'arg-toolbar.text'"], [7.0, "'bottom-toolbar.transaction.valid'"], [7.0, "'bottom-toolbar.transaction.failed'"], [7.0, "'output.header'"], [7.0, "'output.odd-row'"], [7.0, "'output.even-row'"], [7.0, "'output.null'"]], "token_type": [[13.0, "Token.Menu.Completions.Completion.Current"], [13.0, "Token.Menu.Completions.Completion"], [13.0, "Token.Menu.Completions.Meta.Current"], [13.0, "Token.Menu.Completions.Meta"], [13.0, "Token.Menu.Completions.MultiColumnMeta"], [13.0, "Token.Menu.Completions.ProgressButton"], [13.0, "Token.Menu.Completions.ProgressBar"], [13.0, "Token.SelectedText"], [13.0, "Token.SearchMatch"], [13.0, "Token.SearchMatch.Current"], [13.0, "Token.Toolbar"], [13.0, "Token.Toolbar.Off"], [13.0, "Token.Toolbar.On"], [13.0, "Token.Toolbar.Search"], [13.0, "Token.Toolbar.Search.Text"], [13.0, "Token.Toolbar.System"], [13.0, "Token.Toolbar.Arg"], [13.0, "Token.Toolbar.Arg.Text"], [13.0, "Token.Toolbar.Transaction.Valid"], [13.0, "Token.Toolbar.Transaction.Failed"], [13.0, "Token.Output.Header"], [13.0, "Token.Output.OddRow"], [13.0, "Token.Output.EvenRow"], [13.0, "Token.Output.Null"]], "OutputStyle": [[22.0, "<class 'mycli.clistyle.style_factory_output.<locals>.OutputStyle'>"]]}, "Program Information": "Project Name: dbcli+mycli", "idx": 340, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def contains_sublist(list_: List[Any], sublist: List[Any]) -> bool:\n    \"\"\"Determine if a `list` contains a `sublist`.\n\n    :param list_:\n        list to search for the `sublist` in.\n    :param sublist:\n        Sub list to search for.\n\n    :return:\n        True if `list` contains `sublist`.\n\n    \"\"\"\n    # Adapted from: https://stackoverflow.com/a/12576755\n    if not sublist:\n        return False\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return True\n    return False\n\ncontains_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "for i in range(len(list_)):", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"list_": "[1, 2, 3, 4]"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[16.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 341, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def delete_sublist(list_: List[Any], sublist: List[Any]) -> List[Any]:\n    \"\"\"Remove a `sublist` from the given `list_`.\n\n    :param list_:\n        List to remove the `sublist` from.\n    :param sublist:\n        Sublist to remove from `list_`.\n\n    :return:\n        A copy of `list_` with the `sublist` removed.\n    \"\"\"\n    if not sublist:\n        return list_[:]\n    for i in range(len(list_)):\n        if list_[i] == sublist[0] and list_[i : i + len(sublist)] == sublist:\n            return list_[:i] + list_[i + len(sublist) :]\n    return list_[:]\n\ndelete_sublist(list_=[1, 2, 3, 4], sublist=[1, 2])", "Selected Statement": "for i in range(len(list_)):", "Function Input": {"list_": "[1, 2, 3, 4]", "sublist": "[1, 2]"}, "Variable Values Before Statement": {"list_": "[1, 2, 3, 4]"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"list_": [[1, "[1, 2, 3, 4]"]], "sublist": [[1, "[1, 2]"]], "i": [[14.0, "0"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 342, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def bounded_product(sequence, n=None, seed=None):\n    \"\"\"\n    Returns a shuffled, bounded cartesian product of the input sequence.\n    Designed to cover as wide a range of permutations as possible with a limited number of iterations.\n    Will manifest the whole list in memory, so not suitable for super large sequences.\n\n    :param sequence: iterable\n    :param n: length of returned list\n    :param seed: random seed for reproducibility\n    :return: list\n    \"\"\"\n    p = list(itertools.product(*sequence))\n    if seed is not None:\n        random.seed(seed)\n    random.shuffle(p)\n    return p if n is None else p[:n]\n\nbounded_product(sequence=([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]]), n=50, seed=None)", "Selected Statement": "random.shuffle(p)", "Function Input": {"sequence": "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])", "n": "50", "seed": "None"}, "Variable Values Before Statement": {"p": "[([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis... True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False])]"}, "Value After Statement Execution": "[([0, 1, 1], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, '...abled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True])]", "Variable States During Runtime": {"sequence": [[1, "([[0, 1, 1], [1, 2, 2], [0, 2, 2]], [True, False], [[[['global'], 'all']], [[['local'], 'all']], [[['sparse_variable'], 'all']], [[['sparse_fixed'], 'all']]], [[True, False], [False, True]], [[{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]])"]], "n": [[1, "50"]], "seed": [[1, "None"]], "p": [[12.0, "[([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis... True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False])]"], [15.0, "[([0, 1, 1], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, '...abled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['local'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], True, [[['local'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([1, 2, 2], True, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], True, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['global'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], False, [[['global'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([1, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['sparse_variable'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 2, 2], False, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True]), ([0, 1, 1], True, [[['sparse_variable'], 'all']], [True, False], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 1, 1], True, [[['sparse_fixed'], 'all']], [False, True], [{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, False]), ([0, 2, 2], False, [[['local'], 'all']], [True, False], [{'enabled': True, 'type': 'bfloat16', 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, True])]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 343, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def set_up_autotuning(encoded_config, overwrite_values):\n        config = json.loads(base64.urlsafe_b64decode(encoded_config).decode(\"utf-8\"))\n        overwrite_values = overwrite_values if overwrite_values else {}\n        for tuning_param in AUTOTUNING_ARGS:\n            # TODO: This is for autotuning specifically, may cause surprises for someone with a weird setup\n            if tuning_param in config:\n                overwrite_values[tuning_param] = config[tuning_param]\n        return overwrite_values\n\nset_up_autotuning(encoded_config='eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', overwrite_values={'train_iters': 32})", "Selected Statement": "config = json.loads(base64.urlsafe_b64decode(encoded_config).decode(\"utf-8\"))", "Function Input": {"encoded_config": "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='", "overwrite_values": "{'train_iters': 32}"}, "Variable Values Before Statement": {"encoded_config": "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='"}, "Value After Statement Execution": "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}", "Variable States During Runtime": {"encoded_config": [[1, "'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ=='"]], "overwrite_values": [[1, "{'train_iters': 32}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4}"], [7.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "config": [[2.0, "{'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'optimizer': {'type': 'sm3', 'params': {}}, 'fp16': {'type': 'fp16', 'enabled': True}, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}, 'wall_clock_breakdown': True, 'comms_logger': {'enabled': True, 'verbose': True, 'prof_all': True, 'debug': False}}"]], "tuning_param": [[4.0, "'train_batch_size'"], [4.0, "'train_micro_batch_size_per_gpu'"], [4.0, "'gradient_accumulation_steps'"], [4.0, "'zero_optimization'"], [4.0, "'autotuning'"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 344, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def run_train_test(monkeypatch, overwrite_values: dict):\n    max_train_iters = 32\n    checkpoint_args = {\"train_iters\": max_train_iters}\n    overwrite_values = checkpoint_args\n    input_args = [\"train.py\", \"tests/config/test_setup.yml\"]\n    deepspeed_main_args = simulate_deepy_env(monkeypatch, input_args)\n\n    # Train model, whilst patching collect_loss_for_unit_test to track model loss at each step\n    loss_per_iteration = []\n    with patch(\n        \"megatron.training.collect_loss_for_unit_test\",\n        side_effect=lambda x: loss_per_iteration.append(x),\n    ):\n        train.main(input_args=deepspeed_main_args, overwrite_values=overwrite_values)\n        assert (\n            len(loss_per_iteration) == max_train_iters\n        ), \"patching should have collected loss values from each train step\"\n\n        # loss should have decreased by now (otherwise increasing the max_steps parameter could have the testcase pass)\n        assert min(loss_per_iteration) < loss_per_iteration[0], (\n            \"training loss should improve within \" + str(max_train_iters) + \" steps\"\n        )\n\nrun_train_test(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, overwrite_values={'pos_emb': 'rpe'})", "Selected Statement": "deepspeed_main_args = simulate_deepy_env(monkeypatch, input_args)", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "overwrite_values": "{'pos_emb': 'rpe'}"}, "Variable Values Before Statement": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "input_args": "['train.py', 'tests/config/test_setup.yml']"}, "Value After Statement Execution": "['--hostfile', 'None', '--include', 'localhost:1', 'train.py', '--deepspeed_config', 'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [6.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/7', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_...*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%5', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/7', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'EleutherAI+gpt-neox', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin/python', 'TORCH_CUDA_ARCH_LIST': '', 'KMP_DUPLICATE_LIB_OK': 'True', 'KMP_INIT_AT_FORK': 'FALSE', 'CUDA_MODULE_LOADING': 'LAZY', 'PYTEST_CURRENT_TEST': 'tests/model/test_model_train.py::test_model_training_options[pos_emb-rpe] (call)', 'WORLD_SIZE': '1', 'RANK': '0'}), 'RANK', <notset>)], _cwd=None, _savesyspath=None}"]], "overwrite_values": [[1, "{'pos_emb': 'rpe'}"], [4.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "max_train_iters": [[2.0, "32"]], "checkpoint_args": [[3.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "input_args": [[5.0, "['train.py', 'tests/config/test_setup.yml']"]], "deepspeed_main_args": [[6.0, "['--hostfile', 'None', '--include', 'localhost:1', 'train.py', '--deepspeed_config', 'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', '--megatron_config', 'eyJob3N0ZmlsZSI6ICJOb25lIiwgImluY2x1ZGUiOiAibG9jYWxob3N0OjEiLCAidHJhaW5fYmF0Y2hfc2l6ZSI6IDQsICJ0cmFpbl9taWNyb19iYXRjaF9zaXplX3Blcl9ncHUiOiA0LCAib3B0aW1pemVyIjogeyJ0eXBlIjogInNtMyIsICJwYXJhbXMiOiB7fX0sICJmcDE2IjogeyJ0eXBlIjogImZwMTYiLCAiZW5hYmxlZCI6IHRydWV9LCAiemVyb19vcHRpbWl6YXRpb24iOiB7InN0YWdlIjogMCwgImFsbGdhdGhlcl9wYXJ0aXRpb25zIjogdHJ1ZSwgInJlZHVjZV9zY2F0dGVyIjogdHJ1ZSwgImFsbGdhdGhlcl9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgIm92ZXJsYXBfY29tbSI6IGZhbHNlLCAicmVkdWNlX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAiY29udGlndW91c19ncmFkaWVudHMiOiBmYWxzZX0sICJ3YWxsX2Nsb2NrX2JyZWFrZG93biI6IHRydWUsICJkZWVwc3BlZWRfZXh0cmFfYXJncyI6IHsiY29tbXNfbG9nZ2VyIjogeyJlbmFibGVkIjogdHJ1ZSwgInZlcmJvc2UiOiB0cnVlLCAicHJvZl9hbGwiOiB0cnVlLCAiZGVidWciOiBmYWxzZX19LCAicHJlY2lzaW9uIjogImZwMTYiLCAibnVtX2xheWVycyI6IDIsICJoaWRkZW5fc2l6ZSI6IDgsICJudW1fYXR0ZW50aW9uX2hlYWRzIjogNCwgInNlcV9sZW5ndGgiOiAxMDI0LCAibWF4X3Bvc2l0aW9uX2VtYmVkZGluZ3MiOiAxMDI0LCAicG9zX2VtYiI6ICJyb3RhcnkiLCAibm9fd2VpZ2h0X3R5aW5nIjogdHJ1ZSwgImF0dGVudGlvbl9jb25maWciOiBbImdsb2JhbCIsICJnbG9iYWwiXSwgInNwYXJzaXR5X2NvbmZpZyI6IHt9LCAiaW5pdF9tZXRob2QiOiAic21hbGxfaW5pdCIsICJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2QiOiAid2FuZ19pbml0IiwgImxyX2RlY2F5X3N0eWxlIjogImNvc2luZSIsICJscl9kZWNheV9pdGVycyI6IDIwLCAib3B0aW1pemVyX3R5cGUiOiAic20zIiwgInplcm9fc3RhZ2UiOiAwLCAiemVyb19yZWR1Y2Vfc2NhdHRlciI6IHRydWUsICJ6ZXJvX2NvbnRpZ3VvdXNfZ3JhZGllbnRzIjogZmFsc2UsICJ6ZXJvX3JlZHVjZV9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgInplcm9fYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAibHIiOiAwLjAwMSwgImRhdGFfcGF0aCI6ICJkYXRhL2Vud2lrOC9lbndpazhfdGV4dF9kb2N1bWVudCIsICJkYXRhX2ltcGwiOiAibW1hcCIsICJjb25maWdfZmlsZXMiOiB7InRlc3Rfc2V0dXAueW1sIjogIiMgMTlNIHBhcmFtZXRlciBtb2RlbCwgJiBsb2NhbCBzZXR1cCB3aXRoIHNvbWUgYWRkaXRpb25hbCBzaW1wbGlmaWNhdGlvbnNcbntcbiAgIyBTZXR0aW5ncyB0byBtYWtlIHRoZSB0ZXN0IHNldHVwIGFzIGxpZ2h0d2VpZ2h0IGFzIHBvc3NpYmxlXG4gIFwiZGF0YV9wYXRoXCI6IFwiZGF0YS9lbndpazgvZW53aWs4X3RleHRfZG9jdW1lbnRcIixcbiAgXCJ2b2NhYl9maWxlXCI6IFwiZGF0YS9ncHQyLXZvY2FiLmpzb25cIixcbiAgXCJtZXJnZV9maWxlXCI6IFwiZGF0YS9ncHQyLW1lcmdlcy50eHRcIixcbiAgXCJscl9kZWNheV9pdGVyc1wiOiAyMCxcbiAgXCJ0cmFpbl9pdGVyc1wiOiAyMCxcbiAgXCJob3N0ZmlsZVwiOiBcIk5vbmVcIixcbiAgXCJpbmNsdWRlXCI6IFwibG9jYWxob3N0OjFcIixcbiAgXCJ1c2Vfd2FuZGJcIjogRmFsc2UsXG5cbiAgIyBTZXR0aW5ncyBjb3BpZWQgZnJvbSAxOU0gcGFyYW1ldGVyIGNvbmZpZyAoc29tZSBtb2RpZmljYXRpb25zIGFib3ZlLCBtZWFuaW5nIHdlIGNhbid0IHVzZSBjb25maWdzLzE5TS55bWwgZGlyZWN0bHkpXG4gIFwicGlwZV9wYXJhbGxlbF9zaXplXCI6IDEsXG4gIFwibW9kZWxfcGFyYWxsZWxfc2l6ZVwiOiAxLFxuXG4gICMgbW9kZWwgc2V0dGluZ3NcbiAgXCJudW1fbGF5ZXJzXCI6IDIsXG4gIFwiaGlkZGVuX3NpemVcIjogOCxcbiAgXCJudW1fYXR0ZW50aW9uX2hlYWRzXCI6IDQsXG4gIFwic2VxX2xlbmd0aFwiOiAxMDI0LFxuICBcIm1heF9wb3NpdGlvbl9lbWJlZGRpbmdzXCI6IDEwMjQsXG4gIFwicG9zX2VtYlwiOiBcInJvdGFyeVwiLFxuICBcIm5vX3dlaWdodF90eWluZ1wiOiB0cnVlLFxuICBcImdwdF9qX3Jlc2lkdWFsXCI6IGZhbHNlLFxuICBcIm91dHB1dF9sYXllcl9wYXJhbGxlbGlzbVwiOiBcImNvbHVtblwiLFxuXG4gIFwic2NhbGVkX3VwcGVyX3RyaWFuZ19tYXNrZWRfc29mdG1heF9mdXNpb25cIjogZmFsc2UsXG4gIFwiYmlhc19nZWx1X2Z1c2lvblwiOiBmYWxzZSxcbiAgXCJyb3BlX2Z1c2lvblwiOiBmYWxzZSxcblxuICAjIE9wdGltaXplclxuICBcIm9wdGltaXplclwiOiB7XG4gICAgXCJ0eXBlXCI6IFwic20zXCIsXG4gICAgXCJwYXJhbXNcIjoge30sXG4gIH0sXG5cbiAgIyBwcmVjaXNpb25cbiAgXCJwcmVjaXNpb25cIjogXCJmcDE2XCIsXG5cbiAgIyBpbml0IG1ldGhvZHNcbiAgXCJpbml0X21ldGhvZFwiOiBcInNtYWxsX2luaXRcIixcbiAgXCJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2RcIjogXCJ3YW5nX2luaXRcIixcblxuICBcInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdVwiOiA0LFxuICBcImdhc1wiOiAxLFxuICBcImRhdGFfaW1wbFwiOiBcIm1tYXBcIixcbiAgXCJudW1fd29ya2Vyc1wiOiAxLFxuXG4gICMgYWN0aXZhdGlvbiBjaGVja3BvaW50aW5nXG4gIFwiY2hlY2twb2ludF9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcImNoZWNrcG9pbnRfbnVtX2xheWVyc1wiOiAxLFxuICBcInBhcnRpdGlvbl9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcInN5bmNocm9uaXplX2VhY2hfbGF5ZXJcIjogdHJ1ZSxcblxuICAjIHJlZ3VsYXJpemF0aW9uXG4gIFwiZ3JhZGllbnRfY2xpcHBpbmdcIjogMS4wLFxuICBcIndlaWdodF9kZWNheVwiOiAwLjEsXG4gIFwiaGlkZGVuX2Ryb3BvdXRcIjogMCxcbiAgXCJhdHRlbnRpb25fZHJvcG91dFwiOiAwLFxuXG4gIFwiZGlzdHJpYnV0ZWRfYmFja2VuZFwiOiBcIm5jY2xcIixcbiAgXCJscl9kZWNheV9zdHlsZVwiOiBcImNvc2luZVwiLFxuICBcIndhcm11cFwiOiAwLjAxLFxuICBcImNoZWNrcG9pbnRfZmFjdG9yXCI6IDEwMDAsXG4gIFwiZXZhbF9pbnRlcnZhbFwiOiAxMDAwMDAsXG4gIFwiZXZhbF9pdGVyc1wiOiAxMCxcblxuICBcImxvZ19pbnRlcnZhbFwiOiAxMCxcbiAgXCJzdGVwc19wZXJfcHJpbnRcIjogMTAsXG4gIFwid2FsbF9jbG9ja19icmVha2Rvd25cIjogdHJ1ZSxcblxuICAjIGFkZGl0aW9uYWwgZGVlcHNwZWVkIGFyZ3Mgbm90IHNwZWNpZmllZCBhYm92ZVxuICBcImRlZXBzcGVlZF9leHRyYV9hcmdzXCI6IHtcbiAgICBcImNvbW1zX2xvZ2dlclwiOiB7XG4gICAgICAgIFwiZW5hYmxlZFwiOiB0cnVlLFxuICAgICAgICBcInZlcmJvc2VcIjogdHJ1ZSxcbiAgICAgICAgXCJwcm9mX2FsbFwiOiB0cnVlLFxuICAgICAgICBcImRlYnVnXCI6IGZhbHNlXG4gICAgfSxcbiAgfVxufVxuIn0sICJjaGVja3BvaW50X2ZhY3RvciI6IDEwMDAsICJiYXRjaF9zaXplIjogNCwgInRyYWluX2l0ZXJzIjogMjAsICJldmFsX2l0ZXJzIjogMTAsICJldmFsX2ludGVydmFsIjogMTAwMDAwLCAidm9jYWJfZmlsZSI6ICJkYXRhL2dwdDItdm9jYWIuanNvbiIsICJtZXJnZV9maWxlIjogImRhdGEvZ3B0Mi1tZXJnZXMudHh0IiwgIm51bV93b3JrZXJzIjogMSwgImNoZWNrcG9pbnRfYWN0aXZhdGlvbnMiOiB0cnVlLCAic3luY2hyb25pemVfZWFjaF9sYXllciI6IHRydWUsICJwYXJ0aXRpb25fYWN0aXZhdGlvbnMiOiB0cnVlLCAiZ2FzIjogMSwgImR5bmFtaWNfbG9zc19zY2FsZSI6IHRydWUsICJwaXBlX3BhcmFsbGVsX3NpemUiOiAxLCAid29ybGRfc2l6ZSI6IDEsICJpc19waXBlX3BhcmFsbGVsIjogdHJ1ZSwgInVzZV93YW5kYiI6IGZhbHNlLCAibG9nX2ludGVydmFsIjogMTAsICJ0ZXh0X2dlbl90eXBlIjogInVuY29uZGl0aW9uYWwiLCAibG9jYWxfcmFuayI6IDAsICJyYW5rIjogMCwgInVzZXJfc2NyaXB0IjogInRyYWluLnB5IiwgInNhdmVfaXRlcnMiOiBbXSwgImdsb2JhbF9udW1fZ3B1cyI6IDF9']"]], "loss_per_iteration": [[9.0, "[]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 345, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def run_neox_args_load_test(yaml_files):\n    from megatron.neox_arguments import NeoXArgs\n\n    yaml_list = get_configs_with_path(yaml_files)\n    args_loaded = NeoXArgs.from_ymls(yaml_list)\n    assert isinstance(args_loaded, NeoXArgs)\n\n    # initialize an empty config dictionary to be filled by yamls\n    config = dict()\n\n    # iterate of all to be loaded yaml files\n    for conf_file_name in yaml_list:\n\n        # load file\n        with open(conf_file_name) as conf_file:\n            conf = yaml.load(conf_file, Loader=yaml.FullLoader)\n\n        # check for key duplicates and load values\n        for conf_key, conf_value in conf.items():\n            if conf_key in config:\n                raise ValueError(\n                    f\"Conf file {conf_file_name} has the following duplicate keys with previously loaded file: {conf_key}\"\n                )\n\n            conf_key_converted = conf_key.replace(\n                \"-\", \"_\"\n            )  # TODO remove replace and update configuration files?\n            config[conf_key_converted] = conf_value\n\n    # validate that neox args has the same value as specified in the config (if specified in the config)\n    for k, v in config.items():\n        neox_args_value = getattr(args_loaded, k)\n        assert v == neox_args_value, (\n            \"loaded neox args value \"\n            + str(k)\n            + \" == \"\n            + str(neox_args_value)\n            + \" different from config file \"\n            + str(v)\n        )\n\nrun_neox_args_load_test(yaml_files=['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml'])", "Selected Statement": "args_loaded = NeoXArgs.from_ymls(yaml_list)", "Function Input": {"yaml_files": "['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml']"}, "Variable Values Before Statement": {"yaml_list": "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml']"}, "Value After Statement Execution": "NeoXArgs(distributed_backend", "Variable States During Runtime": {"yaml_files": [[1, "['125M.yml', 'local_setup.yml', 'cpu_mock_config.yml']"]], "NeoXArgs": [[2.0, "<class 'megatron.neox_arguments.arguments.NeoXArgs'>"]], "yaml_list": [[4.0, "['/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml', '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml']"]], "args_loaded": [[5.0, "NeoXArgs(distributed_backend='nccl', local_rank=None, rank=None, lazy_mpu_init=False, short_seq_prob=0.1, eod_mask_loss=False, adlr_autoresume=False, adlr_autoresume_interval=1000, seed=1234, onnx_safe=False, deepscale=False, deepscale_config=None, deepspeed_mpi=False, deepspeed_slurm=False, user_script=None, iteration=None, do_train=None, do_valid=None, do_test=None, save_iters=[10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000, 110000, 120000, 130000, 140000, 150000, 160000, 170000, 180000, 190000, 200000, 210000, 220000, 230000, 240000, 250000, 260000, 270000, 280000, 290000, 300000, 310000], global_num_gpus=1, text_gen_type='unconditional', temperature=0.0, top_p=0.0, top_k=0, return_logits=False, maximum_tokens=64, prompt_end='\\n', sample_input_file=None, sample_output_file='samples.txt', num_samples=1, recompute=False, eval_results_prefix='', eval_tasks=None, use_wandb=True, wandb_group=None, wandb_team=None, wandb_project='neox', wandb_host='https://api.wandb.ai', wandb_init_all_ranks=False, git_hash='7a8fa2f0', log_dir='logs', tensorboard_dir='tensorboard', log_interval=100, log_grad_pct_zeros=False, log_param_norm=False, log_grad_norm=False, log_optimizer_states=False, log_gradient_noise_scale=False, gradient_noise_scale_n_batches=5, gradient_noise_scale_cpu_offload=False, pipe_parallel_size=1, model_parallel_size=1, pipe_partition_method='type:transformer|mlp', world_size=None, is_pipe_parallel=True, data_path='data/enwik8/enwik8_text_document', use_shared_fs=True, train_data_paths=None, label_data_paths=None, test_data_paths=None, valid_data_paths=None, train_data_weights=None, valid_data_weights=None, test_data_weights=None, weight_by_num_documents=False, weighted_sampler_alpha=1.0, data_impl='mmap', mmap_warmup=False, save='checkpoints', s3_path=None, s3_chunk_size=104857600, config_files={'125M.yml': '# GPT-2 pretraining setup\\n{\\n   # parallelism settings ( you will want to change these based on your cluster setup, ideally scheduling pipeline stages\\n   # across the node boundaries )\\n   \"pipe_parallel_size\": 1,\\n   \"model_parallel_size\": 1,\\n\\n   # model settings\\n   \"num_layers\": 12,\\n   \"hidden_size\": 768,\\n   \"num_attention_heads\": 12,\\n   \"seq_length\": 2048,\\n   \"max_position_embeddings\": 2048,\\n   \"norm\": \"layernorm\",\\n   \"pos_emb\": \"rotary\",\\n   \"no_weight_tying\": true,\\n   \"gpt_j_residual\": false,\\n   \"output_layer_parallelism\": \"column\",\\n\\n   # these should provide some speedup but takes a while to build, set to true if desired\\n   \"scaled_upper_triang_masked_softmax_fusion\": false,\\n   \"bias_gelu_fusion\": false,\\n   \"rope_fusion\": false,\\n\\n   # init methods\\n   \"init_method\": \"small_init\",\\n   \"output_layer_init_method\": \"wang_init\",\\n\\n\\n   # optimizer settings\\n   \"optimizer\": {\\n     \"type\": \"Adam\",\\n     \"params\": {\\n       \"lr\": 0.0006,\\n       \"betas\": [0.9, 0.95],\\n       \"eps\": 1.0e-8,\\n     }\\n   },\\n   \"min_lr\": 0.00006,\\n\\n   # for all zero_optimization options, see https://www.deepspeed.ai/docs/config-json/#zero-optimizations-for-fp16-training\\n   \"zero_optimization\": {\\n    \"stage\": 1,\\n    \"allgather_partitions\": True,\\n    \"allgather_bucket_size\": 500000000,\\n    \"overlap_comm\": True,\\n    \"reduce_scatter\": True,\\n    \"reduce_bucket_size\": 500000000,\\n    \"contiguous_gradients\": True,\\n  },\\n\\n   # batch / data settings\\n   \"train_micro_batch_size_per_gpu\": 4,\\n   \"data_impl\": \"mmap\",\\n\\n   # activation checkpointing\\n   \"checkpoint_activations\": true,\\n   \"checkpoint_num_layers\": 1,\\n   \"partition_activations\": true,\\n   \"synchronize_each_layer\": true,\\n\\n   # regularization\\n   \"gradient_clipping\": 1.0,\\n   \"weight_decay\": 0.1,\\n   \"hidden_dropout\": 0.0,\\n   \"attention_dropout\": 0.0,\\n\\n   # precision settings\\n   \"fp16\": {\\n     \"enabled\": true,\\n     \"loss_scale\": 0,\\n     \"loss_scale_window\": 1000,\\n     \"hysteresis\": 2,\\n     \"min_loss_scale\": 1\\n   },\\n\\n   # misc. training settings\\n   \"train_iters\": 320000,\\n   \"lr_decay_iters\": 320000,\\n   \"distributed_backend\": \"nccl\",\\n   \"lr_decay_style\": \"cosine\",\\n   \"warmup\": 0.01,\\n   \"checkpoint_factor\": 10...\\n{\\n  \"global_num_gpus\": 1\\n}\\n'}, load='checkpoints', checkpoint_validation_with_forward_pass=False, checkpoint_scale='linear', checkpoint_factor=10000, extra_save_iters=None, no_save_optim=False, no_save_rng=False, no_load_optim=False, no_load_rng=False, finetune=False, batch_size=4, train_iters=320000, eval_iters=10, keep_last_n_checkpoints=4, eval_interval=1000, split='969, 30, 1', vocab_file='data/gpt2-vocab.json', merge_file='data/gpt2-merges.txt', num_workers=2, exit_interval=None, attention_dropout=0.0, hidden_dropout=0.0, weight_decay=0.1, checkpoint_activations=True, checkpoint_num_layers=1, deepspeed_activation_checkpointing=True, contiguous_checkpointing=False, checkpoint_in_cpu=False, synchronize_each_layer=True, profile_backward=False, partition_activations=True, gas=1, clip_grad=1.0, hysteresis=2, dynamic_loss_scale=True, loss_scale=None, loss_scale_window=1000.0, min_scale=1.0, char_level_ppl=False, use_mup=False, coord_check=False, save_base_shapes=False, base_shapes_file=None, mup_init_scale=1.0, mup_attn_temp=1.0, mup_output_temp=1.0, mup_embedding_mult=1.0, mup_rp_embedding_mult=1.0, mup_width_scale=2, tokenizer_type='GPT2BPETokenizer', padded_vocab_size=None, optimizer_type='Adam', use_bnb_optimizer=False, zero_stage=1, zero_reduce_scatter=True, zero_contiguous_gradients=True, zero_reduce_bucket_size=500000000, zero_allgather_bucket_size=500000000, lr=0.0006, lr_decay_style='cosine', lr_decay_iters=320000, min_lr=6e-05, warmup=0.01, override_lr_scheduler=False, use_checkpoint_lr_scheduler=False, precision='fp16', num_layers=12, hidden_size=768, num_attention_heads=12, seq_length=2048, max_position_embeddings=2048, norm='layernorm', use_qk_layernorm=False, layernorm_epsilon=1e-05, rms_norm_epsilon=1e-08, scalenorm_epsilon=1e-08, pos_emb='rotary', rpe_num_buckets=32, rpe_max_distance=128, opt_pos_emb_offset=0, no_weight_tying=True, attention_config=['global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global', 'global'], sparsity_config={}, num_unique_layers=None, param_sharing_style='grouped', make_vocab_size_divisible_by=128, activation='gelu', scaled_upper_triang_masked_softmax_fusion=False, scaled_masked_softmax_fusion=False, bias_gelu_fusion=False, bias_dropout_fusion=False, rope_fusion=False, fp16_lm_cross_entropy=False, init_method_std=0.02, apply_query_key_layer_scaling=False, use_cpu_initialization=False, attention_softmax_in_fp32=False, rotary_pct=1.0, rotary_emb_base=10000, init_method='small_init', output_layer_init_method='wang_init', gmlp_attn_dim=64, gpt_j_residual=False, gpt_j_tied=False, use_bias_in_norms=True, use_bias_in_attn_linear=True, mlp_type='regular', soft_prompt_tuning=None, output_layer_parallelism='column', deepspeed=True, train_batch_size=4, train_micro_batch_size_per_gpu=4, gradient_accumulation_steps=1, optimizer={'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, scheduler=None, fp32_allreduce=False, prescale_gradients=False, gradient_predivide_factor=1.0, sparse_gradients=False, fp16={'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, bf16=None, amp=None, gradient_clipping=1.0, zero_optimization={'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, curriculum_learning=None, curriculum_seqlen=0, steps_per_print=10, wall_clock_breakdown=True, dump_state=False, flops_profiler=None, communication_data_type=None, autotuning=None, activation_checkpointing=None, sparse_attention=None, data_efficiency=None, tensorboard=None, wandb=None, csv_monitor=None, elasticity=None, comms_logger=None, compression_training=None, checkpoint=None, data_types=None, deepspeed_extra_args=None, hostfile='/mock_path', include=None, exclude=None, num_nodes=-1, num_gpus=None, master_port=29500, master_addr=None, launcher='pdsh', force_multi=False, detect_nvlink_pairs=False, autotuning_run=None, no_ssh_check=False, comment=None, account=None)"]], "@py_assert3": [[6.0, "None"]], "config": [[9.0, "{}"], [28.0, "{'pipe_parallel_size': 1}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True, 'wandb_host': 'https://api.wandb.ai'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True, 'wandb_host': 'https://api.wandb.ai', 'wandb_project': 'neox'}"], [28.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path', 'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True, 'wandb_host': 'https://api.wandb.ai', 'wandb_project': 'neox', 'global_num_gpus': 1}"]], "conf_file_name": [[12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml'"], [12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml'"], [12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml'"]], "conf_file": [[15.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/125M.yml' mode='r' encoding='UTF-8'>"], [15.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/local_setup.yml' mode='r' encoding='UTF-8'>"], [15.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox/configs/cpu_mock_config.yml' mode='r' encoding='UTF-8'>"]], "conf": [[16.0, "{'pipe_parallel_size': 1, 'model_parallel_size': 1, 'num_layers': 12, 'hidden_size': 768, 'num_attention_heads': 12, 'seq_length': 2048, 'max_position_embeddings': 2048, 'norm': 'layernorm', 'pos_emb': 'rotary', 'no_weight_tying': True, 'gpt_j_residual': False, 'output_layer_parallelism': 'column', 'scaled_upper_triang_masked_softmax_fusion': False, 'bias_gelu_fusion': False, 'rope_fusion': False, 'init_method': 'small_init', 'output_layer_init_method': 'wang_init', 'optimizer': {'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}, 'min_lr': 6e-05, 'zero_optimization': {'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}, 'train_micro_batch_size_per_gpu': 4, 'data_impl': 'mmap', 'checkpoint_activations': True, 'checkpoint_num_layers': 1, 'partition_activations': True, 'synchronize_each_layer': True, 'gradient_clipping': 1.0, 'weight_decay': 0.1, 'hidden_dropout': 0.0, 'attention_dropout': 0.0, 'fp16': {'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}, 'train_iters': 320000, 'lr_decay_iters': 320000, 'distributed_backend': 'nccl', 'lr_decay_style': 'cosine', 'warmup': 0.01, 'checkpoint_factor': 10000, 'eval_interval': 1000, 'eval_iters': 10, 'log_interval': 100, 'steps_per_print': 10, 'keep_last_n_checkpoints': 4, 'wall_clock_breakdown': True, 'hostfile': '/mock_path'}"], [16.0, "{'data_path': 'data/enwik8/enwik8_text_document', 'vocab_file': 'data/gpt2-vocab.json', 'merge_file': 'data/gpt2-merges.txt', 'save': 'checkpoints', 'load': 'checkpoints', 'checkpoint_validation_with_forward_pass': False, 'tensorboard_dir': 'tensorboard', 'log_dir': 'logs', 'use_wandb': True, 'wandb_host': 'https://api.wandb.ai', 'wandb_project': 'neox'}"], [16.0, "{'global_num_gpus': 1}"]], "conf_key": [[19.0, "'pipe_parallel_size'"], [19.0, "'model_parallel_size'"], [19.0, "'num_layers'"], [19.0, "'hidden_size'"], [19.0, "'num_attention_heads'"], [19.0, "'seq_length'"], [19.0, "'max_position_embeddings'"], [19.0, "'norm'"], [19.0, "'pos_emb'"], [19.0, "'no_weight_tying'"], [19.0, "'gpt_j_residual'"], [19.0, "'output_layer_parallelism'"], [19.0, "'scaled_upper_triang_masked_softmax_fusion'"], [19.0, "'bias_gelu_fusion'"], [19.0, "'rope_fusion'"], [19.0, "'init_method'"], [19.0, "'output_layer_init_method'"], [19.0, "'optimizer'"], [19.0, "'min_lr'"], [19.0, "'zero_optimization'"], [19.0, "'train_micro_batch_size_per_gpu'"], [19.0, "'data_impl'"], [19.0, "'checkpoint_activations'"], [19.0, "'checkpoint_num_layers'"], [19.0, "'partition_activations'"], [19.0, "'synchronize_each_layer'"], [19.0, "'gradient_clipping'"], [19.0, "'weight_decay'"], [19.0, "'hidden_dropout'"], [19.0, "'attention_dropout'"], [19.0, "'fp16'"], [19.0, "'train_iters'"], [19.0, "'lr_decay_iters'"], [19.0, "'distributed_backend'"], [19.0, "'lr_decay_style'"], [19.0, "'warmup'"], [19.0, "'checkpoint_factor'"], [19.0, "'eval_interval'"], [19.0, "'eval_iters'"], [19.0, "'log_interval'"], [19.0, "'steps_per_print'"], [19.0, "'keep_last_n_checkpoints'"], [19.0, "'wall_clock_breakdown'"], [19.0, "'hostfile'"], [19.0, "'data_path'"], [19.0, "'vocab_file'"], [19.0, "'merge_file'"], [19.0, "'save'"], [19.0, "'load'"], [19.0, "'checkpoint_validation_with_forward_pass'"], [19.0, "'tensorboard_dir'"], [19.0, "'log_dir'"], [19.0, "'use_wandb'"], [19.0, "'wandb_host'"], [19.0, "'wandb_project'"], [19.0, "'global_num_gpus'"]], "conf_value": [[19.0, "1"], [19.0, "12"], [19.0, "768"], [19.0, "12"], [19.0, "2048"], [19.0, "'layernorm'"], [19.0, "'rotary'"], [19.0, "True"], [19.0, "False"], [19.0, "'column'"], [19.0, "False"], [19.0, "'small_init'"], [19.0, "'wang_init'"], [19.0, "{'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}"], [19.0, "6e-05"], [19.0, "{'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}"], [19.0, "4"], [19.0, "'mmap'"], [19.0, "True"], [19.0, "1"], [19.0, "True"], [19.0, "1.0"], [19.0, "0.1"], [19.0, "0.0"], [19.0, "{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}"], [19.0, "320000"], [19.0, "'nccl'"], [19.0, "'cosine'"], [19.0, "0.01"], [19.0, "10000"], [19.0, "1000"], [19.0, "10"], [19.0, "100"], [19.0, "10"], [19.0, "4"], [19.0, "True"], [19.0, "'/mock_path'"], [19.0, "'data/enwik8/enwik8_text_document'"], [19.0, "'data/gpt2-vocab.json'"], [19.0, "'data/gpt2-merges.txt'"], [19.0, "'checkpoints'"], [19.0, "False"], [19.0, "'tensorboard'"], [19.0, "'logs'"], [19.0, "True"], [19.0, "'https://api.wandb.ai'"], [19.0, "'neox'"], [19.0, "1"]], "conf_key_converted": [[25.0, "'pipe_parallel_size'"], [25.0, "'model_parallel_size'"], [25.0, "'num_layers'"], [25.0, "'hidden_size'"], [25.0, "'num_attention_heads'"], [25.0, "'seq_length'"], [25.0, "'max_position_embeddings'"], [25.0, "'norm'"], [25.0, "'pos_emb'"], [25.0, "'no_weight_tying'"], [25.0, "'gpt_j_residual'"], [25.0, "'output_layer_parallelism'"], [25.0, "'scaled_upper_triang_masked_softmax_fusion'"], [25.0, "'bias_gelu_fusion'"], [25.0, "'rope_fusion'"], [25.0, "'init_method'"], [25.0, "'output_layer_init_method'"], [25.0, "'optimizer'"], [25.0, "'min_lr'"], [25.0, "'zero_optimization'"], [25.0, "'train_micro_batch_size_per_gpu'"], [25.0, "'data_impl'"], [25.0, "'checkpoint_activations'"], [25.0, "'checkpoint_num_layers'"], [25.0, "'partition_activations'"], [25.0, "'synchronize_each_layer'"], [25.0, "'gradient_clipping'"], [25.0, "'weight_decay'"], [25.0, "'hidden_dropout'"], [25.0, "'attention_dropout'"], [25.0, "'fp16'"], [25.0, "'train_iters'"], [25.0, "'lr_decay_iters'"], [25.0, "'distributed_backend'"], [25.0, "'lr_decay_style'"], [25.0, "'warmup'"], [25.0, "'checkpoint_factor'"], [25.0, "'eval_interval'"], [25.0, "'eval_iters'"], [25.0, "'log_interval'"], [25.0, "'steps_per_print'"], [25.0, "'keep_last_n_checkpoints'"], [25.0, "'wall_clock_breakdown'"], [25.0, "'hostfile'"], [25.0, "'data_path'"], [25.0, "'vocab_file'"], [25.0, "'merge_file'"], [25.0, "'save'"], [25.0, "'load'"], [25.0, "'checkpoint_validation_with_forward_pass'"], [25.0, "'tensorboard_dir'"], [25.0, "'log_dir'"], [25.0, "'use_wandb'"], [25.0, "'wandb_host'"], [25.0, "'wandb_project'"], [25.0, "'global_num_gpus'"]], "k": [[31.0, "'pipe_parallel_size'"], [31.0, "'model_parallel_size'"], [31.0, "'num_layers'"], [31.0, "'hidden_size'"], [31.0, "'num_attention_heads'"], [31.0, "'seq_length'"], [31.0, "'max_position_embeddings'"], [31.0, "'norm'"], [31.0, "'pos_emb'"], [31.0, "'no_weight_tying'"], [31.0, "'gpt_j_residual'"], [31.0, "'output_layer_parallelism'"], [31.0, "'scaled_upper_triang_masked_softmax_fusion'"], [31.0, "'bias_gelu_fusion'"], [31.0, "'rope_fusion'"], [31.0, "'init_method'"], [31.0, "'output_layer_init_method'"], [31.0, "'optimizer'"], [31.0, "'min_lr'"], [31.0, "'zero_optimization'"], [31.0, "'train_micro_batch_size_per_gpu'"], [31.0, "'data_impl'"], [31.0, "'checkpoint_activations'"], [31.0, "'checkpoint_num_layers'"], [31.0, "'partition_activations'"], [31.0, "'synchronize_each_layer'"], [31.0, "'gradient_clipping'"], [31.0, "'weight_decay'"], [31.0, "'hidden_dropout'"], [31.0, "'attention_dropout'"], [31.0, "'fp16'"], [31.0, "'train_iters'"], [31.0, "'lr_decay_iters'"], [31.0, "'distributed_backend'"], [31.0, "'lr_decay_style'"], [31.0, "'warmup'"], [31.0, "'checkpoint_factor'"], [31.0, "'eval_interval'"], [31.0, "'eval_iters'"], [31.0, "'log_interval'"], [31.0, "'steps_per_print'"], [31.0, "'keep_last_n_checkpoints'"], [31.0, "'wall_clock_breakdown'"], [31.0, "'hostfile'"], [31.0, "'data_path'"], [31.0, "'vocab_file'"], [31.0, "'merge_file'"], [31.0, "'save'"], [31.0, "'load'"], [31.0, "'checkpoint_validation_with_forward_pass'"], [31.0, "'tensorboard_dir'"], [31.0, "'log_dir'"], [31.0, "'use_wandb'"], [31.0, "'wandb_host'"], [31.0, "'wandb_project'"], [31.0, "'global_num_gpus'"]], "v": [[31.0, "1"], [31.0, "12"], [31.0, "768"], [31.0, "12"], [31.0, "2048"], [31.0, "'layernorm'"], [31.0, "'rotary'"], [31.0, "True"], [31.0, "False"], [31.0, "'column'"], [31.0, "False"], [31.0, "'small_init'"], [31.0, "'wang_init'"], [31.0, "{'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}"], [31.0, "6e-05"], [31.0, "{'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}"], [31.0, "4"], [31.0, "'mmap'"], [31.0, "True"], [31.0, "1"], [31.0, "True"], [31.0, "1.0"], [31.0, "0.1"], [31.0, "0.0"], [31.0, "{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}"], [31.0, "320000"], [31.0, "'nccl'"], [31.0, "'cosine'"], [31.0, "0.01"], [31.0, "10000"], [31.0, "1000"], [31.0, "10"], [31.0, "100"], [31.0, "10"], [31.0, "4"], [31.0, "True"], [31.0, "'/mock_path'"], [31.0, "'data/enwik8/enwik8_text_document'"], [31.0, "'data/gpt2-vocab.json'"], [31.0, "'data/gpt2-merges.txt'"], [31.0, "'checkpoints'"], [31.0, "False"], [31.0, "'tensorboard'"], [31.0, "'logs'"], [31.0, "True"], [31.0, "'https://api.wandb.ai'"], [31.0, "'neox'"], [31.0, "1"]], "neox_args_value": [[32.0, "1"], [32.0, "12"], [32.0, "768"], [32.0, "12"], [32.0, "2048"], [32.0, "'layernorm'"], [32.0, "'rotary'"], [32.0, "True"], [32.0, "False"], [32.0, "'column'"], [32.0, "False"], [32.0, "'small_init'"], [32.0, "'wang_init'"], [32.0, "{'type': 'Adam', 'params': {'lr': 0.0006, 'betas': [0.9, 0.95], 'eps': 1e-08}}"], [32.0, "6e-05"], [32.0, "{'stage': 1, 'allgather_partitions': True, 'allgather_bucket_size': 500000000, 'overlap_comm': True, 'reduce_scatter': True, 'reduce_bucket_size': 500000000, 'contiguous_gradients': True}"], [32.0, "4"], [32.0, "'mmap'"], [32.0, "True"], [32.0, "1"], [32.0, "True"], [32.0, "1.0"], [32.0, "0.1"], [32.0, "0.0"], [32.0, "{'enabled': True, 'loss_scale': 0, 'loss_scale_window': 1000, 'hysteresis': 2, 'min_loss_scale': 1}"], [32.0, "320000"], [32.0, "'nccl'"], [32.0, "'cosine'"], [32.0, "0.01"], [32.0, "10000"], [32.0, "1000"], [32.0, "10"], [32.0, "100"], [32.0, "10"], [32.0, "4"], [32.0, "True"], [32.0, "'/mock_path'"], [32.0, "'data/enwik8/enwik8_text_document'"], [32.0, "'data/gpt2-vocab.json'"], [32.0, "'data/gpt2-merges.txt'"], [32.0, "'checkpoints'"], [32.0, "False"], [32.0, "'tensorboard'"], [32.0, "'logs'"], [32.0, "True"], [32.0, "'https://api.wandb.ai'"], [32.0, "'neox'"], [32.0, "1"]], "@py_assert1": [[33.0, "None"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 346, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_args(input_args=None):\n    parser = argparse.ArgumentParser()\n    group = parser.add_argument_group(title=\"input data\")\n    group.add_argument(\n        \"--input\",\n        type=str,\n        required=True,\n        help=\"Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated \"\n        \"list\",\n    )\n    group.add_argument(\n        \"--jsonl-keys\",\n        nargs=\"+\",\n        default=[\"text\"],\n        help=\"space separate listed of keys to extract from jsonl. Defa\",\n    )\n    group.add_argument(\n        \"--num-docs\",\n        default=None,\n        help=\"Optional: Number of documents in the input data (if known) for an accurate progress bar.\",\n        type=int,\n    )\n    group = parser.add_argument_group(title=\"tokenizer\")\n    group.add_argument(\n        \"--tokenizer-type\",\n        type=str,\n        required=True,\n        choices=[\n            \"HFGPT2Tokenizer\",\n            \"HFTokenizer\",\n            \"GPT2BPETokenizer\",\n            \"CharLevelTokenizer\",\n            \"TiktokenTokenizer\",\n            \"SPMTokenizer\",\n        ],\n        help=\"What type of tokenizer to use.\",\n    )\n    group.add_argument(\n        \"--vocab-file\", type=str, default=None, help=\"Path to the vocab file\"\n    )\n    group.add_argument(\n        \"--merge-file\",\n        type=str,\n        default=None,\n        help=\"Path to the BPE merge file (if necessary).\",\n    )\n    group.add_argument(\n        \"--append-eod\",\n        action=\"store_true\",\n        help=\"Append an <eod> token to the end of a document.\",\n    )\n    group.add_argument(\"--ftfy\", action=\"store_true\", help=\"Use ftfy to clean text\")\n    group = parser.add_argument_group(title=\"output data\")\n    group.add_argument(\n        \"--output-prefix\",\n        type=str,\n        required=True,\n        help=\"Path to binary output file without suffix\",\n    )\n    group.add_argument(\n        \"--dataset-impl\",\n        type=str,\n        default=\"mmap\",\n        choices=[\"lazy\", \"cached\", \"mmap\"],\n        help=\"Dataset implementation to use. Default: mmap\",\n    )\n\n    group = parser.add_argument_group(title=\"runtime\")\n    group.add_argument(\n        \"--workers\", type=int, default=1, help=\"Number of worker processes to launch\"\n    )\n    group.add_argument(\n        \"--log-interval\",\n        type=int,\n        default=100,\n        help=\"Interval between progress updates\",\n    )\n    args = parser.parse_args(input_args)\n    args.keep_empty = False\n\n    # some default/dummy values for the tokenizer\n    args.rank = 0\n    args.make_vocab_size_divisible_by = 128\n    args.model_parallel_size = 1\n\n    return args\n\nget_args(input_args=['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])", "Selected Statement": "args = parser.parse_args(input_args)", "Function Input": {"input_args": "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"}, "Variable Values Before Statement": {"input_args": "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"}, "Value After Statement Execution": "Namespace(input", "Variable States During Runtime": {"input_args": [[1, "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"]], "parser": [[2.0, "ArgumentParser(prog='__main__.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)"]], "group": [[3.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[]}"], [4.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)]}"], [11.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)]}"], [17.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)]}"], [23.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[]}"], [24.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)]}"], [38.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)]}"], [41.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)]}"], [47.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)]}"], [52.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)]}"], [53.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[]}"], [54.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)]}"], [60.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)]}"], [68.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[]}"], [69.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)]}"], [72.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), '--log-interval': _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)]}"]], "args": [[78.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100)"], [79.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False)"], [82.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0)"], [83.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128)"], [84.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1)"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 347, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __handle_content_url(content_url):\n        content_url = replace_html(content_url)\n        return ('http://mp.weixin.qq.com{}'.format(\n            content_url) if 'http://mp.weixin.qq.com' not in content_url else content_url) if content_url else ''\n\n__handle_content_url(content_url='/s?timestamp=1500903767&amp;src=3&amp;ver=1&amp;signature=X4l0IQ091w0DY2ERU7fD*h0VUwBxeHPOJH-Uk-vAfaPamMl6ij7fqAIHomnXQ2X2*2J94H0pixVjsjEkL0TbILtKInZ4hqPp3-lC1nQZcN9Fd*BGbTQp7WlZyzLvCXy0Z8yFVF*lIDlo75pemv7kW8wov4Hz5-uiVzBT5q*Nwaw=')", "Selected Statement": "content_url = replace_html(content_url)", "Function Input": {"content_url": "'/s?timestamp=1500903767&amp;src=3&amp;ver=1&amp;signature=X4l0IQ091w0DY2ERU7fD*h0VUwBxeHPOJH-Uk-vAfaPamMl6ij7fqAIHomnXQ2X2*2J94H0pixVjsjEkL0TbILtKInZ4hqPp3-lC1nQZcN9Fd*BGbTQp7WlZyzLvCXy0Z8yFVF*lIDlo75pemv7kW8wov4Hz5-uiVzBT5q*Nwaw='"}, "Variable Values Before Statement": {"content_url": "'/s?timestamp=1500903767&amp;src=3&amp;ver=1&amp;signature=X4l0IQ091w0DY2ERU7fD*h0VUwBxeHPOJH-Uk-vAfaPamMl6ij7fqAIHomnXQ2X2*2J94H0pixVjsjEkL0TbILtKInZ4hqPp3-lC1nQZcN9Fd*BGbTQp7WlZyzLvCXy0Z8yFVF*lIDlo75pemv7kW8wov4Hz5-uiVzBT5q*Nwaw='"}, "Value After Statement Execution": "'/s?timestamp", "Variable States During Runtime": {"content_url": [[1, "'/s?timestamp=1500903767&amp;src=3&amp;ver=1&amp;signature=X4l0IQ091w0DY2ERU7fD*h0VUwBxeHPOJH-Uk-vAfaPamMl6ij7fqAIHomnXQ2X2*2J94H0pixVjsjEkL0TbILtKInZ4hqPp3-lC1nQZcN9Fd*BGbTQp7WlZyzLvCXy0Z8yFVF*lIDlo75pemv7kW8wov4Hz5-uiVzBT5q*Nwaw='"], [2.0, "'/s?timestamp=1500903767&src=3&ver=1&signature=X4l0IQ091w0DY2ERU7fD*h0VUwBxeHPOJH-Uk-vAfaPamMl6ij7fqAIHomnXQ2X2*2J94H0pixVjsjEkL0TbILtKInZ4hqPp3-lC1nQZcN9Fd*BGbTQp7WlZyzLvCXy0Z8yFVF*lIDlo75pemv7kW8wov4Hz5-uiVzBT5q*Nwaw='"]]}, "Program Information": "Project Name: chyroc+WechatSogou", "idx": 348, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def glob_absolute_paths(file: Union[str, Path]) -> List[Path]:\n            path = Path(file)\n            if not path.is_absolute():\n                path = base / path\n            return sorted(path.parent.glob(path.name), key=lambda p: p.stem)\n\nglob_absolute_paths(file='aggrid.js', base=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements'))", "Selected Statement": "path = Path(file)", "Function Input": {"file": "'aggrid.js'", "base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"}, "Variable Values Before Statement": {"file": "'aggrid.js'"}, "Value After Statement Execution": "PosixPath('aggrid.js')", "Variable States During Runtime": {"file": [[1, "'aggrid.js'"]], "base": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"]], "path": [[2.0, "PosixPath('aggrid.js')"], [4.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 349, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def compute_key(path: Path) -> str:\n    \"\"\"Compute a key for a given path using a hash function.\n\n    If the path is relative to the NiceGUI base directory, the key is computed from the relative path.\n    \"\"\"\n    nicegui_base = Path(__file__).parent\n    is_file = path.is_file()\n    try:\n        path = path.relative_to(nicegui_base)\n    except ValueError:\n        pass\n    if is_file:\n        return f'{hash_file_path(path.parent)}/{path.name}'\n    return f'{hash_file_path(path)}'\n\ncompute_key(path=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js'))", "Selected Statement": "path = path.relative_to(nicegui_base)", "Function Input": {"path": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"}, "Variable Values Before Statement": {"nicegui_base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui')"}, "Value After Statement Execution": "PosixPath('elements/aggrid.js')", "Variable States During Runtime": {"path": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"], [9.0, "PosixPath('elements/aggrid.js')"]], "nicegui_base": [[6.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui')"]], "is_file": [[7.0, "True"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 350, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def show_android_class_methods(args: list = None) -> None:\n    \"\"\"\n        Shows the methods available on an Android class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: android hooking list class_methods <class name>', bold=True)\n        return\n\n    class_name = args[0]\n\n    api = state_connection.get_api()\n    methods = api.android_hooking_get_class_methods(class_name)\n\n    # print the enumerated classes\n    for class_name in sorted(methods):\n        click.secho(class_name)\n\n    click.secho('\\nFound {0} method(s)'.format(len(methods)), bold=True)\n\nshow_android_class_methods(args=['com.foo.bar'])", "Selected Statement": "methods = api.android_hooking_get_class_methods(class_name)", "Function Input": {"args": "['com.foo.bar']"}, "Variable Values Before Statement": {"class_name": "'com.foo.bar'"}, "Value After Statement Execution": "['foo', 'bar', 'baz']", "Variable States During Runtime": {"args": [[1, "['com.foo.bar']"]], "class_name": [[13.0, "'com.foo.bar'"], [19.0, "'bar'"], [19.0, "'baz'"], [19.0, "'foo'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041905108928'>"]], "methods": [[16.0, "['foo', 'bar', 'baz']"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 351, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def show_ios_class_methods(args: list) -> None:\n    \"\"\"\n        Displays the methods available in a class.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: ios hooking list class_methods <class name> (--include-parents)', bold=True)\n        return\n\n    classname = args[0]\n\n    api = state_connection.get_api()\n    methods = api.ios_hooking_get_class_methods(classname, _should_include_parent_methods(args))\n\n    if len(methods) > 0:\n\n        # dump the methods to screen\n        for method in methods:\n            click.secho(method)\n\n        click.secho('\\nFound {0} methods'.format(len(methods)), bold=True)\n\n    else:\n        click.secho('No class / methods found')\n\nshow_ios_class_methods(args=['TEKeychainManager'])", "Selected Statement": "methods = api.ios_hooking_get_class_methods(classname, _should_include_parent_methods(args))", "Function Input": {"args": "['TEKeychainManager']"}, "Variable Values Before Statement": {"classname": "'TEKeychainManager'"}, "Value After Statement Execution": "['foo', 'bar']", "Variable States During Runtime": {"args": [[1, "['TEKeychainManager']"]], "classname": [[13.0, "'TEKeychainManager'"]], "api": [[15.0, "<MagicMock name='get_api()' id='140041837197248'>"]], "methods": [[16.0, "['foo', 'bar']"]], "method": [[21.0, "'foo'"], [21.0, "'bar'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 352, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def cat(args: list = None) -> None:\n    \"\"\"\n        Parses a plist on an iOS device and echoes it in a more human\n        readable way.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios plist cat <remote_plist>', bold=True)\n        return\n\n    plist = args[0]\n\n    if not os.path.isabs(plist):\n        pwd = filemanager.pwd()\n        plist = device_state.platform.path_separator.join([pwd, plist])\n\n    api = state_connection.get_api()\n    plist_data = api.ios_plist_read(plist)\n\n    click.secho(plist_data, bold=True)\n\ncat(args=['/foo'])", "Selected Statement": "plist_data = api.ios_plist_read(plist)", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"plist": "'/foo'"}, "Value After Statement Execution": "'foo'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "plist": [[14.0, "'/foo'"]], "api": [[20.0, "<MagicMock name='get_api()' id='140041837108288'>"]], "plist_data": [[21.0, "'foo'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 353, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def save(args: list) -> None:\n    \"\"\"\n        Save the current sessions command history to a file.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: commands save <local destination>', bold=True)\n        return\n\n    destination = os.path.expanduser(args[0]) if args[0].startswith('~') else args[0]\n\n    with open(destination, 'w') as f:\n        for command in app_state.successful_commands:\n            f.write('{0}\\n'.format(command))\n\n    click.secho('Saved commands to: {0}'.format(destination), fg='green')\n\nsave(args=['foo.rc'])", "Selected Statement": "with open(destination, 'w') as f:", "Function Input": {"args": "['foo.rc']"}, "Variable Values Before Statement": {"destination": "'foo.rc'"}, "Value After Statement Execution": "<MagicMock name", "Variable States During Runtime": {"args": [[1, "['foo.rc']"]], "destination": [[13.0, "'foo.rc'"]], "f": [[15.0, "<MagicMock name='open().__enter__()' id='140041834114064'>"]], "command": [[16.0, "'foo'"], [16.0, "'bar'"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 354, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def cd(args: list) -> None:\n    \"\"\"\n        Change the current working directory of the device.\n\n        While this method does not actually change any directories,\n        it simply updates the value in the file_manager_state property\n        that keeps record of the current directory.\n\n        Before changing directories though, some checks are performed\n        on the device to at least ensure that the destination directory\n        exists.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: cd <destination directory>', bold=True)\n        return\n\n    path = args[0]\n    current_dir = pwd()\n\n    # nothing to do\n    if path == '.':\n        return\n\n    # moving one directory back\n    if path == '..':\n\n        split_path = os.path.split(current_dir)\n\n        # nothing to do if we are already at root\n        if len(split_path) == 1:\n            return\n\n        new_path = ''.join(split_path[:-1])\n        click.secho(new_path, fg='green', bold=True)\n\n        file_manager_state.cwd = new_path\n\n        return\n\n    # if we got an absolute path, check if the path\n    # actually exists, and then cd to it if we can\n    if os.path.isabs(path):\n\n        # assume the path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(path, fg='green', bold=True)\n\n            file_manager_state.cwd = path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(path), fg='red')\n\n    # directory is not absolute, tack it on at the end and\n    # see if its legit.\n    else:\n\n        proposed_path = device_state.platform.path_separator.join([current_dir, path])\n\n        # assume the proposed_path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(proposed_path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(proposed_path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(proposed_path, fg='green', bold=True)\n\n            file_manager_state.cwd = proposed_path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(proposed_path), fg='red')\n\ncd(args=['/foo/bar/baz'])", "Selected Statement": "does_exist = _path_exists_android(path)", "Function Input": {"args": "['/foo/bar/baz']"}, "Variable Values Before Statement": {"path": "'/foo/bar/baz'"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"args": [[1, "['/foo/bar/baz']"]], "path": [[21.0, "'/foo/bar/baz'"]], "current_dir": [[22.0, "'/foo'"]], "does_exist": [[49.0, "False"], [56.0, "True"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 355, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def dump_all(args: list) -> None:\n    \"\"\"\n        Dump memory from the currently injected process.\n        Loosely based on:\n            https://github.com/Nightbringer21/fridump\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: memory dump all <local destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    destination = args[0]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Continue, appending to the file?'):\n            return\n\n    # access type used when enumerating ranges\n    access = 'rw-'\n\n    api = state_connection.get_api()\n    ranges = api.memory_list_ranges(access)\n\n    total_size = sum([x['size'] for x in ranges])\n    click.secho('Will dump {0} {1} images, totalling {2}'.format(\n        len(ranges), access, sizeof_fmt(total_size)), fg='green', dim=True)\n\n    with click.progressbar(ranges) as bar:\n        for image in bar:\n            dump = bytearray()\n            bar.label = 'Dumping {0} from base: {1}'.format(sizeof_fmt(image['size']), hex(int(image['base'], 16)))\n\n            # catch and exception thrown while dumping.\n            # this could for a few reasons like if the protection\n            # changes or the range is reallocated\n            try:\n                # grab the (size) bytes starting at the (base_address) in chunks of BLOCK_SIZE\n                chunks = _get_chunks(int(image['base'], 16), int(image['size']), BLOCK_SIZE)\n                for chunk in chunks:\n                    dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n            except Exception as e:\n                continue\n\n            # append the results to the destination file\n            with open(destination, 'ab') as f:\n                f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_all(args=['/foo'])", "Selected Statement": "ranges = api.memory_list_ranges(access)", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"access": "'rw-'"}, "Value After Statement Execution": "[{'size': 100, 'base': '0x7fff90800000'}]", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "destination": [[16.0, "'/foo'"]], "access": [[25.0, "'rw-'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041837128480'>"]], "ranges": [[28.0, "[{'size': 100, 'base': '0x7fff90800000'}]"]], "total_size": [[30.0, "100"]], "bar": [[34.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"], [37.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='Dumping 100.0 B from base: 0x7fff90800000', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"]], "image": [[35.0, "{'size': 100, 'base': '0x7fff90800000'}"]], "dump": [[36.0, "bytearray(b'')"], [46.0, "bytearray(b'\\x00')"]], "chunks": [[44.0, "[(140735617695744, 100)]"]], "chunk": [[45.0, "(140735617695744, 100)"]], "f": [[52.0, "<MagicMock name='open().__enter__()' id='140041837437520'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 356, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def dump_from_base(args: list) -> None:\n    \"\"\"\n        Dump memory from a base address for a specific size to file\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) < 3:\n        click.secho('Usage: memory dump from_base <base_address> <size_to_dump> <local_destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    base_address = args[0]\n    memory_size = args[1]\n    destination = args[2]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Override?'):\n            return\n\n    click.secho('Dumping {0} from {1} to {2}'.format(sizeof_fmt(int(memory_size)), base_address, destination),\n                fg='green', dim=True)\n\n    api = state_connection.get_api()\n\n    # iirc, if you don't cast the return type to a bytearray it uses the sizeof(int) per cell, which is massive\n    dump = bytearray()\n    chunks = _get_chunks(int(base_address, 16), int(memory_size), BLOCK_SIZE)\n    for chunk in chunks:\n        dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n    # append the results to the destination file\n    with open(destination, 'wb') as f:\n        f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_from_base(args=['0x00008000', '200', '/foo'])", "Selected Statement": "chunks = _get_chunks(int(base_address, 16), int(memory_size), BLOCK_SIZE)", "Function Input": {"args": "['0x00008000', '200', '/foo']"}, "Variable Values Before Statement": {"base_address": "'0x00008000'"}, "Value After Statement Execution": "[(32768, 200)]", "Variable States During Runtime": {"args": [[1, "['0x00008000', '200', '/foo']"]], "base_address": [[14.0, "'0x00008000'"]], "memory_size": [[15.0, "'200'"]], "destination": [[16.0, "'/foo'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041905169216'>"]], "dump": [[30.0, "bytearray(b'')"], [33.0, "bytearray(b'\\x00')"]], "chunks": [[31.0, "[(32768, 200)]"]], "chunk": [[32.0, "(32768, 200)"]], "f": [[36.0, "<MagicMock name='open().__enter__()' id='140041907062336'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 357, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def ios_screenshot(args: list = None) -> None:\n    \"\"\"\n        Take an iOS screenshot.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios ui screenshot <local png destination>', bold=True)\n        return\n\n    destination = args[0]\n\n    if not destination.endswith('.png'):\n        destination = destination + '.png'\n\n    api = state_connection.get_api()\n    png = api.ios_ui_screenshot()\n\n    with open(destination, 'wb') as f:\n        f.write(png)\n\n    click.secho('Screenshot saved to: {0}'.format(destination), fg='green')\n\nios_screenshot(args=['foo'])", "Selected Statement": "with open(destination, 'wb') as f:", "Function Input": {"args": "['foo']"}, "Variable Values Before Statement": {"destination": "'foo.png'"}, "Value After Statement Execution": "<MagicMock name", "Variable States During Runtime": {"args": [[1, "['foo']"]], "destination": [[13.0, "'foo'"], [16.0, "'foo.png'"]], "api": [[18.0, "<MagicMock name='get_api()' id='140041828273504'>"]], "png": [[19.0, "b'\\x00'"]], "f": [[21.0, "<MagicMock name='open().__enter__()' id='140041828431664'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 358, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def aes(text, key):\n    pad = 16 - len(text) % 16\n    text = text + bytearray([pad] * pad)\n    encryptor = AES.new(key, 2, b\"0102030405060708\")\n    ciphertext = encryptor.encrypt(text)\n    return base64.b64encode(ciphertext)\n\naes(text=b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}', key=b'0CoJUm6Qyw8W8jud')", "Selected Statement": "pad = 16 - len(text) % 16", "Function Input": {"text": "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'", "key": "b'0CoJUm6Qyw8W8jud'"}, "Variable Values Before Statement": {"text": "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'"}, "Value After Statement Execution": "15", "Variable States During Runtime": {"text": [[1, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'"], [3.0, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f'"]], "key": [[1, "b'0CoJUm6Qyw8W8jud'"]], "pad": [[2.0, "15"]], "encryptor": [[4.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>, <bound method CbcMode.decrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"], [5.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"]], "ciphertext": [[5.0, "b'}8(\\n\\x91;\\xe9\\xca\\x03\\x0b+\\xc3\\xb6\\xb5\\xef\\xc2\\x06\\x0e\\xae?i\\xd3\\x1d\\xd2b\\x9d\\x1c\\xea\\x80\\xf9v\\x1c\\xac{\\x06\\xa2YS*\\xfd\\xbc\\xf6*\\x8fZS\\x12\\xec\\xe8yZ\\x06\\x19d\\x96\\xb6E`\\x11G\\x01V\\xcf\\xa7\\xcf\\xbd\\x90{VxT\\xe3\\x1c\\xc4!\\x96,p3\\xffK\\xc7g\\x17\\xfc\\x0c\\x11\\xdf\\\\\\xff\\xa8\\x84,\\x85j\\x12'"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 359, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def rsa(text, pubkey, modulus):\n    text = text[::-1]\n    rs = pow(int(binascii.hexlify(text), 16), int(pubkey, 16), int(modulus, 16))\n    return format(rs, \"x\").zfill(256)\n\nrsa(text=b'8f0f5370d2e586d8', pubkey='010001', modulus='00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7')", "Selected Statement": "rs = pow(int(binascii.hexlify(text), 16), int(pubkey, 16), int(modulus, 16))", "Function Input": {"text": "b'8f0f5370d2e586d8'", "pubkey": "'010001'", "modulus": "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"}, "Variable Values Before Statement": {"pubkey": "'010001'"}, "Value After Statement Execution": "41289025236364532763659893484694654271957746525301846225496173810914971221673940219469794803075175772641409601769538690249948382654879184221263545282891541468281379611086448019401240456345998524768441427254251530526498242614378789439179129682525095499524622736788988351523341804681052326293260583730641212123", "Variable States During Runtime": {"text": [[1, "b'8f0f5370d2e586d8'"], [2.0, "b'8d685e2d0735f0f8'"]], "pubkey": [[1, "'010001'"]], "modulus": [[1, "'00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7'"]], "rs": [[3.0, "41289025236364532763659893484694654271957746525301846225496173810914971221673940219469794803075175772641409601769538690249948382654879184221263545282891541468281379611086448019401240456345998524768441427254251530526498242614378789439179129682525095499524622736788988351523341804681052326293260583730641212123"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 360, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __setitem__(self, key, val):\n        if key.startswith('path.') and not val.startswith('/'):\n            val = self._absolute_path(val)\n        dict.__setitem__(self, key, val)\n\n__setitem__(self={}, key='path.workdir', val='/home/XXX/.cheat.sh')", "Selected Statement": "dict.__setitem__(self, key, val)", "Function Input": {"self": "{}", "key": "'path.workdir'", "val": "'/home/XXX/.cheat.sh'"}, "Variable Values Before Statement": {"self": "{}", "key": "'path.workdir'", "val": "'/home/XXX/.cheat.sh'"}, "Value After Statement Execution": "'/home/XXX/.cheat.sh'", "Variable States During Runtime": {"self": [[1, "{}"], [4.0, "{'path.workdir': '/home/XXX/.cheat.sh'}"]], "key": [[1, "'path.workdir'"]], "val": [[1, "'/home/XXX/.cheat.sh'"]], "self['path.workdir']": [[4.0, "'/home/XXX/.cheat.sh'"]]}, "Program Information": "Project Name: chubin+cheat.sh", "idx": 361, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _load_config_from_file(default_config, filename):\n    import yaml\n\n    update = {}\n    if not os.path.exists(filename):\n        return update\n\n    with open(filename) as f:\n        newconfig = yaml.load(f.read(), Loader=yaml.SafeLoader)\n    for key, val in default_config.items():\n        newval = _get_nested(newconfig, key)\n        if newval is None:\n            continue\n\n        if isinstance(val, int):\n            try:\n                newval = int(newval)\n            except (ValueError, TypeError):\n                continue\n\n        update[key] = newval\n\n    return update\n\n_load_config_from_file(default_config={'adapters.active': ['tldr', 'cheat', 'fosdem', 'translation', 'rosetta', 'late.nz', 'question', 'cheat.sheets', 'cheat.sheets dir', 'learnxiny', 'rfc', 'oeis', 'chmod'], 'adapters.mandatory': ['search'], 'cache.redis.db': 0, 'cache.redis.host': 'localhost', 'cache.redis.port': 6379, 'cache.redis.prefix': '', 'cache.type': 'redis', 'frontend.styles': ['abap', 'algol', 'algol_nu', 'arduino', 'autumn', 'borland', 'bw', 'colorful', 'default', 'dracula', 'emacs', 'friendly', 'friendly_grayscale', 'fruity', 'github-dark', 'gruvbox-dark', 'gruvbox-light', 'igor', 'inkpot', 'lightbulb', 'lilypond', 'lovelace', 'manni', 'material', 'monokai', 'murphy', 'native', 'nord', 'nord-darker', 'one-dark', 'paraiso-dark', 'paraiso-light', 'pastie', 'perldoc', 'rainbow_dash', 'rrt', 'sas', 'solarized-dark', 'solarized-light', 'staroffice', 'stata-dark', 'stata-light', 'tango', 'trac', 'vim', 'vs', 'xcode', 'zenburn'], 'log.level': 4, 'path.internal.ansi2html': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/ansi2html.sh', 'path.internal.bin': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin', 'path.internal.bin.upstream': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin/upstream', 'path.internal.malformed': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static/malformed-response.html', 'path.internal.pages': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share', 'path.internal.static': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static', 'path.internal.templates': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/templates', 'path.internal.vim': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/vim', 'path.log.main': 'log/main.log', 'path.log.queries': 'log/queries.log', 'path.log.fetch': 'log/fetch.log', 'path.repositories': 'upstream', 'path.spool': 'spool', 'path.workdir': '/home/XXX/.cheat.sh', 'routing.pre': [('^$', 'search'), ('^[^/]*/rosetta(/|$)', 'rosetta'), ('^rfc/', 'rfc'), ('^oeis/', 'oeis'), ('^chmod/', 'chmod'), ('^:', 'internal'), ('/:list$', 'internal'), ('/$', 'cheat.sheets dir')], 'routing.main': [('', 'cheat.sheets'), ('', 'cheat'), ('', 'tldr'), ('', 'late.nz'), ('', 'fosdem'), ('', 'learnxiny')], 'routing.post': [('^[^/ +]*$', 'unknown'), ('^[a-z][a-z]-[a-z][a-z]$', 'translation')], 'routing.default': 'question', 'upstream.url': 'https://cheat.sh', 'upstream.timeout': 5, 'search.limit': 20, 'server.bind': '0.0.0.0', 'server.port': 8002}, filename='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/etc/config.yaml')", "Selected Statement": "with open(filename) as f:", "Function Input": {"default_config": "{'adapters.active': ['tldr', 'cheat', 'fosdem', 'translation', 'rosetta', 'late.nz', 'question', 'cheat.sheets', 'cheat.sheets dir', 'learnxiny', 'rfc', 'oeis', 'chmod'], 'adapters.mandatory': ['search'], 'cache.redis.db': 0, 'cache.redis.host': 'localhost', 'cache.redis.port': 6379, 'cache.redis.prefix': '', 'cache.type': 'redis', 'frontend.styles': ['abap', 'algol', 'algol_nu', 'arduino', 'autumn', 'borland', 'bw', 'colorful', 'default', 'dracula', 'emacs', 'friendly', 'friendly_grayscale', 'fruity', 'github-dark', 'gruvbox-dark', 'gruvbox-light', 'igor', 'inkpot', 'lightbulb', 'lilypond', 'lovelace', 'manni', 'material', 'monokai', 'murphy', 'native', 'nord', 'nord-darker', 'one-dark', 'paraiso-dark', 'paraiso-light', 'pastie', 'perldoc', 'rainbow_dash', 'rrt', 'sas', 'solarized-dark', 'solarized-light', 'staroffice', 'stata-dark', 'stata-light', 'tango', 'trac', 'vim', 'vs', 'xcode', 'zenburn'], 'log.level': 4, 'path.internal.ansi2html': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/ansi2html.sh', 'path.internal.bin': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin', 'path.internal.bin.upstream': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin/upstream', 'path.internal.malformed': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static/malformed-response.html', 'path.internal.pages': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share', 'path.internal.static': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static', 'path.internal.templates': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/templates', 'path.internal.vim': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/vim', 'path.log.main': 'log/main.log', 'path.log.queries': 'log/queries.log', 'path.log.fetch': 'log/fetch.log', 'path.repositories': 'upstream', 'path.spool': 'spool', 'path.workdir': '/home/XXX/.cheat.sh', 'routing.pre': [('^$', 'search'), ('^[^/]*/rosetta(/|$)', 'rosetta'), ('^rfc/', 'rfc'), ('^oeis/', 'oeis'), ('^chmod/', 'chmod'), ('^:', 'internal'), ('/:list$', 'internal'), ('/$', 'cheat.sheets dir')], 'routing.main': [('', 'cheat.sheets'), ('', 'cheat'), ('', 'tldr'), ('', 'late.nz'), ('', 'fosdem'), ('', 'learnxiny')], 'routing.post': [('^[^/ +]*$', 'unknown'), ('^[a-z][a-z]-[a-z][a-z]$', 'translation')], 'routing.default': 'question', 'upstream.url': 'https://cheat.sh', 'upstream.timeout': 5, 'search.limit': 20, 'server.bind': '0.0.0.0', 'server.port': 8002}", "filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/etc/config.yaml'"}, "Variable Values Before Statement": {"filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/etc/config.yaml'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"default_config": [[1, "{'adapters.active': ['tldr', 'cheat', 'fosdem', 'translation', 'rosetta', 'late.nz', 'question', 'cheat.sheets', 'cheat.sheets dir', 'learnxiny', 'rfc', 'oeis', 'chmod'], 'adapters.mandatory': ['search'], 'cache.redis.db': 0, 'cache.redis.host': 'localhost', 'cache.redis.port': 6379, 'cache.redis.prefix': '', 'cache.type': 'redis', 'frontend.styles': ['abap', 'algol', 'algol_nu', 'arduino', 'autumn', 'borland', 'bw', 'colorful', 'default', 'dracula', 'emacs', 'friendly', 'friendly_grayscale', 'fruity', 'github-dark', 'gruvbox-dark', 'gruvbox-light', 'igor', 'inkpot', 'lightbulb', 'lilypond', 'lovelace', 'manni', 'material', 'monokai', 'murphy', 'native', 'nord', 'nord-darker', 'one-dark', 'paraiso-dark', 'paraiso-light', 'pastie', 'perldoc', 'rainbow_dash', 'rrt', 'sas', 'solarized-dark', 'solarized-light', 'staroffice', 'stata-dark', 'stata-light', 'tango', 'trac', 'vim', 'vs', 'xcode', 'zenburn'], 'log.level': 4, 'path.internal.ansi2html': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/ansi2html.sh', 'path.internal.bin': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin', 'path.internal.bin.upstream': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin/upstream', 'path.internal.malformed': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static/malformed-response.html', 'path.internal.pages': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share', 'path.internal.static': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static', 'path.internal.templates': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/templates', 'path.internal.vim': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/vim', 'path.log.main': 'log/main.log', 'path.log.queries': 'log/queries.log', 'path.log.fetch': 'log/fetch.log', 'path.repositories': 'upstream', 'path.spool': 'spool', 'path.workdir': '/home/XXX/.cheat.sh', 'routing.pre': [('^$', 'search'), ('^[^/]*/rosetta(/|$)', 'rosetta'), ('^rfc/', 'rfc'), ('^oeis/', 'oeis'), ('^chmod/', 'chmod'), ('^:', 'internal'), ('/:list$', 'internal'), ('/$', 'cheat.sheets dir')], 'routing.main': [('', 'cheat.sheets'), ('', 'cheat'), ('', 'tldr'), ('', 'late.nz'), ('', 'fosdem'), ('', 'learnxiny')], 'routing.post': [('^[^/ +]*$', 'unknown'), ('^[a-z][a-z]-[a-z][a-z]$', 'translation')], 'routing.default': 'question', 'upstream.url': 'https://cheat.sh', 'upstream.timeout': 5, 'search.limit': 20, 'server.bind': '0.0.0.0', 'server.port': 8002}"]], "filename": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/etc/config.yaml'"]], "yaml": [[2.0, "<module 'yaml' from '/local/rcs/XXX/miniforge3/envs/chubin+cheat.sh/lib/python3.9/site-packages/yaml/__init__.py'>"]], "update": [[4.0, "{}"], [21.0, "{'cache.type': 'redis'}"]], "f": [[8.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/etc/config.yaml' mode='r' encoding='UTF-8'>"]], "newconfig": [[9.0, "{'server': {'address': '0.0.0.0'}, 'cache': {'type': 'redis'}}"]], "key": [[10.0, "'adapters.active'"], [10.0, "'adapters.mandatory'"], [10.0, "'cache.redis.db'"], [10.0, "'cache.redis.host'"], [10.0, "'cache.redis.port'"], [10.0, "'cache.redis.prefix'"], [10.0, "'cache.type'"], [10.0, "'frontend.styles'"], [10.0, "'log.level'"], [10.0, "'path.internal.ansi2html'"], [10.0, "'path.internal.bin'"], [10.0, "'path.internal.bin.upstream'"], [10.0, "'path.internal.malformed'"], [10.0, "'path.internal.pages'"], [10.0, "'path.internal.static'"], [10.0, "'path.internal.templates'"], [10.0, "'path.internal.vim'"], [10.0, "'path.log.main'"], [10.0, "'path.log.queries'"], [10.0, "'path.log.fetch'"], [10.0, "'path.repositories'"], [10.0, "'path.spool'"], [10.0, "'path.workdir'"], [10.0, "'routing.pre'"], [10.0, "'routing.main'"], [10.0, "'routing.post'"], [10.0, "'routing.default'"], [10.0, "'upstream.url'"], [10.0, "'upstream.timeout'"], [10.0, "'search.limit'"], [10.0, "'server.bind'"], [10.0, "'server.port'"]], "val": [[10.0, "['tldr', 'cheat', 'fosdem', 'translation', 'rosetta', 'late.nz', 'question', 'cheat.sheets', 'cheat.sheets dir', 'learnxiny', 'rfc', 'oeis', 'chmod']"], [10.0, "['search']"], [10.0, "0"], [10.0, "'localhost'"], [10.0, "6379"], [10.0, "''"], [10.0, "'redis'"], [10.0, "['abap', 'algol', 'algol_nu', 'arduino', 'autumn', 'borland', 'bw', 'colorful', 'default', 'dracula', 'emacs', 'friendly', 'friendly_grayscale', 'fruity', 'github-dark', 'gruvbox-dark', 'gruvbox-light', 'igor', 'inkpot', 'lightbulb', 'lilypond', 'lovelace', 'manni', 'material', 'monokai', 'murphy', 'native', 'nord', 'nord-darker', 'one-dark', 'paraiso-dark', 'paraiso-light', 'pastie', 'perldoc', 'rainbow_dash', 'rrt', 'sas', 'solarized-dark', 'solarized-light', 'staroffice', 'stata-dark', 'stata-light', 'tango', 'trac', 'vim', 'vs', 'xcode', 'zenburn']"], [10.0, "4"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/ansi2html.sh'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/bin/upstream'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static/malformed-response.html'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/static'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/templates'"], [10.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/chubin+cheat.sh/chubin+cheat.sh/share/vim'"], [10.0, "'log/main.log'"], [10.0, "'log/queries.log'"], [10.0, "'log/fetch.log'"], [10.0, "'upstream'"], [10.0, "'spool'"], [10.0, "'/home/XXX/.cheat.sh'"], [10.0, "[('^$', 'search'), ('^[^/]*/rosetta(/|$)', 'rosetta'), ('^rfc/', 'rfc'), ('^oeis/', 'oeis'), ('^chmod/', 'chmod'), ('^:', 'internal'), ('/:list$', 'internal'), ('/$', 'cheat.sheets dir')]"], [10.0, "[('', 'cheat.sheets'), ('', 'cheat'), ('', 'tldr'), ('', 'late.nz'), ('', 'fosdem'), ('', 'learnxiny')]"], [10.0, "[('^[^/ +]*$', 'unknown'), ('^[a-z][a-z]-[a-z][a-z]$', 'translation')]"], [10.0, "'question'"], [10.0, "'https://cheat.sh'"], [10.0, "5"], [10.0, "20"], [10.0, "'0.0.0.0'"], [10.0, "8002"]], "newval": [[11.0, "None"], [11.0, "'redis'"], [11.0, "None"]]}, "Program Information": "Project Name: chubin+cheat.sh", "idx": 362, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_base_model_can_be_adapter_v2_loaded(name):\n    from lit_gpt.adapter_v2 import GPT as AdapterV2GPT\n    from lit_gpt.adapter_v2 import adapter_filter\n    from lit_gpt.model import GPT as BaseGPT\n\n    kwargs = {\"n_layer\": 2, \"n_head\": 8, \"n_embd\": 16, \"padded_vocab_size\": 32}\n    base_model = BaseGPT.from_name(name, **kwargs)\n    base_model_state_dict = base_model.state_dict()\n    lora_model = AdapterV2GPT.from_name(name, **kwargs, adapter_start_layer=0)\n    keys = lora_model.load_state_dict(base_model_state_dict, strict=False)\n    assert not keys.unexpected_keys\n    for k in keys.missing_keys:\n        assert adapter_filter(k, None)\n\ntest_base_model_can_be_adapter_v2_loaded(name='stablelm-base-alpha-3b')", "Selected Statement": "base_model = BaseGPT.from_name(name, **kwargs)", "Function Input": {"name": "'stablelm-base-alpha-3b'"}, "Variable Values Before Statement": {"name": "'stablelm-base-alpha-3b'"}, "Value After Statement Execution": "GPT(  (lm_head): Linear(in_features", "Variable States During Runtime": {"name": [[1, "'stablelm-base-alpha-3b'"]], "AdapterV2GPT": [[2.0, "<class 'lit_gpt.adapter_v2.GPT'>"]], "adapter_filter": [[3.0, "<function adapter_filter at 0x7f801db68af0>"]], "BaseGPT": [[4.0, "<class 'lit_gpt.model.GPT'>"]], "kwargs": [[6.0, "{'n_layer': 2, 'n_head': 8, 'n_embd': 16, 'padded_vocab_size': 32}"]], "base_model": [[7.0, "GPT(  (lm_head): Linear(in_features=16, out_features=32, bias=False)  (transformer): ModuleDict(    (wte): Embedding(32, 16)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((16,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=16, out_features=48, bias=True)          (proj): Linear(in_features=16, out_features=16, bias=True)        )        (norm_2): LayerNorm((16,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=16, out_features=64, bias=True)          (proj): Linear(in_features=64, out_features=16, bias=True)        )      )    )    (ln_f): LayerNorm((16,), eps=1e-05, elementwise_affine=True)  ))"]], "base_model_state_dict": [[8.0, "OrderedDict([('lm_head.weight', tensor([[-0.2040,  0.1113,  0.0584, -0.1935, -0.0368, -0.2365,  0.0272,  0.1651,          0.1920,  0.2497, -0.1360, -0.2344, -0.0012,  0.1705,  0.1699,  0.2030],        [-0.2263, -0.1364, -0.1686, -0.0148,  0.1299,  0.1057, -0.1175,  0.2214,          0.0702,  0.0628, -0.0087, -0.1382,  0.1014,  0.0977,  0.0380,  0.1590],        [-0.0566, -0.1740, -0.1575,  0.0049,  0.1824, -0.2248,  0.1395,  0.0325,          0.2379, -0.0782,  0.1699, -0.0943,  0.2191, -0.0986,  0.0821, -0.2279],        [-0.2114,  0.1223,  0.0569, -0.2201,  0.1737, -0.0730,  0.2211,  0.0469,         -0.0359, -0.1367, -0.1522, -0.1705, -0.2474,  0.0640,  0.1010, -0.2316],        [ 0.2279,  0.2448, -0.0281, -0.0656,  0.0848,  0.0019, -0.1033,  0.2023,         -0.0742, -0.1102, -0.2262, -0.1674, -0.2286, -0.1058, -0.0161,  0.0969],        [ 0.1002, -0.2468, -0.0489,  0.2212, -0.1703,  0.2316, -0.1648,  0.1787,          0.2121,  0.0849,  0.2258, -0.2450, -0.1595,  0.1691,  0.0878, -0.1187],        [ 0.0137, -0.1362, -0.1799, -0.1539,  0.0538, -0.0110,  0.1377, -0.1469,         -0.2303, -0.0714,  0.0875, -0.2432,  0.1248, -0.1095,  0.0290, -0.1726],        [-0.1370,  0.0523,  0.1150, -0.2129,  0.1642, -0.0408, -0.1308, -0.0780,          0.0291, -0.0083, -0.1428,  0.1091,  0.1643,  0.0100,  0.2389,  0.0719],        [-0.2246, -0.1863, -0.1718, -0.1688, -0.1824, -0.0768,  0.0202,  0.1226,         -0.1975,  0.2080,  0.0941,  0.0397,  0.2238, -0.1715,  0.0790, -0.0336],        [-0.0374,  0.1743,  0.1776, -0.0401,  0.0524, -0.2052,  0.1173,  0.0335,         -0.2399,  0.2152,  0.0909, -0.0933,  0.1838, -0.0556,  0.0652,  0.2024],        [ 0.2485,  0.0462,  0.1087, -0.2251, -0.1969, -0.0321,  0.2268,  0.1194,         -0.0749,  0.0085,  0.0455,  0.2372, -0.0372,  0.2139, -0.0159, -0.1402],        [-0.2278,  0.1227, -0.0303, -0.1931,  0.2433, -0.2397, -0.0908,  0.0450,          0.0401, -0.1654,  0.1077, -0.1347, -0.1677, -0.0515,  0.1379, -0.0590],        [ 0.2161,  0.2441, -0.2048,  0.0042, -0.2058,  0.1390, -0.2005, -0.0724,         -0.0006, -0.0823, -0.1921,  0.0568, -0.1141, -0.1868, -0.0980,  0.1916],        [-0.2162, -0.0590,  0.1730,  0.0203, -0.1542, -0.0287, -0.1238,  0.2366,         -0.1960,  0.0638,  0.2467,  0.0968, -0.0297, -0.2187, -0.1270, -0.1592],        [-0.1953,  0.0800, -0.2453, -0.2434, -0.2289,  0.1761,  0.0080, -0.2330,         -0.1634,  0.0117,  0.1099,  0.1184,  0.0833,  0.1710,  0.0734,  0.0825],        [-0.0449,  0.0028, -0.1980, -0.1582, -0.0300, -0.2378,  0.1776, -0.0695,          0.1542, -0.0839, -0.0305, -0.1438, -0.1355,  0.1401,  0.1814,  0.0663],        [-0.1543,  0.2484, -0.1478,  0.1234, -0.1865,  0.1914,  0.0307,  0.1875,         -0.0973,  0.0588,  0.2018, -0.0548,  0.1702, -0.1610, -0.2060, -0.1724],        [ 0.1537, -0.0495, -0.1406,  0.0114,  0.0301, -0.1971,  0.0294,  0.0739,          0.0160,  0.1448, -0.2331, -0.0077, -0.1525, -0.0146,  0.1653, -0.0413],        [-0.2186, -0.0141, -0.1605, -0.0941,  0.2489, -0.0499, -0.0589, -0.0887,          0.1524, -0.1399,  0.2012, -0.0109, -0.0090,  0.0946, -0.1322, -0.0652],        [-0.1617,  0.1239,  0.0779, -0.1597,  0.0285, -0.0280, -0.2459,  0.1879,         -0.1888,  0.0874, -0.2031, -0.1358, -0.1345,  0.1417,  0.1186,  0.0337],        [-0.2315,  0.0632,  0.1275,  0.0153,  0.0495, -0.0769, -0.0769,  0.0444,         -0.0225,  0.1375, -0.1902,  0.1155, -0.2222,  0.0365, -0.0030,  0.1707],        [-0.1867,  0.0813,  0.2142,  0.1787,  0.0732, -0.1879, -0.2255, -0.2374,          0.1491,  0.1437, -0.0771, -0.1960,  0.1335,  0.0227,  0.2434, -0.0845],        [-0.1916, -0.1467,  0.0975, -0.0115, -0.1319,  0.0445,  0.0236, -0.1961,          0.0639, -0.1922,  0.0300,  0.0432, -0.0061, -0.1202,  0.0846, -0.0664],        [-0.2105,  0.0031, -0.1161, -0.0683,  0.2353,  0.1651, -0.2034,  0.1467,          0.0378, -0.0989,  0.0239,  0.2026,  0.2267,  0.2138, -0.2073,  0.0165],        [ 0.1156,  0.2149, -0.0286, -0.1842, -0.1246,  0.2320, -0.0424, -0.1798,         -0.0945, -0.2007,  0.0248,  0.1019,  0.1329, -0.1646,  0.0107,  0.1050],        [-0.1296, -0.1141,  0.2485,  ....1062, -0.1109, -0.1927,  0.0626,  0.2419,  0.1540,  0.1249,  0.2342],        [ 0.2244, -0.1377, -0.2170,  0.0662, -0.1891,  0.1060, -0.2274, -0.2134,          0.2055, -0.1398,  0.1706,  0.0286, -0.1660, -0.1758, -0.0727,  0.0104],        [-0.1086,  0.2059, -0.1085,  0.0878, -0.2465, -0.1247, -0.0222,  0.1380,          0.1035, -0.2425,  0.0100,  0.1510, -0.0806,  0.0448,  0.0790,  0.0523],        [ 0.1252,  0.0400,  0.0261, -0.2488, -0.2045, -0.1933,  0.1192,  0.1677,          0.0642,  0.1778,  0.2086,  0.1216, -0.0441, -0.2306,  0.2251,  0.1947],        [-0.0092,  0.0686,  0.0206,  0.0507,  0.0820,  0.1262,  0.0621,  0.2165,          0.2090, -0.1457,  0.1741,  0.1685, -0.2353, -0.0548,  0.1855, -0.2016],        [ 0.1959,  0.0742, -0.2326, -0.1294,  0.0701, -0.0846,  0.0796,  0.1885,          0.2356,  0.1602,  0.0801, -0.0599, -0.0415,  0.1231, -0.0243,  0.0458],        [-0.2164,  0.0750, -0.0714, -0.0557, -0.1265, -0.0025, -0.0520, -0.2037,         -0.2366, -0.0198, -0.0369, -0.1668,  0.1378, -0.2271, -0.0582,  0.1369],        [ 0.0529, -0.2322,  0.1400,  0.0548,  0.1427,  0.0732, -0.2172,  0.0945,          0.0295, -0.0840,  0.1653, -0.1925, -0.0347, -0.0753,  0.0523,  0.1021],        [-0.2317, -0.1887, -0.1400, -0.0594,  0.1515,  0.0425, -0.0596,  0.0958,         -0.1809, -0.0933,  0.0679,  0.0599, -0.0747,  0.1119, -0.0284,  0.0506],        [-0.1945, -0.1917, -0.1075, -0.1584, -0.2365, -0.2396, -0.2490, -0.0487,          0.1456,  0.1571,  0.0480,  0.2459,  0.2245, -0.0147,  0.0579,  0.0433],        [-0.1347, -0.1925, -0.2312,  0.1519, -0.1227,  0.1162,  0.1610, -0.1877,          0.2061, -0.2271,  0.1379, -0.2204,  0.2442,  0.1041,  0.0929, -0.1878]])), ('transformer.h.1.attn.proj.bias', tensor([-0.0892, -0.2182, -0.1580,  0.0412,  0.0140,  0.2101,  0.1820, -0.2064,        -0.1241, -0.0571,  0.1290,  0.0343, -0.2440, -0.1654,  0.0235, -0.1155])), ('transformer.h.1.norm_2.weight', tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])), ('transformer.h.1.norm_2.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])), ('transformer.h.1.mlp.fc.weight', tensor([[ 0.0924,  0.1510, -0.0735,  ...,  0.1847, -0.1331, -0.1429],        [-0.2016,  0.2156,  0.0506,  ..., -0.0418, -0.1739, -0.2487],        [ 0.2222,  0.1940,  0.0379,  ...,  0.1357,  0.2448, -0.2166],        ...,        [ 0.1076, -0.1423,  0.0219,  ..., -0.0825,  0.1934,  0.1640],        [ 0.1174,  0.0894, -0.0815,  ..., -0.1510,  0.0219, -0.0885],        [-0.1409,  0.0148,  0.2021,  ..., -0.2060, -0.0150, -0.1007]])), ('transformer.h.1.mlp.fc.bias', tensor([ 0.1542,  0.1957,  0.0429, -0.0221,  0.0788,  0.2306,  0.2165,  0.1671,         0.0664, -0.1140, -0.0531, -0.0085,  0.0917, -0.1900, -0.1731,  0.2154,        -0.1378, -0.0411, -0.2255,  0.1157, -0.1700,  0.1329,  0.1946,  0.0830,         0.0852,  0.1996,  0.2274,  0.0734,  0.1994, -0.2326,  0.2143,  0.1984,        -0.0805,  0.1104,  0.1824, -0.0666,  0.1265,  0.1228,  0.2238,  0.2137,         0.1964, -0.0859, -0.2379, -0.0537,  0.1860,  0.0125,  0.0383, -0.2439,        -0.2233, -0.1594,  0.0032,  0.1765, -0.0252,  0.2003,  0.0800,  0.0508,         0.0850,  0.0321,  0.0886, -0.1280, -0.0688, -0.0091,  0.1421, -0.2377])), ('transformer.h.1.mlp.proj.weight', tensor([[ 0.1238, -0.0415, -0.0093,  ...,  0.0712,  0.0379,  0.1029],        [ 0.0671, -0.0787, -0.0885,  ..., -0.0070,  0.0109, -0.0624],        [-0.1076, -0.0217, -0.0052,  ...,  0.0668, -0.0339,  0.1202],        ...,        [-0.0757, -0.0012,  0.0383,  ..., -0.0417, -0.0944, -0.0468],        [ 0.0752, -0.0184,  0.0511,  ..., -0.0576, -0.0293,  0.0188],        [-0.0496, -0.0871, -0.0883,  ..., -0.1221,  0.0080,  0.0647]])), ('transformer.h.1.mlp.proj.bias', tensor([-0.0183,  0.0377,  0.1179, -0.1148, -0.0526,  0.0324,  0.0845,  0.0960,        -0.0208,  0.1116, -0.0654, -0.0011, -0.0743,  0.1182,  0.0757,  0.0495])), ('transformer.ln_f.weight', tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])), ('transformer.ln_f.bias', tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))])"]], "lora_model": [[9.0, "GPT(  (lm_head): AdapterV2Linear(    (linear): Linear(in_features=16, out_features=32, bias=False)  )  (transformer): ModuleDict(    (wte): Embedding(32, 16)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((16,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): AdapterV2Linear(            (linear): Linear(in_features=16, out_features=48, bias=True)          )          (proj): AdapterV2Linear(            (linear): Linear(in_features=16, out_features=16, bias=True)          )          (adapter_wte): Embedding(10, 16)        )        (norm_2): LayerNorm((16,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): AdapterV2Linear(            (linear): Linear(in_features=16, out_features=64, bias=True)          )          (proj): AdapterV2Linear(            (linear): Linear(in_features=64, out_features=16, bias=True)          )        )      )    )    (ln_f): LayerNorm((16,), eps=1e-05, elementwise_affine=True)  ))"]], "keys": [[10.0, "_IncompatibleKeys(missing_keys=['lm_head.adapter_bias', 'lm_head.adapter_scale', 'transformer.h.0.attn.gating_factor', 'transformer.h.0.attn.attn.adapter_bias', 'transformer.h.0.attn.attn.adapter_scale', 'transformer.h.0.attn.proj.adapter_bias', 'transformer.h.0.attn.proj.adapter_scale', 'transformer.h.0.attn.adapter_wte.weight', 'transformer.h.0.mlp.fc.adapter_bias', 'transformer.h.0.mlp.fc.adapter_scale', 'transformer.h.0.mlp.proj.adapter_bias', 'transformer.h.0.mlp.proj.adapter_scale', 'transformer.h.1.attn.gating_factor', 'transformer.h.1.attn.attn.adapter_bias', 'transformer.h.1.attn.attn.adapter_scale', 'transformer.h.1.attn.proj.adapter_bias', 'transformer.h.1.attn.proj.adapter_scale', 'transformer.h.1.attn.adapter_wte.weight', 'transformer.h.1.mlp.fc.adapter_bias', 'transformer.h.1.mlp.fc.adapter_scale', 'transformer.h.1.mlp.proj.adapter_bias', 'transformer.h.1.mlp.proj.adapter_scale'], unexpected_keys=[])"]], "@py_assert1": [[11.0, "None"]], "@py_assert3": [[11.0, "None"]], "k": [[12.0, "'lm_head.adapter_bias'"], [12.0, "'lm_head.adapter_scale'"], [12.0, "'transformer.h.0.attn.gating_factor'"], [12.0, "'transformer.h.0.attn.attn.adapter_bias'"], [12.0, "'transformer.h.0.attn.attn.adapter_scale'"], [12.0, "'transformer.h.0.attn.proj.adapter_bias'"], [12.0, "'transformer.h.0.attn.proj.adapter_scale'"], [12.0, "'transformer.h.0.attn.adapter_wte.weight'"], [12.0, "'transformer.h.0.mlp.fc.adapter_bias'"], [12.0, "'transformer.h.0.mlp.fc.adapter_scale'"], [12.0, "'transformer.h.0.mlp.proj.adapter_bias'"], [12.0, "'transformer.h.0.mlp.proj.adapter_scale'"], [12.0, "'transformer.h.1.attn.gating_factor'"], [12.0, "'transformer.h.1.attn.attn.adapter_bias'"], [12.0, "'transformer.h.1.attn.attn.adapter_scale'"], [12.0, "'transformer.h.1.attn.proj.adapter_bias'"], [12.0, "'transformer.h.1.attn.proj.adapter_scale'"], [12.0, "'transformer.h.1.attn.adapter_wte.weight'"], [12.0, "'transformer.h.1.mlp.fc.adapter_bias'"], [12.0, "'transformer.h.1.mlp.fc.adapter_scale'"], [12.0, "'transformer.h.1.mlp.proj.adapter_bias'"], [12.0, "'transformer.h.1.mlp.proj.adapter_scale'"]], "@py_assert2": [[13.0, "None"]], "@py_assert4": [[13.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 363, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def layer_template(layer_name: str, idx: int) -> Tuple[str, int]:\n    split = layer_name.split(\".\")\n    number = int(split[idx])\n    split[idx] = \"{}\"\n    from_name = \".\".join(split)\n    return from_name, number\n\nlayer_template(layer_name='model.layers.0.self_attn.q_proj.weight', idx=2)", "Selected Statement": "from_name = \".\".join(split)", "Function Input": {"layer_name": "'model.layers.0.self_attn.q_proj.weight'", "idx": "2"}, "Variable Values Before Statement": {"split": "['model', 'layers', '{}', 'self_attn', 'q_proj', 'weight']"}, "Value After Statement Execution": "'model.layers.{}.self_attn.q_proj.weight'", "Variable States During Runtime": {"layer_name": [[1, "'model.layers.0.self_attn.q_proj.weight'"]], "idx": [[1, "2"]], "split": [[2.0, "['model', 'layers', '0', 'self_attn', 'q_proj', 'weight']"], [4.0, "['model', 'layers', '{}', 'self_attn', 'q_proj', 'weight']"]], "number": [[3.0, "0"]], "from_name": [[5.0, "'model.layers.{}.self_attn.q_proj.weight'"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 364, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_generate(monkeypatch, generated, stop_tokens, expected):\n    import chat.base as chat\n    import generate.base as generate\n\n    input_idx = torch.tensor([5, 3])\n    max_returned_tokens = len(input_idx) + 8\n    model = MagicMock()\n    model.config.block_size = 100\n    model.max_seq_length = 100\n    it = iter(generated)\n\n    def multinomial(*_, **__):\n        out = next(it)\n        return torch.tensor([out])\n\n    monkeypatch.setattr(generate, \"multinomial_num_samples_1\", multinomial)\n    actual = chat.generate(model, input_idx, max_returned_tokens, stop_tokens=stop_tokens)\n    actual = list(actual)\n\n    assert len(actual) == len(expected)\n    if not actual:\n        assert actual == expected\n    else:\n        for t in actual:\n            assert t.dtype == torch.long\n        assert torch.cat(actual).tolist() == expected\n\ntest_generate(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, generated=repeat(1), stop_tokens=(), expected=[1, 1, 1, 1, 1, 1, 1, 1])", "Selected Statement": "assert torch.cat(actual).tolist() == expected", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "generated": "repeat(1)", "stop_tokens": "()", "expected": "[1, 1, 1, 1, 1, 1, 1, 1]"}, "Variable Values Before Statement": {"actual": "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [16.0, "{_setattr=[(<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>, 'multinomial_num_samples_1', <function multinomial_num_samples_1 at 0x7f805238a160>)], _setitem=[], _cwd=None, _savesyspath=None}"]], "generated": [[1, "repeat(1)"]], "stop_tokens": [[1, "()"]], "expected": [[1, "[1, 1, 1, 1, 1, 1, 1, 1]"]], "chat": [[2.0, "<module 'chat.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/chat/base.py'>"]], "generate": [[3.0, "<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>"]], "input_idx": [[5.0, "tensor([5, 3])"]], "max_returned_tokens": [[6.0, "10"]], "model": [[7.0, "<MagicMock id='140188337253248'>"]], "it": [[10.0, "repeat(1)"]], "multinomial": [[12.0, "<function test_generate.<locals>.multinomial at 0x7f7fd0f7e430>"]], "actual": [[17.0, "<generator object generate at 0x7f803c55ff90>"], [18.0, "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"]], "@py_assert2": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "t": [[24.0, "tensor([1])"]], "@py_assert1": [[25.0, "None"]], "@py_assert5": [[25.0, "None"]], "@py_assert3": [[25.0, "None"]], "@py_assert6": [[26.0, "None"]], "@py_assert8": [[26.0, "None"]], "@py_assert10": [[26.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 365, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def rowcol_to_a1(row, col):\n    \"\"\"Translates a row and column cell address to A1 notation.\n\n    :param row: The row of the cell to be converted.\n        Rows start at index 1.\n    :type row: int, str\n\n    :param col: The column of the cell to be converted.\n        Columns start at index 1.\n    :type row: int, str\n\n    :returns: a string containing the cell's coordinates in A1 notation.\n\n    Example:\n\n    >>> rowcol_to_a1(1, 1)\n    A1\n\n    \"\"\"\n    row = int(row)\n    col = int(col)\n\n    if row < 1 or col < 1:\n        raise IncorrectCellLabel(\"({}, {})\".format(row, col))\n\n    div = col\n    column_label = \"\"\n\n    while div:\n        (div, mod) = divmod(div, 26)\n        if mod == 0:\n            mod = 26\n            div -= 1\n        column_label = chr(mod + MAGIC_NUMBER) + column_label\n\n    label = \"{}{}\".format(column_label, row)\n\n    return label\n\nrowcol_to_a1(row=4, col=4)", "Selected Statement": "(div, mod) = divmod(div, 26)", "Function Input": {"row": "4", "col": "4"}, "Variable Values Before Statement": {"div": "4"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"row": [[1, "4"]], "col": [[1, "4"]], "div": [[26.0, "4"], [30.0, "0"]], "column_label": [[27.0, "''"], [34.0, "'D'"]], "mod": [[30.0, "4"]], "label": [[36.0, "'D4'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 366, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def a1_to_rowcol(label):\n    \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n\n    :param str label: A cell label in A1 notation, e.g. 'B1'.\n        Letter case is ignored.\n    :returns: a tuple containing `row` and `column` numbers. Both indexed\n              from 1 (one).\n    :rtype: tuple\n\n    Example:\n\n    >>> a1_to_rowcol('A1')\n    (1, 1)\n\n    \"\"\"\n    m = CELL_ADDR_RE.match(label)\n    if m:\n        column_label = m.group(1).upper()\n        row = int(m.group(2))\n\n        col = 0\n        for i, c in enumerate(reversed(column_label)):\n            col += (ord(c) - MAGIC_NUMBER) * (26**i)\n    else:\n        raise IncorrectCellLabel(label)\n\n    return (row, col)\n\na1_to_rowcol(label='B1')", "Selected Statement": "m = CELL_ADDR_RE.match(label)", "Function Input": {"label": "'B1'"}, "Variable Values Before Statement": {"label": "'B1'"}, "Value After Statement Execution": "<re.Match object; span", "Variable States During Runtime": {"label": [[1, "'B1'"]], "m": [[16.0, "<re.Match object; span=(0, 2), match='B1'>"]], "column_label": [[18.0, "'B'"]], "row": [[19.0, "1"]], "col": [[21.0, "0"], [23.0, "2"]], "i": [[22.0, "0"]], "c": [[22.0, "'B'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 367, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _a1_to_rowcol_unbounded(label):\n    \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n\n    Same as `a1_to_rowcol()` but allows for missing row or column part\n    (e.g. \"A\" for the first column)\n\n    :returns: a tuple containing `row` and `column` numbers. Both indexed\n        from 1 (one).\n    :rtype: tuple\n\n    Example:\n\n    >>> _a1_to_rowcol_unbounded('A1')\n    (1, 1)\n\n    >>> _a1_to_rowcol_unbounded('A')\n    (inf, 1)\n\n    >>> _a1_to_rowcol_unbounded('1')\n    (1, inf)\n\n    >>> _a1_to_rowcol_unbounded('ABC123')\n    (123, 731)\n\n    >>> _a1_to_rowcol_unbounded('ABC')\n    (inf, 731)\n\n    >>> _a1_to_rowcol_unbounded('123')\n    (123, inf)\n\n    >>> _a1_to_rowcol_unbounded('1A')\n    Traceback (most recent call last):\n        ...\n    gspread.exceptions.IncorrectCellLabel: 1A\n\n    >>> _a1_to_rowcol_unbounded('')\n    (inf, inf)\n\n    \"\"\"\n    m = A1_ADDR_ROW_COL_RE.match(label)\n    if m:\n        column_label, row = m.groups()\n\n        if column_label:\n            col = 0\n            for i, c in enumerate(reversed(column_label.upper())):\n                col += (ord(c) - MAGIC_NUMBER) * (26**i)\n        else:\n            col = inf\n\n        if row:\n            row = int(row)\n        else:\n            row = inf\n    else:\n        raise IncorrectCellLabel(label)\n\n    return (row, col)\n\n_a1_to_rowcol_unbounded(label='A1')", "Selected Statement": "col += (ord(c) - MAGIC_NUMBER) * (26**i)", "Function Input": {"label": "'A1'"}, "Variable Values Before Statement": {"c": "'A'"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"label": [[1, "'A1'"]], "m": [[40.0, "<re.Match object; span=(0, 2), match='A1'>"]], "column_label": [[42.0, "'A'"]], "row": [[42.0, "'1'"], [52.0, "1"]], "col": [[45.0, "0"], [47.0, "1"]], "i": [[46.0, "0"]], "c": [[46.0, "'A'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 368, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def render_pep440_feature(pieces):\n    \"\"\"Build up version string, used within \"feature\" branch of repository.\n\n    Our goal: MERGE-POINT.post.devN+gHEX.BRANCH-NAME.M[.dirty]\n        +) MERGE-POINT = Most recent common ancestor for `develop` and `master`\n          *) Does not yet handle branch from `release-*`\n        +) N = DISTANCE from the MERGE-POINT of `develop` and `master`\n        +) M = DISTANCE from the MERGE-POINT of \"feature\" and `develop`\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"] and pieces[\"develop\"]:\n        rendered = pieces[\"closest-tag\"]\n        distance_to_develop = pieces[\"distance-to-develop\"]\n        distance_to_merge = pieces[\"distance-to-master\"]\n        distance_merge_to_tag = (pieces[\"distance\"] - distance_to_merge)\n        distance_dev_to_merge = (distance_to_merge - distance_to_develop)\n        if (distance_merge_to_tag > 0):\n            rendered += \".%d\" % distance_merge_to_tag\n        rendered += \".post.dev%d\" % distance_dev_to_merge\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n        rendered += \".%s\" % pieces[\"branch\"]\n        rendered += \".%d\" % distance_to_develop\n    else:\n        # exception #1\n        rendered = \"0.post.dev%d\" % (pieces[\"distance\"] - 1)\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \".dirty\"\n    return rendered\n\nrender_pep440_feature(pieces={'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']})", "Selected Statement": "rendered += plus_or_dot(pieces)", "Function Input": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Variable Values Before Statement": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Value After Statement Execution": "'0.post.dev2+'", "Variable States During Runtime": {"pieces": [[1, "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"]], "rendered": [[28.0, "'0.post.dev2'"], [29.0, "'0.post.dev2+'"], [30.0, "'0.post.dev2+ge60d005'"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 369, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def compute_loc(idx, shape):\n    loc = [0] * len(shape)\n    for i in range(len(shape)):\n        prod = int(np.prod(shape[i + 1:]))\n        loc[i] = idx // prod\n        idx = idx % prod\n    return tuple(loc)\n\ncompute_loc(idx=0, shape=(2, 4))", "Selected Statement": "loc = [0] * len(shape)", "Function Input": {"idx": "0", "shape": "(2, 4)"}, "Variable Values Before Statement": {"shape": "(2, 4)"}, "Value After Statement Execution": "[0, 0]", "Variable States During Runtime": {"idx": [[1, "0"]], "shape": [[1, "(2, 4)"]], "loc": [[2.0, "[0, 0]"]], "i": [[3.0, "0"], [3.0, "1"]], "prod": [[4.0, "4"], [4.0, "1"]]}, "Program Information": "Project Name: Cjkkkk+Pyflow", "idx": 370, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def byteatoms(characterstring):\n            binary = characterstring.encode()\n            atoms.extend(binary[i:i + 1] for i in range(len(binary)))\n\nbyteatoms(characterstring='xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', atoms=[])", "Selected Statement": "atoms.extend(binary[i:i + 1] for i in range(len(binary)))", "Function Input": {"characterstring": "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'", "atoms": "[]"}, "Variable Values Before Statement": {"binary": "b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"}, "Value After Statement Execution": "[b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x']", "Variable States During Runtime": {"characterstring": [[1, "'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"]], "atoms": [[1, "[]"], [3.0, "[b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x', b'x']"]], "binary": [[2.0, "b'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'"]]}, "Program Information": "Project Name: combatopera+lagoon", "idx": 371, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __build_func(verb, args, kwargs={}):\n        params = ['self']\n        params += ['%s' % stringcase.snakecase(k) for k in args]\n        params += ['%s=%s' % (stringcase.snakecase(k), v) for k, v in kwargs.items()]\n        largs = list(args) + list(kwargs.keys())\n        return eval(\n            'lambda %s: self._%s(%s)' % (\n                ','.join(params), verb, ','.join(['%s=%s' % (k, stringcase.snakecase(k)) for k in largs])\n            )\n        )\n\n__build_func(verb='get', args=[], kwargs={})", "Selected Statement": "largs = list(args) + list(kwargs.keys())", "Function Input": {"verb": "'get'", "args": "[]", "kwargs": "{}"}, "Variable Values Before Statement": {"args": "[]"}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"verb": [[1, "'get'"]], "args": [[1, "[]"]], "kwargs": [[1, "{}"]], "params": [[2.0, "['self']"]], "largs": [[5.0, "[]"]]}, "Program Information": "Project Name: alisaifee+pyutrack", "idx": 372, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def run_validator_for_test_file(filename: str) -> List:\n    test_file_path = os.path.join(\n        os.path.dirname(os.path.abspath(__file__)),\n        'test_files',\n        filename,\n    )\n    with open(test_file_path, 'r') as file_handler:\n        raw_content = file_handler.read()\n    tree = ast.parse(raw_content)\n    checker = SuperMarionChecker(tree=tree, filename=test_file_path)\n\n    return list(checker.run())\n\nrun_validator_for_test_file(filename='ok_pipe.py')", "Selected Statement": "with open(test_file_path, 'r') as file_handler:", "Function Input": {"filename": "'ok_pipe.py'"}, "Variable Values Before Statement": {"test_file_path": "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/Melevir+flake8-super-mario/Melevir+flake8-super-mario/tests/test_files/ok_pipe.py'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"filename": [[1, "'ok_pipe.py'"]], "test_file_path": [[2.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/Melevir+flake8-super-mario/Melevir+flake8-super-mario/tests/test_files/ok_pipe.py'"]], "file_handler": [[7.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/Melevir+flake8-super-mario/Melevir+flake8-super-mario/tests/test_files/ok_pipe.py' mode='r' encoding='UTF-8'>"]], "raw_content": [[8.0, "\"from super_mario import BasePipeline, process_pipe\\n\\n\\nclass SimplePipeline(BasePipeline):\\n    pipeline = [\\n        'sum_numbers',\\n        'multiply_numbers',\\n    ]\\n\\n    @process_pipe\\n    @staticmethod\\n    def sum_numbers(a, b):\\n        return {'d': a + b}\\n\\n    @process_pipe\\n    def multiply_numbers(c, d):\\n        return {'e': c * d}\\n\""]], "tree": [[9.0, "{body=[<ast.ImportFrom object at 0x7feb90bccfa0>, <ast.ClassDef object at 0x7feb90bcceb0>], type_ignores=[]}"], [12.0, "{body=[<ast.ImportFrom object at 0x7feb90bccfa0>, <ast.ClassDef object at 0x7feb90bcceb0>], type_ignores=[], parent=None}"]], "checker": [[10.0, "{filename='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/Melevir+flake8-super-mario/Melevir+flake8-super-mario/tests/test_files/ok_pipe.py', tree=<ast.Module object at 0x7feb90bccfd0>}"]]}, "Program Information": "Project Name: Melevir+flake8-super-mario", "idx": 373, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def append(self, item):\n        self._deque.append(item)\n        if self._clear_all_updates:\n            self._clear_all_updates = False\n            self._clear_updates_by_symbol.clear()\n            self._all_new_updates = 0\n            self._new_updates_by_symbol.clear()\n        if self._clear_updates_by_symbol.get(item['symbol']):\n            self._clear_updates_by_symbol[item['symbol']] = False\n            self._new_updates_by_symbol[item['symbol']] = 0\n        self._new_updates_by_symbol[item['symbol']] = self._new_updates_by_symbol.get(item['symbol'], 0) + 1\n        self._all_new_updates = (self._all_new_updates or 0) + 1\n\nappend(self=[], item={'symbol': 'BTC/USDT', 'data': 1})", "Selected Statement": "self._deque.append(item)", "Function Input": {"self": "[]", "item": "{'symbol': 'BTC/USDT', 'data': 1}"}, "Variable Values Before Statement": {"item": "{'symbol': 'BTC/USDT', 'data': 1}"}, "Value After Statement Execution": "{'symbol': 'BTC/USDT', 'data': 1}", "Variable States During Runtime": {"self": [[1, "[]"], [2.0, "[{'symbol': 'BTC/USDT', 'data': 1}]"]], "item": [[1, "{'symbol': 'BTC/USDT', 'data': 1}"]], "self[0]": [[2.0, "{'symbol': 'BTC/USDT', 'data': 1}"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 374, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def bit_length(num):\n    # http://docs.python.org/dev/library/stdtypes.html#int.bit_length\n    s = bin(num)  # binary representation:  bin(-37) --> '-0b100101'\n    s = s.lstrip('-0b')  # remove leading zeros and minus sign\n    return len(s)\n\nbit_length(num=115792089237316195423570985008687907852837564279074904382605163141518161494337)", "Selected Statement": "s = bin(num)  # binary representation:  bin(-37) --> '-0b100101'", "Function Input": {"num": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Variable Values Before Statement": {"num": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Value After Statement Execution": "'0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111010111010101011101101110011100110101011110100100010100000001110111011111111010010010111101000110011010000001101100100000101000001'", "Variable States During Runtime": {"num": [[1, "115792089237316195423570985008687907852837564279074904382605163141518161494337"]], "s": [[3.0, "'0b}, "Program Information": "Project Name: ccxt+ccxt", "idx": 375, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def bits2octets(data, order):\n    z1 = bits2int(data, bit_length(order))\n    z2 = z1 - order\n\n    if z2 < 0:\n        z2 = z1\n\n    return number_to_string_crop(z2, order)\n\nbits2octets(data=b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee', order=115792089237316195423570985008687907852837564279074904382605163141518161494337)", "Selected Statement": "z1 = bits2int(data, bit_length(order))", "Function Input": {"data": "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Variable Values Before Statement": {"order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Value After Statement Execution": "75648987130760998095283026105289635390775519882394219481699348731002280779365", "Variable States During Runtime": {"data": [[1, "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'"]], "order": [[1, "115792089237316195423570985008687907852837564279074904382605163141518161494337"]], "z1": [[2.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]], "z2": [[3.0, "-40143102106555197328287958903398272462062044396680684900905814410515880714972"], [6.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 376, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __str__(self):\n        self.reduce()\n        sign = '-' if self.integer < 0 else ''\n        integer_array = list(str(abs(self.integer)).rjust(self.decimals, '0'))\n        index = len(integer_array) - self.decimals\n        if index == 0:\n            item = '0.'\n        elif self.decimals < 0:\n            item = '0' * (-self.decimals)\n        elif self.decimals == 0:\n            item = ''\n        else:\n            item = '.'\n        integer_array.insert(index, item)\n        return sign + ''.join(integer_array)\n\n__str__(self=Precise(1393.938), self.base=10, self.decimals=3, self.integer=1393938)", "Selected Statement": "index = len(integer_array) - self.decimals", "Function Input": {"self": "Precise(1393.938)", "self.base": "10", "self.decimals": "3", "self.integer": "1393938"}, "Variable Values Before Statement": {"integer_array": "['1', '3', '9', '3', '9', '3', '8']"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"self": [[1, "Precise(1393.938)"]], "self.base": [[1, "10"]], "self.decimals": [[1, "3"]], "self.integer": [[1, "1393938"]], "sign": [[3.0, "''"]], "integer_array": [[4.0, "['1', '3', '9', '3', '9', '3', '8']"], [14.0, "['1', '3', '9', '3', '.', '9', '3', '8']"]], "index": [[5.0, "4"]], "item": [[13.0, "'.'"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 377, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def div(self, other, precision=18):\n        distance = precision - self.decimals + other.decimals\n        if distance == 0:\n            numerator = self.integer\n        elif distance < 0:\n            exponent = self.base ** -distance\n            numerator = self.integer // exponent\n        else:\n            exponent = self.base ** distance\n            numerator = self.integer * exponent\n        result, mod = divmod(numerator, other.integer)\n        # python floors negative numbers down instead of truncating\n        # if mod is zero it will be floored to itself so we do not add one\n        result = result + 1 if result < 0 and mod else result\n        return Precise(result, precision)\n\ndiv(self=Precise(0.00000002), other=Precise(69696900000), precision=1, self.base=10, self.decimals=8, self.integer=2)", "Selected Statement": "result, mod = divmod(numerator, other.integer)", "Function Input": {"self": "Precise(0.00000002)", "other": "Precise(69696900000)", "precision": "1", "self.base": "10", "self.decimals": "8", "self.integer": "2"}, "Variable Values Before Statement": {"numerator": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "Precise(0.00000002)"]], "other": [[1, "Precise(69696900000)"]], "precision": [[1, "1"]], "self.base": [[1, "10"]], "self.decimals": [[1, "8"]], "self.integer": [[1, "2"]], "distance": [[2.0, "-12"]], "exponent": [[6.0, "1000000000000"]], "numerator": [[7.0, "0"]], "result": [[11.0, "0"]], "mod": [[11.0, "0"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 378, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _import_plugins(plugin_names):\n    plugins = []\n    for name, path in plugin_names.items():\n        log.debug(\"Importing plugin %s: %s\", name, path)\n        if '.' not in path:\n            plugins.append(__import__(path))\n        else:\n            package, module = path.rsplit('.', 1)\n            module = __import__(path, fromlist=[module])\n            plugins.append(module)\n    return plugins\n\n_import_plugins(plugin_names={'__builtin__': 'awscli.handlers'})", "Selected Statement": "plugins.append(module)", "Function Input": {"plugin_names": "{'__builtin__': 'awscli.handlers'}"}, "Variable Values Before Statement": {"module": "<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>"}, "Value After Statement Execution": "[<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>]", "Variable States During Runtime": {"plugin_names": [[1, "{'__builtin__': 'awscli.handlers'}"]], "plugins": [[2.0, "[]"], [10.0, "[<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>]"]], "name": [[3.0, "'__builtin__'"]], "path": [[3.0, "'awscli.handlers'"]], "package": [[8.0, "'awscli'"]], "module": [[8.0, "'handlers'"], [9.0, "<module 'awscli.handlers' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/aws+aws-cli/aws+aws-cli/awscli/handlers.py'>"]]}, "Program Information": "Project Name: aws+aws-cli", "idx": 379, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_soft_jaccard_score(y_true, y_pred, expected, eps):\n    y_true = torch.tensor(y_true, dtype=torch.float32)\n    y_pred = torch.tensor(y_pred, dtype=torch.float32)\n    actual = F.soft_jaccard_score(y_pred, y_true, eps=eps)\n    assert float(actual) == pytest.approx(expected, eps)\n\ntest_soft_jaccard_score(y_true=[1, 1, 1, 1], y_pred=[1, 1, 1, 1], expected=1.0, eps=1e-05)", "Selected Statement": "y_pred = torch.tensor(y_pred, dtype=torch.float32)", "Function Input": {"y_true": "[1, 1, 1, 1]", "y_pred": "[1, 1, 1, 1]", "expected": "1.0", "eps": "1e-05"}, "Variable Values Before Statement": {"y_pred": "[1, 1, 1, 1]"}, "Value After Statement Execution": "tensor([1., 1., 1., 1.])", "Variable States During Runtime": {"y_true": [[1, "[1, 1, 1, 1]"], [2.0, "tensor([1., 1., 1., 1.])"]], "y_pred": [[1, "[1, 1, 1, 1]"], [3.0, "tensor([1., 1., 1., 1.])"]], "expected": [[1, "1.0"]], "eps": [[1, "1e-05"]], "actual": [[4.0, "tensor(1.)"]], "@py_assert2": [[5.0, "None"]], "@py_assert6": [[5.0, "None"]], "@py_assert10": [[5.0, "None"]], "@py_assert4": [[5.0, "None"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 380, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_soft_jaccard_score_2(y_true, y_pred, expected, eps):\n    y_true = torch.tensor(y_true, dtype=torch.float32)\n    y_pred = torch.tensor(y_pred, dtype=torch.float32)\n    actual = F.soft_jaccard_score(y_pred, y_true, dims=[1], eps=eps)\n    actual = actual.mean()\n    assert float(actual) == pytest.approx(expected, eps)\n\ntest_soft_jaccard_score_2(y_true=[[1, 1, 0, 0], [0, 0, 1, 1]], y_pred=[[1, 1, 0, 0], [0, 0, 1, 1]], expected=1.0, eps=1e-05)", "Selected Statement": "assert float(actual) == pytest.approx(expected, eps)", "Function Input": {"y_true": "[[1, 1, 0, 0], [0, 0, 1, 1]]", "y_pred": "[[1, 1, 0, 0], [0, 0, 1, 1]]", "expected": "1.0", "eps": "1e-05"}, "Variable Values Before Statement": {"expected": "1.0", "eps": "1e-05"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"y_true": [[1, "[[1, 1, 0, 0], [0, 0, 1, 1]]"], [2.0, "tensor([[1., 1., 0., 0.],        [0., 0., 1., 1.]])"]], "y_pred": [[1, "[[1, 1, 0, 0], [0, 0, 1, 1]]"], [3.0, "tensor([[1., 1., 0., 0.],        [0., 0., 1., 1.]])"]], "expected": [[1, "1.0"]], "eps": [[1, "1e-05"]], "actual": [[4.0, "tensor([1., 1.])"], [5.0, "tensor(1.)"]], "@py_assert2": [[6.0, "None"]], "@py_assert6": [[6.0, "None"]], "@py_assert10": [[6.0, "None"]], "@py_assert4": [[6.0, "None"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 381, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_soft_dice_score(y_true, y_pred, expected, eps):\n    y_true = torch.tensor(y_true, dtype=torch.float32)\n    y_pred = torch.tensor(y_pred, dtype=torch.float32)\n    actual = F.soft_dice_score(y_pred, y_true, eps=eps)\n    assert float(actual) == pytest.approx(expected, eps)\n\ntest_soft_dice_score(y_true=[1, 1, 1, 1], y_pred=[1, 1, 1, 1], expected=1.0, eps=1e-05)", "Selected Statement": "assert float(actual) == pytest.approx(expected, eps)", "Function Input": {"y_true": "[1, 1, 1, 1]", "y_pred": "[1, 1, 1, 1]", "expected": "1.0", "eps": "1e-05"}, "Variable Values Before Statement": {"actual": "tensor(1.)"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"y_true": [[1, "[1, 1, 1, 1]"], [2.0, "tensor([1., 1., 1., 1.])"]], "y_pred": [[1, "[1, 1, 1, 1]"], [3.0, "tensor([1., 1., 1., 1.])"]], "expected": [[1, "1.0"]], "eps": [[1, "1e-05"]], "actual": [[4.0, "tensor(1.)"]], "@py_assert2": [[5.0, "None"]], "@py_assert6": [[5.0, "None"]], "@py_assert10": [[5.0, "None"]], "@py_assert4": [[5.0, "None"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 382, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def test_soft_tversky_score(y_true, y_pred, expected, eps, alpha, beta):\n    y_true = torch.tensor(y_true, dtype=torch.float32)\n    y_pred = torch.tensor(y_pred, dtype=torch.float32)\n    actual = F.soft_tversky_score(y_pred, y_true, eps=eps, alpha=alpha, beta=beta)\n    assert float(actual) == pytest.approx(expected, eps)\n\ntest_soft_tversky_score(y_true=[1, 1, 1, 1], y_pred=[1, 1, 1, 1], expected=1.0, eps=1e-05, alpha=0.5, beta=0.5)", "Selected Statement": "assert float(actual) == pytest.approx(expected, eps)", "Function Input": {"y_true": "[1, 1, 1, 1]", "y_pred": "[1, 1, 1, 1]", "expected": "1.0", "eps": "1e-05", "alpha": "0.5", "beta": "0.5"}, "Variable Values Before Statement": {"expected": "1.0", "eps": "1e-05"}, "Value After Statement Execution": "None", "Variable States During Runtime": {"y_true": [[1, "[1, 1, 1, 1]"], [2.0, "tensor([1., 1., 1., 1.])"]], "y_pred": [[1, "[1, 1, 1, 1]"], [3.0, "tensor([1., 1., 1., 1.])"]], "expected": [[1, "1.0"]], "eps": [[1, "1e-05"]], "alpha": [[1, "0.5"]], "beta": [[1, "0.5"]], "actual": [[4.0, "tensor(1.)"]], "@py_assert2": [[5.0, "None"]], "@py_assert6": [[5.0, "None"]], "@py_assert10": [[5.0, "None"]], "@py_assert4": [[5.0, "None"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 383, "quantized value": "None", "mapping_info": {"value is None": "None"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def forward(self, y_pred: torch.Tensor, y_true: torch.Tensor) -> torch.Tensor:\n\n        assert y_true.size(0) == y_pred.size(0)\n\n        if self.from_logits:\n            # Apply activations to get [0..1] class probabilities\n            # Using Log-Exp as this gives more numerically stable result and does not cause vanishing gradient on\n            # extreme values 0 and 1\n            if self.mode == MULTICLASS_MODE:\n                y_pred = y_pred.log_softmax(dim=1).exp()\n            else:\n                y_pred = F.logsigmoid(y_pred).exp()\n\n        bs = y_true.size(0)\n        num_classes = y_pred.size(1)\n        dims = (0, 2)\n\n        if self.mode == BINARY_MODE:\n            y_true = y_true.view(bs, 1, -1)\n            y_pred = y_pred.view(bs, 1, -1)\n\n            if self.ignore_index is not None:\n                mask = y_true != self.ignore_index\n                y_pred = y_pred * mask\n                y_true = y_true * mask\n\n        if self.mode == MULTICLASS_MODE:\n            y_true = y_true.view(bs, -1)\n            y_pred = y_pred.view(bs, num_classes, -1)\n\n            if self.ignore_index is not None:\n                mask = y_true != self.ignore_index\n                y_pred = y_pred * mask.unsqueeze(1)\n\n                y_true = F.one_hot((y_true * mask).to(torch.long), num_classes)  # N,H*W -> N,H*W, C\n                y_true = y_true.permute(0, 2, 1) * mask.unsqueeze(1)  # N, C, H*W\n            else:\n                y_true = F.one_hot(y_true, num_classes)  # N,H*W -> N,H*W, C\n                y_true = y_true.permute(0, 2, 1)  # N, C, H*W\n\n        if self.mode == MULTILABEL_MODE:\n            y_true = y_true.view(bs, num_classes, -1)\n            y_pred = y_pred.view(bs, num_classes, -1)\n\n            if self.ignore_index is not None:\n                mask = y_true != self.ignore_index\n                y_pred = y_pred * mask\n                y_true = y_true * mask\n\n        scores = self.compute_score(y_pred, y_true.type_as(y_pred), smooth=self.smooth, eps=self.eps, dims=dims)\n\n        if self.log_loss:\n            loss = -torch.log(scores.clamp_min(self.eps))\n        else:\n            loss = 1.0 - scores\n\n        # Dice loss is undefined for non-empty classes\n        # So we zero contribution of channel that does not have true pixels\n        # NOTE: A better workaround would be to use loss term `mean(y_pred)`\n        # for this case, however it will be a modified jaccard loss\n\n        mask = y_true.sum(dims) > 0\n        loss *= mask.to(loss.dtype)\n\n        if self.classes is not None:\n            loss = loss[self.classes]\n\n        return self.aggregate_loss(loss)\n\nforward(self=DiceLoss(), y_pred=tensor([[[[1., 1., 1.]]]]), y_true=tensor([[[[1, 1, 1]]]]), self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._modules=OrderedDict(), self._non_persistent_buffers_set=set(), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.classes=None, self.eps=1e-07, self.from_logits=False, self.ignore_index=None, self.log_loss=False, self.mode='binary', self.reduction='mean', self.smooth=0.0, self.training=True)", "Selected Statement": "mask = y_true.sum(dims) > 0", "Function Input": {"self": "DiceLoss()", "y_pred": "tensor([[[[1., 1., 1.]]]])", "y_true": "tensor([[[[1, 1, 1]]]])", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._modules": "OrderedDict()", "self._non_persistent_buffers_set": "set()", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.classes": "None", "self.eps": "1e-07", "self.from_logits": "False", "self.ignore_index": "None", "self.log_loss": "False", "self.mode": "'binary'", "self.reduction": "'mean'", "self.smooth": "0.0", "self.training": "True"}, "Variable Values Before Statement": {"dims": "(0, 2)"}, "Value After Statement Execution": "tensor([True])", "Variable States During Runtime": {"self": [[1, "DiceLoss()"]], "y_pred": [[1, "tensor([[[[1., 1., 1.]]]])"], [20.0, "tensor([[[1., 1., 1.]]])"]], "y_true": [[1, "tensor([[[[1, 1, 1]]]])"], [19.0, "tensor([[[1, 1, 1]]])"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._modules": [[1, "OrderedDict()"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.classes": [[1, "None"]], "self.eps": [[1, "1e-07"]], "self.from_logits": [[1, "False"]], "self.ignore_index": [[1, "None"]], "self.log_loss": [[1, "False"]], "self.mode": [[1, "'binary'"]], "self.reduction": [[1, "'mean'"]], "self.smooth": [[1, "0.0"]], "self.training": [[1, "True"]], "bs": [[14.0, "1"]], "num_classes": [[15.0, "1"]], "dims": [[16.0, "(0, 2)"]], "scores": [[50.0, "tensor([1.])"]], "loss": [[55.0, "tensor([0.])"]], "mask": [[62.0, "tensor([True])"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 384, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def load_translation(self) -> \"I18N\":\n        \"\"\"Load translations from a JSON file based on the specified language.\"\"\"\n        try:\n            dir_path = os.path.dirname(os.path.realpath(__file__))\n            prompts_path = os.path.join(\n                dir_path, f\"../translations/{self.language}.json\"\n            )\n\n            with open(prompts_path, \"r\") as f:\n                self._translations = json.load(f)\n        except FileNotFoundError:\n            raise ValidationError(\n                f\"Trasnlation file for language '{self.language}' not found.\"\n            )\n        except json.JSONDecodeError:\n            raise ValidationError(f\"Error decoding JSON from the prompts file.\")\n        return self\n\nload_translation(self=I18N(language='en'), self.__dict__={'language': 'en'}, self.__pydantic_extra__=None, self.__pydantic_fields_set__=set(), self.__pydantic_private__={}, self.language='en')", "Selected Statement": "prompts_path = os.path.join(", "Function Input": {"self": "I18N(language='en')", "self.__dict__": "{'language': 'en'}", "self.__pydantic_extra__": "None", "self.__pydantic_fields_set__": "set()", "self.__pydantic_private__": "{}", "self.language": "'en'"}, "Variable Values Before Statement": {"dir_path": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/joaomdmoura+crewAI/joaomdmoura+crewAI/src/crewai/utilities'"}, "Value After Statement Execution": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/joaomdmoura+crewAI/joaomdmoura+crewAI/src/crewai/utilities/../translations/en.json'", "Variable States During Runtime": {"self": [[1, "I18N(language='en')"]], "self.__dict__": [[1, "{'language': 'en'}"]], "self.__pydantic_extra__": [[1, "None"]], "self.__pydantic_fields_set__": [[1, "set()"]], "self.__pydantic_private__": [[1, "{}"], [10.0, "{'_translations': {'slices': {'observation': '\\nObservation', 'task': 'Begin! This is VERY important to you, your job depends on it!\\n\\nCurrent Task: {input}', 'memory': 'This is the summary of your work so far:\\n{chat_history}', 'role_playing': 'You are {role}.\\n{backstory}\\n\\nYour personal goal is: {goal}', 'tools': 'TOOLS:\\n------\\nYou have access to only the following tools:\\n\\n{tools}\\n\\nTo use a tool, please use the exact following format:\\n\\n```\\nThought: Do I need to use a tool? Yes\\nAction: the action to take, should be one of [{tool_names}], just the name.\\nAction Input: the input to the action\\nObservation: the result of the action\\n```\\n\\nWhen you have a response for your task, or if you do not need to use a tool, you MUST use the format:\\n\\n```\\nThought: Do I need to use a tool? No\\nFinal Answer: [your response here]', 'task_with_context': \"{task}\\nThis is the context you're working with:\\n{context}\"}, 'errors': {'used_too_many_tools': \"I've used too many tools for this task. I'm going to give you my absolute BEST Final answer now and not use any more tools.\", 'agent_tool_missing_param': '\\nError executing tool. Missing exact 3 pipe (|) separated values. For example, `coworker|task|context`. I need to make sure to pass context as context.\\n', 'agent_tool_unexsiting_coworker': '\\nError executing tool. Co-worker mentioned on the Action Input not found, it must to be one of the following options: {coworkers}.\\n', 'task_repeated_usage': \"I just used the {tool} tool with input {tool_input}. So I already know the result of that and don't need to use it now.\\n\"}, 'tools': {'delegate_work': 'Useful to delegate a specific task to one of the following co-workers: {coworkers}.\\nThe input to this tool should be a pipe (|) separated text of length 3 (three), representing the co-worker you want to ask it to (one of the options), the task and all actual context you have for the task.\\nFor example, `coworker|task|context`.', 'ask_question': 'Useful to ask a question, opinion or take from on of the following co-workers: {coworkers}.\\nThe input to this tool should be a pipe (|) separated text of length 3 (three), representing the co-worker you want to ask it to (one of the options), the question and all actual context you have for the question.\\n For example, `coworker|question|context`.'}}}"]], "self.language": [[1, "'en'"]], "dir_path": [[4.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/joaomdmoura+crewAI/joaomdmoura+crewAI/src/crewai/utilities'"]], "prompts_path": [[5.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/joaomdmoura+crewAI/joaomdmoura+crewAI/src/crewai/utilities/../translations/en.json'"]], "f": [[9.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/joaomdmoura+crewAI/joaomdmoura+crewAI/src/crewai/utilities/../translations/en.json' mode='r' encoding='UTF-8'>"]]}, "Program Information": "Project Name: joaomdmoura+crewAI", "idx": 385, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _to_str(size, suffixes, base):\n    # type: (SupportsInt, Iterable[Text], int) -> Text\n    try:\n        size = int(size)\n    except ValueError:\n        raise TypeError(\"filesize requires a numeric value, not {!r}\".format(size))\n    if size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return \"{:,} bytes\".format(size)\n\n    for i, suffix in enumerate(suffixes, 2):\n        unit = base ** i\n        if size < unit:\n            break\n    return \"{:,.1f} {}\".format((base * size / unit), suffix)\n\n_to_str(size=1024, suffixes=('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'), base=1024)", "Selected Statement": "for i, suffix in enumerate(suffixes, 2):", "Function Input": {"size": "1024", "suffixes": "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')", "base": "1024"}, "Variable Values Before Statement": {"suffixes": "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')"}, "Value After Statement Execution": "2", "Variable States During Runtime": {"size": [[1, "1024"]], "suffixes": [[1, "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')"]], "base": [[1, "1024"]], "i": [[12.0, "2"]], "suffix": [[12.0, "'KiB'"]], "unit": [[13.0, "1048576"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 386, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _parse_time(t):\n    t = \" \".join(token.strip() for token in t.lower().split(\" \"))\n    try:\n        try:\n            _t = time.strptime(t, \"%b %d %Y\")\n        except ValueError:\n            _t = time.strptime(t, \"%b %d %H:%M\")\n    except ValueError:\n        # Unknown time format\n        return None\n\n    year = _t.tm_year if _t.tm_year != 1900 else time.localtime().tm_year\n    month = _t.tm_mon\n    day = _t.tm_mday\n    hour = _t.tm_hour\n    minutes = _t.tm_min\n    dt = datetime.datetime(year, month, day, hour, minutes, tzinfo=UTC)\n\n    epoch_time = (dt - epoch_dt).total_seconds()\n    return epoch_time\n\n_parse_time(t='Jan 18  2006')", "Selected Statement": "dt = datetime.datetime(year, month, day, hour, minutes, tzinfo=UTC)", "Function Input": {"t": "'Jan 18  2006'"}, "Variable Values Before Statement": {"year": "2006", "month": "1", "day": "18", "hour": "0", "minutes": "0"}, "Value After Statement Execution": "datetime.datetime(2006, 1, 18, 0, 0, tzinfo", "Variable States During Runtime": {"t": [[1, "'Jan 18  2006'"], [2.0, "'jan 18  2006'"]], "_t": [[5.0, "time.struct_time(tm_year=2006, tm_mon=1, tm_mday=18, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=18, tm_isdst=-1)"]], "year": [[12.0, "2006"]], "month": [[13.0, "1"]], "day": [[14.0, "18"]], "hour": [[15.0, "0"]], "minutes": [[16.0, "0"]], "dt": [[17.0, "datetime.datetime(2006, 1, 18, 0, 0, tzinfo=<UTC>)"]], "epoch_time": [[19.0, "1137542400.0"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 387, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __setitem__(self, key, value):\n        # type: (_K, _V) -> None\n        \"\"\"Store a new views, potentially discarding an old value.\n        \"\"\"\n        if key not in self:\n            if len(self) >= self.cache_size:\n                self.popitem(last=False)\n        OrderedDict.__setitem__(self, key, value)\n\n__setitem__(self=LRUCache(), key='foo', value=1)", "Selected Statement": "OrderedDict.__setitem__(self, key, value)", "Function Input": {"self": "LRUCache()", "key": "'foo'", "value": "1"}, "Variable Values Before Statement": {"self": "LRUCache()", "key": "'foo'", "value": "1"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"self": [[1, "LRUCache()"], [8.0, "LRUCache([('foo', 1)])"]], "key": [[1, "'foo'"]], "value": [[1, "1"]], "self['foo']": [[8.0, "1"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 388, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _insert(self, key, value):\n        flat_key = self._serialize_key(key)\n        i = self._index.get(flat_key, -1)\n        if i >= 0:\n            self._items[i] = (key, value)\n        else:\n            self._items.append((key, value))\n            self._index[flat_key] = len(self._items) - 1\n\n_insert(self=OrderedMapSerializedKey([]), key='みbob', value=199)", "Selected Statement": "flat_key = self._serialize_key(key)", "Function Input": {"self": "OrderedMapSerializedKey([])", "key": "'みbob'", "value": "199"}, "Variable Values Before Statement": {"key": "'みbob'"}, "Value After Statement Execution": "b'\\xe3\\x81\\xbfbob'", "Variable States During Runtime": {"self": [[1, "OrderedMapSerializedKey([])"], [7.0, "OrderedMapSerializedKey([('みbob', 199)])"]], "key": [[1, "'みbob'"]], "value": [[1, "199"]], "flat_key": [[2.0, "b'\\xe3\\x81\\xbfbob'"]], "i": [[3.0, "-1"]], "self['みbob']": [[8.0, "199"]]}, "Program Information": "Project Name: YugaByte+cassandra-python-driver", "idx": 389, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _prep_ordered_arg(desired_length, arguments=None):\n    \"\"\"Ensure list of arguments passed to add_ordered_transitions has the proper length.\n    Expands the given arguments and apply same condition, callback\n    to all transitions if only one has been given.\n\n    Args:\n        desired_length (int): The size of the resulting list\n        arguments (optional[str, reference or list]): Parameters to be expanded.\n    Returns:\n        list: Parameter sets with the desired length.\n    \"\"\"\n    arguments = listify(arguments) if arguments is not None else [None]\n    if len(arguments) != desired_length and len(arguments) != 1:\n        raise ValueError(\"Argument length must be either 1 or the same length as \"\n                         \"the number of transitions.\")\n    if len(arguments) == 1:\n        return arguments * desired_length\n    return arguments\n\n_prep_ordered_arg(desired_length=3, arguments=None)", "Selected Statement": "arguments = listify(arguments) if arguments is not None else [None]", "Function Input": {"desired_length": "3", "arguments": "None"}, "Variable Values Before Statement": {"arguments": "None"}, "Value After Statement Execution": "[None]", "Variable States During Runtime": {"desired_length": [[1, "3"]], "arguments": [[1, "None"], [12.0, "[None]"]]}, "Program Information": "Project Name: pytransitions+transitions", "idx": 390, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def config(_config=None, **kwargs):\n    \"\"\"\n    A decorator for setting the default kwargs of `BaseHandler.crawl`.\n    Any self.crawl with this callback will use this config.\n    \"\"\"\n    if _config is None:\n        _config = {}\n    _config.update(kwargs)\n\n    def wrapper(func):\n        func._config = _config\n        return func\n    return wrapper\n\nconfig(_config=None, kwargs={'age': 864000})", "Selected Statement": "_config.update(kwargs)", "Function Input": {"_config": "None", "kwargs": "{'age': 864000}"}, "Variable Values Before Statement": {"kwargs": "{'age': 864000}"}, "Value After Statement Execution": "{'age': 864000}", "Variable States During Runtime": {"_config": [[1, "None"], [7.0, "{}"], [8.0, "{'age': 864000}"]], "kwargs": [[1, "{'age': 864000}"]], "wrapper": [[10.0, "<function config.<locals>.wrapper at 0x7f6a10388ee0>"]]}, "Program Information": "Project Name: binux+pyspider", "idx": 391, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def quat_from_axis_angle(axis, angle):\n        axis_ = np.array(axis, dtype=np.float64)\n        half_angle = angle * 0.5\n        ret = np.empty(4)\n        ret[0] = math.cos(half_angle)\n        ret[1:4] = math.sin(half_angle) * axis_\n        return ret\n\nquat_from_axis_angle(axis=[1.0, 0.0, 0.0], angle=6.1086523819801535)", "Selected Statement": "ret[1:4] = math.sin(half_angle) * axis_", "Function Input": {"axis": "[1.0, 0.0, 0.0]", "angle": "6.1086523819801535"}, "Variable Values Before Statement": {"half_angle": "3.0543261909900767"}, "Value After Statement Execution": "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])", "Variable States During Runtime": {"axis": [[1, "[1.0, 0.0, 0.0]"]], "angle": [[1, "6.1086523819801535"]], "axis_": [[2.0, "array([1., 0., 0.])"]], "half_angle": [[3.0, "3.0543261909900767"]], "ret": [[4.0, "array([4.65265954e-310, 0.00000000e+000, 1.58101007e-322, 6.90572610e-310])"], [5.0, "array([-9.96194698e-001,  0.00000000e+000,  1.58101007e-322,        6.90572610e-310])"], [6.0, "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])"]]}, "Program Information": "Project Name: Hasenpfote+fpq", "idx": 392, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def base64url_decode(input: Union[bytes, str]) -> bytes:\n    input_bytes = force_bytes(input)\n\n    rem = len(input_bytes) % 4\n\n    if rem > 0:\n        input_bytes += b\"=\" * (4 - rem)\n\n    return base64.urlsafe_b64decode(input_bytes)\n\nbase64url_decode(input='hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg')", "Selected Statement": "rem = len(input_bytes) % 4", "Function Input": {"input": "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Variable Values Before Statement": {"input_bytes": "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Value After Statement Execution": "3", "Variable States During Runtime": {"input": [[1, "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"]], "input_bytes": [[2.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"], [7.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg='"]], "rem": [[4.0, "3"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 393, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def to_base64url_uint(val: int) -> bytes:\n    if val < 0:\n        raise ValueError(\"Must be a positive integer\")\n\n    int_bytes = bytes_from_int(val)\n\n    if len(int_bytes) == 0:\n        int_bytes = b\"\\x00\"\n\n    return base64url_encode(int_bytes)\n\nto_base64url_uint(val=0)", "Selected Statement": "int_bytes = bytes_from_int(val)", "Function Input": {"val": "0"}, "Variable Values Before Statement": {"val": "0"}, "Value After Statement Execution": "b''", "Variable States During Runtime": {"val": [[1, "0"]], "int_bytes": [[5.0, "b''"], [8.0, "b'\\x00'"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 394, "quantized value": "Unknown Type", "mapping_info": {"Unknown Type": "No mapping available"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def get_targets_from_csv(csv_filename):\n        '''Returns list of Target objects parsed from CSV file.'''\n        targets = []\n        import csv\n        with open(csv_filename, 'r') as csvopen:\n            lines = []\n            for line in csvopen:\n                line = line.replace('\\0', '')\n                lines.append(line)\n            csv_reader = csv.reader(lines,\n                    delimiter=',',\n                    quoting=csv.QUOTE_ALL,\n                    skipinitialspace=True,\n                    escapechar='\\\\')\n\n            hit_clients = False\n            for row in csv_reader:\n                # Each 'row' is a list of fields for a target/client\n\n                if len(row) == 0: continue\n\n                if row[0].strip() == 'BSSID':\n                    # This is the 'header' for the list of Targets\n                    hit_clients = False\n                    continue\n\n                elif row[0].strip() == 'Station MAC':\n                    # This is the 'header' for the list of Clients\n                    hit_clients = True\n                    continue\n\n                if hit_clients:\n                    # The current row corresponds to a 'Client' (computer)\n                    try:\n                        client = Client(row)\n                    except (IndexError, ValueError) as e:\n                        # Skip if we can't parse the client row\n                        continue\n\n                    if 'not associated' in client.bssid:\n                        # Ignore unassociated clients\n                        continue\n\n                    # Add this client to the appropriate Target\n                    for t in targets:\n                        if t.bssid == client.bssid:\n                            t.clients.append(client)\n                            break\n\n                else:\n                    # The current row corresponds to a 'Target' (router)\n                    try:\n                        target = Target(row)\n                        targets.append(target)\n                    except Exception:\n                        continue\n\n        return targets\n\nget_targets_from_csv(csv_filename='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv')", "Selected Statement": "with open(csv_filename, 'r') as csvopen:", "Function Input": {"csv_filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"}, "Variable Values Before Statement": {"csv_filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"}, "Value After Statement Execution": "<_io.TextIOWrapper name", "Variable States During Runtime": {"csv_filename": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"]], "targets": [[3.0, "[]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>, <wifite.model.target.Target object at 0x7ff2ae4e2af0>]"]], "csv": [[4.0, "<module 'csv' from '/local/rcs/XXX/miniforge3/envs/derv82+wifite2/lib/python3.9/csv.py'>"]], "csvopen": [[5.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv' mode='r' encoding='UTF-8'>"]], "lines": [[6.0, "[]"], [9.0, "['\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n', '\\n']"]], "line": [[7.0, "'\\n'"], [7.0, "'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n'"], [7.0, "'\\n'"], [7.0, "'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n'"], [7.0, "'\\n'"]], "csv_reader": [[10.0, "REPR FAILED"]], "hit_clients": [[16.0, "False"], [29.0, "True"]], "row": [[17.0, "[]"], [17.0, "['BSSID', 'First time seen', 'Last time seen', 'channel', 'Speed', 'Privacy', 'Cipher', 'Authentication', 'Power', '# beacons', '# IV', 'LAN IP', 'ID-length', 'ESSID', 'Key']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:21:23', '2018-04-06 18:21:24', '10', '54', 'WPA2', 'CCMP', 'PSK', '-34', '5', '0', '0.  0.  0.  0', '24', 'Comma, no trailing space', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:19:17', '2018-04-06 18:19:19', '10', '54', 'WPA2', 'CCMP', 'PSK', '-35', '18', '0', '0.  0.  0.  0', '20', '\"Quoted ESSID, Comma, no trailing spaces.   \"', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:35:29', '2018-04-06 18:35:30', '10', '54', 'WPA2', 'CCMP', 'PSK', '-31', '12', '0', '0.  0.  0.  0', '22', 'Comma, Trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:22:45', '2018-04-06 18:22:46', '10', '54', 'WPA2', 'CCMP', 'PSK', '-29', '15', '0', '0.  0.  0.  0', '30', '\"quote\" comma, trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:50:11', '2018-04-06 18:50:17', '10', '54', 'WPA2', 'CCMP', 'PSK', '-20', '43', '0', '0.  0.  0.  0', '19', 'x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00', '']"], [17.0, "[]"], [17.0, "['Station MAC', 'First time seen', 'Last time seen', 'Power', '# packets', 'BSSID', 'Probed ESSIDs']"], [17.0, "[]"]], "target": [[53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=66, beacons=5, ivs=0, essid_known=True, essid_len=24, essid='Comma, no trailing space', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=65, beacons=18, ivs=0, essid_known=True, essid_len=20, essid='\"Quoted ESSID, Comma, no trailing spaces.   \"', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=69, beacons=12, ivs=0, essid_known=True, essid_len=22, essid='Comma, Trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=71, beacons=15, ivs=0, essid_known=True, essid_len=30, essid='\"quote\" comma, trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=80, beacons=43, ivs=0, essid_known=False, essid_len=19, essid=None, wps=3, decloaked=False, clients=[]}"]]}, "Program Information": "Project Name: derv82+wifite2", "idx": 395, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def f(e):\n            result.append(e)\n\nf(e=1, result=[])", "Selected Statement": "result.append(e)", "Function Input": {"e": "1", "result": "[]"}, "Variable Values Before Statement": {"e": "1"}, "Value After Statement Execution": "[1]", "Variable States During Runtime": {"e": [[1, "1"]], "result": [[1, "[]"], [2.0, "[1]"]]}, "Program Information": "Project Name: EntilZha+ScalaFunctional", "idx": 396, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _create_key_val_str(input_dict: Union[Mapping[Any, Any], Any]) -> str:\n    \"\"\"\n    Returns string of format {'key': val, 'key2': val2}\n    Function is called recursively for nested dictionaries\n\n    :param input_dict: dictionary to transform\n    :return: (str) reformatted string\n    \"\"\"\n\n    def list_to_str(input_list: List[str]) -> str:\n        \"\"\"\n        Convert all list items to string.\n        Function is called recursively for nested lists\n        \"\"\"\n        converted_list = []\n        for item in sorted(input_list, key=lambda x: str(x)):\n            if isinstance(item, dict):\n                item = _create_key_val_str(item)\n            elif isinstance(item, list):\n                item = list_to_str(item)\n\n            converted_list.append(str(item))\n        list_str = \", \".join(converted_list)\n        return \"[\" + list_str + \"]\"\n\n    items_list = []\n    for key in sorted(input_dict.keys(), key=lambda x: str(x)):\n        val = input_dict[key]\n        if isinstance(val, dict):\n            val = _create_key_val_str(val)\n        elif isinstance(val, list):\n            val = list_to_str(input_list=val)\n\n        items_list.append(f\"{key}: {val}\")\n\n    key_val_str = \"{{{}}}\".format(\", \".join(items_list))\n    return key_val_str\n\n_create_key_val_str(input_dict={})", "Selected Statement": "key_val_str = \"{{{}}}\".format(\", \".join(items_list))", "Function Input": {"input_dict": "{}"}, "Variable Values Before Statement": {"items_list": "[]"}, "Value After Statement Execution": "'{}'", "Variable States During Runtime": {"input_dict": [[1, "{}"]], "list_to_str": [[10.0, "<function _create_key_val_str.<locals>.list_to_str at 0x7f684994adc0>"]], "items_list": [[26.0, "[]"]], "key_val_str": [[36.0, "'{}'"]]}, "Program Information": "Project Name: getsentry+responses", "idx": 397, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def _clean_unicode(url: str) -> str:\n    \"\"\"Clean up URLs, which use punycode to handle unicode chars.\n\n    Applies percent encoding to URL path and query if required.\n\n    Parameters\n    ----------\n    url : str\n        URL that should be cleaned from unicode\n\n    Returns\n    -------\n    str\n        Cleaned URL\n\n    \"\"\"\n    urllist = list(urlsplit(url))\n    netloc = urllist[1]\n    if _has_unicode(netloc):\n        domains = netloc.split(\".\")\n        for i, d in enumerate(domains):\n            if _has_unicode(d):\n                d = \"xn--\" + d.encode(\"punycode\").decode(\"ascii\")\n                domains[i] = d\n        urllist[1] = \".\".join(domains)\n        url = urlunsplit(urllist)\n\n    # Clean up path/query/params, which use url-encoding to handle unicode chars\n    chars = list(url)\n    for i, x in enumerate(chars):\n        if ord(x) > 128:\n            chars[i] = quote(x)\n\n    return \"\".join(chars)\n\n_clean_unicode(url='http://example.com/test?type=2&ie=utf8&query=汉字')", "Selected Statement": "chars = list(url)", "Function Input": {"url": "'http://example.com/test?type=2&ie=utf8&query=汉字'"}, "Variable Values Before Statement": {"url": "'http://example.com/test?type=2&ie=utf8&query=汉字'"}, "Value After Statement Execution": "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '", "Variable States During Runtime": {"url": [[1, "'http://example.com/test?type=2&ie=utf8&query=汉字'"]], "urllist": [[17.0, "['http', 'example.com', '/test', 'type=2&ie=utf8&query=汉字', '']"]], "netloc": [[18.0, "'example.com'"]], "chars": [[29.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '汉', '字']"], [32.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '字']"], [32.0, "['h', 't', 't', 'p', ':', '/', '/', 'e', 'x', 'a', 'm', 'p', 'l', 'e', '.', 'c', 'o', 'm', '/', 't', 'e', 's', 't', '?', 't', 'y', 'p', 'e', '=', '2', '&', 'i', 'e', '=', 'u', 't', 'f', '8', '&', 'q', 'u', 'e', 'r', 'y', '=', '%E6%B1%89', '%E5%AD%97']"]], "i": [[30.0, "0"], [30.0, "1"], [30.0, "2"], [30.0, "3"], [30.0, "4"], [30.0, "5"], [30.0, "6"], [30.0, "7"], [30.0, "8"], [30.0, "9"], [30.0, "10"], [30.0, "11"], [30.0, "12"], [30.0, "13"], [30.0, "14"], [30.0, "15"], [30.0, "16"], [30.0, "17"], [30.0, "18"], [30.0, "19"], [30.0, "20"], [30.0, "21"], [30.0, "22"], [30.0, "23"], [30.0, "24"], [30.0, "25"], [30.0, "26"], [30.0, "27"], [30.0, "28"], [30.0, "29"], [30.0, "30"], [30.0, "31"], [30.0, "32"], [30.0, "33"], [30.0, "34"], [30.0, "35"], [30.0, "36"], [30.0, "37"], [30.0, "38"], [30.0, "39"], [30.0, "40"], [30.0, "41"], [30.0, "42"], [30.0, "43"], [30.0, "44"], [30.0, "45"], [30.0, "46"]], "x": [[30.0, "'h'"], [30.0, "'t'"], [30.0, "'p'"], [30.0, "':'"], [30.0, "'/'"], [30.0, "'e'"], [30.0, "'x'"], [30.0, "'a'"], [30.0, "'m'"], [30.0, "'p'"], [30.0, "'l'"], [30.0, "'e'"], [30.0, "'.'"], [30.0, "'c'"], [30.0, "'o'"], [30.0, "'m'"], [30.0, "'/'"], [30.0, "'t'"], [30.0, "'e'"], [30.0, "'s'"], [30.0, "'t'"], [30.0, "'?'"], [30.0, "'t'"], [30.0, "'y'"], [30.0, "'p'"], [30.0, "'e'"], [30.0, "'='"], [30.0, "'2'"], [30.0, "'&'"], [30.0, "'i'"], [30.0, "'e'"], [30.0, "'='"], [30.0, "'u'"], [30.0, "'t'"], [30.0, "'f'"], [30.0, "'8'"], [30.0, "'&'"], [30.0, "'q'"], [30.0, "'u'"], [30.0, "'e'"], [30.0, "'r'"], [30.0, "'y'"], [30.0, "'='"], [30.0, "'汉'"], [30.0, "'字'"]]}, "Program Information": "Project Name: getsentry+responses", "idx": 398, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def class_to_tg(sub_class: str):\n    trans = {\"Online\": \"_online\", \"Offline\": \"_offline\"}\n\n    for upper, lower in trans.items():\n        sub_class = sub_class.replace(upper, lower)\n\n    return sub_class.lower()\n\nclass_to_tg(sub_class='YYeTsOffline')", "Selected Statement": "sub_class = sub_class.replace(upper, lower)", "Function Input": {"sub_class": "'YYeTsOffline'"}, "Variable Values Before Statement": {"upper": "'Offline'", "lower": "'_offline'"}, "Value After Statement Execution": "'YYeTs_offline'", "Variable States During Runtime": {"sub_class": [[1, "'YYeTsOffline'"], [5.0, "'YYeTs_offline'"]], "trans": [[2.0, "{'Online': '_online', 'Offline': '_offline'}"]], "upper": [[4.0, "'Online'"], [4.0, "'Offline'"]], "lower": [[4.0, "'_online'"], [4.0, "'_offline'"]]}, "Program Information": "Project Name: tgbot-collection+YYeTsBot", "idx": 399, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def patch_terminal_size(monkeypatch):\n    term_width = '250'\n    term_height = '60'\n    monkeypatch.setitem(os.environ, 'COLUMNS', term_width)\n    monkeypatch.setitem(os.environ, 'LINES', term_height)\n\npatch_terminal_size(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None})", "Selected Statement": "monkeypatch.setitem(os.environ, 'LINES', term_height)", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"}, "Variable Values Before Statement": {"term_height": "'60'"}, "Value After Statement Execution": "{_setattr", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [4.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250'}), 'COLUMNS', <notset>)], _cwd=None, _savesyspath=None}"], [5.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'V...deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250', 'LINES': '60'}), 'LINES', <notset>)], _cwd=None, _savesyspath=None}"]], "term_width": [[2.0, "'250'"]], "term_height": [[3.0, "'60'"]]}, "Program Information": "Project Name: AmmsA+Githeat", "idx": 400, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def generate_samples_loguniform(low, high, step, base, size=1):\n    \"\"\"Generate sample for (discrete)uniform density.\"\"\"\n\n    samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))\n    if step:\n        samples = step * np.floor(samples / step)\n    return samples\n\ngenerate_samples_loguniform(low=5.8884365535558836e-08, high=2.6977394324449206e-07, step=None, base=10, size=100000)", "Selected Statement": "samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))", "Function Input": {"low": "5.8884365535558836e-08", "high": "2.6977394324449206e-07", "step": "None", "base": "10", "size": "100000"}, "Variable Values Before Statement": {"high": "2.6977394324449206e-07", "base": "10"}, "Value After Statement Execution": "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])", "Variable States During Runtime": {"low": [[1, "5.8884365535558836e-08"]], "high": [[1, "2.6977394324449206e-07"]], "step": [[1, "None"]], "base": [[1, "10"]], "size": [[1, "100000"]], "samples": [[4.0, "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 401, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def parzen_estimator_build_posterior_parameter(parameter, observations):\n    \"\"\"TPE algorith transform a prior parameter into a posterior parameters using observations\n    to build posterior.\n    \"\"\"\n    posterior_parameter = None\n    parameter_values = [observation.sample[parameter.name] for observation in observations]\n    search_space = parameter.search_space\n    if parameter.category == \"categorical\":\n        \"\"\" TODO Compare mean (current implem) vs hyperopt approach.\"\"\"\n        prior_probabilities = np.array(search_space[\"probabilities\"])\n        posterior_probabilities = prior_probabilities\n        if len(parameter_values) != 0:\n            observed_probabilities = np.array([parameter_values.count(value)\n                                               for value in search_space[\"values\"]])\n            observed_probabilities = observed_probabilities / np.sum(observed_probabilities)\n            posterior_probabilities += observed_probabilities\n        posterior_probabilities /= sum(posterior_probabilities)\n\n        # Build param\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"categorical\",\n                \"search_space\": {\n                    \"values\": search_space[\"values\"],\n                    \"probabilities\": list(posterior_probabilities),\n                }\n            }\n        )\n\n    if parameter.category in (\"uniform\", \"normal\", \"loguniform\", \"lognormal\"):\n        if parameter.category in (\"uniform\", \"loguniform\"):\n            prior_mu = 0.5 * (search_space[\"high\"] + search_space[\"low\"])\n            prior_sigma = (search_space[\"high\"] - search_space[\"low\"])\n        elif parameter.category in (\"normal\", \"lognormal\"):\n            prior_mu = search_space[\"mu\"]\n            prior_sigma = search_space[\"sigma\"]\n\n        # Mus\n        mus = np.sort(parameter_values + [prior_mu])\n\n        # Sigmas\n        # Trick to get for each mu the greater distance from left and right neighbor\n        # when low and high are not defined we use inf to get the only available distance\n        # (right neighbor for sigmas[0] and left for sigmas[-1])\n        tmp = np.concatenate(\n            (\n                [search_space.get(\"low\", np.inf)],\n                mus,\n                [search_space.get(\"high\", -np.inf)],\n            )\n        )\n        sigmas = np.maximum(tmp[1:-1] - tmp[0:-2], tmp[2:] - tmp[1:-1])\n\n        # Use formulas from hyperopt to clip sigmas\n        sigma_max_value = prior_sigma\n        sigma_min_value = prior_sigma / min(100.0, (1.0 + len(mus)))\n        sigmas = np.clip(sigmas, sigma_min_value, sigma_max_value)\n\n        # Fix prior sigma with correct value\n        sigmas[np.where(mus == prior_mu)[0]] = prior_sigma\n\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"mixture\",\n                \"search_space\": {\n                    \"parameters\": [\n                        {\n                            \"category\": \"normal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space.get(\"step\", None)\n                            }\n                        } if parameter.category[:3] != \"log\" else\n                        {\n                            \"category\": \"lognormal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space[\"step\"],\n                                \"base\": search_space[\"base\"],\n                            }\n                        } for mu, sigma in zip(mus, sigmas)\n                    ],\n                    \"weights\": [1 / len(mus) for _ in range(len(mus))]\n                }\n            }\n        )\n\n    return posterior_parameter\n\nparzen_estimator_build_posterior_parameter(parameter=x, observations=[])", "Selected Statement": "sigma_min_value = prior_sigma / min(100.0, (1.0 + len(mus)))", "Function Input": {"parameter": "x", "observations": "[]"}, "Variable Values Before Statement": {"mus": "array([1.57079633])"}, "Value After Statement Execution": "1.5707963267948966", "Variable States During Runtime": {"parameter": [[1, "x"]], "observations": [[1, "[]"]], "posterior_parameter": [[5.0, "None"], [63.0, "x"]], "parameter_values": [[6.0, "[]"]], "search_space": [[7.0, "{'low': 0, 'high': 3.141592653589793, 'step': None}"]], "prior_mu": [[33.0, "1.5707963267948966"]], "prior_sigma": [[34.0, "3.141592653589793"]], "mus": [[40.0, "array([1.57079633])"]], "tmp": [[46.0, "array([0.        , 1.57079633, 3.14159265])"]], "sigmas": [[53.0, "array([1.57079633])"], [61.0, "array([3.14159265])"]], "sigma_max_value": [[56.0, "3.141592653589793"]], "sigma_min_value": [[57.0, "1.5707963267948966"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 402, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def validate_categorical(search_space):\n    # error = \"Expected a dict with mandatory key 'values' (list) and optional key 'probabilities' (list)\"\n    search_space = search_space.copy()\n\n    if type(search_space) != dict:\n        raise ValueError\n    if \"values\" not in search_space.keys() or type(search_space['values']) != list:\n        raise ValueError\n    if \"probabilities\" in search_space.keys() and (\n            type(search_space['probabilities']) != list or\n            len(search_space['probabilities']) != len(search_space['values'])):\n        raise ValueError\n\n    # Test that proba sum to 1 but we are lazy and we try directly\n    if \"probabilities\" in search_space.keys():\n        np.random.choice(range(len(search_space[\"probabilities\"])),\n                         p=search_space[\"probabilities\"])\n\n    if \"probabilities\" not in search_space.keys():\n        number_of_values = len(search_space[\"values\"])\n        search_space[\"probabilities\"] = list(np.ones(number_of_values) / number_of_values)\n\n    return search_space\n\nvalidate_categorical(search_space={'values': [0, 0.6283185307179586, 0.7853981633974483, 1.0471975511965976, 1.5707963267948966, 3.141592653589793]})", "Selected Statement": "search_space[\"probabilities\"] = list(np.ones(number_of_values) / number_of_values)", "Function Input": {"search_space": "{'values': [0, 0.6283185307179586, 0.7853981633974483, 1.0471975511965976, 1.5707963267948966, 3.141592653589793]}"}, "Variable Values Before Statement": {"number_of_values": "6"}, "Value After Statement Execution": "{'values': [0, 0.6283185307179586, 0.7853981633974483, 1.0471975511965976, 1.5707963267948966, 3.141592653589793], 'probabilities': [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]}", "Variable States During Runtime": {"search_space": [[1, "{'values': [0, 0.6283185307179586, 0.7853981633974483, 1.0471975511965976, 1.5707963267948966, 3.141592653589793]}"], [21.0, "{'values': [0, 0.6283185307179586, 0.7853981633974483, 1.0471975511965976, 1.5707963267948966, 3.141592653589793], 'probabilities': [0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666]}"]], "number_of_values": [[20.0, "6"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 403, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def __missing__(self, b):\n        # Handle a cache miss, store encoded string in cache and return.\n        if b in _TILDE_ENCODING_SAFE:\n            res = chr(b)\n        elif b == _space:\n            res = \"+\"\n        else:\n            res = \"~{:02X}\".format(b)\n        self[b] = res\n        return res\n\n__missing__(self={}, b=102)", "Selected Statement": "res = chr(b)", "Function Input": {"self": "{}", "b": "102"}, "Variable Values Before Statement": {"b": "102"}, "Value After Statement Execution": "'f'", "Variable States During Runtime": {"self": [[1, "{}"], [9.0, "{102: 'f'}"]], "b": [[1, "102"]], "res": [[4.0, "'f'"]], "self[102]": [[9.0, "'f'"]]}, "Program Information": "Project Name: simonw+datasette", "idx": 404, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "API", "Source Code": "def to_css_class(s):\n    \"\"\"\n    Given a string (e.g. a table name) returns a valid unique CSS class.\n    For simple cases, just returns the string again. If the string is not a\n    valid CSS class (we disallow - and _ prefixes even though they are valid\n    as they may be confused with browser prefixes) we strip invalid characters\n    and add a 6 char md5 sum suffix, to make sure two tables with identical\n    names after stripping characters don't end up with the same CSS class.\n    \"\"\"\n    if css_class_re.match(s):\n        return s\n    md5_suffix = hashlib.md5(s.encode(\"utf8\")).hexdigest()[:6]\n    # Strip leading _, -\n    s = s.lstrip(\"_\").lstrip(\"-\")\n    # Replace any whitespace with hyphens\n    s = \"-\".join(s.split())\n    # Remove any remaining invalid characters\n    s = css_invalid_chars_re.sub(\"\", s)\n    # Attach the md5 suffix\n    bits = [b for b in (s, md5_suffix) if b]\n    return \"-\".join(bits)\n\nto_css_class(s='table/with/slashes.csv')", "Selected Statement": "s = css_invalid_chars_re.sub(\"\", s)", "Function Input": {"s": "'table/with/slashes.csv'"}, "Variable Values Before Statement": {"s": "'table/with/slashes.csv'"}, "Value After Statement Execution": "'tablewithslashescsv'", "Variable States During Runtime": {"s": [[1, "'table/with/slashes.csv'"], [18.0, "'tablewithslashescsv'"]], "md5_suffix": [[12.0, "'fa7563'"]], "bits": [[20.0, "['tablewithslashescsv', 'fa7563']"]]}, "Program Information": "Project Name: simonw+datasette", "idx": 405, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def client_factory(client_name, **kwargs):\n    \"\"\"Return a client for an external data set\"\"\"\n    # set up\n    dir_name = os.path.dirname(os.path.abspath(__file__))\n    error_msg = 'No client found for name %s' % client_name\n    client_key = client_name.upper()\n\n    # find client\n    try:\n        client_vals = BALANCING_AUTHORITIES[client_key]\n        module_name = client_vals['module']\n\n        class_name = client_vals['class']\n    except KeyError:\n        raise ValueError(error_msg)\n\n    # find module\n    try:\n        fp, pathname, description = imp.find_module(module_name, [dir_name])\n    except ImportError:\n        raise ValueError(error_msg)\n\n    # load\n    try:\n        mod = imp.load_module(module_name, fp, pathname, description)\n    finally:\n        # Since we may exit via an exception, close fp explicitly.\n        if fp:\n            fp.close()\n\n    # instantiate class\n    try:\n        client_inst = getattr(mod, class_name)(**kwargs)\n    except AttributeError:\n        raise ValueError(error_msg)\n\n    # set name\n    client_inst.NAME = client_name\n\n    return client_inst\n\nclient_factory(client_name='MISO', kwargs={})", "Selected Statement": "error_msg = 'No client found for name %s' % client_name", "Function Input": {"client_name": "'MISO'", "kwargs": "{}"}, "Variable Values Before Statement": {"client_name": "'MISO'"}, "Value After Statement Execution": "'No client found for name MISO'", "Variable States During Runtime": {"client_name": [[1, "'MISO'"]], "kwargs": [[1, "{}"]], "dir_name": [[4.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso'"]], "error_msg": [[5.0, "'No client found for name MISO'"]], "client_key": [[6.0, "'MISO'"]], "client_vals": [[10.0, "{'module': 'miso', 'class': 'MISOClient'}"]], "module_name": [[11.0, "'miso'"]], "class_name": [[13.0, "'MISOClient'"]], "fp": [[19.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py' mode='r' encoding='utf-8'>"]], "pathname": [[19.0, "'/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/WattTime+pyiso/WattTime+pyiso/pyiso/miso.py'"]], "description": [[19.0, "('.py', 'r', 1)"]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 406, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def get_generation(ba_name, **kwargs):\n    # get data\n    c = client_factory(ba_name)\n    data = c.get_generation(**kwargs)\n    \n    # log\n    if len(data) == 0:\n        msg = '%s: No generation data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),\n                                                    kwargs)\n        logger.warn(msg)\n    \n    # return\n    return data\n\nget_generation(ba_name='CAISO', kwargs={'latest': True})", "Selected Statement": "msg = '%s: No generation data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),", "Function Input": {"ba_name": "'CAISO'", "kwargs": "{'latest': True}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "\"CAISO: No generation data at 2024-04-03T22:46:21.338362 with args {'latest': True}\"", "Variable States During Runtime": {"ba_name": [[1, "'CAISO'"]], "kwargs": [[1, "{'latest': True}"]], "c": [[3.0, "{options={}, NAME='CAISO'}"], [4.0, "{options={'data': 'gen', 'latest': True, 'yesterday': False, 'start_at': False, 'end_at': False, 'sliceable': False, 'forecast': False, 'market': 'RT5M', 'freq': '10m'}, NAME='CAISO', session=<requests.sessions.Session object at 0x7fcc37a98b50>}"]], "data": [[4.0, "[]"]], "msg": [[8.0, "\"CAISO: No generation data at 2024-04-03T22:46:21.338362 with args {'latest': True}\""]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 407, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def get_load(ba_name, **kwargs):\n    # get data\n    c = client_factory(ba_name)\n    data = c.get_load(**kwargs)\n    \n    # log\n    if len(data) == 0:\n        msg = '%s: No load data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),\n                                                    kwargs)\n        logger.warn(msg)\n    \n    # return\n    return data\n\nget_load(ba_name='PJM', kwargs={'latest': True})", "Selected Statement": "msg = '%s: No load data at %s with args %s' % (ba_name, datetime.utcnow().isoformat(),", "Function Input": {"ba_name": "'PJM'", "kwargs": "{'latest': True}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "\"PJM: No load data at 2024-04-03T22:47:45.327834 with args {'latest': True}\"", "Variable States During Runtime": {"ba_name": [[1, "'PJM'"]], "kwargs": [[1, "{'latest': True}"]], "c": [[3.0, "{options={}, NAME='PJM'}"], [4.0, "{options={'data': 'load', 'latest': True, 'start_at': None, 'end_at': None, 'forecast': False, 'sliceable': False}, NAME='PJM', session=<requests.sessions.Session object at 0x7fcc37745f10>}"]], "data": [[4.0, "[]"]], "msg": [[8.0, "\"PJM: No load data at 2024-04-03T22:47:45.327834 with args {'latest': True}\""]]}, "Program Information": "Project Name: WattTime+pyiso", "idx": 408, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def xldate_as_tuple(xldate, datemode):\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n    if xldate == 0.00:\n        return (0, 0, 0, 0, 0, 0)\n    if xldate < 0.00:\n        raise XLDateNegative(xldate)\n    xldays = int(xldate)\n    frac = xldate - xldays\n    seconds = int(round(frac * 86400.0))\n    assert 0 <= seconds <= 86400\n    if seconds == 86400:\n        hour = minute = second = 0\n        xldays += 1\n    else:\n        # second = seconds % 60; minutes = seconds // 60\n        minutes, second = divmod(seconds, 60)\n        # minute = minutes % 60; hour    = minutes // 60\n        hour, minute = divmod(minutes, 60)\n    if xldays >= _XLDAYS_TOO_LARGE[datemode]:\n        raise XLDateTooLarge(xldate)\n\n    if xldays == 0:\n        return (0, 0, 0, hour, minute, second)\n\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(xldate)\n\n    jdn = xldays + _JDN_delta[datemode]\n    yreg = (ifd(ifd(jdn * 4 + 274277, 146097) * 3, 4) + jdn + 1363) * 4 + 3\n    mp = ifd(yreg % 1461, 4) * 535 + 333\n    d = ifd(mp % 16384, 535) + 1\n    # mp /= 16384\n    mp >>= 14\n    if mp >= 10:\n        return (ifd(yreg, 1461) - 4715, mp - 9, d, hour, minute, second)\n    else:\n        return (ifd(yreg, 1461) - 4716, mp + 3, d, hour, minute, second)\n\nxldate_as_tuple(xldate=2741.0, datemode=0)", "Selected Statement": "frac = xldate - xldays", "Function Input": {"xldate": "2741.0", "datemode": "0"}, "Variable Values Before Statement": {"xldate": "2741.0", "xldays": "2741"}, "Value After Statement Execution": "0.0", "Variable States During Runtime": {"xldate": [[1, "2741.0"]], "datemode": [[1, "0"]], "xldays": [[8.0, "2741"]], "frac": [[9.0, "0.0"]], "seconds": [[10.0, "0"]], "second": [[17.0, "0"]], "minutes": [[17.0, "0"]], "hour": [[19.0, "0"]], "minute": [[19.0, "0"]], "jdn": [[29.0, "2417760"]], "yreg": [[30.0, "9676699"]], "mp": [[31.0, "66673"], [34.0, "4"]], "d": [[32.0, "3"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 409, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def xldate_from_date_tuple(date_tuple, datemode):\n    \"\"\"Create an excel date from a tuple of (year, month, day)\"\"\"\n    year, month, day = date_tuple\n\n    if datemode not in (0, 1):\n        raise XLDateBadDatemode(datemode)\n\n    if year == 0 and month == 0 and day == 0:\n        return 0.00\n\n    if not (1900 <= year <= 9999):\n        raise XLDateBadTuple(\"Invalid year: %r\" % ((year, month, day),))\n    if not (1 <= month <= 12):\n        raise XLDateBadTuple(\"Invalid month: %r\" % ((year, month, day),))\n    if  day < 1 \\\n    or (day > _days_in_month[month] and not(day == 29 and month == 2 and _leap(year))):\n        raise XLDateBadTuple(\"Invalid day: %r\" % ((year, month, day),))\n\n    Yp = year + 4716\n    M = month\n    if M <= 2:\n        Yp = Yp - 1\n        Mp = M + 9\n    else:\n        Mp = M - 3\n    jdn = ifd(1461 * Yp, 4) + ifd(979 * Mp + 16, 32) + \\\n        day - 1364 - ifd(ifd(Yp + 184, 100) * 3, 4)\n    xldays = jdn - _JDN_delta[datemode]\n    if xldays <= 0:\n        raise XLDateBadTuple(\"Invalid (year, month, day): %r\" % ((year, month, day),))\n    if xldays < 61 and datemode == 0:\n        raise XLDateAmbiguous(\"Before 1900-03-01: %r\" % ((year, month, day),))\n    return float(xldays)\n\nxldate_from_date_tuple(date_tuple=(1907, 7, 3), datemode=0)", "Selected Statement": "Yp = year + 4716", "Function Input": {"date_tuple": "(1907, 7, 3)", "datemode": "0"}, "Variable Values Before Statement": {"year": "1907"}, "Value After Statement Execution": "6623", "Variable States During Runtime": {"date_tuple": [[1, "(1907, 7, 3)"]], "datemode": [[1, "0"]], "year": [[3.0, "1907"]], "month": [[3.0, "7"]], "day": [[3.0, "3"]], "Yp": [[19.0, "6623"]], "M": [[20.0, "7"]], "Mp": [[25.0, "4"]], "jdn": [[26.0, "2417760"]], "xldays": [[28.0, "2741"]]}, "Program Information": "Project Name: djerbic+xlrd-ignore-writeaccess-corruption", "idx": 410, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _add_notice_to_docstring(doc, no_doc_str, notice):\n    \"\"\"Adds a deprecation notice to a docstring.\"\"\"\n    if not doc:\n        lines = [no_doc_str]\n\n    else:\n        lines = _normalize_docstring(doc).splitlines()\n\n    notice = [''] + notice\n\n    if len(lines) > 1:\n        # Make sure that we keep our distance from the main body\n        if lines[1].strip():\n            notice.append('')\n\n        lines[1:1] = notice\n    else:\n        lines += notice\n\n    return '\\n'.join(lines)\n\n_add_notice_to_docstring(doc=None, no_doc_str='DEPRECATED FUNCTION', notice=['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        '])", "Selected Statement": "notice = [''] + notice", "Function Input": {"doc": "None", "no_doc_str": "'DEPRECATED FUNCTION'", "notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Variable Values Before Statement": {"notice": "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"}, "Value After Statement Execution": "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']", "Variable States During Runtime": {"doc": [[1, "None"]], "no_doc_str": [[1, "'DEPRECATED FUNCTION'"]], "notice": [[1, "['\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"], [9.0, "['', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]], "lines": [[4.0, "['DEPRECATED FUNCTION']"], [18.0, "['DEPRECATED FUNCTION', '', '\\n            .. warning::\\n                **THIS FUNCTION IS DEPRECATED:** It will be removed after after 2018-09-30.\\n                *Instructions for updating:* This API is deprecated. Please use as `tl.logging.warning`.\\n        ']"]]}, "Program Information": "Project Name: tensorlayer+TensorLayer", "idx": 411, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def calculate_r_wheels(tyre_dimensions):\n    \"\"\"\n    Calculates the radius of the wheels [m] from the tyre dimensions.\n\n    :param tyre_dimensions:\n        Tyre dimensions.\n\n        .. note:: The fields are : use, nominal_section_width, aspect_ratio,\n           carcass, diameter, load_index, speed_rating, and additional_marks.\n    :type tyre_dimensions: dict\n\n    :return:\n        Radius of the wheels [m].\n    :rtype: float\n    \"\"\"\n    if 'diameter' in tyre_dimensions:\n        if tyre_dimensions['code'] == 'pax':\n            return tyre_dimensions['diameter'] / 2000  # Diameter is in mm.\n        return tyre_dimensions['diameter'] * 0.0254  # Diameter is in inches.\n    a = tyre_dimensions['aspect_ratio'] / 100  # Aspect ratio is Height/Width.\n    w = tyre_dimensions['nominal_section_width']\n    if tyre_dimensions.get('code', 'iso') == 'iso':\n        w /= 1000  # Width is in mm.\n    else:\n        w *= 0.0254  # Width is in inches.\n\n    dr = tyre_dimensions['rim_diameter'] * 0.0254  # Rim is in inches.\n    return a * w + dr / 2\n\ncalculate_r_wheels(tyre_dimensions={'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0})", "Selected Statement": "a = tyre_dimensions['aspect_ratio'] / 100  # Aspect ratio is Height/Width.", "Function Input": {"tyre_dimensions": "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "0.75", "Variable States During Runtime": {"tyre_dimensions": [[1, "{'code': 'iso', 'carcass': 'R', 'nominal_section_width': 265.0, 'use': 'LT', 'load_range': 'D', 'rim_diameter': 15.0, 'aspect_ratio': 75.0}"]], "a": [[20.0, "0.75"]], "w": [[21.0, "265.0"], [23.0, "0.265"]], "dr": [[27.0, "0.381"]]}, "Program Information": "Project Name: JRCSTU+co2mpas-ta", "idx": 412, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def create_dummy_class(klass, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a class is not available, create a dummy class which throws ImportError\n    when used.\n\n    Args:\n        klass (str): name of the class.\n        dependency (str): name of the dependency.\n        message: extra message to print\n    Returns:\n        class: a class object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, klass)\n    if message:\n        err = err + \" \" + message\n\n    class _DummyMetaClass(type):\n        # throw error on class attribute access\n        def __getattr__(_, __):  # noqa: B902\n            raise ImportError(err)\n\n    class _Dummy(object, metaclass=_DummyMetaClass):\n        # throw error on constructor\n        def __init__(self, *args, **kwargs):\n            raise ImportError(err)\n\n    return _Dummy\n\ncreate_dummy_class(klass='DeformConv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"klass": "'DeformConv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"klass": [[1, "'DeformConv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'DeformConv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_DummyMetaClass": [[17.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._DummyMetaClass'>"]], "_Dummy": [[22.0, "<class 'detectron2.utils.develop.create_dummy_class.<locals>._Dummy'>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 413, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def create_dummy_func(func, dependency, message=\"\"):\n    \"\"\"\n    When a dependency of a function is not available, create a dummy function which throws\n    ImportError when used.\n\n    Args:\n        func (str): name of the function.\n        dependency (str or list[str]): name(s) of the dependency.\n        message: extra message to print\n    Returns:\n        function: a function object\n    \"\"\"\n    err = \"Cannot import '{}', therefore '{}' is not available.\".format(dependency, func)\n    if message:\n        err = err + \" \" + message\n\n    if isinstance(dependency, (list, tuple)):\n        dependency = \",\".join(dependency)\n\n    def _dummy(*args, **kwargs):\n        raise ImportError(err)\n\n    return _dummy\n\ncreate_dummy_func(func='deform_conv', dependency='detectron2._C', message='detectron2 is not compiled successfully, please build following the instructions!')", "Selected Statement": "err = err + \" \" + message", "Function Input": {"func": "'deform_conv'", "dependency": "'detectron2._C'", "message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Variable Values Before Statement": {"message": "'detectron2 is not compiled successfully, please build following the instructions!'"}, "Value After Statement Execution": "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\"", "Variable States During Runtime": {"func": [[1, "'deform_conv'"]], "dependency": [[1, "'detectron2._C'"]], "message": [[1, "'detectron2 is not compiled successfully, please build following the instructions!'"]], "err": [[13.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available.\""], [15.0, "\"Cannot import 'detectron2._C', therefore 'deform_conv' is not available. detectron2 is not compiled successfully, please build following the instructions!\""]], "_dummy": [[20.0, "<function create_dummy_func.<locals>._dummy at 0x7f3337cdfd30>"]]}, "Program Information": "Project Name: facebookresearch+detectron2", "idx": 414, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def format_pair(prefix, arg, value):\n    if arg is _arg_source_missing:\n        arg_lines = []\n        value_prefix = prefix\n    else:\n        arg_lines = indented_lines(prefix, arg)\n        value_prefix = arg_lines[-1] + ': '\n\n    looksLikeAString = value[0] + value[-1] in [\"''\", '\"\"']\n    if looksLikeAString:  # Align the start of multiline strings.\n        value = prefixLinesAfterFirst(' ', value)\n\n    value_lines = indented_lines(value_prefix, value)\n    lines = arg_lines[:-1] + value_lines\n    return '\\n'.join(lines)\n\nformat_pair(prefix='    ', arg='multilineStr', value=\"'line1\\nline2'\")", "Selected Statement": "value_prefix = arg_lines[-1] + ': '", "Function Input": {"prefix": "'    '", "arg": "'multilineStr'", "value": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'    multilineStr: '", "Variable States During Runtime": {"prefix": [[1, "'    '"]], "arg": [[1, "'multilineStr'"]], "value": [[1, "\"'line1\\nline2'\""], [11.0, "\"'line1\\n line2'\""]], "arg_lines": [[6.0, "['    multilineStr']"]], "value_prefix": [[7.0, "'    multilineStr: '"]], "looksLikeAString": [[9.0, "True"]], "value_lines": [[13.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]], "lines": [[14.0, "[\"    multilineStr: 'line1\", \"                   line2'\"]"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 415, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def prefixLinesAfterFirst(prefix, s):\n    lines = s.splitlines(True)\n\n    for i in range(1, len(lines)):\n        lines[i] = prefix + lines[i]\n\n    return ''.join(lines)\n\nprefixLinesAfterFirst(prefix=' ', s=\"'line1\\nline2'\")", "Selected Statement": "lines[i] = prefix + lines[i]", "Function Input": {"prefix": "' '", "s": "\"'line1\\nline2'\""}, "Variable Values Before Statement": {"prefix": "' '"}, "Value After Statement Execution": "[\"'line1\\n\", \" line2'\"]", "Variable States During Runtime": {"prefix": [[1, "' '"]], "s": [[1, "\"'line1\\nline2'\""]], "lines": [[2.0, "[\"'line1\\n\", \"line2'\"]"], [5.0, "[\"'line1\\n\", \" line2'\"]"]], "i": [[4.0, "1"]]}, "Program Information": "Project Name: gruns+icecream", "idx": 416, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _sort(a, aux, lo, hi):\n        if lo >= hi:\n            return\n\n        if hi - lo + 1 < MergeSort.CUTOFF:\n            InsertionSort.sort(a, lo, hi)\n            return\n\n        mid = lo + (hi - lo) // 2\n        MergeSort._sort(a, aux, lo, mid)\n        MergeSort._sort(a, aux, mid + 1, hi)\n        MergeSort._merge(a, aux, lo, mid, hi)\n\n_sort(a=[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, hi=7)", "Selected Statement": "mid = lo + (hi - lo) // 2", "Function Input": {"a": "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "hi": "7"}, "Variable Values Before Statement": {"lo": "0"}, "Value After Statement Execution": "3", "Variable States During Runtime": {"a": [[1, "[4, 2, 1, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [10.0, "[1, 2, 4, 23, 4, 5, 6, 7, 8, 9, 20, 11, 13, 34, 66]"], [11.0, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [12.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "hi": [[1, "7"]], "mid": [[9.0, "3"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 417, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _merge(a, aux, lo, mid, hi):\n        i = lo\n        j = mid + 1\n\n        for k in range(lo, hi + 1):\n            aux[k] = a[k]\n\n        for k in range(lo, hi + 1):\n            if i > mid:\n                a[k] = aux[j]\n                j += 1\n            elif j > hi:\n                a[k] = aux[i]\n                i += 1\n            elif util.less(aux[i], aux[j]):\n                a[k] = aux[i]\n                i += 1\n            else:\n                a[k] = aux[j]\n                j += 1\n\n_merge(a=[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66], aux=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], lo=0, mid=3, hi=7)", "Selected Statement": "j = mid + 1", "Function Input": {"a": "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]", "aux": "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "lo": "0", "mid": "3", "hi": "7"}, "Variable Values Before Statement": {"mid": "3"}, "Value After Statement Execution": "4", "Variable States During Runtime": {"a": [[1, "[1, 2, 4, 4, 5, 6, 7, 23, 8, 9, 20, 11, 13, 34, 66]"]], "aux": [[1, "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]"], [6.0, "[1, 2, 4, 4, 5, 6, 7, 23, 0, 0, 0, 0, 0, 0, 0]"]], "lo": [[1, "0"]], "mid": [[1, "3"]], "hi": [[1, "7"]], "i": [[2.0, "0"], [17.0, "1"], [17.0, "2"], [17.0, "3"], [17.0, "4"]], "j": [[3.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"], [11.0, "8"]], "k": [[5.0, "0"], [5.0, "1"], [5.0, "2"], [5.0, "3"], [5.0, "4"], [5.0, "5"], [5.0, "6"], [5.0, "7"], [8.0, "0"], [8.0, "1"], [8.0, "2"], [8.0, "3"], [8.0, "4"], [8.0, "5"], [8.0, "6"], [8.0, "7"]]}, "Program Information": "Project Name: chen0040+pyalgs", "idx": 418, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def version_compare(self, other):\n        \"Compares version of the form [epoch:]upstream-version[-debian-revision]\" \\\n        + \" according to Debian package version number format.\"\n\n        # compare epoch\n        diff = self.epoch - other.epoch\n        if diff != 0:\n            return diff\n\n        # compare upstream version and debian revision\n        for slf, othr in (self.upstream_version, other.upstream_version), (self.revision, other.revision):\n            i = 0\n            while len(slf) > 0 or len(othr) > 0:\n                decimal = (i % 2 == 1) \n                slf_part, slf = self._get_part(slf, decimal=decimal)\n                othr_part, othr = self._get_part(othr, decimal=decimal)\n                diff = self._compare_parts(slf_part, othr_part, decimal=decimal)\n                if diff != 0:\n                    return diff\n                i += 1\n\n        # versions are equal\n        return 0\n\nversion_compare(self=2.2.0~rc5, other=2.2.0~rc5, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "diff = self.epoch - other.epoch", "Function Input": {"self": "2.2.0~rc5", "other": "2.2.0~rc5", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "other": [[1, "2.2.0~rc5"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "diff": [[6.0, "0"]], "slf": [[11.0, "'2.2.0~rc5'"], [15.0, "'.2.0~rc5'"], [15.0, "'2.0~rc5'"], [15.0, "'.0~rc5'"], [15.0, "'0~rc5'"], [15.0, "'~rc5'"], [15.0, "'5'"], [15.0, "''"], [11.0, "'0'"], [15.0, "''"]], "othr": [[11.0, "'2.2.0~rc5'"], [16.0, "'.2.0~rc5'"], [16.0, "'2.0~rc5'"], [16.0, "'.0~rc5'"], [16.0, "'0~rc5'"], [16.0, "'~rc5'"], [16.0, "'5'"], [16.0, "''"], [11.0, "'0'"], [16.0, "''"]], "i": [[12.0, "0"], [20.0, "1"], [20.0, "2"], [20.0, "3"], [20.0, "4"], [20.0, "5"], [20.0, "6"], [20.0, "7"], [20.0, "8"], [12.0, "0"], [20.0, "1"], [20.0, "2"]], "decimal": [[14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"], [14.0, "False"], [14.0, "True"]], "slf_part": [[15.0, "''"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'2'"], [15.0, "'.'"], [15.0, "'0'"], [15.0, "'~rc'"], [15.0, "'5'"], [15.0, "''"], [15.0, "'0'"]], "othr_part": [[16.0, "''"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'2'"], [16.0, "'.'"], [16.0, "'0'"], [16.0, "'~rc'"], [16.0, "'5'"], [16.0, "''"], [16.0, "'0'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 419, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "coeff_name = \" \" * 12", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'            '", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 420, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def SetHeaderFromData(setName: str, setElements:'Union[List[str], np.array]',  long_name: str=None):\n        if not isinstance(setName,str):\n            raise TypeError(\"setName must be of type str\")\n        if len(setName.strip()) > 12 :\n            raise ValueError(\"setName is restricted to 12 Characters\")\n        if long_name is None: long_name=\"\"\n        if isinstance(long_name, str):\n            long_name=\"Set \"+setName.strip()+\" \"+long_name.strip()\n        else:\n            raise TypeError(\"LongName must be string\")\n\n        if isinstance(setElements,(list,np.ndarray)):\n            if not all([isinstance(el,str) for el in setElements]):\n                raise TypeError(\"All Set Elements must be of type str\")\n            if not all([len(el)<=12 for el in setElements]):\n                raise ValueError(\"Set Elelement strings must be 12 characters at most\")\n\n        if isinstance(setElements,list):\n            array=np.array(setElements)\n            setElDict={setName:setElements}\n        elif isinstance(setElements,np.ndarray):\n            array=setElements\n            setElDict = {setName: setElements.tolist()}\n        else:\n            raise TypeError(\"SetElemenets must be list of str or np array of strings\")\n\n\n        return HeaderArrayObj.HeaderArrayFromData(array=array, long_name=long_name, sets=[setName], setElDict=setElDict)\n\nSetHeaderFromData(setName='sect', setElements=array(['s1          ', 's2          '], dtype='<U12'), long_name=' Sectors                                                                        ')", "Selected Statement": "long_name=\"Set \"+setName.strip()+\" \"+long_name.strip()", "Function Input": {"setName": "'sect'", "setElements": "array(['s1          ', 's2          '], dtype='<U12')", "long_name": "' Sectors                                                                        '"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'Set sect Sectors'", "Variable States During Runtime": {"setName": [[1, "'sect'"]], "setElements": [[1, "array(['s1          ', 's2          '], dtype='<U12')"]], "long_name": [[1, "' Sectors                                                                        '"], [8.0, "'Set sect Sectors'"]], "array": [[22.0, "array(['s1          ', 's2          '], dtype='<U12')"]], "setElDict": [[23.0, "{'sect': ['s1          ', 's2          ']}"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 421, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def set_bbox(self, bbox: Rect) -> None:\n        (x0, y0, x1, y1) = bbox\n        self.x0 = x0\n        self.y0 = y0\n        self.x1 = x1\n        self.y1 = y1\n        self.width = x1 - x0\n        self.height = y1 - y0\n        self.bbox = bbox\n\nset_bbox(self=REPR FAILED, bbox=[0, 100, 0, 100])", "Selected Statement": "self.width = x1 - x0", "Function Input": {"self": "REPR FAILED", "bbox": "[0, 100, 0, 100]"}, "Variable Values Before Statement": {"x1": "0", "x0": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "REPR FAILED"], [9.0, "<LTContainer 0.000,100.000,0.000,100.000>"]], "bbox": [[1, "[0, 100, 0, 100]"]], "x0": [[2.0, "0"]], "y0": [[2.0, "100"]], "x1": [[2.0, "0"]], "y1": [[2.0, "100"]], "self.x0": [[3.0, "0"]], "self.y0": [[4.0, "100"]], "self.x1": [[5.0, "0"]], "self.y1": [[6.0, "100"]], "self.width": [[7.0, "0"]], "self.height": [[8.0, "0"]], "self.bbox": [[9.0, "[0, 100, 0, 100]"]]}, "Program Information": "Project Name: pdfminer+pdfminer.six", "idx": 422, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def calibrated_fps(calibrate):\n    \"\"\"Calibration of the dynamic frames per second engine.\n\n    I've started with the equation y = log10(x + m) * k + n, where:\n      y is the desired fps, m and n are horizontal and vertical translation,\n      k is a calibration factor, computed from some user input c (see readme for details).\n\n    Considering minfps and maxfps as given constants, I came to:\n      fps = log10(x + 1) * k + minfps, which must be equal to maxfps for x = c,\n    so the factor k = (maxfps - minfps) / log10(c + 1), and\n      fps = log10(x + 1) * (maxfps - minfps) / log10(c + 1) + minfps\n\n    Neat! ;)\n\n    Args:\n        calibrate (float): user provided\n\n    Returns:\n        a callable to calculate the fps\n\n    \"\"\"\n    min_fps, max_fps = 2., 60.\n    calibrate = max(1e-6, calibrate)\n    adjust_log_curve = 100. / min(calibrate, 100.)  # adjust the curve for small numbers\n    factor = (max_fps - min_fps) / math.log10((calibrate * adjust_log_curve) + 1.)\n\n    def fps(rate):\n        if rate <= 0:\n            return 10.  # bootstrap speed\n        if rate < calibrate:\n            return math.log10((rate * adjust_log_curve) + 1.) * factor + min_fps\n        return max_fps\n\n    return fps\n\ncalibrated_fps(calibrate=-5.0)", "Selected Statement": "adjust_log_curve = 100. / min(calibrate, 100.)  # adjust the curve for small numbers", "Function Input": {"calibrate": "-5.0"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "100000000.0", "Variable States During Runtime": {"calibrate": [[1, "-5.0"], [23.0, "1e-06"]], "max_fps": [[22.0, "60.0"]], "min_fps": [[22.0, "2.0"]], "adjust_log_curve": [[24.0, "100000000.0"]], "factor": [[25.0, "28.93747517671773"]], "fps": [[27.0, "<function calibrated_fps.<locals>.fps at 0x7f355669f1f0>"]]}, "Program Information": "Project Name: rsalmei+alive-progress", "idx": 423, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def getblockimpl(lines, first, last, pilcrow):\n    max = len(lines) - 1\n    first -= 1\n    last -= 1\n    i = first\n    while i < max and not hastext(lines[i]):\n        if i >= last and istoplevel(lines[i + 1]):\n            return None, None, '# Nothing to send.' + pilcrow + eol\n        i += 1\n    while last < max and not istoplevel(lines[last + 1]):\n        last += 1\n    while first < last and not hastext(lines[first]):\n        first += 1\n    while first and not istoplevel(lines[first]):\n        first -= 1\n    lines[last] # Check for out of range.\n    return first, last, eol.join(l for l in lines[first:last + 1] if hastext(l)) + pilcrow + eol\n\ngetblockimpl(lines=['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last'], first=10, last=11, pilcrow='')", "Selected Statement": "max = len(lines) - 1", "Function Input": {"lines": "['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last']", "first": "10", "last": "11", "pilcrow": "''"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "14", "Variable States During Runtime": {"lines": [[1, "['', 'hello', 'function with', ' indented block', 'class with', '', '  block after blank', '  \\tand its own indented block', '\\t', '  and back again after a wrong blank', '', 'something else', '\\t', ' \\t', 'last']"]], "first": [[1, "10"], [3.0, "9"], [15.0, "8"], [15.0, "7"], [15.0, "6"], [15.0, "5"], [15.0, "4"]], "last": [[1, "11"], [4.0, "10"]], "pilcrow": [[1, "''"]], "max": [[2.0, "14"]], "i": [[5.0, "9"]]}, "Program Information": "Project Name: combatopera+Concern", "idx": 424, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _from_timetuple(self, t):\n        self.days_from_epoch = calendar.timegm(t) // Date.DAY\n\n_from_timetuple(self=Date(0), t=time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1))", "Selected Statement": "self.days_from_epoch = calendar.timegm(t) // Date.DAY", "Function Input": {"self": "Date(0)", "t": "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "19816", "Variable States During Runtime": {"self": [[1, "Date(0)"], [2.0, "Date(19816)"]], "t": [[1, "time.struct_time(tm_year=2024, tm_mon=4, tm_mday=3, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=2, tm_yday=94, tm_isdst=-1)"]], "self.days_from_epoch": [[2.0, "19816"]]}, "Program Information": "Project Name: ArunTejCh+python-driver", "idx": 425, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _insert(self, key, value):\n        flat_key = self._serialize_key(key)\n        i = self._index.get(flat_key, -1)\n        if i >= 0:\n            self._items[i] = (key, value)\n        else:\n            self._items.append((key, value))\n            self._index[flat_key] = len(self._items) - 1\n\n_insert(self=OrderedMapSerializedKey([]), key='みbob', value=199)", "Selected Statement": "self._index[flat_key] = len(self._items) - 1", "Function Input": {"self": "OrderedMapSerializedKey([])", "key": "'みbob'", "value": "199"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "199", "Variable States During Runtime": {"self": [[1, "OrderedMapSerializedKey([])"], [7.0, "OrderedMapSerializedKey([('みbob', 199)])"]], "key": [[1, "'みbob'"]], "value": [[1, "199"]], "flat_key": [[2.0, "b'\\xe3\\x81\\xbfbob'"]], "i": [[3.0, "-1"]], "self['みbob']": [[8.0, "199"]]}, "Program Information": "Project Name: ArunTejCh+python-driver", "idx": 426, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def stringified_dict_contains_value(key, value, str_dict):\n    \"\"\"Checks if dict in for of string like \"{'test': 5}\" contains\n    key/value pair. This works faster, then creating actual dict\n    from string since this operation is called for each task in case\n    of kwargs search.\"\"\"\n    if not str_dict:\n        return False\n    value = str(value)\n    try:\n        # + 3 for key right quote, one for colon and one for space\n        key_index = str_dict.index(key) + len(key) + 3\n    except ValueError:\n        return False\n    try:\n        comma_index = str_dict.index(',', key_index)\n    except ValueError:\n        # last value in dict\n        comma_index = str_dict.index('}', key_index)\n    return str(value) == str_dict[key_index:comma_index].strip('\"\\'')\n\nstringified_dict_contains_value(key='test', value=5, str_dict=\"{'test': 5}\")", "Selected Statement": "key_index = str_dict.index(key) + len(key) + 3", "Function Input": {"key": "'test'", "value": "5", "str_dict": "\"{'test': 5}\""}, "Variable Values Before Statement": {}, "Value After Statement Execution": "9", "Variable States During Runtime": {"key": [[1, "'test'"]], "value": [[1, "5"], [8.0, "'5'"]], "str_dict": [[1, "\"{'test': 5}\""]], "key_index": [[11.0, "9"]], "comma_index": [[18.0, "10"]]}, "Program Information": "Project Name: mher+flower", "idx": 427, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def merge_args_into_config(args, config_params):\n  final_args = copy.deepcopy(config_params)\n  config_keys = config_params.keys()\n  for key, value in args.items():\n    if key in config_keys:\n      if any([isinstance(value, t) for t in [str, bool, float, int]]):\n        # Overwrites config value with args value.\n        final_args[key] = value\n      elif isinstance(value, list):\n        # Appends args values to config values.\n        final_args[key] = value + config_params[key]\n      elif isinstance(value, dict):\n        # Updates config params with args params.\n        final_args[key].update(**value)\n    else:\n      final_args[key] = value\n  return final_args\n\nmerge_args_into_config(args={'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}, config_params={'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'})", "Selected Statement": "final_args[key] = value + config_params[key]", "Function Input": {"args": "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}", "config_params": "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"}, "Variable Values Before Statement": {"value": "'foo/bar/tikz'"}, "Value After Statement Execution": "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}", "Variable States During Runtime": {"args": [[1, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path1/': 1000}, 'commands_to_delete': ['\\\\todo1'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_params": [[1, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"]], "final_args": [[2.0, "{'input_folder': 'foo_/bar_', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': True, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 1000, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': True, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 1000, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [14.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [11.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo_/bar_/tikz_'}"], [8.0, "{'input_folder': 'foo/bar', 'resize_images': False, 'im_size': 500, 'compress_pdf': False, 'pdf_im_resolution': 500, 'images_allowlist': {'path2/': 1000, 'path1/': 1000}, 'commands_to_delete': ['\\\\todo1', '\\\\todo2'], 'use_external_tikz': 'foo/bar/tikz'}"]], "config_keys": [[3.0, "dict_keys(['input_folder', 'resize_images', 'im_size', 'compress_pdf', 'pdf_im_resolution', 'images_allowlist', 'commands_to_delete', 'use_external_tikz'])"]], "key": [[4.0, "'input_folder'"], [4.0, "'resize_images'"], [4.0, "'im_size'"], [4.0, "'compress_pdf'"], [4.0, "'pdf_im_resolution'"], [4.0, "'images_allowlist'"], [4.0, "'commands_to_delete'"], [4.0, "'use_external_tikz'"]], "value": [[4.0, "'foo/bar'"], [4.0, "False"], [4.0, "500"], [4.0, "False"], [4.0, "500"], [4.0, "{'path1/': 1000}"], [4.0, "['\\\\todo1']"], [4.0, "'foo/bar/tikz'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 428, "quantized value": "Non-Empty dictionary", "mapping_info": {"len(value) == 0": "Empty dictionary", "len(value) > 0": "Non-Empty dictionary"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _remove_command(text, command, keep_text=False):\n  \"\"\"Removes '\\\\command{*}' from the string 'text'.\n\n  Regex `base_pattern` used to match balanced parentheses taken from:\n  https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses/35271017#35271017\n  \"\"\"\n  base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'\n  # Loops in case of nested commands that need to retain text, e.g.,\n  # \\red{hello \\red{world}}.\n  while True:\n    all_substitutions = []\n    has_match = False\n    for match in regex.finditer(base_pattern, text):\n      # In case there are only spaces or nothing up to the following newline,\n      # adds a percent, not to alter the newlines.\n      has_match = True\n      new_substring = (\n          ''\n          if not keep_text\n          else text[match.span()[0] + len(command) + 2 : match.span()[1] - 1]\n      )\n      if match.span()[1] < len(text):\n        next_newline = text[match.span()[1] :].find('\\n')\n        if next_newline != -1:\n          text_until_newline = text[\n              match.span()[1] : match.span()[1] + next_newline\n          ]\n          if (\n              not text_until_newline or text_until_newline.isspace()\n          ) and not keep_text:\n            new_substring = '%'\n      all_substitutions.append(\n          (match.span()[0], match.span()[1], new_substring)\n      )\n\n    for start, end, new_substring in reversed(all_substitutions):\n      text = text[:start] + new_substring + text[end:]\n\n    if not keep_text or not has_match:\n      break\n\n  return text\n\n_remove_command(text='A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}', command='todo', keep_text=False)", "Selected Statement": "base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'", "Function Input": {"text": "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'", "command": "'todo'", "keep_text": "False"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'", "Variable States During Runtime": {"text": [[1, "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'"], [37.0, "'AD\\nE\\n\\\\end{document}'"]], "command": [[1, "'todo'"]], "keep_text": [[1, "False"]], "base_pattern": [[7.0, "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'"]], "all_substitutions": [[11.0, "[]"], [32.0, "[(1, 11, '')]"]], "has_match": [[12.0, "False"], [16.0, "True"]], "match": [[13.0, "<regex.Match object; span=(1, 11), match='\\\\todo{B\\nC}'>"]], "new_substring": [[17.0, "''"]], "next_newline": [[23.0, "1"]], "text_until_newline": [[25.0, "'D'"]], "start": [[36.0, "1"]], "end": [[36.0, "11"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 429, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "filename_regex = path_prefix_regex + basename_regex", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"path_prefix_regex": "'((/)?to/)?'", "basename_regex": "'img(\\\\.ext)?'"}, "Value After Statement Execution": "'((/)?to/)?img(\\\\.ext)?'", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 430, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def apply_changes(file_path: str, changes: List, confirm: bool = False):\n    \"\"\"\n    Pass changes as loaded json (list of dicts)\n    \"\"\"\n    with open(file_path) as f:\n        original_file_lines = f.readlines()\n\n    # Filter out explanation elements\n    operation_changes = [change for change in changes if \"operation\" in change]\n    explanations = [\n        change[\"explanation\"] for change in changes if \"explanation\" in change\n    ]\n\n    # Sort the changes in reverse line order\n    operation_changes.sort(key=lambda x: x[\"line\"], reverse=True)\n\n    file_lines = original_file_lines.copy()\n    for change in operation_changes:\n        operation = change[\"operation\"]\n        line = change[\"line\"]\n        content = change[\"content\"]\n\n        if operation == \"Replace\":\n            file_lines[line - 1] = content + \"\\n\"\n        elif operation == \"Delete\":\n            del file_lines[line - 1]\n        elif operation == \"InsertAfter\":\n            file_lines.insert(line, content + \"\\n\")\n\n    # Print explanations\n    cprint(\"Explanations:\", \"blue\")\n    for explanation in explanations:\n        cprint(f\"- {explanation}\", \"blue\")\n\n    # Display changes diff\n    print(\"\\nChanges to be made:\")\n    diff = difflib.unified_diff(original_file_lines, file_lines, lineterm=\"\")\n    for line in diff:\n        if line.startswith(\"+\"):\n            cprint(line, \"green\", end=\"\")\n        elif line.startswith(\"-\"):\n            cprint(line, \"red\", end=\"\")\n        else:\n            print(line, end=\"\")\n\n    if confirm:\n        # check if user wants to apply changes or exit\n        confirmation = input(\"Do you want to apply these changes? (y/n): \")\n        if confirmation.lower() != \"y\":\n            print(\"Changes not applied\")\n            sys.exit(0)\n\n    with open(file_path, \"w\") as f:\n        f.writelines(file_lines)\n    print(\"Changes applied.\")\n\napply_changes(file_path='/tmp/tmp6qrrn_j9', changes=[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}], confirm=False)", "Selected Statement": "file_lines[line - 1] = content + \"\\n\"", "Function Input": {"file_path": "'/tmp/tmp6qrrn_j9'", "changes": "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]", "confirm": "False"}, "Variable Values Before Statement": {"content": "'new second line'"}, "Value After Statement Execution": "['first line\\n', 'new second line\\n', 'third line']", "Variable States During Runtime": {"file_path": [[1, "'/tmp/tmp6qrrn_j9'"]], "changes": [[1, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "confirm": [[1, "False"]], "f": [[5.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='r' encoding='UTF-8'>"], [53.0, "<_io.TextIOWrapper name='/tmp/tmp6qrrn_j9' mode='w' encoding='UTF-8'>"]], "original_file_lines": [[6.0, "['first line\\n', 'second line\\n', 'third line']"]], "operation_changes": [[9.0, "[{'operation': 'Replace', 'line': 2, 'content': 'new second line'}]"]], "explanations": [[10.0, "[]"]], "file_lines": [[17.0, "['first line\\n', 'second line\\n', 'third line']"], [24.0, "['first line\\n', 'new second line\\n', 'third line']"]], "change": [[18.0, "{'operation': 'Replace', 'line': 2, 'content': 'new second line'}"]], "operation": [[19.0, "'Replace'"]], "line": [[20.0, "2"], [38.0, "'--- '"], [38.0, "'+++ '"], [38.0, "'@@ -1,3 +1,3 @@'"], [38.0, "' first line\\n'"], [38.0, "'-second line\\n'"], [38.0, "'+new second line\\n'"], [38.0, "' third line'"]], "content": [[21.0, "'new second line'"]], "diff": [[37.0, "<generator object unified_diff at 0x7f5b71b2cba0>"]]}, "Program Information": "Project Name: biobootloader+wolverine", "idx": 431, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def generate(resource_types=()):\n    resource_defs = {}\n    definitions = {\n        'resources': resource_defs,\n        'string_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\"type\": \"string\"},\n            },\n        },\n        'basic_dict': {\n            \"type\": \"object\",\n            \"patternProperties\": {\n                \"\": {\n                    'oneOf': [\n                        {\"type\": \"string\"},\n                        {\"type\": \"boolean\"},\n                        {\"type\": \"number\"},\n                    ],\n                }\n            },\n        },\n        'iam-statement': {\n            'additionalProperties': False,\n            'type': 'object',\n            'properties': {\n                'Sid': {'type': 'string'},\n                'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']},\n                'Principal': {'anyOf': [\n                    {'type': 'string'},\n                    {'type': 'object'}, {'type': 'array'}]},\n                'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]},\n                'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]},\n                'Condition': {'type': 'object'}\n            },\n            'required': ['Sid', 'Effect'],\n            'oneOf': [\n                {'required': ['Principal', 'Action', 'Resource']},\n                {'required': ['NotPrincipal', 'Action', 'Resource']},\n                {'required': ['Principal', 'NotAction', 'Resource']},\n                {'required': ['NotPrincipal', 'NotAction', 'Resource']},\n                {'required': ['Principal', 'Action', 'NotResource']},\n                {'required': ['NotPrincipal', 'Action', 'NotResource']},\n                {'required': ['Principal', 'NotAction', 'NotResource']},\n                {'required': ['NotPrincipal', 'NotAction', 'NotResource']}\n            ]\n        },\n        'actions': {},\n        'filters': {\n            'value': ValueFilter.schema,\n            'event': EventFilter.schema,\n            'age': AgeFilter.schema,\n            'reduce': ReduceFilter.schema,\n            # Shortcut form of value filter as k=v\n            'valuekv': {\n                'type': 'object',\n                'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'},\n                    {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]},\n                'minProperties': 1,\n                'maxProperties': 1},\n        },\n        'filters_common': {\n            'list_item_attrs': _get_attr_schema(),\n            'comparison_operators': {\n                'enum': list(OPERATORS.keys())},\n            'value_types': {'enum': VALUE_TYPES},\n            'value_from': ValuesFrom.schema,\n            'value': {'oneOf': [\n                {'type': 'array'},\n                {'type': 'string'},\n                {'type': 'boolean'},\n                {'type': 'number'},\n                {'type': 'null'}]},\n        },\n        'policy': {\n            'type': 'object',\n            'required': ['name', 'resource'],\n            'additionalProperties': False,\n            'properties': {\n                'name': {\n                    'type': 'string',\n                    'pattern': \"^[A-z][A-z0-9]*(-[A-z0-9]+)*$\"},\n                'conditions': {\n                    'type': 'array',\n                    'items': {'anyOf': [\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'or': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'not': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'type': 'object', 'additionalProperties': False,\n                         'properties': {'and': {\n                             '$ref': '#/definitions/policy/properties/conditions'}}},\n                        {'$ref': '#/definitions/filters/value'},\n                        {'$ref': '#/definitions/filters/event'},\n                        {'$ref': '#/definitions/filters/valuekv'}]}},\n                # these should be deprecated for conditions\n                'region': {'type': 'string'},\n                'tz': {'type': 'string'},\n                'start': {'format': 'date-time'},\n                'end': {'format': 'date-time'},\n                'resource': {'oneOf': [\n                    {'type': 'string'},\n                    {'type': 'array', 'items': {'type': 'string'}}]},\n                'max-resources': {'anyOf': [\n                    {'type': 'integer', 'minimum': 1},\n                    {'$ref': '#/definitions/max-resources-properties'}\n                ]},\n                'max-resources-percent': {'type': 'number', 'minimum': 0, 'maximum': 100},\n                'comment': {'type': 'string'},\n                'comments': {'type': 'string'},\n                'description': {'type': 'string'},\n                'tags': {'type': 'array', 'items': {'type': 'string'}},\n                'metadata': {'type': 'object'},\n                'mode': {'$ref': '#/definitions/policy-mode'},\n                'source': {'enum': list(sources.keys())},\n                'actions': {\n                    'type': 'array',\n                },\n                'filters': {\n                    'type': 'array'\n                },\n                #\n                # TODO: source queries should really move under\n                # source. This was initially used for describe sources\n                # to expose server side query mechanisms, however its\n                # important to note it also prevents resource cache\n                # utilization between policies that have different\n                # queries.\n                'query': {\n                    'type': 'array', 'items': {'type': 'object'}}\n\n            },\n        },\n        'policy-mode': {\n            'anyOf': [e.schema for _, e in execution.items()],\n        },\n        'max-resources-properties': {\n            'type': 'object',\n            'additionalProperties': False,\n            'properties': {\n                'amount': {\"type\": 'integer', 'minimum': 1},\n                'op': {'enum': ['or', 'and']},\n                'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}\n            }\n        }\n    }\n\n    resource_refs = []\n    for cloud_name, cloud_type in sorted(clouds.items()):\n        for type_name, resource_type in sorted(cloud_type.resources.items()):\n            r_type_name = \"%s.%s\" % (cloud_name, type_name)\n            if resource_types and r_type_name not in resource_types:\n                if not resource_type.type_aliases:\n                    continue\n                elif not {\"%s.%s\" % (cloud_name, ralias) for ralias\n                        in resource_type.type_aliases}.intersection(\n                        resource_types):\n                    continue\n\n            aliases = []\n            if resource_type.type_aliases:\n                aliases.extend([\"%s.%s\" % (cloud_name, a) for a in resource_type.type_aliases])\n                # aws gets legacy aliases with no cloud prefix\n                if cloud_name == 'aws':\n                    aliases.extend(resource_type.type_aliases)\n\n            # aws gets additional alias for default name\n            if cloud_name == 'aws':\n                aliases.append(type_name)\n\n            resource_refs.append(\n                process_resource(\n                    r_type_name,\n                    resource_type,\n                    resource_defs,\n                    aliases,\n                    definitions,\n                    cloud_name\n                ))\n\n    schema = {\n        \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n        'id': 'http://schema.cloudcustodian.io/v0/custodian.json',\n        'definitions': definitions,\n        'type': 'object',\n        'required': ['policies'],\n        'additionalProperties': False,\n        'properties': {\n            'vars': {'type': 'object'},\n            'policies': {\n                'type': 'array',\n                'additionalItems': False,\n                'items': {'anyOf': resource_refs}\n            }\n        }\n    }\n\n    # allow empty policies with lazy load\n    if not resource_refs:\n        schema['properties']['policies']['items'] = {'type': 'object'}\n    return schema\n\ngenerate(resource_types=())", "Selected Statement": "r_type_name = \"%s.%s\" % (cloud_name, type_name)", "Function Input": {"resource_types": "()"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'gcp.region'", "Variable States During Runtime": {"resource_types": [[1, "()"]], "resource_defs": [[2.0, "{}"], [177.0, "{'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}"]], "definitions": [[3.0, "{'resources': {}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {'type': 'string'}, {'type': 'boolean'}]}, 'minProperties': 1, 'maxProperties': 1}}, 'filters_common': {'list_item_attrs': {'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}, {'additional_properties': False, 'properties': {'and': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'or': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value'}, {'$ref': '#/definitions/filters/valuekv'}]}}}, 'type': 'object'}, {'additional_properties': False, 'properties': {'not': {'type': 'array', 'items': {'anyOf': [{'$ref': '#/definitions/filters/value...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"], [177.0, "{'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv': {'type': 'object', 'additionalProperties': {'oneOf': [{'type': 'number'}, {'type': 'null'}, {'type': 'array', 'maxItems': 0}, {...onalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}"]], "resource_refs": [[153.0, "[]"], [176.0, "[{'$ref': '#/definitions/resources/gcp.region/policy'}]"]], "cloud_type": [[154.0, "<class 'c7n.resources.aws.AWS'>"], [154.0, "<class 'c7n_gcp.provider.GoogleCloud'>"]], "cloud_name": [[154.0, "'aws'"], [154.0, "'gcp'"]], "type_name": [[155.0, "'region'"]], "resource_type": [[155.0, "<class 'c7n_gcp.region.Region'>"]], "r_type_name": [[156.0, "'gcp.region'"]], "aliases": [[165.0, "[]"]], "schema": [[186.0, "{'$schema': 'http://json-schema.org/draft-07/schema#', 'id': 'http://schema.cloudcustodian.io/v0/custodian.json', 'definitions': {'resources': {'gcp.region': {'actions': {}, 'filters': {}, 'policy': {'allOf': [{'$ref': '#/definitions/policy'}, {'properties': {'resource': {'enum': ['gcp.region']}, 'filters': {'type': 'array', 'items': {'anyOf': [{'enum': []}, {'type': 'object', 'additionalProperties': False, 'properties': {'or': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'and': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}, {'type': 'object', 'additionalProperties': False, 'properties': {'not': {'$ref': '#/definitions/resources/gcp.region/policy/allOf/1/properties/filters'}}}]}}, 'actions': {'type': 'array', 'items': {'anyOf': [{'enum': []}]}}}}]}}}, 'string_dict': {'type': 'object', 'patternProperties': {'': {'type': 'string'}}}, 'basic_dict': {'type': 'object', 'patternProperties': {'': {'oneOf': [{'type': 'string'}, {'type': 'boolean'}, {'type': 'number'}]}}}, 'iam-statement': {'additionalProperties': False, 'type': 'object', 'properties': {'Sid': {'type': 'string'}, 'Effect': {'type': 'string', 'enum': ['Allow', 'Deny']}, 'Principal': {'anyOf': [{'type': 'string'}, {'type': 'object'}, {'type': 'array'}]}, 'NotPrincipal': {'anyOf': [{'type': 'object'}, {'type': 'array'}]}, 'Action': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotAction': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Resource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'NotResource': {'anyOf': [{'type': 'string'}, {'type': 'array'}]}, 'Condition': {'type': 'object'}}, 'required': ['Sid', 'Effect'], 'oneOf': [{'required': ['Principal', 'Action', 'Resource']}, {'required': ['NotPrincipal', 'Action', 'Resource']}, {'required': ['Principal', 'NotAction', 'Resource']}, {'required': ['NotPrincipal', 'NotAction', 'Resource']}, {'required': ['Principal', 'Action', 'NotResource']}, {'required': ['NotPrincipal', 'Action', 'NotResource']}, {'required': ['Principal', 'NotAction', 'NotResource']}, {'required': ['NotPrincipal', 'NotAction', 'NotResource']}]}, 'actions': {}, 'filters': {'value': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['value']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'event': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['event']}, 'key': {'type': 'string'}, 'value_type': {'$ref': '#/definitions/filters_common/value_types'}, 'default': {'type': 'object'}, 'value_regex': {'type': 'string'}, 'value_from': {'$ref': '#/definitions/filters_common/value_from'}, 'value': {'$ref': '#/definitions/filters_common/value'}, 'op': {'$ref': '#/definitions/filters_common/comparison_operators'}, 'value_path': {'type': 'string'}}}, 'age': None, 'reduce': {'type': 'object', 'additionalProperties': False, 'required': ['type'], 'properties': {'type': {'enum': ['reduce']}, 'group-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'sort-by': {'oneOf': [{'type': 'string'}, {'type': 'object', 'key': {'type': 'string'}, 'value_type': {'enum': ['string', 'number', 'date']}, 'value_regex': 'string'}]}, 'order': {'enum': ['asc', 'desc', 'reverse', 'randomize']}, 'null-order': {'enum': ['first', 'last']}, 'limit': {'type': 'number', 'minimum': 0}, 'limit-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}, 'discard': {'type': 'number', 'minimum': 0}, 'discard-percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}, 'valuekv'...ype': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['asg-instance-state']}, 'events': {'type': 'array', 'items': {'enum': ['launch-success', 'launch-failure', 'terminate-success', 'terminate-failure']}}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['guard-duty']}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-poll-rule']}, 'schedule': {'enum': ['One_Hour', 'Three_Hours', 'Six_Hours', 'Twelve_Hours', 'TwentyFour_Hours']}, 'ignore-support-check': {'type': 'boolean'}}, 'required': ['type']}, {'type': 'object', 'additionalProperties': False, 'properties': {'execution-options': {'type': 'object'}, 'function-prefix': {'type': 'string'}, 'member-role': {'type': 'string'}, 'packages': {'type': 'array', 'items': {'type': 'string'}}, 'layers': {'type': 'array', 'items': {'type': 'string'}}, 'concurrency': {'type': 'integer'}, 'runtime': {'enum': ['python3.8', 'python3.9', 'python3.10', 'python3.11', 'python3.12']}, 'role': {'type': 'string'}, 'handler': {'type': 'string'}, 'pattern': {'type': 'object', 'minProperties': 1}, 'timeout': {'type': 'number'}, 'memory': {'type': 'number'}, 'environment': {'type': 'object'}, 'tags': {'type': 'object'}, 'dead_letter_config': {'type': 'object'}, 'kms_key_arn': {'type': 'string'}, 'tracing_config': {'type': 'object'}, 'security_groups': {'type': 'array'}, 'subnets': {'type': 'array'}, 'type': {'enum': ['config-rule']}}, 'required': ['type']}]}, 'max-resources-properties': {'type': 'object', 'additionalProperties': False, 'properties': {'amount': {'type': 'integer', 'minimum': 1}, 'op': {'enum': ['or', 'and']}, 'percent': {'type': 'number', 'minimum': 0, 'maximum': 100}}}}, 'type': 'object', 'required': ['policies'], 'additionalProperties': False, 'properties': {'vars': {'type': 'object'}, 'policies': {'type': 'array', 'additionalItems': False, 'items': {'anyOf': [{'$ref': '#/definitions/resources/gcp.region/policy'}]}}}}"]]}, "Program Information": "Project Name: cloud-custodian+cloud-custodian", "idx": 432, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "bots = [None]*4", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[None, None, None, None]", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 433, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def initial_positions(walls):\n    \"\"\"Calculate initial positions.\n\n    Given the list of walls, returns the free positions that are closest to the\n    bottom left and top right corner. The algorithm starts searching from\n    (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n    for judging what is closest. On equal distances, a smaller distance in the\n    x value is preferred.\n    \"\"\"\n    width = max(walls)[0] + 1\n    height = max(walls)[1] + 1\n\n    left_start = (1, height - 2)\n    left = []\n    right_start = (width - 2, 1)\n    right = []\n\n    dist = 0\n    while len(left) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (left_start[0] + x_dist, left_start[1] - y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                left.append(pos)\n\n            if len(left) == 2:\n                break\n\n        dist += 1\n\n    dist = 0\n    while len(right) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (right_start[0] - x_dist, right_start[1] + y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                right.append(pos)\n\n            if len(right) == 2:\n                break\n\n        dist += 1\n\n    # lower indices start further away\n    left.reverse()\n    right.reverse()\n    return [left[0], right[0], left[1], right[1]]\n\ninitial_positions(walls=[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "Selected Statement": "width = max(walls)[0] + 1", "Function Input": {"walls": "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "8", "Variable States During Runtime": {"walls": [[1, "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"]], "width": [[10.0, "8"]], "height": [[11.0, "4"]], "left_start": [[13.0, "(1, 2)"]], "left": [[14.0, "[]"], [32.0, "[(1, 2)]"], [32.0, "[(1, 2), (1, 1)]"], [61.0, "[(1, 1), (1, 2)]"]], "right_start": [[15.0, "(6, 1)"]], "right": [[16.0, "[]"], [53.0, "[(6, 1)]"], [53.0, "[(6, 1), (6, 2)]"], [62.0, "[(6, 2), (6, 1)]"]], "dist": [[18.0, "0"], [37.0, "1"], [37.0, "2"], [39.0, "0"], [58.0, "1"], [58.0, "2"]], "x_dist": [[21.0, "0"]], "y_dist": [[22.0, "0"], [22.0, "1"], [43.0, "0"], [43.0, "1"]], "pos": [[23.0, "(1, 2)"], [23.0, "(1, 1)"], [44.0, "(6, 1)"], [44.0, "(6, 2)"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 434, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def digit_version(version_str: str, length: int = 4):\n    \"\"\"Convert a version string into a tuple of integers.\n\n    This method is usually used for comparing two versions. For pre-release\n    versions: alpha < beta < rc.\n\n    Args:\n        version_str (str): The version string.\n        length (int): The maximum number of version levels. Default: 4.\n\n    Returns:\n        tuple[int]: The version info in digits (integers).\n    \"\"\"\n    assert 'parrots' not in version_str\n    version = parse(version_str)\n    assert version.release, f'failed to parse version {version_str}'\n    release = list(version.release)\n    release = release[:length]\n    if len(release) < length:\n        release = release + [0] * (length - len(release))\n    if version.is_prerelease:\n        mapping = {'a': -3, 'b': -2, 'rc': -1}\n        val = -4\n        # version.pre can be None\n        if version.pre:\n            if version.pre[0] not in mapping:\n                warnings.warn(f'unknown prerelease version {version.pre[0]}, '\n                              'version checking may go wrong')\n            else:\n                val = mapping[version.pre[0]]\n            release.extend([val, version.pre[-1]])\n        else:\n            release.extend([val, 0])\n\n    elif version.is_postrelease:\n        release.extend([1, version.post])\n    else:\n        release.extend([0, 0])\n    return tuple(release)\n\ndigit_version(version_str='2.2.2+cu121', length=4)", "Selected Statement": "release = release + [0] * (length - len(release))", "Function Input": {"version_str": "'2.2.2+cu121'", "length": "4"}, "Variable Values Before Statement": {"release": "[2, 2, 2]"}, "Value After Statement Execution": "[2, 2, 2, 0]", "Variable States During Runtime": {"version_str": [[1, "'2.2.2+cu121'"]], "length": [[1, "4"]], "version": [[15.0, "<Version('2.2.2+cu121')>"]], "release": [[17.0, "[2, 2, 2]"], [20.0, "[2, 2, 2, 0]"], [38.0, "[2, 2, 2, 0, 0, 0]"]]}, "Program Information": "Project Name: Mikubill+sd-webui-controlnet", "idx": 435, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def SeparateFlagArgs(args: list):\n  \"\"\"Splits a list of args into those for Flags and those for Fire.\n\n  If an isolated '--' arg is not present in the arg list, then all of the args\n  are for Fire. If there is an isolated '--', then the args after the final '--'\n  are flag args, and the rest of the args are fire args.\n\n  Args:\n    args: The list of arguments received by the Fire command.\n  Returns:\n    A tuple with the Fire args (a list), followed by the Flag args (a list).\n  \"\"\"\n  if len(args) > 0 and (args[-1] == '-h' or args[-1] == '--help') and '--' not in args:\n    args.pop()\n    args.append('--')\n    args.append('-h')\n\n  if '--' in args:\n    separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --\n    flag_args = args[separator_index + 1:]\n    args = args[:separator_index]\n    return args, flag_args\n\n  return args, []\n\nSeparateFlagArgs(args=['a', 'b', '--'])", "Selected Statement": "separator_index = len(args) - 1 - args[::-1].index('--')  # index of last --", "Function Input": {"args": "['a', 'b', '--']"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "2", "Variable States During Runtime": {"args": [[1, "['a', 'b', '--']"], [21.0, "['a', 'b']"]], "separator_index": [[19.0, "2"]], "flag_args": [[20.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 436, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _ParseFn(args):\n    \"\"\"Parses the list of `args` into (varargs, kwargs), remaining_args.\"\"\"\n    kwargs, remaining_kwargs, remaining_args = _ParseKeywordArgs(\n        args, all_args, fn_spec.varkw)\n\n    # Note: _ParseArgs modifies kwargs.\n    parsed_args, kwargs, remaining_args, capacity = _ParseArgs(\n        fn_spec.args, fn_spec.defaults, num_required_args, kwargs,\n        remaining_args, metadata)\n\n    if fn_spec.varargs or fn_spec.varkw:\n      # If we're allowed *varargs or **kwargs, there's always capacity.\n      capacity = True\n\n    extra_kw = set(kwargs) - set(fn_spec.kwonlyargs)\n    if fn_spec.varkw is None and extra_kw:\n      raise FireError('Unexpected kwargs present:', extra_kw)\n\n    missing_kwonly = set(required_kwonly) - set(kwargs)\n    if missing_kwonly:\n      raise FireError('Missing required flags:', missing_kwonly)\n\n    # If we accept *varargs, then use all remaining arguments for *varargs.\n    if fn_spec.varargs is not None:\n      varargs, remaining_args = remaining_args, []\n    else:\n      varargs = []\n\n    for index, value in enumerate(varargs):\n      varargs[index] = _ParseValue(value, None, None, metadata)\n\n    varargs = parsed_args + varargs\n    remaining_args += remaining_kwargs\n\n    consumed_args = args[:len(args) - len(remaining_args)]\n    return (varargs, kwargs), consumed_args, remaining_args, capacity\n\n_ParseFn(args=['x'], all_args=[], fn_spec={args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}, metadata={'ACCEPTS_POSITIONAL_ARGS': False}, num_required_args=0, required_kwonly=set())", "Selected Statement": "extra_kw = set(kwargs) - set(fn_spec.kwonlyargs)", "Function Input": {"args": "['x']", "all_args": "[]", "fn_spec": "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}", "metadata": "{'ACCEPTS_POSITIONAL_ARGS': False}", "num_required_args": "0", "required_kwonly": "set()"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "set()", "Variable States During Runtime": {"args": [[1, "['x']"]], "all_args": [[1, "[]"]], "fn_spec": [[1, "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}"]], "metadata": [[1, "{'ACCEPTS_POSITIONAL_ARGS': False}"]], "num_required_args": [[1, "0"]], "required_kwonly": [[1, "set()"]], "kwargs": [[3.0, "{}"]], "remaining_kwargs": [[3.0, "[]"]], "remaining_args": [[3.0, "['x']"]], "parsed_args": [[7.0, "[]"]], "capacity": [[7.0, "False"], [13.0, "True"]], "extra_kw": [[15.0, "set()"]], "missing_kwonly": [[19.0, "set()"]], "varargs": [[27.0, "[]"]], "consumed_args": [[35.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 437, "quantized value": "Empty set", "mapping_info": {"len(value) == 0": "Empty set", "len(value) > 0": "Non-Empty set"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def find_original_update_blocks(content, fence=DEFAULT_FENCE):\n    # make sure we end with a newline, otherwise the regex will miss <<UPD on the last line\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    pieces = re.split(split_re, content)\n\n    pieces.reverse()\n    processed = []\n\n    # Keep using the same filename in cases where GPT produces an edit block\n    # without a filename.\n    current_filename = None\n    try:\n        while pieces:\n            cur = pieces.pop()\n\n            if cur in (DIVIDER, UPDATED):\n                processed.append(cur)\n                raise ValueError(f\"Unexpected {cur}\")\n\n            if cur.strip() != HEAD:\n                processed.append(cur)\n                continue\n\n            processed.append(cur)  # original_marker\n\n            filename = strip_filename(processed[-2].splitlines()[-1], fence)\n            try:\n                if not filename:\n                    filename = strip_filename(processed[-2].splitlines()[-2], fence)\n                if not filename:\n                    if current_filename:\n                        filename = current_filename\n                    else:\n                        raise ValueError(missing_filename_err)\n            except IndexError:\n                if current_filename:\n                    filename = current_filename\n                else:\n                    raise ValueError(missing_filename_err)\n\n            current_filename = filename\n\n            original_text = pieces.pop()\n            processed.append(original_text)\n\n            divider_marker = pieces.pop()\n            processed.append(divider_marker)\n            if divider_marker.strip() != DIVIDER:\n                raise ValueError(f\"Expected `{DIVIDER}` not {divider_marker.strip()}\")\n\n            updated_text = pieces.pop()\n            processed.append(updated_text)\n\n            updated_marker = pieces.pop()\n            processed.append(updated_marker)\n            if updated_marker.strip() != UPDATED:\n                raise ValueError(f\"Expected `{UPDATED}` not `{updated_marker.strip()}\")\n\n            yield filename, original_text, updated_text\n    except ValueError as e:\n        processed = \"\".join(processed)\n        err = e.args[0]\n        raise ValueError(f\"{processed}\\n^^^ {err}\")\n    except IndexError:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Incomplete SEARCH/REPLACE block.\")\n    except Exception:\n        processed = \"\".join(processed)\n        raise ValueError(f\"{processed}\\n^^^ Error parsing SEARCH/REPLACE block.\")\n\nfind_original_update_blocks(content='ok', fence=('<source>', '</source>'))", "Selected Statement": "content = content + \"\\n\"", "Function Input": {"content": "'ok'", "fence": "('<source>', '</source>')"}, "Variable Values Before Statement": {"content": "'ok'"}, "Value After Statement Execution": "'ok\\n'", "Variable States During Runtime": {"content": [[1, "'ok'"], [4.0, "'ok\\n'"]], "fence": [[1, "('<source>', '</source>')"]], "pieces": [[6.0, "['ok\\n']"], [16.0, "[]"]], "processed": [[9.0, "[]"], [23.0, "['ok\\n']"]], "current_filename": [[13.0, "None"]], "cur": [[16.0, "'ok\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 438, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def perfect_replace(whole_lines, part_lines, replace_lines):\n    part_tup = tuple(part_lines)\n    part_len = len(part_lines)\n\n    for i in range(len(whole_lines) - part_len + 1):\n        whole_tup = tuple(whole_lines[i : i + part_len])\n        if part_tup == whole_tup:\n            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]\n            return \"\".join(res)\n\nperfect_replace(whole_lines=['two\\n'], part_lines=['two\\n'], replace_lines=['three\\n'])", "Selected Statement": "res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]", "Function Input": {"whole_lines": "['two\\n']", "part_lines": "['two\\n']", "replace_lines": "['three\\n']"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "['three\\n']", "Variable States During Runtime": {"whole_lines": [[1, "['two\\n']"]], "part_lines": [[1, "['two\\n']"]], "replace_lines": [[1, "['three\\n']"]], "part_tup": [[2.0, "('two\\n',)"]], "part_len": [[3.0, "1"]], "i": [[5.0, "0"]], "whole_tup": [[6.0, "('two\\n',)"]], "res": [[8.0, "['three\\n']"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 439, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines):\n    # GPT often messes up leading whitespace.\n    # It usually does it uniformly across the ORIG and UPD blocks.\n    # Either omitting all leading whitespace, or including only some of it.\n\n    # Outdent everything in part_lines and replace_lines by the max fixed amount possible\n    leading = [len(p) - len(p.lstrip()) for p in part_lines if p.strip()] + [\n        len(p) - len(p.lstrip()) for p in replace_lines if p.strip()\n    ]\n\n    if leading and min(leading):\n        num_leading = min(leading)\n        part_lines = [p[num_leading:] if p.strip() else p for p in part_lines]\n        replace_lines = [p[num_leading:] if p.strip() else p for p in replace_lines]\n\n    # can we find an exact match not including the leading whitespace\n    num_part_lines = len(part_lines)\n\n    for i in range(len(whole_lines) - num_part_lines + 1):\n        add_leading = match_but_for_leading_whitespace(\n            whole_lines[i : i + num_part_lines], part_lines\n        )\n\n        if add_leading is None:\n            continue\n\n        replace_lines = [add_leading + rline if rline.strip() else rline for rline in replace_lines]\n        whole_lines = whole_lines[:i] + replace_lines + whole_lines[i + num_part_lines :]\n        return \"\".join(whole_lines)\n\n    return None\n\nreplace_part_with_missing_leading_whitespace(whole_lines=['    line1\\n', '    line2\\n', '    line3\\n'], part_lines=[' line1\\n', ' line2\\n'], replace_lines=[' new_line1\\n', '     new_line2\\n'])", "Selected Statement": "leading = [len(p) - len(p.lstrip()) for p in part_lines if p.strip()] + [", "Function Input": {"whole_lines": "['    line1\\n', '    line2\\n', '    line3\\n']", "part_lines": "[' line1\\n', ' line2\\n']", "replace_lines": "[' new_line1\\n', '     new_line2\\n']"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[1, 1, 1, 5]", "Variable States During Runtime": {"whole_lines": [[1, "['    line1\\n', '    line2\\n', '    line3\\n']"], [28.0, "['    new_line1\\n', '        new_line2\\n', '    line3\\n']"]], "part_lines": [[1, "[' line1\\n', ' line2\\n']"], [13.0, "['line1\\n', 'line2\\n']"]], "replace_lines": [[1, "[' new_line1\\n', '     new_line2\\n']"], [14.0, "['new_line1\\n', '    new_line2\\n']"], [27.0, "['    new_line1\\n', '        new_line2\\n']"]], "leading": [[7.0, "[1, 1, 1, 5]"]], "num_leading": [[12.0, "1"]], "num_part_lines": [[17.0, "2"]], "i": [[19.0, "0"]], "add_leading": [[20.0, "'    '"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 440, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def check_gitignore(git_root, io, ask=True):\n    if not git_root:\n        return\n\n    try:\n        repo = git.Repo(git_root)\n        if repo.ignored(\".aider\"):\n            return\n    except git.exc.InvalidGitRepositoryError:\n        pass\n\n    pat = \".aider*\"\n\n    gitignore_file = Path(git_root) / \".gitignore\"\n    if gitignore_file.exists():\n        content = io.read_text(gitignore_file)\n        if content is None:\n            return\n        if pat in content.splitlines():\n            return\n    else:\n        content = \"\"\n\n    if ask and not io.confirm_ask(f\"Add {pat} to .gitignore (recommended)?\"):\n        return\n\n    if content and not content.endswith(\"\\n\"):\n        content += \"\\n\"\n    content += pat + \"\\n\"\n    io.write_text(gitignore_file, content)\n\n    io.tool_output(f\"Added {pat} to .gitignore\")\n\ncheck_gitignore(git_root=PosixPath('/tmp/tmpcr1f5en7'), io={user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}, ask=True)", "Selected Statement": "gitignore_file = Path(git_root) / \".gitignore\"", "Function Input": {"git_root": "PosixPath('/tmp/tmpcr1f5en7')", "io": "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}", "ask": "True"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "PosixPath('/tmp/tmpcr1f5en7/.gitignore')", "Variable States During Runtime": {"git_root": [[1, "PosixPath('/tmp/tmpcr1f5en7')"]], "io": [[1, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}"], [24.0, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>, num_user_asks=1}"]], "ask": [[1, "True"]], "repo": [[6.0, "<git.repo.base.Repo '/tmp/tmpcr1f5en7/.git'>"]], "pat": [[12.0, "'.aider*'"]], "gitignore_file": [[14.0, "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"]], "content": [[22.0, "''"], [29.0, "'.aider*\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 441, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _tranmat(a, b):\n    \"\"\"\n    Get the coefficents for the affine-linear function f(x)=Ax+s.\n\n    Which fullfills that A is a rotation-matrix,\n    f(a) = [0,0] and f(b) = [|b-a|,0].\n    \"\"\"\n    A = np.zeros((2, 2))\n    A[0, 0] = b[0] - a[0]\n    A[1, 1] = b[0] - a[0]\n    A[1, 0] = -(b[1] - a[1])\n    A[0, 1] = +(b[1] - a[1])\n    A /= _dist(a, b)\n    s = -np.dot(A, a)\n    return A, s\n\n_tranmat(a=array([0., 0.]), b=array([3., 0.]))", "Selected Statement": "A[0, 0] = b[0] - a[0]", "Function Input": {"a": "array([0., 0.])", "b": "array([3., 0.])"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([[3., 0.],       [0., 0.]])", "Variable States During Runtime": {"a": [[1, "array([0., 0.])"]], "b": [[1, "array([3., 0.])"]], "A": [[8.0, "array([[0., 0.],       [0., 0.]])"], [9.0, "array([[3., 0.],       [0., 0.]])"], [10.0, "array([[3., 0.],       [0., 3.]])"], [11.0, "array([[ 3.,  0.],       [-0.,  3.]])"], [13.0, "array([[ 1.,  0.],       [-0.,  1.]])"]], "s": [[14.0, "array([-0., -0.])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 442, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _yvalue(b, a, c):\n    \"\"\"\n    Get the two possible y-values for the upper point of a triangle.\n\n    where c is the length of the down side starting in the origin and\n    lying on the x-axes, a is the distance of the unknown point to the origen\n    and b is the distance of the unknown point to the righter given point\n    \"\"\"\n    # ckeck flatness to eliminate numerical errors when the triangle is flat\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 0.0, -0.0\n\n    res = 2 * ((a * b) ** 2 + (a * c) ** 2 + (b * c) ** 2)\n    res -= a ** 4 + b ** 4 + c ** 4\n    # in case of numerical errors set res to 0 (hope you check validty before)\n    res = max(res, 0.0)\n    res = np.sqrt(res)\n    res /= 2 * c\n    return res, -res\n\n_yvalue(b=4.0, a=2.0, c=3.0)", "Selected Statement": "res = 2 * ((a * b) ** 2 + (a * c) ** 2 + (b * c) ** 2)", "Function Input": {"b": "4.0", "a": "2.0", "c": "3.0"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "488.0", "Variable States During Runtime": {"b": [[1, "4.0"]], "a": [[1, "2.0"]], "c": [[1, "3.0"]], "res": [[13.0, "488.0"], [14.0, "135.0"], [17.0, "11.61895003862225"], [18.0, "1.9364916731037083"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 443, "quantized value": "Positive Large", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_grad_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    slices = tuple([slice(1,-1,None)] * ndim)\n    for i in range(ndim):\n        assert grad(u, axis=i) == pytest.approx(2*xc[i][slices])\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad_nd(n=92, ndim=1)", "Selected Statement": "coords = [np.arange(n)] * ndim", "Function Input": {"n": "92", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]", "Variable States During Runtime": {"n": [[1, "92"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,       34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,       51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,       68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,       85, 86, 87, 88, 89, 90, 91])]"]], "u": [[6.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "ucopy": [[7.0, "array([0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00, 1.600e+01, 2.500e+01,       3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01, 1.000e+02, 1.210e+02,       1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02, 2.560e+02, 2.890e+02,       3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02, 4.840e+02, 5.290e+02,       5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02, 7.840e+02, 8.410e+02,       9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03, 1.156e+03, 1.225e+03,       1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03, 1.600e+03, 1.681e+03,       1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03, 2.116e+03, 2.209e+03,       2.304e+03, 2.401e+03, 2.500e+03, 2.601e+03, 2.704e+03, 2.809e+03,       2.916e+03, 3.025e+03, 3.136e+03, 3.249e+03, 3.364e+03, 3.481e+03,       3.600e+03, 3.721e+03, 3.844e+03, 3.969e+03, 4.096e+03, 4.225e+03,       4.356e+03, 4.489e+03, 4.624e+03, 4.761e+03, 4.900e+03, 5.041e+03,       5.184e+03, 5.329e+03, 5.476e+03, 5.625e+03, 5.776e+03, 5.929e+03,       6.084e+03, 6.241e+03, 6.400e+03, 6.561e+03, 6.724e+03, 6.889e+03,       7.056e+03, 7.225e+03, 7.396e+03, 7.569e+03, 7.744e+03, 7.921e+03,       8.100e+03, 8.281e+03])"]], "slices": [[10.0, "(slice(1, -1, None),)"]], "i": [[11.0, "0"]], "@py_assert3": [[12.0, "None"]], "@py_assert7": [[12.0, "None"]], "@py_assert9": [[12.0, "None"]], "@py_assert11": [[12.0, "None"]], "@py_assert13": [[12.0, "None"]], "@py_assert14": [[12.0, "None"]], "@py_assert5": [[12.0, "None"]], "@py_assert1": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 444, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def get_idx(ndim, axis=None, axis_idx=None):\n    s = [midx] * ndim\n    if axis is not None:\n        if hasattr(axis, \"__iter__\"):\n            for ax, axidx in zip(axis, axis_idx):\n                s[ax] = axidx\n        else:\n            s[axis] = axis_idx\n    return tuple(s)\n\nget_idx(ndim=1, axis=0, axis_idx=slice(None, -2, None))", "Selected Statement": "s = [midx] * ndim", "Function Input": {"ndim": "1", "axis": "0", "axis_idx": "slice(None, -2, None)"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[slice(1, -1, None)]", "Variable States During Runtime": {"ndim": [[1, "1"]], "axis": [[1, "0"]], "axis_idx": [[1, "slice(None, -2, None)"]], "s": [[2.0, "[slice(1, -1, None)]"], [8.0, "[slice(None, -2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 445, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_grad2_nd(n, ndim):\n    coords = [np.arange(n)] * ndim\n    xc = np.meshgrid(*coords, indexing=\"ij\")\n\n    # u = sum_i(xc[i]**2)\n    u = reduce(lambda x,y: x+y**2, xc, 0.0)\n    ucopy = np.copy(u)\n\n    # check the gradient values\n    gu = np.zeros(tuple([n-2]*ndim))\n    gu2 = gu + 2.0\n    for i in range(ndim):\n        for j in range(ndim):\n            if i == j:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu2)\n            else:\n                assert grad2(u, axes=(i,j)) == pytest.approx(gu)\n\n    # check if u is unchanged\n    assert np.all(u == ucopy)\n\n_test_grad2_nd(n=32, ndim=1)", "Selected Statement": "coords = [np.arange(n)] * ndim", "Function Input": {"n": "32", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]", "Variable States During Runtime": {"n": [[1, "32"]], "ndim": [[1, "1"]], "coords": [[2.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "xc": [[3.0, "[array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,       17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])]"]], "u": [[6.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ucopy": [[7.0, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "gu": [[10.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "gu2": [[11.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "i": [[12.0, "0"]], "j": [[13.0, "0"]], "@py_assert2": [[15.0, "None"]], "@py_assert4": [[15.0, "None"]], "@py_assert8": [[15.0, "None"]], "@py_assert11": [[15.0, "None"]], "@py_assert6": [[15.0, "None"]], "@py_assert1": [[20.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 446, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def det_hess(u):\n    \"\"\"\n    Get the determinant of the Hessian matrix of `u`.\n\n    Parameters\n    ----------\n    * `u` : numpy.ndarray\n        The ndarray input with shape (n0+2, n1+2, ..., nd1+2).\n\n    Returns\n    -------\n    * numpy.ndarray\n        The ndarray of the second grad of `u` with shape (n0, n1, ..., nd1).\n    \"\"\"\n    ndim = np.ndim(u)\n    inshape = np.asarray(u.shape)\n    outshape = list(inshape - 2)\n\n    # obtain the second gradient per each pairs of axes\n    hess_unarranged = np.zeros([ndim, ndim] + outshape)\n    for i in range(ndim):\n        for j in range(i,ndim):\n            grad2_val = grad2(u, (i,j))\n            hess_unarranged[i,j] = grad2_val\n            hess_unarranged[j,i] = grad2_val\n\n    # rearrange hessian to have shape: outshape + [ndim, ndim]\n    perm_idx = list(range(2,ndim+2)) + list(range(2))\n    hess = np.transpose(hess_unarranged, perm_idx)\n\n    # calculate and return the determinant\n    return np.linalg.det(hess)\n\ndet_hess(u=array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.]))", "Selected Statement": "perm_idx = list(range(2,ndim+2)) + list(range(2))", "Function Input": {"u": "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[2, 0, 1]", "Variable States During Runtime": {"u": [[1, "array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.,  64.,  81., 100.,       121., 144., 169., 196., 225., 256., 289., 324., 361., 400., 441.,       484., 529., 576., 625., 676., 729., 784., 841., 900., 961.])"]], "ndim": [[15.0, "1"]], "inshape": [[16.0, "array([32])"]], "outshape": [[17.0, "[30]"]], "hess_unarranged": [[20.0, "array([[[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,         0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]]])"], [24.0, "array([[[2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,         2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.]]])"]], "i": [[21.0, "0"]], "j": [[22.0, "0"]], "grad2_val": [[23.0, "array([2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,       2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.])"]], "perm_idx": [[28.0, "[2, 0, 1]"]], "hess": [[29.0, "array([[[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]],       [[2.]]])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 447, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def forward(source, phi):\n    \"\"\"\n    Obtain the target density distribution given the source distribution and\n    the mapping potential, phi.\n    The mapping from source coordinate, $x$, to the target coordinate, $y$, is\n    given by:\n\n    $$\n    y = x + \\nabla phi(x).\n    $$\n\n    The coordinate in i-th dimension is given by `np.arange(source.shape[i])`.\n\n    Parameters\n    ----------\n    * `source` : numpy.ndarray\n        The source density distribution in n-dimensional array.\n    * `phi` : numpy.ndarray\n        The mapping potential given above. It must have the same shape as\n        `source`.\n\n    Returns\n    -------\n    * numpy.ndarray\n        The target density distribution in n-dimensional array.\n    \"\"\"\n    # convert to np.ndarray\n    source = np.asarray(source)\n    phi = np.asarray(phi)\n    # check the shapes of inputs\n    if source.shape != phi.shape:\n        raise ValueError(\"The source and phi must have the same shape.\")\n\n    # calculate the total potential so that $y = \\nabla u(x)$\n    u0, u, phi_pad = _get_full_potential(phi)\n    ndim = np.ndim(phi)\n\n    # calculate the determinant of the hessian\n    det_hess_s = det_hess(u)\n\n    # get the displacement in (n x D) format\n    x = np.array([grad(u0, axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n    y = np.array([grad(u , axis=i) for i in range(ndim)]).reshape((ndim,-1)).T\n\n    # interpolate the values\n    interp = lambda s: griddata(y, s.flatten(), x, \"linear\").reshape(s.shape)\n    target_s = source / det_hess_s\n    target = interp(target_s)\n\n    # fill nan values with zeros\n    target[np.isnan(target)] = 0.0\n    return target\n\nforward(source=array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06]), phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "target_s = source / det_hess_s", "Function Input": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {"source": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "det_hess_s": "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"}, "Value After Statement Execution": "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])", "Variable States During Runtime": {"source": [[1, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "phi_pad": [[35.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "u": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "u0": [[35.0, "array([0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03,       1.2500e+03, 1.3005e+03, 1.3520e+03, 1.4045e+03, 1.4580e+03,       1.5125e+03, 1.5680e+03, 1.6245e+03, 1.6820e+03, 1.7405e+03,       1.8000e+03, 1.8605e+03, 1.9220e+03, 1.9845e+03, 2.0480e+03,       2.1125e+03, 2.1780e+03, 2.2445e+03, 2.3120e+03, 2.3805e+03,       2.4500e+03, 2.5205e+03, 2.5920e+03, 2.6645e+03, 2.7380e+03,       2.8125e+03, 2.8880e+03, 2.9645e+03, 3.0420e+03, 3.1205e+03,       3.2000e+03, 3.2805e+03, 3.3620e+03, 3.4445e+03, 3.5280e+03,       3.6125e+03, 3.6980e+03, 3.7845e+03, 3.8720e+03, 3.9605e+03,       4.0500e+03, 4.1405e+03, 4.2320e+03, 4.3245e+03, 4.4180e+03,       4.5125e+03, 4.6080e+03, 4.7045e+03, 4.8020e+03, 4.9005e+03,       5.0000e+03, 5.1005e+03])"]], "ndim": [[36.0, "1"]], "det_hess_s": [[39.0, "array([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])"]], "x": [[42.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "y": [[43.0, "array([[  1.],       [  2.],       [  3.],       [  4.],       [  5.],       [  6.],       [  7.],       [  8.],       [  9.],       [ 10.],       [ 11.],       [ 12.],       [ 13.],       [ 14.],       [ 15.],       [ 16.],       [ 17.],       [ 18.],       [ 19.],       [ 20.],       [ 21.],       [ 22.],       [ 23.],       [ 24.],       [ 25.],       [ 26.],       [ 27.],       [ 28.],       [ 29.],       [ 30.],       [ 31.],       [ 32.],       [ 33.],       [ 34.],       [ 35.],       [ 36.],       [ 37.],       [ 38.],       [ 39.],       [ 40.],       [ 41.],       [ 42.],       [ 43.],       [ 44.],       [ 45.],       [ 46.],       [ 47.],       [ 48.],       [ 49.],       [ 50.],       [ 51.],       [ 52.],       [ 53.],       [ 54.],       [ 55.],       [ 56.],       [ 57.],       [ 58.],       [ 59.],       [ 60.],       [ 61.],       [ 62.],       [ 63.],       [ 64.],       [ 65.],       [ 66.],       [ 67.],       [ 68.],       [ 69.],       [ 70.],       [ 71.],       [ 72.],       [ 73.],       [ 74.],       [ 75.],       [ 76.],       [ 77.],       [ 78.],       [ 79.],       [ 80.],       [ 81.],       [ 82.],       [ 83.],       [ 84.],       [ 85.],       [ 86.],       [ 87.],       [ 88.],       [ 89.],       [ 90.],       [ 91.],       [ 92.],       [ 93.],       [ 94.],       [ 95.],       [ 96.],       [ 97.],       [ 98.],       [ 99.],       [100.]])"]], "interp": [[46.0, "<function forward.<locals>.<lambda> at 0x7fab7f2e3700>"]], "target_s": [[47.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]], "target": [[48.0, "array([3.72665317e-06, 6.14389891e-06, 1.00262383e-05, 1.61957424e-05,       2.58959932e-05, 4.09857759e-05, 6.42099934e-05, 9.95728564e-05,       1.52843925e-04, 2.32233182e-04, 3.49276399e-04, 5.19975743e-04,       7.66241736e-04, 1.11767979e-03, 1.61375600e-03, 2.30636063e-03,       3.26276232e-03, 4.56890930e-03, 6.33298575e-03, 8.68907130e-03,       1.18006814e-02, 1.58638899e-02, 2.11096565e-02, 2.78049116e-02,       3.62518979e-02, 4.67852390e-02, 5.97662260e-02, 7.55738747e-02,       9.45924385e-02, 1.17195255e-01, 1.43725065e-01, 1.74471250e-01,       2.09644807e-01, 2.49352209e-01, 2.93569685e-01, 3.42119690e-01,       3.94651546e-01, 4.50628259e-01, 5.09321387e-01, 5.69815527e-01,       6.31023482e-01, 6.91712523e-01, 7.50541364e-01, 8.06106646e-01,       8.56996891e-01, 9.01851159e-01, 9.39419053e-01, 9.68618450e-01,       9.88587205e-01, 9.98725433e-01, 9.98725433e-01, 9.88587205e-01,       9.68618450e-01, 9.39419053e-01, 9.01851159e-01, 8.56996891e-01,       8.06106646e-01, 7.50541364e-01, 6.91712523e-01, 6.31023482e-01,       5.69815527e-01, 5.09321387e-01, 4.50628259e-01, 3.94651546e-01,       3.42119690e-01, 2.93569685e-01, 2.49352209e-01, 2.09644807e-01,       1.74471250e-01, 1.43725065e-01, 1.17195255e-01, 9.45924385e-02,       7.55738747e-02, 5.97662260e-02, 4.67852390e-02, 3.62518979e-02,       2.78049116e-02, 2.11096565e-02, 1.58638899e-02, 1.18006814e-02,       8.68907130e-03, 6.33298575e-03, 4.56890930e-03, 3.26276232e-03,       2.30636063e-03, 1.61375600e-03, 1.11767979e-03, 7.66241736e-04,       5.19975743e-04, 3.49276399e-04, 2.32233182e-04, 1.52843925e-04,       9.95728564e-05, 6.42099934e-05, 4.09857759e-05, 2.58959932e-05,       1.61957424e-05, 1.00262383e-05, 6.14389891e-06, 3.72665317e-06])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 448, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _get_default_expanded_coordinate(shape, ndim):\n    x_coords = []\n    for i in range(ndim):\n        idx = [None] * ndim\n        idx[i] = slice(None, None, None)\n        x_coords.append(np.arange(shape[i])[tuple(idx)])\n    return x_coords\n\n_get_default_expanded_coordinate(shape=array([102]), ndim=1)", "Selected Statement": "idx = [None] * ndim", "Function Input": {"shape": "array([102])", "ndim": "1"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[None]", "Variable States During Runtime": {"shape": [[1, "array([102])"]], "ndim": [[1, "1"]], "x_coords": [[2.0, "[]"], [6.0, "[array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,        13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,        26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,        39,  40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,        52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,        65,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,  77,        78,  79,  80,  81,  82,  83,  84,  85,  86,  87,  88,  89,  90,        91,  92,  93,  94,  95,  96,  97,  98,  99, 100, 101])]"]], "i": [[3.0, "0"]], "idx": [[4.0, "[None]"], [5.0, "[slice(None, None, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 449, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _pad_conserve_grads(phi):\n    # pad by conserving the edge gradients\n    ndim = np.ndim(phi)\n    pw = [1, 1]\n    pp = np.pad(phi, [tuple(pw)]*ndim, mode=\"constant\")\n    for dim in range(ndim):\n        # get the indices first\n        idx_pad0_l = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_r = _get_idx(ndim, dim, slice(pw[0]+1, pw[0]+2, None))\n        idx_pad0 = _get_idx(ndim, dim, slice(pw[0], pw[0]+1, None))\n        idx_pad0_fill = _get_idx(ndim, dim, slice(None, pw[0], None))\n        idx_pad1_l = _get_idx(ndim, dim, slice(-pw[1]-2, -pw[1]-1, None))\n        idx_pad1_r = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1 = _get_idx(ndim, dim, slice(-pw[1]-1, -pw[1], None))\n        idx_pad1_fill = _get_idx(ndim, dim, slice(-pw[1], None, None))\n\n        # now get the padded values\n        grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)\n        grad1 = pp[idx_pad1_r] - pp[idx_pad1_l]\n        pad_arange0 = np.arange(-pw[0],0) # (1, ..., ndim=pw[i], ..., 1)\n        pad_arange1 = np.arange(1,pw[0]+1)\n        pad0 = pad_arange0 * grad0 + pp[idx_pad0] # (n0,...,ndim=pw[i],...,nd1)\n        pad1 = pad_arange1 * grad1 + pp[idx_pad1]\n        pp[idx_pad0_fill] = pad0\n        pp[idx_pad1_fill] = pad1\n\n    return pp\n\n_pad_conserve_grads(phi=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]))", "Selected Statement": "grad0 = pp[idx_pad0_r] - pp[idx_pad0_l] # (n0, ..., ndim=1, ..., nd1)", "Function Input": {"phi": "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([0.])", "Variable States During Runtime": {"phi": [[1, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "ndim": [[3.0, "1"]], "pw": [[4.0, "[1, 1]"]], "pp": [[5.0, "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,       0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"]], "dim": [[6.0, "0"]], "idx_pad0_l": [[8.0, "(slice(1, 2, None),)"]], "idx_pad0_r": [[9.0, "(slice(2, 3, None),)"]], "idx_pad0": [[10.0, "(slice(1, 2, None),)"]], "idx_pad0_fill": [[11.0, "(slice(None, 1, None),)"]], "idx_pad1_l": [[12.0, "(slice(-3, -2, None),)"]], "idx_pad1_r": [[13.0, "(slice(-2, -1, None),)"]], "idx_pad1": [[14.0, "(slice(-2, -1, None),)"]], "idx_pad1_fill": [[15.0, "(slice(-1, None, None),)"]], "grad0": [[18.0, "array([0.])"]], "grad1": [[19.0, "array([0.])"]], "pad_arange0": [[20.0, "array([-1])"]], "pad_arange1": [[21.0, "array([1])"]], "pad0": [[22.0, "array([0.])"]], "pad1": [[23.0, "array([0.])"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 450, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _get_idx(ndim, dim, s, defidx=None):\n    defidx = slice(None, None, None) if defidx is None else defidx\n    idx = [defidx] * ndim\n    idx[dim] = s\n    return tuple(idx)\n\n_get_idx(ndim=1, dim=0, s=slice(1, 2, None), defidx=None)", "Selected Statement": "idx = [defidx] * ndim", "Function Input": {"ndim": "1", "dim": "0", "s": "slice(1, 2, None)", "defidx": "None"}, "Variable Values Before Statement": {"ndim": "1"}, "Value After Statement Execution": "[slice(None, None, None)]", "Variable States During Runtime": {"ndim": [[1, "1"]], "dim": [[1, "0"]], "s": [[1, "slice(1, 2, None)"]], "defidx": [[1, "None"], [2.0, "slice(None, None, None)"]], "idx": [[3.0, "[slice(None, None, None)]"], [4.0, "[slice(1, 2, None)]"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 451, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_forward_nd_slanted_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is slanted on the first dimension, so the target will be shifted\n    # source on the first dimension by A\n    A = n / 6.0\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = xs[0] * A\n    target = sb.forward(source, phi)\n\n    xs2 = np.copy(xs)\n    xs2[0] -= A\n    xs2_sq = reduce(lambda x,y:x+y*y, xs2, 0.0)\n    target_calc = np.exp(-xs2_sq / (2*sigma**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_slanted_pot(n=100, ndim=1, abs=None)", "Selected Statement": "x = np.arange(n) - n / 2.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [21.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "A": [[8.0, "16.666666666666668"]], "sigma": [[9.0, "3.3333333333333335"]], "source": [[10.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[12.0, "array([-833.33333333, -816.66666667, -800.        , -783.33333333,       -766.66666667, -750.        , -733.33333333, -716.66666667,       -700.        , -683.33333333, -666.66666667, -650.        ,       -633.33333333, -616.66666667, -600.        , -583.33333333,       -566.66666667, -550.        , -533.33333333, -516.66666667,       -500.        , -483.33333333, -466.66666667, -450.        ,       -433.33333333, -416.66666667, -400.        , -383.33333333,       -366.66666667, -350.        , -333.33333333, -316.66666667,       -300.        , -283.33333333, -266.66666667, -250.        ,       -233.33333333, -216.66666667, -200.        , -183.33333333,       -166.66666667, -150.        , -133.33333333, -116.66666667,       -100.        ,  -83.33333333,  -66.66666667,  -50.        ,        -33.33333333,  -16.66666667,    0.        ,   16.66666667,         33.33333333,   50.        ,   66.66666667,   83.33333333,        100.        ,  116.66666667,  133.33333333,  150.        ,        166.66666667,  183.33333333,  200.        ,  216.66666667,        233.33333333,  250.        ,  266.66666667,  283.33333333,        300.        ,  316.66666667,  333.33333333,  350.        ,        366.66666667,  383.33333333,  400.        ,  416.66666667,        433.33333333,  450.        ,  466.66666667,  483.33333333,        500.        ,  516.66666667,  533.33333333,  550.        ,        566.66666667,  583.33333333,  600.        ,  616.66666667,        633.33333333,  650.        ,  666.66666667,  683.33333333,        700.        ,  716.66666667,  733.33333333,  750.        ,        766.66666667,  783.33333333,  800.        ,  816.66666667])"]], "target": [[13.0, "array([0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,       0.00000000e+00, 4.06920181e-48, 3.20724834e-46, 2.31075854e-44,       1.52188819e-42, 9.16273954e-41, 5.04302641e-39, 2.53740658e-37,       1.16716481e-35, 4.90827418e-34, 1.88708742e-32, 6.63337857e-31,       2.13192075e-29, 6.26492385e-28, 1.68339106e-26, 4.13614560e-25,       9.29322466e-24, 1.90948503e-22, 3.58811078e-21, 6.16647454e-20,       9.69287214e-19, 1.39359494e-17, 1.83279714e-16, 2.20501882e-15,       2.42693184e-14, 2.44387199e-13, 2.25166580e-12, 1.89829483e-11,       1.46449459e-10, 1.03396690e-09, 6.68114154e-09, 3.95139172e-08,       2.13911719e-07, 1.06006637e-06, 4.80920541e-06, 1.99747687e-05,       7.59596517e-05, 2.64484047e-04, 8.43240507e-04, 2.46182046e-03,       6.58155885e-03, 1.61131343e-02, 3.61258608e-02, 7.41733503e-02,       1.39466583e-01, 2.40149955e-01, 3.78685730e-01, 5.46827108e-01,       7.23074611e-01, 8.75512635e-01, 9.70664988e-01, 9.85332494e-01,       9.15755058e-01, 7.79172411e-01, 6.06901959e-01, 4.32718993e-01,       2.82401211e-01, 1.68682641e-01, 9.22119378e-02, 4.61303118e-02,       2.11172721e-02, 8.84527769e-03, 3.38983023e-03, 1.18852559e-03,       3.81219734e-04, 1.11854006e-04, 3.00200330e-05, 7.36935486e-06,       1.65456117e-06, 3.39741645e-07, 6.37978546e-08, 1.09555606e-08,       1.72034467e-09, 2.47019294e-10, 3.24312866e-11, 3.89313794e-12,       4.27290433e-13, 4.28766413e-14, 3.93350717e-15, 3.29905094e-16,       2.52951417e-17, 1.77302216e-18, 1.13608506e-19, 6.65454790e-21])"]], "xs2": [[15.0, "array([[-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,        -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,        -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,        -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,         -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,          5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,         16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,         27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,         38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,         49.]])"], [16.0, "array([[-66.66666667, -65.66666667, -64.66666667, -63.66666667,        -62.66666667, -61.66666667, -60.66666667, -59.66666667,        -58.66666667, -57.66666667, -56.66666667, -55.66666667,        -54.66666667, -53.66666667, -52.66666667, -51.66666667,        -50.66666667, -49.66666667, -48.66666667, -47.66666667,        -46.66666667, -45.66666667, -44.66666667, -43.66666667,        -42.66666667, -41.66666667, -40.66666667, -39.66666667,        -38.66666667, -37.66666667, -36.66666667, -35.66666667,        -34.66666667, -33.66666667, -32.66666667, -31.66666667,        -30.66666667, -29.66666667, -28.66666667, -27.66666667,        -26.66666667, -25.66666667, -24.66666667, -23.66666667,        -22.66666667, -21.66666667, -20.66666667, -19.66666667,        -18.66666667, -17.66666667, -16.66666667, -15.66666667,        -14.66666667, -13.66666667, -12.66666667, -11.66666667,        -10.66666667,  -9.66666667,  -8.66666667,  -7.66666667,         -6.66666667,  -5.66666667,  -4.66666667,  -3.66666667,         -2.66666667,  -1.66666667,  -0.66666667,   0.33333333,          1.33333333,   2.33333333,   3.33333333,   4.33333333,          5.33333333,   6.33333333,   7.33333333,   8.33333333,          9.33333333,  10.33333333,  11.33333333,  12.33333333,         13.33333333,  14.33333333,  15.33333333,  16.33333333,         17.33333333,  18.33333333,  19.33333333,  20.33333333,         21.33333333,  22.33333333,  23.33333333,  24.33333333,         25.33333333,  26.33333333,  27.33333333,  28.33333333,         29.33333333,  30.33333333,  31.33333333,  32.33333333]])"]], "xs2_sq": [[17.0, "array([4.44444444e+03, 4.31211111e+03, 4.18177778e+03, 4.05344444e+03,       3.92711111e+03, 3.80277778e+03, 3.68044444e+03, 3.56011111e+03,       3.44177778e+03, 3.32544444e+03, 3.21111111e+03, 3.09877778e+03,       2.98844444e+03, 2.88011111e+03, 2.77377778e+03, 2.66944444e+03,       2.56711111e+03, 2.46677778e+03, 2.36844444e+03, 2.27211111e+03,       2.17777778e+03, 2.08544444e+03, 1.99511111e+03, 1.90677778e+03,       1.82044444e+03, 1.73611111e+03, 1.65377778e+03, 1.57344444e+03,       1.49511111e+03, 1.41877778e+03, 1.34444444e+03, 1.27211111e+03,       1.20177778e+03, 1.13344444e+03, 1.06711111e+03, 1.00277778e+03,       9.40444444e+02, 8.80111111e+02, 8.21777778e+02, 7.65444444e+02,       7.11111111e+02, 6.58777778e+02, 6.08444444e+02, 5.60111111e+02,       5.13777778e+02, 4.69444444e+02, 4.27111111e+02, 3.86777778e+02,       3.48444444e+02, 3.12111111e+02, 2.77777778e+02, 2.45444444e+02,       2.15111111e+02, 1.86777778e+02, 1.60444444e+02, 1.36111111e+02,       1.13777778e+02, 9.34444444e+01, 7.51111111e+01, 5.87777778e+01,       4.44444444e+01, 3.21111111e+01, 2.17777778e+01, 1.34444444e+01,       7.11111111e+00, 2.77777778e+00, 4.44444444e-01, 1.11111111e-01,       1.77777778e+00, 5.44444444e+00, 1.11111111e+01, 1.87777778e+01,       2.84444444e+01, 4.01111111e+01, 5.37777778e+01, 6.94444444e+01,       8.71111111e+01, 1.06777778e+02, 1.28444444e+02, 1.52111111e+02,       1.77777778e+02, 2.05444444e+02, 2.35111111e+02, 2.66777778e+02,       3.00444444e+02, 3.36111111e+02, 3.73777778e+02, 4.13444444e+02,       4.55111111e+02, 4.98777778e+02, 5.44444444e+02, 5.92111111e+02,       6.41777778e+02, 6.93444444e+02, 7.47111111e+02, 8.02777778e+02,       8.60444444e+02, 9.20111111e+02, 9.81777778e+02, 1.04544444e+03])"]], "target_calc": [[18.0, "array([1.38389653e-87, 5.33736937e-85, 1.88132746e-82, 6.06059172e-80,       1.78434636e-77, 4.80127724e-75, 1.18072268e-72, 2.65370429e-70,       5.45093048e-68, 1.02329831e-65, 1.75568810e-63, 2.75299848e-61,       3.94528221e-59, 5.16729996e-57, 6.18532849e-55, 6.76667568e-53,       6.76552418e-51, 6.18217132e-49, 5.16290482e-47, 3.94058498e-45,       2.74878501e-43, 1.75240444e-41, 1.02103685e-39, 5.43703314e-38,       2.64603779e-36, 1.17691094e-34, 4.78414856e-33, 1.77737558e-31,       6.03486081e-30, 1.87270255e-28, 5.31109225e-27, 1.37661464e-25,       3.26102718e-24, 7.06008534e-23, 1.39694394e-21, 2.52616378e-20,       4.17501006e-19, 6.30618989e-18, 8.70542662e-17, 1.09831413e-15,       1.26641655e-14, 1.33456608e-13, 1.28533723e-12, 1.13137762e-11,       9.10147076e-11, 6.69158609e-10, 4.49634946e-09, 2.76124246e-08,       1.54975314e-07, 7.94939362e-07, 3.72665317e-06, 1.59667839e-05,       6.25215038e-05, 2.23745794e-04, 7.31802419e-04, 2.18749112e-03,       5.97602290e-03, 1.49207861e-02, 3.40474547e-02, 7.10053537e-02,       1.35335283e-01, 2.35746077e-01, 3.75311099e-01, 5.46074427e-01,       7.26149037e-01, 8.82496903e-01, 9.80198673e-01, 9.95012479e-01,       9.23116346e-01, 7.82704538e-01, 6.06530660e-01, 4.29557358e-01,       2.78037300e-01, 1.64474457e-01, 8.89216175e-02, 4.39369336e-02,       1.98410947e-02, 8.18870101e-03, 3.08871541e-03, 1.06476624e-03,       3.35462628e-04, 9.65934137e-05, 2.54193465e-05, 6.11356797e-06,       1.34381228e-06, 2.69957850e-07, 4.95640532e-08, 8.31670246e-09,       1.27540763e-09, 1.78755887e-10, 2.28973485e-11, 2.68054764e-12,       2.86797501e-13, 2.80440474e-14, 2.50622189e-15, 2.04697171e-16,       1.52797997e-17, 1.04240618e-18, 6.49934797e-20, 3.70353198e-21])"]], "@py_assert3": [[22.0, "None"]], "@py_assert7": [[22.0, "None"]], "@py_assert1": [[22.0, "None"]], "@py_assert4": [[25.0, "None"]], "@py_assert6": [[25.0, "None"]], "@py_assert8": [[28.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 452, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _test_forward_nd_quad_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is quadratic on all dimension, so the target will be scaled\n    # source on all dimension by (1+B)\n    B = 1.0\n    scale = 1 + B\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = 0.5*B*xs_sq\n    target = sb.forward(source, phi)\n\n    target_calc = (scale**-ndim)*np.exp(-xs_sq / (2*(sigma*scale)**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_quad_pot(n=100, ndim=1, abs=None)", "Selected Statement": "x = np.arange(n) - n / 2.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [19.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "B": [[8.0, "1.0"]], "scale": [[9.0, "2.0"]], "sigma": [[10.0, "3.3333333333333335"]], "source": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[12.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[13.0, "array([1.2500e+03, 1.2005e+03, 1.1520e+03, 1.1045e+03, 1.0580e+03,       1.0125e+03, 9.6800e+02, 9.2450e+02, 8.8200e+02, 8.4050e+02,       8.0000e+02, 7.6050e+02, 7.2200e+02, 6.8450e+02, 6.4800e+02,       6.1250e+02, 5.7800e+02, 5.4450e+02, 5.1200e+02, 4.8050e+02,       4.5000e+02, 4.2050e+02, 3.9200e+02, 3.6450e+02, 3.3800e+02,       3.1250e+02, 2.8800e+02, 2.6450e+02, 2.4200e+02, 2.2050e+02,       2.0000e+02, 1.8050e+02, 1.6200e+02, 1.4450e+02, 1.2800e+02,       1.1250e+02, 9.8000e+01, 8.4500e+01, 7.2000e+01, 6.0500e+01,       5.0000e+01, 4.0500e+01, 3.2000e+01, 2.4500e+01, 1.8000e+01,       1.2500e+01, 8.0000e+00, 4.5000e+00, 2.0000e+00, 5.0000e-01,       0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03])"]], "target": [[14.0, "array([3.05096834e-13, 1.53620093e-12, 2.76730504e-12, 1.28535587e-11,       2.29398124e-11, 9.83671882e-11, 1.73794564e-10, 6.88577891e-10,       1.20336122e-09, 4.40917555e-09, 7.61498987e-09, 2.58279429e-08,       4.40408960e-08, 1.38413341e-07, 2.32785786e-07, 6.78656885e-07,       1.12452798e-06, 3.04464007e-06, 4.96475215e-06, 1.24987004e-05,       2.00326487e-05, 4.69534144e-05, 7.38741801e-05, 1.61425945e-04,       2.48977711e-04, 5.07941525e-04, 7.66905340e-04, 1.46291267e-03,       2.15892000e-03, 3.85670914e-03, 5.55449827e-03, 9.30760160e-03,       1.30607049e-02, 2.05640432e-02, 2.80673814e-02, 4.15963220e-02,       5.51252627e-02, 7.70373061e-02, 9.89493495e-02, 1.30637792e-01,       1.62326234e-01, 2.02851181e-01, 2.43376128e-01, 2.88432267e-01,       3.33488405e-01, 3.75561756e-01, 4.17635106e-01, 4.47816923e-01,       4.77998741e-01, 4.88999370e-01, 5.00000000e-01, 4.88999370e-01,       4.77998741e-01, 4.47816923e-01, 4.17635106e-01, 3.75561756e-01,       3.33488405e-01, 2.88432267e-01, 2.43376128e-01, 2.02851181e-01,       1.62326234e-01, 1.30637792e-01, 9.89493495e-02, 7.70373061e-02,       5.51252627e-02, 4.15963220e-02, 2.80673814e-02, 2.05640432e-02,       1.30607049e-02, 9.30760160e-03, 5.55449827e-03, 3.85670914e-03,       2.15892000e-03, 1.46291267e-03, 7.66905340e-04, 5.07941525e-04,       2.48977711e-04, 1.61425945e-04, 7.38741801e-05, 4.69534144e-05,       2.00326487e-05, 1.24987004e-05, 4.96475215e-06, 3.04464007e-06,       1.12452798e-06, 6.78656885e-07, 2.32785786e-07, 1.38413341e-07,       4.40408960e-08, 2.58279429e-08, 7.61498987e-09, 4.40917555e-09,       1.20336122e-09, 6.88577891e-10, 1.73794564e-10, 9.83671882e-11,       2.29398124e-11, 1.28535587e-11, 2.76730504e-12, 1.53620093e-12])"]], "target_calc": [[16.0, "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"]], "@py_assert3": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert1": [[20.0, "None"]], "@py_assert4": [[23.0, "None"]], "@py_assert6": [[23.0, "None"]], "@py_assert8": [[26.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 453, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parse_access_method(access_method: str):\n    num_workers = 0\n    scheduler = \"threaded\"\n    download = access_method.startswith(\"download\")\n    local = access_method.startswith(\"local\")\n    if download or local:\n        split = access_method.split(\":\")\n        if len(split) == 1:\n            split.extend((\"threaded\", \"0\"))\n        elif len(split) == 2:\n            split.append(\"threaded\" if split[1].isnumeric() else \"0\")\n        elif len(split) >= 3:\n            num_integers = sum(1 for i in split if i.isnumeric())\n            if num_integers != 1 or len(split) > 3:\n                raise ValueError(\n                    \"Invalid access_method format. Expected format is one of the following: {download, download:scheduler, download:num_workers, download:scheduler:num_workers, download:num_workers:scheduler}\"\n                )\n\n        access_method = \"download\" if download else \"local\"\n        num_worker_index = 1 if split[1].isnumeric() else 2\n        scheduler_index = 3 - num_worker_index\n        num_workers = int(split[num_worker_index])\n        scheduler = split[scheduler_index]\n    return access_method, num_workers, scheduler\n\nparse_access_method(access_method='download')", "Selected Statement": "scheduler_index = 3 - num_worker_index", "Function Input": {"access_method": "'download'"}, "Variable Values Before Statement": {"num_worker_index": "2"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"access_method": [[1, "'download'"]], "num_workers": [[2.0, "0"]], "scheduler": [[3.0, "'threaded'"]], "download": [[4.0, "True"]], "local": [[5.0, "False"]], "split": [[7.0, "['download']"], [9.0, "['download', 'threaded', '0']"]], "num_worker_index": [[20.0, "2"]], "scheduler_index": [[21.0, "1"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 454, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def serialize_chunkids(version: str, arr: np.ndarray) -> memoryview:\n    \"\"\"Serializes chunk ID encoders into a single byte stream. This is how the encoders will be written to the storage provider.\n\n    Args:\n        version: (str) Version of deeplake library.\n        arr: (np.ndarray) Encoded chunk ids from a `ChunkIdEncoder` instance.\n\n    Returns:\n        Serialized chunk ids as memoryview.\n    \"\"\"\n    len_version = len(version)\n    write_dtype = version_compare(version, \"2.7.6\") >= 0\n    flatbuff = bytearray(1 + int(write_dtype) + len_version + arr.nbytes)\n\n    # Write version\n    len_version = len(version)\n    flatbuff[0] = len_version\n    flatbuff[1 : 1 + len_version] = version.encode(\"ascii\")\n    offset = 1 + len_version\n\n    # write encoder dtype\n    if write_dtype:\n        dtype = arr.dtype\n        num_bytes = int(dtype.itemsize)\n        flatbuff[offset] = num_bytes\n        offset += 1\n\n    # Write ids\n    flatbuff[offset : offset + arr.nbytes] = arr.tobytes()\n    offset += arr.nbytes\n    return memoryview(flatbuff)\n\nserialize_chunkids(version='3.8.18', arr=array([], shape=(0, 2), dtype=uint64))", "Selected Statement": "offset = 1 + len_version", "Function Input": {"version": "'3.8.18'", "arr": "array([], shape=(0, 2), dtype=uint64)"}, "Variable Values Before Statement": {"len_version": "6"}, "Value After Statement Execution": "7", "Variable States During Runtime": {"version": [[1, "'3.8.18'"]], "arr": [[1, "array([], shape=(0, 2), dtype=uint64)"]], "len_version": [[11.0, "6"]], "write_dtype": [[12.0, "True"]], "flatbuff": [[13.0, "bytearray(b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [17.0, "bytearray(b'\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00')"], [18.0, "bytearray(b'\\x063.8.18\\x00')"], [25.0, "bytearray(b'\\x063.8.18\\x08')"]], "offset": [[19.0, "7"], [26.0, "8"]], "dtype": [[23.0, "dtype('uint64')"]], "num_bytes": [[24.0, "8"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 455, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def rolling_mean_by_h(x, h, w, name):\n    \"\"\"Compute a rolling mean of x, after first aggregating by h.\n\n    Right-aligned. Computes a single mean for each unique value of h. Each\n    mean is over at least w samples.\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling mean of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    df2 = (\n        df.groupby('h').agg(['sum', 'count']).reset_index().sort_values('h')\n    )\n    xs = df2['x']['sum'].values\n    ns = df2['x']['count'].values\n    hs = df2.h.values\n\n    trailing_i = len(df2) - 1\n    x_sum = 0\n    n_sum = 0\n    # We don't know output size but it is bounded by len(df2)\n    res_x = np.empty(len(df2))\n\n    # Start from the right and work backwards\n    for i in range(len(df2) - 1, -1, -1):\n        x_sum += xs[i]\n        n_sum += ns[i]\n        while n_sum >= w:\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise weight the mean by the difference\n            excess_n = n_sum - w\n            excess_x = excess_n * xs[i] / ns[i]\n            res_x[trailing_i] = (x_sum - excess_x)/ w\n            x_sum -= xs[trailing_i]\n            n_sum -= ns[trailing_i]\n            trailing_i -= 1\n\n    res_h = hs[(trailing_i + 1):]\n    res_x = res_x[(trailing_i + 1):]\n\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_mean_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "trailing_i = len(df2) - 1", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "9", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[19.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "df2": [[20.0, "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"]], "xs": [[23.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "ns": [[24.0, "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]], "hs": [[25.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "trailing_i": [[27.0, "9"], [45.0, "8"], [45.0, "7"], [45.0, "6"], [45.0, "5"], [45.0, "4"], [45.0, "3"], [45.0, "2"], [45.0, "1"], [45.0, "0"], [45.0, "-1"]], "x_sum": [[28.0, "0"], [35.0, "9"], [43.0, "0"], [35.0, "8"], [43.0, "0"], [35.0, "7"], [43.0, "0"], [35.0, "6"], [43.0, "0"], [35.0, "5"], [43.0, "0"], [35.0, "4"], [43.0, "0"], [35.0, "3"], [43.0, "0"], [35.0, "2"], [43.0, "0"], [35.0, "1"], [43.0, "0"]], "n_sum": [[29.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"]], "res_x": [[31.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 4.4e-323])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 4.0e+000, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.e+000, 5.e-324, 1.e-323, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0.e+000, 5.e-324, 2.e+000, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"]], "i": [[34.0, "9"], [34.0, "8"], [34.0, "7"], [34.0, "6"], [34.0, "5"], [34.0, "4"], [34.0, "3"], [34.0, "2"], [34.0, "1"], [34.0, "0"]], "excess_n": [[40.0, "0"]], "excess_x": [[41.0, "0.0"]], "res_h": [[47.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 456, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def rolling_median_by_h(x, h, w, name):\n    \"\"\"Compute a rolling median of x, after first aggregating by h.\n\n    Right-aligned. Computes a single median for each unique value of h. Each\n    median is over at least w samples.\n\n    For each h where there are fewer than w samples, we take samples from the previous h,\n    moving backwards. (In other words, we ~ assume that the x's are shuffled within each h.)\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling median of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    grouped = df.groupby('h')\n    df2 = grouped.size().reset_index().sort_values('h')\n    hs = df2['h']\n\n    res_h = []\n    res_x = []\n    # Start from the right and work backwards\n    i = len(hs) - 1\n    while i >= 0:\n        h_i = hs[i]\n        xs = grouped.get_group(h_i).x.tolist()\n\n        # wrap in array so this works if h is pandas Series with custom index or numpy array\n        next_idx_to_add = np.array(h == h_i).argmax() - 1\n        while (len(xs) < w) and (next_idx_to_add >= 0):\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise just enough to get to w.\n            xs.append(x[next_idx_to_add])\n            next_idx_to_add -= 1\n        if len(xs) < w:\n            # Ran out of points before getting enough.\n            break\n        res_h.append(hs[i])\n        res_x.append(np.median(xs))\n        i -= 1\n    res_h.reverse()\n    res_x.reverse()\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_median_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "i = len(hs) - 1", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "9", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[22.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "grouped": [[23.0, "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x7ff75ca12880>"]], "df2": [[24.0, "   h  00  0  11  1  12  2  13  3  14  4  15  5  16  6  17  7  18  8  19  9  1"]], "hs": [[25.0, "0    01    12    23    34    45    56    67    78    89    9Name: h, dtype: int64"]], "res_h": [[27.0, "[]"], [45.0, "[9]"], [45.0, "[9, 8]"], [45.0, "[9, 8, 7]"], [45.0, "[9, 8, 7, 6]"], [45.0, "[9, 8, 7, 6, 5]"], [45.0, "[9, 8, 7, 6, 5, 4]"], [45.0, "[9, 8, 7, 6, 5, 4, 3]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1]"], [45.0, "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"], [48.0, "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"]], "res_x": [[28.0, "[]"], [46.0, "[9.0]"], [46.0, "[9.0, 8.0]"], [46.0, "[9.0, 8.0, 7.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0]"], [46.0, "[9.0, 8.0, 7.0, 6.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0]"], [49.0, "[0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]"]], "i": [[30.0, "9"], [47.0, "8"], [47.0, "7"], [47.0, "6"], [47.0, "5"], [47.0, "4"], [47.0, "3"], [47.0, "2"], [47.0, "1"], [47.0, "0"], [47.0, "-1"]], "h_i": [[32.0, "9"], [32.0, "8"], [32.0, "7"], [32.0, "6"], [32.0, "5"], [32.0, "4"], [32.0, "3"], [32.0, "2"], [32.0, "1"], [32.0, "0"]], "xs": [[33.0, "[9]"], [33.0, "[8]"], [33.0, "[7]"], [33.0, "[6]"], [33.0, "[5]"], [33.0, "[4]"], [33.0, "[3]"], [33.0, "[2]"], [33.0, "[1]"], [33.0, "[0]"]], "next_idx_to_add": [[36.0, "8"], [36.0, "7"], [36.0, "6"], [36.0, "5"], [36.0, "4"], [36.0, "3"], [36.0, "2"], [36.0, "1"], [36.0, "0"], [36.0, "-1"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 457, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def glob_absolute_paths(file: Union[str, Path]) -> List[Path]:\n            path = Path(file)\n            if not path.is_absolute():\n                path = base / path\n            return sorted(path.parent.glob(path.name), key=lambda p: p.stem)\n\nglob_absolute_paths(file='aggrid.js', base=PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements'))", "Selected Statement": "path = base / path", "Function Input": {"file": "'aggrid.js'", "base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"}, "Variable Values Before Statement": {"base": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')", "path": "PosixPath('aggrid.js')"}, "Value After Statement Execution": "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')", "Variable States During Runtime": {"file": [[1, "'aggrid.js'"]], "base": [[1, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements')"]], "path": [[2.0, "PosixPath('aggrid.js')"], [4.0, "PosixPath('/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/zauberzeug+nicegui/zauberzeug+nicegui/nicegui/elements/aggrid.js')"]]}, "Program Information": "Project Name: zauberzeug+nicegui", "idx": 458, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def ios_screenshot(args: list = None) -> None:\n    \"\"\"\n        Take an iOS screenshot.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: ios ui screenshot <local png destination>', bold=True)\n        return\n\n    destination = args[0]\n\n    if not destination.endswith('.png'):\n        destination = destination + '.png'\n\n    api = state_connection.get_api()\n    png = api.ios_ui_screenshot()\n\n    with open(destination, 'wb') as f:\n        f.write(png)\n\n    click.secho('Screenshot saved to: {0}'.format(destination), fg='green')\n\nios_screenshot(args=['foo'])", "Selected Statement": "destination = destination + '.png'", "Function Input": {"args": "['foo']"}, "Variable Values Before Statement": {"destination": "'foo'"}, "Value After Statement Execution": "'foo.png'", "Variable States During Runtime": {"args": [[1, "['foo']"]], "destination": [[13.0, "'foo'"], [16.0, "'foo.png'"]], "api": [[18.0, "<MagicMock name='get_api()' id='140041828273504'>"]], "png": [[19.0, "b'\\x00'"]], "f": [[21.0, "<MagicMock name='open().__enter__()' id='140041828431664'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 459, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def aes(text, key):\n    pad = 16 - len(text) % 16\n    text = text + bytearray([pad] * pad)\n    encryptor = AES.new(key, 2, b\"0102030405060708\")\n    ciphertext = encryptor.encrypt(text)\n    return base64.b64encode(ciphertext)\n\naes(text=b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}', key=b'0CoJUm6Qyw8W8jud')", "Selected Statement": "pad = 16 - len(text) % 16", "Function Input": {"text": "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'", "key": "b'0CoJUm6Qyw8W8jud'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "15", "Variable States During Runtime": {"text": [[1, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}'"], [3.0, "b'{\"ids\": [347230, 496619464, 405998841, 28012031], \"br\": 320000, \"csrf_token\": \"\"}\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f\\x0f'"]], "key": [[1, "b'0CoJUm6Qyw8W8jud'"]], "pad": [[2.0, "15"]], "encryptor": [[4.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>, <bound method CbcMode.decrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"], [5.0, "{_state=<Cryptodome.Util._raw_api.SmartPointer object at 0x7f925764db80>, block_size=16, iv=b'0102030405060708', IV=b'0102030405060708', _next=[<bound method CbcMode.encrypt of <Cryptodome.Cipher._mode_cbc.CbcMode object at 0x7f925764dd60>>]}"]], "ciphertext": [[5.0, "b'}8(\\n\\x91;\\xe9\\xca\\x03\\x0b+\\xc3\\xb6\\xb5\\xef\\xc2\\x06\\x0e\\xae?i\\xd3\\x1d\\xd2b\\x9d\\x1c\\xea\\x80\\xf9v\\x1c\\xac{\\x06\\xa2YS*\\xfd\\xbc\\xf6*\\x8fZS\\x12\\xec\\xe8yZ\\x06\\x19d\\x96\\xb6E`\\x11G\\x01V\\xcf\\xa7\\xcf\\xbd\\x90{VxT\\xe3\\x1c\\xc4!\\x96,p3\\xffK\\xc7g\\x17\\xfc\\x0c\\x11\\xdf\\\\\\xff\\xa8\\x84,\\x85j\\x12'"]]}, "Program Information": "Project Name: darknessomi+musicbox", "idx": 460, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def test_generate(monkeypatch, generated, stop_tokens, expected):\n    import chat.base as chat\n    import generate.base as generate\n\n    input_idx = torch.tensor([5, 3])\n    max_returned_tokens = len(input_idx) + 8\n    model = MagicMock()\n    model.config.block_size = 100\n    model.max_seq_length = 100\n    it = iter(generated)\n\n    def multinomial(*_, **__):\n        out = next(it)\n        return torch.tensor([out])\n\n    monkeypatch.setattr(generate, \"multinomial_num_samples_1\", multinomial)\n    actual = chat.generate(model, input_idx, max_returned_tokens, stop_tokens=stop_tokens)\n    actual = list(actual)\n\n    assert len(actual) == len(expected)\n    if not actual:\n        assert actual == expected\n    else:\n        for t in actual:\n            assert t.dtype == torch.long\n        assert torch.cat(actual).tolist() == expected\n\ntest_generate(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, generated=repeat(1), stop_tokens=(), expected=[1, 1, 1, 1, 1, 1, 1, 1])", "Selected Statement": "max_returned_tokens = len(input_idx) + 8", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "generated": "repeat(1)", "stop_tokens": "()", "expected": "[1, 1, 1, 1, 1, 1, 1, 1]"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "10", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [16.0, "{_setattr=[(<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>, 'multinomial_num_samples_1', <function multinomial_num_samples_1 at 0x7f805238a160>)], _setitem=[], _cwd=None, _savesyspath=None}"]], "generated": [[1, "repeat(1)"]], "stop_tokens": [[1, "()"]], "expected": [[1, "[1, 1, 1, 1, 1, 1, 1, 1]"]], "chat": [[2.0, "<module 'chat.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/chat/base.py'>"]], "generate": [[3.0, "<module 'generate.base' from '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/Lightning-AI+lit-gpt/Lightning-AI+lit-gpt/generate/base.py'>"]], "input_idx": [[5.0, "tensor([5, 3])"]], "max_returned_tokens": [[6.0, "10"]], "model": [[7.0, "<MagicMock id='140188337253248'>"]], "it": [[10.0, "repeat(1)"]], "multinomial": [[12.0, "<function test_generate.<locals>.multinomial at 0x7f7fd0f7e430>"]], "actual": [[17.0, "<generator object generate at 0x7f803c55ff90>"], [18.0, "[tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1]), tensor([1])]"]], "@py_assert2": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert4": [[20.0, "None"]], "t": [[24.0, "tensor([1])"]], "@py_assert1": [[25.0, "None"]], "@py_assert5": [[25.0, "None"]], "@py_assert3": [[25.0, "None"]], "@py_assert6": [[26.0, "None"]], "@py_assert8": [[26.0, "None"]], "@py_assert10": [[26.0, "None"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 461, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def rowcol_to_a1(row, col):\n    \"\"\"Translates a row and column cell address to A1 notation.\n\n    :param row: The row of the cell to be converted.\n        Rows start at index 1.\n    :type row: int, str\n\n    :param col: The column of the cell to be converted.\n        Columns start at index 1.\n    :type row: int, str\n\n    :returns: a string containing the cell's coordinates in A1 notation.\n\n    Example:\n\n    >>> rowcol_to_a1(1, 1)\n    A1\n\n    \"\"\"\n    row = int(row)\n    col = int(col)\n\n    if row < 1 or col < 1:\n        raise IncorrectCellLabel(\"({}, {})\".format(row, col))\n\n    div = col\n    column_label = \"\"\n\n    while div:\n        (div, mod) = divmod(div, 26)\n        if mod == 0:\n            mod = 26\n            div -= 1\n        column_label = chr(mod + MAGIC_NUMBER) + column_label\n\n    label = \"{}{}\".format(column_label, row)\n\n    return label\n\nrowcol_to_a1(row=4, col=4)", "Selected Statement": "column_label = chr(mod + MAGIC_NUMBER) + column_label", "Function Input": {"row": "4", "col": "4"}, "Variable Values Before Statement": {"column_label": "''"}, "Value After Statement Execution": "'D'", "Variable States During Runtime": {"row": [[1, "4"]], "col": [[1, "4"]], "div": [[26.0, "4"], [30.0, "0"]], "column_label": [[27.0, "''"], [34.0, "'D'"]], "mod": [[30.0, "4"]], "label": [[36.0, "'D4'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 462, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def fill_gaps(L, rows=None, cols=None, padding_value=\"\"):\n    \"\"\"Fill gaps in a list of lists.\n    e.g.,::\n\n        >>> L = [\n        ... [1, 2, 3],\n        ... ]\n        >>> fill_gaps(L, 2, 4)\n        [\n            [1, 2, 3, \"\"],\n            [\"\", \"\", \"\", \"\"]\n        ]\n\n    :param L: List of lists to fill gaps in.\n    :param rows: Number of rows to fill.\n    :param cols: Number of columns to fill.\n    :param padding_value: Default value to fill gaps with.\n\n    :type L: list[list[T]]\n    :type rows: int\n    :type cols: int\n    :type padding_value: T\n\n    :return: List of lists with gaps filled.\n    :rtype: list[list[T]]:\n    \"\"\"\n    try:\n        max_cols = max(len(row) for row in L) if cols is None else cols\n        max_rows = len(L) if rows is None else rows\n\n        pad_rows = max_rows - len(L)\n\n        if pad_rows:\n            L = L + ([[]] * pad_rows)\n\n        return [rightpad(row, max_cols, padding_value=padding_value) for row in L]\n    except ValueError:\n        return []\n\nfill_gaps(L=[['', 'Dummy']], rows=None, cols=None, padding_value='')", "Selected Statement": "pad_rows = max_rows - len(L)", "Function Input": {"L": "[['', 'Dummy']]", "rows": "None", "cols": "None", "padding_value": "''"}, "Variable Values Before Statement": {"max_rows": "1"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"L": [[1, "[['', 'Dummy']]"]], "rows": [[1, "None"]], "cols": [[1, "None"]], "padding_value": [[1, "''"]], "max_cols": [[28.0, "2"]], "max_rows": [[29.0, "1"]], "pad_rows": [[31.0, "0"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 463, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def render_pep440_feature(pieces):\n    \"\"\"Build up version string, used within \"feature\" branch of repository.\n\n    Our goal: MERGE-POINT.post.devN+gHEX.BRANCH-NAME.M[.dirty]\n        +) MERGE-POINT = Most recent common ancestor for `develop` and `master`\n          *) Does not yet handle branch from `release-*`\n        +) N = DISTANCE from the MERGE-POINT of `develop` and `master`\n        +) M = DISTANCE from the MERGE-POINT of \"feature\" and `develop`\n\n    Exceptions:\n    1: no tags. 0.post.devDISTANCE+gHEX[.dirty]\n    \"\"\"\n    if pieces[\"closest-tag\"] and pieces[\"develop\"]:\n        rendered = pieces[\"closest-tag\"]\n        distance_to_develop = pieces[\"distance-to-develop\"]\n        distance_to_merge = pieces[\"distance-to-master\"]\n        distance_merge_to_tag = (pieces[\"distance\"] - distance_to_merge)\n        distance_dev_to_merge = (distance_to_merge - distance_to_develop)\n        if (distance_merge_to_tag > 0):\n            rendered += \".%d\" % distance_merge_to_tag\n        rendered += \".post.dev%d\" % distance_dev_to_merge\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n        rendered += \".%s\" % pieces[\"branch\"]\n        rendered += \".%d\" % distance_to_develop\n    else:\n        # exception #1\n        rendered = \"0.post.dev%d\" % (pieces[\"distance\"] - 1)\n        rendered += plus_or_dot(pieces)\n        rendered += \"g%s\" % pieces[\"short\"]\n    if pieces[\"dirty\"]:\n        rendered += \".dirty\"\n    return rendered\n\nrender_pep440_feature(pieces={'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']})", "Selected Statement": "rendered = \"0.post.dev%d\" % (pieces[\"distance\"] - 1)", "Function Input": {"pieces": "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "'0.post.dev2'", "Variable States During Runtime": {"pieces": [[1, "{'long': 'e60d005d389cb31b6e99f937e35adbe3fccb7aaf', 'short': 'e60d005', 'error': None, 'dirty': False, 'closest-tag': '0.8', 'distance': 3, 'branch': 'HEAD', 'distance-to-master': 0, 'develop': None, 'distance-to-develop': None, 'date': '2018-05-05T22:17:58-0700', 'authors': ['Padraic Shafer']}"]], "rendered": [[28.0, "'0.post.dev2'"], [29.0, "'0.post.dev2+'"], [30.0, "'0.post.dev2+ge60d005'"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 464, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def compute_loc(idx, shape):\n    loc = [0] * len(shape)\n    for i in range(len(shape)):\n        prod = int(np.prod(shape[i + 1:]))\n        loc[i] = idx // prod\n        idx = idx % prod\n    return tuple(loc)\n\ncompute_loc(idx=0, shape=(2, 4))", "Selected Statement": "loc = [0] * len(shape)", "Function Input": {"idx": "0", "shape": "(2, 4)"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[0, 0]", "Variable States During Runtime": {"idx": [[1, "0"]], "shape": [[1, "(2, 4)"]], "loc": [[2.0, "[0, 0]"]], "i": [[3.0, "0"], [3.0, "1"]], "prod": [[4.0, "4"], [4.0, "1"]]}, "Program Information": "Project Name: Cjkkkk+Pyflow", "idx": 465, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def __build_func(verb, args, kwargs={}):\n        params = ['self']\n        params += ['%s' % stringcase.snakecase(k) for k in args]\n        params += ['%s=%s' % (stringcase.snakecase(k), v) for k, v in kwargs.items()]\n        largs = list(args) + list(kwargs.keys())\n        return eval(\n            'lambda %s: self._%s(%s)' % (\n                ','.join(params), verb, ','.join(['%s=%s' % (k, stringcase.snakecase(k)) for k in largs])\n            )\n        )\n\n__build_func(verb='get', args=[], kwargs={})", "Selected Statement": "largs = list(args) + list(kwargs.keys())", "Function Input": {"verb": "'get'", "args": "[]", "kwargs": "{}"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[]", "Variable States During Runtime": {"verb": [[1, "'get'"]], "args": [[1, "[]"]], "kwargs": [[1, "{}"]], "params": [[2.0, "['self']"]], "largs": [[5.0, "[]"]]}, "Program Information": "Project Name: alisaifee+pyutrack", "idx": 466, "quantized value": "Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def bits2octets(data, order):\n    z1 = bits2int(data, bit_length(order))\n    z2 = z1 - order\n\n    if z2 < 0:\n        z2 = z1\n\n    return number_to_string_crop(z2, order)\n\nbits2octets(data=b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee', order=115792089237316195423570985008687907852837564279074904382605163141518161494337)", "Selected Statement": "z2 = z1 - order", "Function Input": {"data": "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Variable Values Before Statement": {"z1": "75648987130760998095283026105289635390775519882394219481699348731002280779365", "order": "115792089237316195423570985008687907852837564279074904382605163141518161494337"}, "Value After Statement Execution": "-40143102106555197328287958903398272462062044396680684900905814410515880714972", "Variable States During Runtime": {"data": [[1, "b'\\xa7?\\xcf3\\x96@\\x92\\x92\\x07(\\x1f\\xb8\\xe08\\x88H\\x06\\xe2\\xeb\\x08@\\xf2$V\\x94\\xdb\\xba\\x1d\\\\\\xc8\\x9ee'"]], "order": [[1, "115792089237316195423570985008687907852837564279074904382605163141518161494337"]], "z1": [[2.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]], "z2": [[3.0, "-40143102106555197328287958903398272462062044396680684900905814410515880714972"], [6.0, "75648987130760998095283026105289635390775519882394219481699348731002280779365"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 467, "quantized value": "Negative Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def __str__(self):\n        self.reduce()\n        sign = '-' if self.integer < 0 else ''\n        integer_array = list(str(abs(self.integer)).rjust(self.decimals, '0'))\n        index = len(integer_array) - self.decimals\n        if index == 0:\n            item = '0.'\n        elif self.decimals < 0:\n            item = '0' * (-self.decimals)\n        elif self.decimals == 0:\n            item = ''\n        else:\n            item = '.'\n        integer_array.insert(index, item)\n        return sign + ''.join(integer_array)\n\n__str__(self=Precise(1393.938), self.base=10, self.decimals=3, self.integer=1393938)", "Selected Statement": "index = len(integer_array) - self.decimals", "Function Input": {"self": "Precise(1393.938)", "self.base": "10", "self.decimals": "3", "self.integer": "1393938"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "4", "Variable States During Runtime": {"self": [[1, "Precise(1393.938)"]], "self.base": [[1, "10"]], "self.decimals": [[1, "3"]], "self.integer": [[1, "1393938"]], "sign": [[3.0, "''"]], "integer_array": [[4.0, "['1', '3', '9', '3', '9', '3', '8']"], [14.0, "['1', '3', '9', '3', '.', '9', '3', '8']"]], "index": [[5.0, "4"]], "item": [[13.0, "'.'"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 468, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def div(self, other, precision=18):\n        distance = precision - self.decimals + other.decimals\n        if distance == 0:\n            numerator = self.integer\n        elif distance < 0:\n            exponent = self.base ** -distance\n            numerator = self.integer // exponent\n        else:\n            exponent = self.base ** distance\n            numerator = self.integer * exponent\n        result, mod = divmod(numerator, other.integer)\n        # python floors negative numbers down instead of truncating\n        # if mod is zero it will be floored to itself so we do not add one\n        result = result + 1 if result < 0 and mod else result\n        return Precise(result, precision)\n\ndiv(self=Precise(0.00000002), other=Precise(69696900000), precision=1, self.base=10, self.decimals=8, self.integer=2)", "Selected Statement": "distance = precision - self.decimals + other.decimals", "Function Input": {"self": "Precise(0.00000002)", "other": "Precise(69696900000)", "precision": "1", "self.base": "10", "self.decimals": "8", "self.integer": "2"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "-12", "Variable States During Runtime": {"self": [[1, "Precise(0.00000002)"]], "other": [[1, "Precise(69696900000)"]], "precision": [[1, "1"]], "self.base": [[1, "10"]], "self.decimals": [[1, "8"]], "self.integer": [[1, "2"]], "distance": [[2.0, "-12"]], "exponent": [[6.0, "1000000000000"]], "numerator": [[7.0, "0"]], "result": [[11.0, "0"]], "mod": [[11.0, "0"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 469, "quantized value": "Negative Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _get_channels(self, mode, width_mult):\n        if mode == \"small\":\n            channels = [16, 16, 24, 48, 576]\n        else:\n            channels = [16, 24, 40, 112, 960]\n        channels = [\n            3,\n        ] + [_make_divisible(x * width_mult) for x in channels]\n        return tuple(channels)\n\n_get_channels(self=MobileNetV3Encoder(), mode='large', width_mult=0.75, self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._depth=3, self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._mode='large', self._modules=OrderedDict(), self._non_persistent_buffers_set=set(), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.training=True)", "Selected Statement": "channels = [", "Function Input": {"self": "MobileNetV3Encoder()", "mode": "'large'", "width_mult": "0.75", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._depth": "3", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._mode": "'large'", "self._modules": "OrderedDict()", "self._non_persistent_buffers_set": "set()", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.training": "True"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[3, 16, 24, 32, 88, 720]", "Variable States During Runtime": {"self": [[1, "MobileNetV3Encoder()"]], "mode": [[1, "'large'"]], "width_mult": [[1, "0.75"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._depth": [[1, "3"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._mode": [[1, "'large'"]], "self._modules": [[1, "OrderedDict()"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.training": [[1, "True"]], "channels": [[5.0, "[16, 24, 40, 112, 960]"], [6.0, "[3, 16, 24, 32, 88, 720]"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 470, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _make_stage(self, planes: int, num_blocks: int, num_se_blocks: int) -> nn.Sequential:\n        \"\"\"Build a stage of MobileOne model.\n\n        :param planes: Number of output channels.\n        :param num_blocks: Number of blocks in this stage.\n        :param num_se_blocks: Number of SE blocks in this stage.\n        :return: A stage of MobileOne model.\n        \"\"\"\n        # Get strides for all layers\n        strides = [2] + [1] * (num_blocks - 1)\n        blocks = []\n        for ix, stride in enumerate(strides):\n            use_se = False\n            if num_se_blocks > num_blocks:\n                raise ValueError(\"Number of SE blocks cannot \" \"exceed number of layers.\")\n            if ix >= (num_blocks - num_se_blocks):\n                use_se = True\n\n            # Depthwise conv\n            blocks.append(\n                MobileOneBlock(\n                    in_channels=self.in_planes,\n                    out_channels=self.in_planes,\n                    kernel_size=3,\n                    stride=stride,\n                    padding=1,\n                    groups=self.in_planes,\n                    inference_mode=self.inference_mode,\n                    use_se=use_se,\n                    num_conv_branches=self.num_conv_branches,\n                )\n            )\n            # Pointwise conv\n            blocks.append(\n                MobileOneBlock(\n                    in_channels=self.in_planes,\n                    out_channels=planes,\n                    kernel_size=1,\n                    stride=1,\n                    padding=0,\n                    groups=1,\n                    inference_mode=self.inference_mode,\n                    use_se=use_se,\n                    num_conv_branches=self.num_conv_branches,\n                )\n            )\n            self.in_planes = planes\n            self.cur_layer_idx += 1\n        return nn.Sequential(*blocks)\n\n_make_stage(self=MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), planes=48, num_blocks=2, num_se_blocks=0, self._backward_hooks=OrderedDict(), self._backward_pre_hooks=OrderedDict(), self._buffers=OrderedDict(), self._depth=3, self._forward_hooks=OrderedDict(), self._forward_hooks_always_called=OrderedDict(), self._forward_hooks_with_kwargs=OrderedDict(), self._forward_pre_hooks=OrderedDict(), self._forward_pre_hooks_with_kwargs=OrderedDict(), self._in_channels=3, self._is_full_backward_hook=None, self._load_state_dict_post_hooks=OrderedDict(), self._load_state_dict_pre_hooks=OrderedDict(), self._modules=OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))]), self._non_persistent_buffers_set=set(), self._out_channels=(3, 48, 48, 128, 256, 1024), self._parameters=OrderedDict(), self._state_dict_hooks=OrderedDict(), self._state_dict_pre_hooks=OrderedDict(), self.cur_layer_idx=1, self.in_planes=48, self.inference_mode=False, self.num_conv_branches=4, self.training=True, self.use_se=False)", "Selected Statement": "strides = [2] + [1] * (num_blocks - 1)", "Function Input": {"self": "MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))", "planes": "48", "num_blocks": "2", "num_se_blocks": "0", "self._backward_hooks": "OrderedDict()", "self._backward_pre_hooks": "OrderedDict()", "self._buffers": "OrderedDict()", "self._depth": "3", "self._forward_hooks": "OrderedDict()", "self._forward_hooks_always_called": "OrderedDict()", "self._forward_hooks_with_kwargs": "OrderedDict()", "self._forward_pre_hooks": "OrderedDict()", "self._forward_pre_hooks_with_kwargs": "OrderedDict()", "self._in_channels": "3", "self._is_full_backward_hook": "None", "self._load_state_dict_post_hooks": "OrderedDict()", "self._load_state_dict_pre_hooks": "OrderedDict()", "self._modules": "OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))])", "self._non_persistent_buffers_set": "set()", "self._out_channels": "(3, 48, 48, 128, 256, 1024)", "self._parameters": "OrderedDict()", "self._state_dict_hooks": "OrderedDict()", "self._state_dict_pre_hooks": "OrderedDict()", "self.cur_layer_idx": "1", "self.in_planes": "48", "self.inference_mode": "False", "self.num_conv_branches": "4", "self.training": "True", "self.use_se": "False"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "[2, 1]", "Variable States During Runtime": {"self": [[1, "MobileOne(  (stage0): MobileOneBlock(    (se): Identity()    (activation): ReLU()    (rbr_conv): ModuleList(      (0): Sequential(        (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)        (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)      )    )    (rbr_scale): Sequential(      (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))"]], "planes": [[1, "48"]], "num_blocks": [[1, "2"]], "num_se_blocks": [[1, "0"]], "self._backward_hooks": [[1, "OrderedDict()"]], "self._backward_pre_hooks": [[1, "OrderedDict()"]], "self._buffers": [[1, "OrderedDict()"]], "self._depth": [[1, "3"]], "self._forward_hooks": [[1, "OrderedDict()"]], "self._forward_hooks_always_called": [[1, "OrderedDict()"]], "self._forward_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._forward_pre_hooks": [[1, "OrderedDict()"]], "self._forward_pre_hooks_with_kwargs": [[1, "OrderedDict()"]], "self._in_channels": [[1, "3"]], "self._is_full_backward_hook": [[1, "None"]], "self._load_state_dict_post_hooks": [[1, "OrderedDict()"]], "self._load_state_dict_pre_hooks": [[1, "OrderedDict()"]], "self._modules": [[1, "OrderedDict([('stage0', MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0): Sequential(      (conv): Conv2d(3, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(3, 48, kernel_size=(1, 1), stride=(2, 2), bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )))])"]], "self._non_persistent_buffers_set": [[1, "set()"]], "self._out_channels": [[1, "(3, 48, 48, 128, 256, 1024)"]], "self._parameters": [[1, "OrderedDict()"]], "self._state_dict_hooks": [[1, "OrderedDict()"]], "self._state_dict_pre_hooks": [[1, "OrderedDict()"]], "self.cur_layer_idx": [[1, "1"], [48.0, "2"], [48.0, "3"]], "self.in_planes": [[1, "48"]], "self.inference_mode": [[1, "False"]], "self.num_conv_branches": [[1, "4"]], "self.training": [[1, "True"]], "self.use_se": [[1, "False"]], "strides": [[10.0, "[2, 1]"]], "blocks": [[11.0, "[]"], [20.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ))]"], [34.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))]"], [20.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  ))]"], [34.0, "[MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(2, 2), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=48, bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  )  (rbr_scale): Sequential(    (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), groups=48, bias=False)    (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  )), MobileOneBlock(  (se): Identity()  (activation): ReLU()  (rbr_skip): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)  (rbr_conv): ModuleList(    (0-3): 4 x Sequential(      (conv): Conv2d(48, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)      (bn): BatchNorm2d(48, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)    )  ))]"]], "ix": [[12.0, "0"], [12.0, "1"]], "stride": [[12.0, "2"], [12.0, "1"]], "use_se": [[13.0, "False"]]}, "Program Information": "Project Name: qubvel+segmentation_models.pytorch", "idx": 471, "quantized value": "Non-Empty List", "mapping_info": {"len(value) == 0": "Empty List", "len(value) > 0": "Non-Empty List"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _to_str(size, suffixes, base):\n    # type: (SupportsInt, Iterable[Text], int) -> Text\n    try:\n        size = int(size)\n    except ValueError:\n        raise TypeError(\"filesize requires a numeric value, not {!r}\".format(size))\n    if size == 1:\n        return \"1 byte\"\n    elif size < base:\n        return \"{:,} bytes\".format(size)\n\n    for i, suffix in enumerate(suffixes, 2):\n        unit = base ** i\n        if size < unit:\n            break\n    return \"{:,.1f} {}\".format((base * size / unit), suffix)\n\n_to_str(size=1024, suffixes=('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'), base=1024)", "Selected Statement": "unit = base ** i", "Function Input": {"size": "1024", "suffixes": "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')", "base": "1024"}, "Variable Values Before Statement": {"base": "1024", "i": "2"}, "Value After Statement Execution": "1048576", "Variable States During Runtime": {"size": [[1, "1024"]], "suffixes": [[1, "('KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB')"]], "base": [[1, "1024"]], "i": [[12.0, "2"]], "suffix": [[12.0, "'KiB'"]], "unit": [[13.0, "1048576"]]}, "Program Information": "Project Name: PyFilesystem+pyfilesystem2", "idx": 472, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def _insert(self, key, value):\n        flat_key = self._serialize_key(key)\n        i = self._index.get(flat_key, -1)\n        if i >= 0:\n            self._items[i] = (key, value)\n        else:\n            self._items.append((key, value))\n            self._index[flat_key] = len(self._items) - 1\n\n_insert(self=OrderedMapSerializedKey([]), key='みbob', value=199)", "Selected Statement": "self._index[flat_key] = len(self._items) - 1", "Function Input": {"self": "OrderedMapSerializedKey([])", "key": "'みbob'", "value": "199"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "199", "Variable States During Runtime": {"self": [[1, "OrderedMapSerializedKey([])"], [7.0, "OrderedMapSerializedKey([('みbob', 199)])"]], "key": [[1, "'みbob'"]], "value": [[1, "199"]], "flat_key": [[2.0, "b'\\xe3\\x81\\xbfbob'"]], "i": [[3.0, "-1"]], "self['みbob']": [[8.0, "199"]]}, "Program Information": "Project Name: YugaByte+cassandra-python-driver", "idx": 473, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def quat_from_axis_angle(axis, angle):\n        axis_ = np.array(axis, dtype=np.float64)\n        half_angle = angle * 0.5\n        ret = np.empty(4)\n        ret[0] = math.cos(half_angle)\n        ret[1:4] = math.sin(half_angle) * axis_\n        return ret\n\nquat_from_axis_angle(axis=[1.0, 0.0, 0.0], angle=6.1086523819801535)", "Selected Statement": "half_angle = angle * 0.5", "Function Input": {"axis": "[1.0, 0.0, 0.0]", "angle": "6.1086523819801535"}, "Variable Values Before Statement": {"angle": "6.1086523819801535"}, "Value After Statement Execution": "3.0543261909900767", "Variable States During Runtime": {"axis": [[1, "[1.0, 0.0, 0.0]"]], "angle": [[1, "6.1086523819801535"]], "axis_": [[2.0, "array([1., 0., 0.])"]], "half_angle": [[3.0, "3.0543261909900767"]], "ret": [[4.0, "array([4.65265954e-310, 0.00000000e+000, 1.58101007e-322, 6.90572610e-310])"], [5.0, "array([-9.96194698e-001,  0.00000000e+000,  1.58101007e-322,        6.90572610e-310])"], [6.0, "array([-0.9961947 ,  0.08715574,  0.        ,  0.        ])"]]}, "Program Information": "Project Name: Hasenpfote+fpq", "idx": 474, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def base64url_decode(input: Union[bytes, str]) -> bytes:\n    input_bytes = force_bytes(input)\n\n    rem = len(input_bytes) % 4\n\n    if rem > 0:\n        input_bytes += b\"=\" * (4 - rem)\n\n    return base64.urlsafe_b64decode(input_bytes)\n\nbase64url_decode(input='hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg')", "Selected Statement": "rem = len(input_bytes) % 4", "Function Input": {"input": "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "3", "Variable States During Runtime": {"input": [[1, "'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"]], "input_bytes": [[2.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg'"], [7.0, "b'hJtXIZ2uSN5kbQfbtTNWbpdmhkV8FJG-Onbc6mxCcYg='"]], "rem": [[4.0, "3"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 475, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def generate_samples_loguniform(low, high, step, base, size=1):\n    \"\"\"Generate sample for (discrete)uniform density.\"\"\"\n\n    samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))\n    if step:\n        samples = step * np.floor(samples / step)\n    return samples\n\ngenerate_samples_loguniform(low=5.8884365535558836e-08, high=2.6977394324449206e-07, step=None, base=10, size=100000)", "Selected Statement": "samples = base ** (random.uniform(low=logb(low, base), high=logb(high, base), size=size))", "Function Input": {"low": "5.8884365535558836e-08", "high": "2.6977394324449206e-07", "step": "None", "base": "10", "size": "100000"}, "Variable Values Before Statement": {"base": "10"}, "Value After Statement Execution": "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])", "Variable States During Runtime": {"low": [[1, "5.8884365535558836e-08"]], "high": [[1, "2.6977394324449206e-07"]], "step": [[1, "None"]], "base": [[1, "10"]], "size": [[1, "100000"]], "samples": [[4.0, "array([8.36400364e-08, 2.64090744e-07, 2.64351674e-07, ...,       6.02217873e-08, 1.13953435e-07, 8.52185827e-08])"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 476, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Arithmetic Assignment", "Source Code": "def parzen_estimator_build_posterior_parameter(parameter, observations):\n    \"\"\"TPE algorith transform a prior parameter into a posterior parameters using observations\n    to build posterior.\n    \"\"\"\n    posterior_parameter = None\n    parameter_values = [observation.sample[parameter.name] for observation in observations]\n    search_space = parameter.search_space\n    if parameter.category == \"categorical\":\n        \"\"\" TODO Compare mean (current implem) vs hyperopt approach.\"\"\"\n        prior_probabilities = np.array(search_space[\"probabilities\"])\n        posterior_probabilities = prior_probabilities\n        if len(parameter_values) != 0:\n            observed_probabilities = np.array([parameter_values.count(value)\n                                               for value in search_space[\"values\"]])\n            observed_probabilities = observed_probabilities / np.sum(observed_probabilities)\n            posterior_probabilities += observed_probabilities\n        posterior_probabilities /= sum(posterior_probabilities)\n\n        # Build param\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"categorical\",\n                \"search_space\": {\n                    \"values\": search_space[\"values\"],\n                    \"probabilities\": list(posterior_probabilities),\n                }\n            }\n        )\n\n    if parameter.category in (\"uniform\", \"normal\", \"loguniform\", \"lognormal\"):\n        if parameter.category in (\"uniform\", \"loguniform\"):\n            prior_mu = 0.5 * (search_space[\"high\"] + search_space[\"low\"])\n            prior_sigma = (search_space[\"high\"] - search_space[\"low\"])\n        elif parameter.category in (\"normal\", \"lognormal\"):\n            prior_mu = search_space[\"mu\"]\n            prior_sigma = search_space[\"sigma\"]\n\n        # Mus\n        mus = np.sort(parameter_values + [prior_mu])\n\n        # Sigmas\n        # Trick to get for each mu the greater distance from left and right neighbor\n        # when low and high are not defined we use inf to get the only available distance\n        # (right neighbor for sigmas[0] and left for sigmas[-1])\n        tmp = np.concatenate(\n            (\n                [search_space.get(\"low\", np.inf)],\n                mus,\n                [search_space.get(\"high\", -np.inf)],\n            )\n        )\n        sigmas = np.maximum(tmp[1:-1] - tmp[0:-2], tmp[2:] - tmp[1:-1])\n\n        # Use formulas from hyperopt to clip sigmas\n        sigma_max_value = prior_sigma\n        sigma_min_value = prior_sigma / min(100.0, (1.0 + len(mus)))\n        sigmas = np.clip(sigmas, sigma_min_value, sigma_max_value)\n\n        # Fix prior sigma with correct value\n        sigmas[np.where(mus == prior_mu)[0]] = prior_sigma\n\n        posterior_parameter = Parameter.from_dict(\n            {\n                \"name\": parameter.name,\n                \"category\": \"mixture\",\n                \"search_space\": {\n                    \"parameters\": [\n                        {\n                            \"category\": \"normal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space.get(\"step\", None)\n                            }\n                        } if parameter.category[:3] != \"log\" else\n                        {\n                            \"category\": \"lognormal\",\n                            \"search_space\": {\n                                \"mu\": mu.tolist(),\n                                \"sigma\": sigma.tolist(),\n                                \"low\": search_space[\"low\"],\n                                \"high\": search_space[\"high\"],\n                                \"step\": search_space[\"step\"],\n                                \"base\": search_space[\"base\"],\n                            }\n                        } for mu, sigma in zip(mus, sigmas)\n                    ],\n                    \"weights\": [1 / len(mus) for _ in range(len(mus))]\n                }\n            }\n        )\n\n    return posterior_parameter\n\nparzen_estimator_build_posterior_parameter(parameter=x, observations=[])", "Selected Statement": "prior_mu = 0.5 * (search_space[\"high\"] + search_space[\"low\"])", "Function Input": {"parameter": "x", "observations": "[]"}, "Variable Values Before Statement": {}, "Value After Statement Execution": "1.5707963267948966", "Variable States During Runtime": {"parameter": [[1, "x"]], "observations": [[1, "[]"]], "posterior_parameter": [[5.0, "None"], [63.0, "x"]], "parameter_values": [[6.0, "[]"]], "search_space": [[7.0, "{'low': 0, 'high': 3.141592653589793, 'step': None}"]], "prior_mu": [[33.0, "1.5707963267948966"]], "prior_sigma": [[34.0, "3.141592653589793"]], "mus": [[40.0, "array([1.57079633])"]], "tmp": [[46.0, "array([0.        , 1.57079633, 3.14159265])"]], "sigmas": [[53.0, "array([1.57079633])"], [61.0, "array([3.14159265])"]], "sigma_max_value": [[56.0, "3.141592653589793"]], "sigma_min_value": [[57.0, "1.5707963267948966"]]}, "Program Information": "Project Name: Dreem-Organization+benderopt", "idx": 477, "quantized value": "Positive Regular", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_route_template(template):\n    rbuilder = [\"^\"]\n    fbuilder = []\n    position = 0\n    schema = {}\n\n    for match in template_var_re_finditer(template):\n        param_name = match.group(\"name\")\n        param_type = match.group(\"type\") or \"id\"\n        # TODO: Handle KeyError, maybe we want to use a custom error here.\n        param_formatchar, param_re, param_schema = _schema_map[param_type]\n        schema[param_name] = param_schema\n\n        rbuilder.append(re.escape(template[position:match.start()]))\n        rbuilder.append(param_re.format(param_name))\n\n        fbuilder.append(template[position:match.start()])\n        fbuilder.append(\"{\")\n        fbuilder.append(param_name)\n        fbuilder.append(\":\")\n        fbuilder.append(param_formatchar)\n        fbuilder.append(\"}\")\n\n        position = match.end()\n\n    rbuilder.append(re.escape(template[position:]))\n    rbuilder.append(\"$\")\n    fbuilder.append(template[position:])\n\n    return (valid.Schema(schema),\n            re.compile(\"\".join(rbuilder)),\n            u\"\".join(fbuilder).format)\n\nparse_route_template(template='get/{variable}')", "Selected Statement": "position = 0", "Function Input": {"template": "'get/{variable}'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"template": [[1, "'get/{variable}'"]], "rbuilder": [[2.0, "['^']"], [14.0, "['^', 'get/']"], [15.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)']"], [26.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '']"], [27.0, "['^', 'get/', '(?P<variable>[_a-zA-Z][_\\\\w]*)', '', '$']"]], "fbuilder": [[3.0, "[]"], [17.0, "['get/']"], [18.0, "['get/', '{']"], [19.0, "['get/', '{', 'variable']"], [20.0, "['get/', '{', 'variable', ':']"], [21.0, "['get/', '{', 'variable', ':', 's']"], [22.0, "['get/', '{', 'variable', ':', 's', '}']"], [28.0, "['get/', '{', 'variable', ':', 's', '}', '']"]], "position": [[4.0, "0"], [24.0, "14"]], "schema": [[5.0, "{}"], [12.0, "{'variable': And(<class 'str'>, <function Match at 0x7f0c58d64940>)}"]], "match": [[7.0, "<re.Match object; span=(4, 14), match='{variable}'>"]], "param_name": [[8.0, "'variable'"]], "param_type": [[9.0, "'id'"]], "param_formatchar": [[11.0, "'s'"]], "param_re": [[11.0, "'(?P<{}>[_a-zA-Z][_\\\\w]*)'"]], "param_schema": [[11.0, "And(<class 'str'>, <function Match at 0x7f0c58d64940>)"]]}, "Program Information": "Project Name: aperezdc+omni", "idx": 478, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def kilometers(meters=0, miles=0, feet=0, nautical=0):\n    \"\"\"\n    Convert distance to kilometers.\n    \"\"\"\n    ret = 0.\n    if meters:\n        ret += meters / 1000.\n    if feet:\n        ret += feet / ft(1.)\n    if nautical:\n        ret += nautical / nm(1.)\n    ret += miles * 1.609344\n    return ret\n\nkilometers(meters=0, miles=0, feet=0, nautical=0)", "Selected Statement": "ret = 0.", "Function Input": {"meters": "0", "miles": "0", "feet": "0", "nautical": "0"}, "Variable Values Before Statement": {"Constant": "0."}, "Value After Statement Execution": "0.", "Variable States During Runtime": {"meters": [[1, "0"]], "miles": [[1, "0"]], "feet": [[1, "0"]], "nautical": [[1, "0"]], "ret": [[5.0, "0.0"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 479, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def feet(kilometers=0, meters=0, miles=0, nautical=0):\n    \"\"\"\n    Convert distance to feet.\n    \"\"\"\n    ret = 0.\n    if nautical:\n        kilometers += nautical / nm(1.)\n    if meters:\n        kilometers += meters / 1000.\n    if kilometers:\n        miles += mi(kilometers=kilometers)\n    ret += miles * 5280\n    return ret\n\nfeet(kilometers=1.0, meters=0, miles=0, nautical=0)", "Selected Statement": "ret = 0.", "Function Input": {"kilometers": "1.0", "meters": "0", "miles": "0", "nautical": "0"}, "Variable Values Before Statement": {"Constant": "0."}, "Value After Statement Execution": "0.", "Variable States During Runtime": {"kilometers": [[1, "1.0"]], "meters": [[1, "0"]], "miles": [[1, "0"], [11.0, "0.621371192237334"]], "nautical": [[1, "0"]], "ret": [[5.0, "0.0"], [12.0, "3280.839895013123"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 480, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def nautical(kilometers=0, meters=0, miles=0, feet=0):\n    \"\"\"\n    Convert distance to nautical miles.\n    \"\"\"\n    ret = 0.\n    if feet:\n        kilometers += feet / ft(1.)\n    if miles:\n        kilometers += km(miles=miles)\n    if meters:\n        kilometers += meters / 1000.\n    ret += kilometers / 1.852\n    return ret\n\nnautical(kilometers=1.0, meters=0, miles=0, feet=0)", "Selected Statement": "ret = 0.", "Function Input": {"kilometers": "1.0", "meters": "0", "miles": "0", "feet": "0"}, "Variable Values Before Statement": {"Constant": "0."}, "Value After Statement Execution": "0.", "Variable States During Runtime": {"kilometers": [[1, "1.0"]], "meters": [[1, "0"]], "miles": [[1, "0"]], "feet": [[1, "0"]], "ret": [[5.0, "0.0"], [12.0, "0.5399568034557235"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 481, "quantized value": "zero", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def format_decimal(self, altitude=None):\n        \"\"\"\n        Format decimal degrees with altitude::\n\n            >>> p = Point(41.5, -81.0, 12.3)\n            >>> p.format_decimal()\n            '41.5, -81.0, 12.3km'\n            >>> p = Point(41.5, 0, 0)\n            >>> p.format_decimal()\n            '41.5, 0.0'\n\n        :param bool altitude: Whether to include ``altitude`` value.\n            By default it is automatically included if it is non-zero.\n        \"\"\"\n        coordinates = [str(self.latitude), str(self.longitude)]\n\n        if altitude is None:\n            altitude = bool(self.altitude)\n        if altitude:\n            if not isinstance(altitude, str):\n                altitude = 'km'\n            coordinates.append(self.format_altitude(altitude))\n\n        return \", \".join(coordinates)\n\nformat_decimal(self=Point(41.5, 81.0, 2.5), altitude=None, self.altitude=2.5, self.latitude=41.5, self.longitude=81.0)", "Selected Statement": "altitude = 'km'", "Function Input": {"self": "Point(41.5, 81.0, 2.5)", "altitude": "None", "self.altitude": "2.5", "self.latitude": "41.5", "self.longitude": "81.0"}, "Variable Values Before Statement": {"Constant": "'km'"}, "Value After Statement Execution": "'km'", "Variable States During Runtime": {"self": [[1, "Point(41.5, 81.0, 2.5)"]], "altitude": [[1, "None"], [18.0, "True"], [21.0, "'km'"]], "self.altitude": [[1, "2.5"]], "self.latitude": [[1, "41.5"]], "self.longitude": [[1, "81.0"]], "coordinates": [[15.0, "['41.5', '81.0']"], [22.0, "['41.5', '81.0', '2.5km']"]]}, "Program Information": "Project Name: geopy+geopy", "idx": 482, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def test_speech_extraction(sample_rate, start_seconds):\n    parser = GenericSubtitleParser(start_seconds=start_seconds)\n    extractor = SubtitleSpeechTransformer(\n        sample_rate=sample_rate, start_seconds=start_seconds\n    )\n    pipe = make_pipeline(parser, extractor)\n    bitstring = pipe.fit_transform(BytesIO(fake_srt)).astype(bool)\n    bitstring_shifted_left = np.append(bitstring[1:], [False])\n    bitstring_shifted_right = np.append([False], bitstring[:-1])\n    bitstring_cumsum = np.cumsum(bitstring)\n    consec_ones_end_pos = np.nonzero(\n        bitstring_cumsum\n        * (bitstring ^ bitstring_shifted_left)\n        * (bitstring_cumsum != np.cumsum(bitstring_shifted_right))\n    )[0]\n    prev = 0\n    for pos, sub in zip(consec_ones_end_pos, parser.subs_):\n        start = int(round(sub.start.total_seconds() * sample_rate))\n        duration = sub.end.total_seconds() - sub.start.total_seconds()\n        stop = start + int(round(duration * sample_rate))\n        assert bitstring_cumsum[pos] - prev == stop - start\n        prev = bitstring_cumsum[pos]\n\ntest_speech_extraction(sample_rate=10, start_seconds=0)", "Selected Statement": "prev = 0", "Function Input": {"sample_rate": "10", "start_seconds": "0"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"sample_rate": [[1, "10"]], "start_seconds": [[1, "0"]], "parser": [[2.0, "{subs_=None, sub_format='srt', encoding='infer', caching=False, fit_fname=None, detected_encoding_=None, max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"], [7.0, "{subs_=<ffsubsync.generic_subtitles.GenericSubtitlesFile object at 0x7fb01543e5e0>, sub_format='srt', encoding='infer', caching=False, fit_fname=<_io.BytesIO object at 0x7fb014da3310>, detected_encoding_='ASCII', max_subtitle_seconds=None, start_seconds=0, _skip_ssa_info=False, _strict=False}"]], "extractor": [[3.0, "{sample_rate=10, start_seconds=0, framerate_ratio=1.0, subtitle_speech_results_=None, max_time_=None}"], [7.0, "{sample_rate=10, start_seconds=0, framerate_ratio=1.0, subtitle_speech_results_=array([0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1.,       1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 0.]), max_time_=6.062, start_frame_=2, end_frame_=60}"]], "pipe": [[6.0, "{steps=[('genericsubtitleparser', <ffsubsync.subtitle_parser.GenericSubtitleParser object at 0x7fb01543ef40>), ('subtitlespeechtransformer', <ffsubsync.speech_transformers.SubtitleSpeechTransformer object at 0x7fb01543e6a0>)], verbose=False}"]], "bitstring": [[7.0, "array([False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True, False, False, False,       False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,       False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True, False])"]], "bitstring_shifted_left": [[8.0, "array([False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True, False, False, False, False,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True, False,       False,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True, False, False])"]], "bitstring_shifted_right": [[9.0, "array([False, False, False,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True, False, False,       False, False,  True,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True,  True,        True, False, False,  True,  True,  True,  True,  True,  True,        True,  True,  True,  True,  True,  True,  True,  True])"]], "bitstring_cumsum": [[10.0, "array([ 0,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,       16, 17, 18, 19, 20, 21, 22, 22, 22, 22, 22, 23, 24, 25, 26, 27, 28,       29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 39, 39, 40, 41, 42, 43,       44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 53])"]], "consec_ones_end_pos": [[11.0, "array([23, 44, 60])"]], "prev": [[16.0, "0"], [22.0, "22"], [22.0, "39"], [22.0, "53"]], "pos": [[17.0, "23"], [17.0, "44"], [17.0, "60"]], "sub": [[17.0, "{start=datetime.timedelta(microseconds=178000), end=datetime.timedelta(seconds=2, microseconds=416000), inner=Subtitle(index=1, start=datetime.timedelta(microseconds=178000), end=datetime.timedelta(seconds=2, microseconds=416000), content='<i>Previously on \"Your favorite TV show...\"</i>', proprietary='')}"], [17.0, "{start=datetime.timedelta(seconds=2, microseconds=828000), end=datetime.timedelta(seconds=4, microseconds=549000), inner=Subtitle(index=2, start=datetime.timedelta(seconds=2, microseconds=828000), end=datetime.timedelta(seconds=4, microseconds=549000), content='Oh hi, Mark.', proprietary='')}"], [17.0, "{start=datetime.timedelta(seconds=4, microseconds=653000), end=datetime.timedelta(seconds=6, microseconds=62000), inner=Subtitle(index=3, start=datetime.timedelta(seconds=4, microseconds=653000), end=datetime.timedelta(seconds=6, microseconds=62000), content='You are tearing me apart, Lisa!', proprietary='')}"]], "start": [[18.0, "2"], [18.0, "28"], [18.0, "47"]], "duration": [[19.0, "2.238"], [19.0, "1.7210000000000005"], [19.0, "1.4090000000000007"]], "stop": [[20.0, "24"], [20.0, "45"], [20.0, "61"]], "@py_assert0": [[21.0, "None"]], "@py_assert3": [[21.0, "None"]], "@py_assert7": [[21.0, "None"]], "@py_assert4": [[21.0, "None"]]}, "Program Information": "Project Name: smacke+ffsubsync", "idx": 483, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def add_active_line_prints(code):\n    \"\"\"\n    Add print statements indicating line numbers to a python string.\n    \"\"\"\n    # Replace newlines and comments with pass statements, so the line numbers are accurate (ast will remove them otherwise)\n    code_lines = code.split(\"\\n\")\n    in_multiline_string = False\n    for i in range(len(code_lines)):\n        line = code_lines[i]\n        if '\"\"\"' in line or \"'''\" in line:\n            in_multiline_string = not in_multiline_string\n        if not in_multiline_string and (line.strip().startswith(\"#\") or line == \"\"):\n            whitespace = len(line) - len(line.lstrip(\" \"))\n            code_lines[i] = \" \" * whitespace + \"pass\"\n    processed_code = \"\\n\".join(code_lines)\n    try:\n        tree = ast.parse(processed_code)\n    except:\n        # If you can't parse the processed version, try the unprocessed version before giving up\n        tree = ast.parse(code)\n    transformer = AddLinePrints()\n    new_tree = transformer.visit(tree)\n    return ast.unparse(new_tree)\n\nadd_active_line_prints(code=\"import matplotlib\\n        matplotlib.use('Agg')\")", "Selected Statement": "in_multiline_string = False", "Function Input": {"code": "\"import matplotlib\\n        matplotlib.use('Agg')\""}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"code": [[1, "\"import matplotlib\\n        matplotlib.use('Agg')\""]], "code_lines": [[6.0, "['import matplotlib', \"        matplotlib.use('Agg')\"]"]], "in_multiline_string": [[7.0, "False"]], "i": [[8.0, "0"], [8.0, "1"]], "line": [[9.0, "'import matplotlib'"], [9.0, "\"        matplotlib.use('Agg')\""]], "processed_code": [[15.0, "\"import matplotlib\\n        matplotlib.use('Agg')\""]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 484, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def fixed_litellm_completions(**params):\n    \"\"\"\n    Just uses a dummy API key, since we use litellm without an API key sometimes.\n    Hopefully they will fix this!\n    \"\"\"\n\n    # Run completion\n    first_error = None\n    try:\n        yield from litellm.completion(**params)\n    except Exception as e:\n        # Store the first error\n        first_error = e\n        # LiteLLM can fail if there's no API key,\n        # even though some models (like local ones) don't require it.\n\n        if \"api key\" in str(first_error).lower() and \"api_key\" not in params:\n            print(\n                \"LiteLLM requires an API key. Please set a dummy API key to prevent this message. (e.g `interpreter --api_key x` or `interpreter.llm.api_key = 'x'`)\"\n            )\n\n        # So, let's try one more time with a dummy API key:\n        params[\"api_key\"] = \"x\"\n\n        try:\n            yield from litellm.completion(**params)\n        except:\n            # If the second attempt also fails, raise the first error\n            raise first_error\n\nfixed_litellm_completions(params={'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with — \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]})", "Selected Statement": "params[\"api_key\"] = \"x\"", "Function Input": {"params": "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with — \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]}"}, "Variable Values Before Statement": {"Constant": "\"x\""}, "Value After Statement Execution": "\"x\"", "Variable States During Runtime": {"params": [[1, "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with — \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}]}"], [23.0, "{'model': 'gpt-3.5-turbo', 'messages': [{'role': 'system', 'content': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n\\nName: \\'XXX\\'\\nCWD: \\'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/KillianLucas+open-interpreter/KillianLucas+open-interpreter\\'\\nSHELL: \\'/bin/bash\\'\\nOS: \\'Linux\\'\"\\n\\nWhen you execute code with `react`, your react code will be run in a script tag after being inserted into the HTML template, following the installation of React, ReactDOM, and Babel for JSX parsing. **We will handle this! Don\\'t make an HTML file to run React, just execute `react`.**\\nUse ONLY the function you have been provided with — \\'execute(language, code)\\'.'}, {'role': 'user', 'content': \"What's 38023*40334? Use Python\\nNo talk or plan, just immediatly code, then tell me the answer.\"}], 'stream': True, 'functions': [{'name': 'execute', 'description': \"Executes code on the user's machine **in the users local environment** and returns the output\", 'parameters': {'type': 'object', 'properties': {'language': {'type': 'string', 'description': 'The programming language (required parameter to the `execute` function)', 'enum': ['python', 'shell', 'javascript', 'html', 'applescript', 'r', 'powershell', 'react']}, 'code': {'type': 'string', 'description': 'The code to execute (required)'}}, 'required': ['language', 'code']}}], 'api_key': 'x'}"]], "first_error": [[8.0, "None"], [13.0, "APIError('OpenAIException - The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable')"]], "e": [[11.0, "APIError('OpenAIException - The api_key client option must be set either by passing api_key to the client or by setting the OPENAI_API_KEY environment variable')"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 485, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def count_messages_tokens(messages=[], model=None):\n    \"\"\"\n    Count the number of tokens in a list of messages\n    \"\"\"\n    try:\n        tokens_used = 0\n\n        for message in messages:\n            if isinstance(message, str):\n                tokens_used += count_tokens(message, model=model)\n            elif \"message\" in message:\n                tokens_used += count_tokens(message[\"message\"], model=model)\n\n                if \"code\" in message:\n                    tokens_used += count_tokens(message[\"code\"], model=model)\n\n                if \"output\" in message:\n                    tokens_used += count_tokens(message[\"output\"], model=model)\n\n        prompt_cost = token_cost(tokens_used, model=model)\n\n        return (tokens_used, prompt_cost)\n    except:\n        # Non-essential feature\n        return (0, 0)\n\ncount_messages_tokens(messages=[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}], model='gpt-3.5-turbo')", "Selected Statement": "tokens_used = 0", "Function Input": {"messages": "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]", "model": "'gpt-3.5-turbo'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"messages": [[1, "[{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}]"]], "model": [[1, "'gpt-3.5-turbo'"]], "tokens_used": [[6.0, "0"], [12.0, "360"]], "message": [[8.0, "{'role': 'system', 'message': 'You are Open Interpreter, a world-class programmer that can complete any goal by executing code.\\nFirst, write a plan. **Always recap the plan between each code block** (you have extreme short-term memory loss, so you need to recap the plan between each message block to retain it).\\nWhen you execute code, it will be executed **on the user\\'s machine**. The user has given you **full and complete permission** to execute any code necessary to complete the task. Execute the code.\\nIf you want to send data between programming languages, save the data to a txt or json.\\nYou can access the internet. Run **any code** to achieve the goal, and if at first you don\\'t succeed, try again and again.\\nYou can install new packages.\\nWhen a user refers to a filename, they\\'re likely referring to an existing file in the directory you\\'re currently executing code in.\\nWrite messages to the user in Markdown.\\nIn general, try to **make plans** with as few steps as possible. As for actually executing code to carry out that plan, for *stateful* languages (like python, javascript, shell, but NOT for html which starts from 0 every time) **it\\'s critical not to try to do everything in one code block.** You should try something, print information about it, then continue from there in tiny, informed steps. You will never get it on the first try, and attempting it in one go will often lead to errors you cant see.\\nYou are capable of **any** task.\\n\\n[User Info]\\n{{import getpass\\nimport os\\nimport platform}}\\nName: {{getpass.getuser()}}\\nCWD: {{os.getcwd()}}\\nSHELL: {{os.environ.get(\\'SHELL\\')}}\\nOS: {{platform.system()}}\"'}"]], "prompt_cost": [[20.0, "0.00054"]]}, "Program Information": "Project Name: KillianLucas+open-interpreter", "idx": 486, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _check_if_valid_subspec(spec: Union[dict, core.SchemaBase], classname: str) -> None:\n    \"\"\"Check if the spec is a valid sub-spec.\n\n    If it is not, then raise a ValueError\n    \"\"\"\n    err = (\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )\n\n    if not isinstance(spec, (core.SchemaBase, dict)):\n        raise ValueError(\"Only chart objects can be used in {0}.\".format(classname))\n    for attr in TOPLEVEL_ONLY_KEYS:\n        if isinstance(spec, core.SchemaBase):\n            val = getattr(spec, attr, Undefined)\n        else:\n            val = spec.get(attr, Undefined)\n        if val is not Undefined:\n            raise ValueError(err.format(attr, classname))\n\n_check_if_valid_subspec(spec=alt.Chart(...), classname='LayerChart')", "Selected Statement": "err = (", "Function Input": {"spec": "alt.Chart(...)", "classname": "'LayerChart'"}, "Variable Values Before Statement": {"Constant": "( # [STATE] err = 'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.' [/STATE]\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )"}, "Value After Statement Execution": "( # [STATE] err = 'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.' [/STATE]\n        'Objects with \"{0}\" attribute cannot be used within {1}. '\n        \"Consider defining the {0} attribute in the {1} object instead.\"\n    )", "Variable States During Runtime": {"spec": [[1, "alt.Chart(...)"]], "classname": [[1, "'LayerChart'"]], "err": [[6.0, "'Objects with \"{0}\" attribute cannot be used within {1}. Consider defining the {0} attribute in the {1} object instead.'"]], "attr": [[13.0, "'autosize'"], [13.0, "'background'"], [13.0, "'$schema'"], [13.0, "'config'"], [13.0, "'padding'"]], "val": [[15.0, "Undefined"]]}, "Program Information": "Project Name: altair-viz+altair", "idx": 487, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _generate_id():\n        \"\"\" Generate a unique event ID \"\"\"\n        id = ''\n        for i in range(0, 16):\n            id += '%.2x' % random.randint(0, 255)\n        return id\n\n_generate_id()", "Selected Statement": "id = ''", "Function Input": {}, "Variable Values Before Statement": {"Constant": "''"}, "Value After Statement Execution": "''", "Variable States During Runtime": {"id": [[3.0, "''"], [5.0, "'2a'"], [5.0, "'2acb'"], [5.0, "'2acb45'"], [5.0, "'2acb458f'"], [5.0, "'2acb458f5d'"], [5.0, "'2acb458f5d18'"], [5.0, "'2acb458f5d180c'"], [5.0, "'2acb458f5d180c43'"], [5.0, "'2acb458f5d180c435e'"], [5.0, "'2acb458f5d180c435e47'"], [5.0, "'2acb458f5d180c435e474a'"], [5.0, "'2acb458f5d180c435e474a04'"], [5.0, "'2acb458f5d180c435e474a042d'"], [5.0, "'2acb458f5d180c435e474a042dd8'"], [5.0, "'2acb458f5d180c435e474a042dd85c'"], [5.0, "'2acb458f5d180c435e474a042dd85c80'"]], "i": [[4.0, "0"], [4.0, "1"], [4.0, "2"], [4.0, "3"], [4.0, "4"], [4.0, "5"], [4.0, "6"], [4.0, "7"], [4.0, "8"], [4.0, "9"], [4.0, "10"], [4.0, "11"], [4.0, "12"], [4.0, "13"], [4.0, "14"], [4.0, "15"]]}, "Program Information": "Project Name: BlackLight+platypush", "idx": 488, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def driver():\n    TEST_BROWSER = os.environ.get(\"TEST_BROWSER\", \"chrome\").lower()\n\n    if TEST_BROWSER == \"chrome\":\n        options = webdriver.ChromeOptions()\n        options.headless = True\n        capabilities = DesiredCapabilities.CHROME\n        capabilities[\"goog:loggingPrefs\"] = {\"browser\": \"ALL\"}\n\n        if platform.system() == \"Windows\":\n            options.binary_location = \"C:/Program Files/Google/Chrome/Application/chrome.exe\"\n\n        driver = webdriver.Chrome(\n            ChromeDriverManager().install(),\n            options=options,\n            desired_capabilities=capabilities,\n            service_log_path=os.path.devnull,\n        )\n\n    # Firefox doesn't currently supported pulling JavaScript console logs, which we currently scan to affirm that\n    # JS/Python can communicate in some places. So for now, we can't really use firefox/geckodriver during testing.\n    # This may be added in the future: https://github.com/mozilla/geckodriver/issues/284\n\n    # elif TEST_BROWSER == \"firefox\":\n    #     options = webdriver.FirefoxOptions()\n    #     options.headless = True\n    #     capabilities = DesiredCapabilities.FIREFOX\n    #     capabilities['loggingPrefs'] = {\"browser\": \"ALL\"}\n    #\n    #     driver = webdriver.Firefox(options=options, capabilities=capabilities, service_log_path=os.path.devnull)\n\n    else:\n        raise ValueError(f\"Unsupported browser for testing: {TEST_BROWSER}\")\n\n    with mock.patch(\"eel.browsers.open\"):\n        yield driver\n\ndriver()", "Selected Statement": "options.headless = True", "Function Input": {}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"TEST_BROWSER": [[2.0, "'chrome'"]], "options": [[5.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None}"], [6.0, "{_caps={'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}, 'pageLoadStrategy': <PageLoadStrategy.normal: 'normal'>}, _proxy=None, mobile_options=None, _arguments=[], _ignore_local_proxy=False, _binary_location='', _extension_files=[], _extensions=[], _experimental_options={}, _debugger_address=None, headless=True}"]], "capabilities": [[7.0, "{'browserName': 'chrome', 'goog:loggingPrefs': {'browser': 'ALL'}}"]]}, "Program Information": "Project Name: python-eel+Eel", "idx": 489, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_google_drive_folder_location():\n    \"\"\"\n    Try to locate the Google Drive folder.\n\n    Returns:\n        (str) Full path to the current Google Drive folder\n    \"\"\"\n    gdrive_db_path = \"Library/Application Support/Google/Drive/sync_config.db\"\n    yosemite_gdrive_db_path = (\n        \"Library/Application Support/Google/Drive/\" \"user_default/sync_config.db\"\n    )\n    yosemite_gdrive_db = os.path.join(os.environ[\"HOME\"], yosemite_gdrive_db_path)\n    if os.path.isfile(yosemite_gdrive_db):\n        gdrive_db_path = yosemite_gdrive_db\n\n    googledrive_home = None\n\n    gdrive_db = os.path.join(os.environ[\"HOME\"], gdrive_db_path)\n    if os.path.isfile(gdrive_db):\n        con = sqlite3.connect(gdrive_db)\n        if con:\n            cur = con.cursor()\n            query = (\n                \"SELECT data_value \"\n                \"FROM data \"\n                \"WHERE entry_key = 'local_sync_root_path';\"\n            )\n            cur.execute(query)\n            data = cur.fetchone()\n            googledrive_home = str(data[0])\n            con.close()\n\n    if not googledrive_home:\n        error(\n            constants.ERROR_UNABLE_TO_FIND_STORAGE.format(\n                provider=\"Google Drive install\"\n            )\n        )\n\n    return googledrive_home\n\nget_google_drive_folder_location()", "Selected Statement": "gdrive_db_path = \"Library/Application Support/Google/Drive/sync_config.db\"", "Function Input": {}, "Variable Values Before Statement": {"Constant": "\"Library/Application Support/Google/Drive/sync_config.db\""}, "Value After Statement Execution": "\"Library/Application Support/Google/Drive/sync_config.db\"", "Variable States During Runtime": {"gdrive_db_path": [[8.0, "'Library/Application Support/Google/Drive/sync_config.db'"]], "yosemite_gdrive_db_path": [[9.0, "'Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "yosemite_gdrive_db": [[12.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/user_default/sync_config.db'"]], "googledrive_home": [[16.0, "None"], [30.0, "'/Users/whatever/Google Drive'"]], "gdrive_db": [[18.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/Application Support/Google/Drive/sync_config.db'"]], "con": [[20.0, "REPR FAILED"]], "cur": [[22.0, "REPR FAILED"]], "query": [[23.0, "\"SELECT data_value FROM data WHERE entry_key = 'local_sync_root_path';\""]], "data": [[29.0, "('/Users/whatever/Google Drive',)"]]}, "Program Information": "Project Name: lra+mackup", "idx": 490, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def can_file_be_synced_on_current_platform(path):\n    \"\"\"\n    Check if the given path can be synced locally.\n\n    Check if it makes sense to sync the file at the given path on the current\n    platform.\n    For now we don't sync any file in the ~/Library folder on GNU/Linux.\n    There might be other exceptions in the future.\n\n    Args:\n        (str): Path to the file or folder to check. If relative, prepend it\n               with the home folder.\n               'abc' becomes '~/abc'\n               '/def' stays '/def'\n\n    Returns:\n        (bool): True if given file can be synced\n    \"\"\"\n    can_be_synced = True\n\n    # If the given path is relative, prepend home\n    fullpath = os.path.join(os.environ[\"HOME\"], path)\n\n    # Compute the ~/Library path on macOS\n    # End it with a slash because we are looking for this specific folder and\n    # not any file/folder named LibrarySomething\n    library_path = os.path.join(os.environ[\"HOME\"], \"Library/\")\n\n    if platform.system() == constants.PLATFORM_LINUX:\n        if fullpath.startswith(library_path):\n            can_be_synced = False\n\n    return can_be_synced\n\ncan_file_be_synced_on_current_platform(path='some/file')", "Selected Statement": "can_be_synced = True", "Function Input": {"path": "'some/file'"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"path": [[1, "'some/file'"]], "can_be_synced": [[19.0, "True"]], "fullpath": [[22.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/some/file'"]], "library_path": [[27.0, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/lra+mackup/lra+mackup/tests/fixtures/Library/'"]]}, "Program Information": "Project Name: lra+mackup", "idx": 491, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def is_process_running(process_name):\n    \"\"\"\n    Check if a process with the given name is running.\n\n    Args:\n        (str): Process name, e.g. \"Sublime Text\"\n\n    Returns:\n        (bool): True if the process is running\n    \"\"\"\n    is_running = False\n\n    # On systems with pgrep, check if the given process is running\n    if os.path.isfile(\"/usr/bin/pgrep\"):\n        dev_null = open(os.devnull, \"wb\")\n        returncode = subprocess.call([\"/usr/bin/pgrep\", process_name], stdout=dev_null)\n        is_running = bool(returncode == 0)\n\n    return is_running\n\nis_process_running(process_name='a*')", "Selected Statement": "is_running = False", "Function Input": {"process_name": "'a*'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"process_name": [[1, "'a*'"]], "is_running": [[11.0, "False"], [17.0, "True"]], "dev_null": [[15.0, "<_io.BufferedWriter name='/dev/null'>"]], "returncode": [[16.0, "0"]]}, "Program Information": "Project Name: lra+mackup", "idx": 492, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _get_part(self, s, decimal):\n        \"Strips first part of string containing either non-decimal or decimal characters.\" \\\n        + \" Returns tuple (part, remider).\"\n        div = 0\n        for c in s:\n            if decimal and not c.isdecimal():\n                break\n            elif not decimal and c.isdecimal():\n                break\n            else:\n                div += 1\n\n        return (s[:div], s[div:])\n\n_get_part(self=2.2.0~rc5, s='2.2.0~rc5', decimal=False, self.epoch=0, self.revision='0', self.revision_allowed_chars=('.', '+', '~'), self.upstream_version='2.2.0~rc5', self.upstream_version_allowed_chars=('.', '+', '~', '-', ':'), self.version='2.2.0~rc5')", "Selected Statement": "div = 0", "Function Input": {"self": "2.2.0~rc5", "s": "'2.2.0~rc5'", "decimal": "False", "self.epoch": "0", "self.revision": "'0'", "self.revision_allowed_chars": "('.', '+', '~')", "self.upstream_version": "'2.2.0~rc5'", "self.upstream_version_allowed_chars": "('.', '+', '~', '-', ':')", "self.version": "'2.2.0~rc5'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "2.2.0~rc5"]], "s": [[1, "'2.2.0~rc5'"]], "decimal": [[1, "False"]], "self.epoch": [[1, "0"]], "self.revision": [[1, "'0'"]], "self.revision_allowed_chars": [[1, "('.', '+', '~')"]], "self.upstream_version": [[1, "'2.2.0~rc5'"]], "self.upstream_version_allowed_chars": [[1, "('.', '+', '~', '-', ':')"]], "self.version": [[1, "'2.2.0~rc5'"]], "div": [[4.0, "0"]], "c": [[5.0, "'2'"]]}, "Program Information": "Project Name: cyril-s+aptly-ctl", "idx": 493, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _copy(src, dst, src_is_storage, dst_is_storage):\n    \"\"\"\n    Copies file from source to destination\n\n    Args:\n        src (str or file-like object): Source file.\n        dst (str or file-like object): Destination file.\n        src_is_storage (bool): Source is storage.\n        dst_is_storage (bool): Destination is storage.\n    \"\"\"\n    # If both storage: Tries to perform same storage direct copy\n    if src_is_storage and dst_is_storage:\n        system = get_instance(src)\n        if system is get_instance(dst):\n\n            # Checks if same file\n            if system.relpath(src) == system.relpath(dst):\n                raise same_file_error(\n                    \"'%s' and '%s' are the same file\" % (src, dst))\n\n            # Tries to copy\n            try:\n                return system.copy(src, dst)\n            except (UnsupportedOperation, ObjectException):\n                pass\n\n    # At least one storage object: copies streams\n    with cos_open(src, 'rb') as fsrc:\n        with cos_open(dst, 'wb') as fdst:\n\n            # Get stream buffer size\n            for stream in (fdst, fsrc):\n                try:\n                    buffer_size = getattr(stream, '_buffer_size')\n                    break\n                except AttributeError:\n                    continue\n            else:\n                buffer_size = 16384\n\n            # Read and write\n            copyfileobj(fsrc, fdst, buffer_size)\n\n_copy(src='dummy_read://file.txt', dst='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt', src_is_storage=True, dst_is_storage=False)", "Selected Statement": "buffer_size = 16384", "Function Input": {"src": "'dummy_read://file.txt'", "dst": "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'", "src_is_storage": "True", "dst_is_storage": "False"}, "Variable Values Before Statement": {"Constant": "16384"}, "Value After Statement Execution": "16384", "Variable States During Runtime": {"src": [[1, "'dummy_read://file.txt'"]], "dst": [[1, "'/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'"]], "src_is_storage": [[1, "True"]], "dst_is_storage": [[1, "False"]], "fsrc": [[28.0, "{}"]], "fdst": [[29.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"]], "stream": [[32.0, "<_io.BufferedWriter name='/tmp/pytest-of-XXX/pytest-198/test_cos_open0/file_dst.txt'>"], [32.0, "{}"]], "buffer_size": [[39.0, "16384"]]}, "Program Information": "Project Name: JGoutin+rfs", "idx": 494, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _setHeaderBaseData(array, coeff_name, hao, long_name) -> None:\n        if not isinstance(array, (np.ndarray, np.float32, np.int32,np.float64)):\n            print(type(array))\n            raise HeaderArrayObj.UnsupportedArrayType(\"'array' must be of numpy.ndarray type.\")\n\n        # Defaults handling\n        if coeff_name is None:\n            coeff_name = \" \" * 12\n        if long_name is None:\n            long_name = coeff_name\n        if len(coeff_name) < 12:\n            coeff_name = coeff_name.ljust(12)\n        if len(long_name) < 70:\n            long_name = long_name.ljust(70)\n        hao.array = array\n        hao.coeff_name = coeff_name\n        hao.long_name = long_name\n\n_setHeaderBaseData(array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), coeff_name=None, hao={_coeff_name='', _array=None, _sets=None, _long_name=''}, long_name='Creation Date and Time                                                ')", "Selected Statement": "coeff_name = \" \" * 12", "Function Input": {"array": "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')", "coeff_name": "None", "hao": "{_coeff_name='', _array=None, _sets=None, _long_name=''}", "long_name": "'Creation Date and Time                                                '"}, "Variable Values Before Statement": {"Constant": "\" \" * 12"}, "Value After Statement Execution": "\" \" * 12", "Variable States During Runtime": {"array": [[1, "array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70')"]], "coeff_name": [[1, "None"], [8.0, "'            '"]], "hao": [[1, "{_coeff_name='', _array=None, _sets=None, _long_name=''}"], [15.0, "{_coeff_name='', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [16.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name=''}"], [17.0, "{_coeff_name='            ', _array=array(['at 2/03/2018 4:22:38 PM                                               '],      dtype='<U70'), _sets=None, _long_name='Creation Date and Time                                                '}"]], "long_name": [[1, "'Creation Date and Time                                                '"]]}, "Program Information": "Project Name: GEMPACKsoftware+HARPY", "idx": 495, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def convert_type(ty, default=None):\n    \"\"\"Converts a callable or python ty into the most appropriate param\n    ty.\n    \"\"\"\n    guessed_type = False\n    if ty is None and default is not None:\n        if isinstance(default, tuple):\n            ty = tuple(map(type, default))\n        else:\n            ty = type(default)\n        guessed_type = True\n\n    if isinstance(ty, tuple):\n        return Tuple(ty)\n    if isinstance(ty, ParamType):\n        return ty\n    if ty is text_type or ty is str or ty is None:\n        return STRING\n    if ty is int:\n        return INT\n    # Booleans are only okay if not guessed.  This is done because for\n    # flags the default value is actually a bit of a lie in that it\n    # indicates which of the flags is the one we want.  See get_default()\n    # for more information.\n    if ty is bool and not guessed_type:\n        return BOOL\n    if ty is float:\n        return FLOAT\n    if guessed_type:\n        return STRING\n\n    # Catch a common mistake\n    if __debug__:\n        try:\n            if issubclass(ty, ParamType):\n                raise AssertionError('Attempted to use an uninstantiated '\n                                     'parameter type (%s).' % ty)\n        except TypeError:\n            pass\n    return FuncParamType(ty)\n\nconvert_type(ty=None, default=None)", "Selected Statement": "guessed_type = False", "Function Input": {"ty": "None", "default": "None"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"ty": [[1, "None"]], "default": [[1, "None"]], "guessed_type": [[5.0, "False"]]}, "Program Information": "Project Name: MrTango+click", "idx": 496, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def make_default_short_help(help, max_length=45):\n    words = help.split()\n    total_length = 0\n    result = []\n    done = False\n\n    for word in words:\n        if word[-1:] == '.':\n            done = True\n        new_length = result and 1 + len(word) or len(word)\n        if total_length + new_length > max_length:\n            result.append('...')\n            done = True\n        else:\n            if result:\n                result.append(' ')\n            result.append(word)\n        if done:\n            break\n        total_length += new_length\n\n    return ''.join(result)\n\nmake_default_short_help(help='Hello World!', max_length=45)", "Selected Statement": "total_length = 0", "Function Input": {"help": "'Hello World!'", "max_length": "45"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"help": [[1, "'Hello World!'"]], "max_length": [[1, "45"]], "words": [[2.0, "['Hello', 'World!']"]], "total_length": [[3.0, "0"], [20.0, "5"], [20.0, "12"]], "result": [[4.0, "[]"], [17.0, "['Hello']"], [16.0, "['Hello', ' ']"], [17.0, "['Hello', ' ', 'World!']"]], "done": [[5.0, "False"]], "word": [[7.0, "'Hello'"], [7.0, "'World!'"]], "new_length": [[10.0, "5"], [10.0, "7"]]}, "Program Information": "Project Name: MrTango+click", "idx": 497, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def join_options(options):\n    \"\"\"Given a list of option strings this joins them in the most appropriate\n    way and returns them in the form ``(formatted_string,\n    any_prefix_is_slash)`` where the second item in the tuple is a flag that\n    indicates if any of the option prefixes was a slash.\n    \"\"\"\n    rv = []\n    any_prefix_is_slash = False\n    for opt in options:\n        prefix = split_opt(opt)[0]\n        if prefix == '/':\n            any_prefix_is_slash = True\n        rv.append((len(prefix), opt))\n\n    rv.sort(key=lambda x: x[0])\n\n    rv = ', '.join(x[1] for x in rv)\n    return rv, any_prefix_is_slash\n\njoin_options(options=['--help'])", "Selected Statement": "any_prefix_is_slash = False", "Function Input": {"options": "['--help']"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"options": [[1, "['--help']"]], "rv": [[7.0, "[]"], [13.0, "[(2, '--help')]"], [17.0, "'--help'"]], "any_prefix_is_slash": [[8.0, "False"]], "opt": [[9.0, "'--help'"]], "prefix": [[10.0, "'--'"]]}, "Program Information": "Project Name: MrTango+click", "idx": 498, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def strip(tokens):\n        output = \"\"\n        for type_, value in tokens:\n            if type_ == TokenType.TEXT:\n                output += value\n        return output\n\nstrip(tokens=[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')])", "Selected Statement": "output = \"\"", "Function Input": {"tokens": "[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')]"}, "Variable Values Before Statement": {"Constant": "\"\""}, "Value After Statement Execution": "\"\"", "Variable States During Runtime": {"tokens": [[1, "[(1, ''), (2, '\\x1b[32m'), (1, ''), (1, '{time:YYYY-MM-DD HH:mm:ss.SSS}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (3, None), (1, ''), (1, '{level: <8}'), (1, ''), (4, '\\x1b[0m'), (1, ' | '), (2, '\\x1b[36m'), (1, ''), (1, '{name}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{function}'), (1, ''), (4, '\\x1b[0m'), (1, ':'), (2, '\\x1b[36m'), (1, ''), (1, '{line}'), (1, ''), (4, '\\x1b[0m'), (1, ' - '), (3, None), (1, ''), (1, '{message}'), (1, ''), (4, '\\x1b[0m'), (1, '\\n'), (1, '{exception}')]"]], "output": [[2.0, "''"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - '"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}\\n'"], [5.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS} | {level: <8} | {name}:{function}:{line} - {message}\\n{exception}'"]], "type_": [[3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "3"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "2"], [3.0, "1"], [3.0, "4"], [3.0, "1"], [3.0, "3"], [3.0, "1"], [3.0, "4"], [3.0, "1"]], "value": [[3.0, "''"], [3.0, "'\\x1b[32m'"], [3.0, "''"], [3.0, "'{time:YYYY-MM-DD HH:mm:ss.SSS}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' | '"], [3.0, "None"], [3.0, "''"], [3.0, "'{level: <8}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' | '"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{name}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "':'"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{function}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "':'"], [3.0, "'\\x1b[36m'"], [3.0, "''"], [3.0, "'{line}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "' - '"], [3.0, "None"], [3.0, "''"], [3.0, "'{message}'"], [3.0, "''"], [3.0, "'\\x1b[0m'"], [3.0, "'\\n'"], [3.0, "'{exception}'"]]}, "Program Information": "Project Name: Delgan+loguru", "idx": 499, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_search_terms(raw_search_value):\n    search_regexp = r'(?:[^\\s,\"]|\"(?:\\\\.|[^\"])*\")+'  # splits by space, ignores space in quotes\n    if not raw_search_value:\n        return {}\n    parsed_search = {}\n    for query_part in re.findall(search_regexp, raw_search_value):\n        if not query_part:\n            continue\n        if query_part.startswith('result:'):\n            parsed_search['result'] = preprocess_search_value(query_part[len('result:'):])\n        elif query_part.startswith('args:'):\n            if 'args' not in parsed_search:\n                parsed_search['args'] = []\n            parsed_search['args'].append(preprocess_search_value(query_part[len('args:'):]))\n        elif query_part.startswith('kwargs:'):\n            if 'kwargs'not in parsed_search:\n                parsed_search['kwargs'] = {}\n            try:\n                key, value = [p.strip() for p in query_part[len('kwargs:'):].split('=')]\n            except ValueError:\n                continue\n            parsed_search['kwargs'][key] = preprocess_search_value(value)\n        elif query_part.startswith('state'):\n            if 'state' not in parsed_search:\n                parsed_search['state'] = []\n            parsed_search['state'].append(preprocess_search_value(query_part[len('state:'):]))\n        else:\n            parsed_search['any'] = preprocess_search_value(query_part)\n    return parsed_search\n\nparse_search_terms(raw_search_value={})", "Selected Statement": "search_regexp = r'(?:[^\\s,\"]|\"(?:\\\\.|[^\"])*\")+'  # splits by space, ignores space in quotes", "Function Input": {"raw_search_value": "{}"}, "Variable Values Before Statement": {"Constant": "r'(?:[^\\s,\"]|\"(?:\\\\.|[^\"])*\")+'"}, "Value After Statement Execution": "r'(?:[^\\s,\"]|\"(?:\\\\.|[^\"])*\")+'", "Variable States During Runtime": {"raw_search_value": [[1, "{}"]], "search_regexp": [[2.0, "'(?:[^\\\\s,\"]|\"(?:\\\\\\\\.|[^\"])*\")+'"]]}, "Program Information": "Project Name: mher+flower", "idx": 500, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def test_integration(install_vspec, path):\n    output = subprocess.check_output(\n        [VSPEC_RUNNER, '.', VSPEC_FOLDER, os.path.relpath(path, root)],\n        cwd=root,\n    )\n    had_ok = False\n    for line in output.splitlines():\n        if (line.startswith(b'not ok') or\n                line.startswith(b'Error') or\n                line.startswith(b'Bail out!')):\n            pytest.fail(u\"{0} failed:\\n{1}\".format(\n                path, output.decode('utf-8')), pytrace=False)\n        if not had_ok and line.startswith(b'ok'):\n            had_ok = True\n    if not had_ok:\n        pytest.fail(u\"{0} failed: no 'ok' found:\\n{1}\".format(\n            path, output.decode('utf-8')), pytrace=False)\n\ntest_integration(install_vspec=None, path='test/vspec/signatures.vim')", "Selected Statement": "had_ok = False", "Function Input": {"install_vspec": "None", "path": "'test/vspec/signatures.vim'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"install_vspec": [[1, "None"]], "path": [[1, "'test/vspec/signatures.vim'"]], "output": [[2.0, "b'not found in \\'runtimepath\\': \"ftdetect/*.vim\"\\nok 1 - signatures simple\\n4 buffers wiped out\\n--- Autocommands ---\\njedi_call_signatures  CursorHoldI\\n<buffer=6>\\ncall jedi#show_call_signatures()\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 612\\njedi_call_signatures  InsertEnter\\n<buffer=6>\\nlet s:show_call_signatures_last = [0, 0, \\'\\']\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 603\\nlet b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 606\\njedi_call_signatures  InsertLeave\\n<buffer=6>\\ncall jedi#clear_call_signatures()\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 604\\nif exists(\\'b:_jedi_orig_updatetime\\') |   let &updatetime = b:_jedi_orig_updatetime |   unlet b:_jedi_orig_updatetime | endif\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 608\\n--- Autocommands ---\\njedi_call_signatures  CursorHoldI\\n<buffer=5>\\ncall jedi#show_call_signatures()\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 612\\njedi_call_signatures  InsertEnter\\n<buffer=5>\\nlet s:show_call_signatures_last = [0, 0, \\'\\']\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 603\\nlet b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 606\\njedi_call_signatures  InsertLeave\\n<buffer=5>\\ncall jedi#clear_call_signatures()\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 604\\nif exists(\\'b:_jedi_orig_updatetime\\') |   let &updatetime = b:_jedi_orig_updatetime |   unlet b:_jedi_orig_updatetime | endif\\n\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 608\\nok 2 - signatures multiple buffers\\n2 buffers wiped out\\nok 3 - signatures simple after CursorHoldI with only parenthesis\\nok 4 - signatures highlights correct argument\\nok 5 - signatures no signature\\nok 6 - signatures signatures disabled\\nstaticmethod(f: Callable[..., Any])\\nfoo(a, b)\\nok 7 - signatures command line simple\\x07\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(arg1, \\xe2\\x80\\xa6)\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, arg2, \\xe2\\x80\\xa6)\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, a, b, c)\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, c)\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6)\\nok 8 - signatures command line truncation\\nok 9 - signatures command line no signature\\n1..9\\n'"]], "had_ok": [[6.0, "False"], [14.0, "True"]], "line": [[7.0, "b'not found in \\'runtimepath\\': \"ftdetect/*.vim\"'"], [7.0, "b'ok 1 - signatures simple'"], [7.0, "b'4 buffers wiped out'"], [7.0, "b'--- Autocommands ---'"], [7.0, "b'jedi_call_signatures  CursorHoldI'"], [7.0, "b'<buffer=6>'"], [7.0, "b'call jedi#show_call_signatures()'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 612'"], [7.0, "b'jedi_call_signatures  InsertEnter'"], [7.0, "b'<buffer=6>'"], [7.0, "b\"let s:show_call_signatures_last = [0, 0, '']\""], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 603'"], [7.0, "b'let b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 606'"], [7.0, "b'jedi_call_signatures  InsertLeave'"], [7.0, "b'<buffer=6>'"], [7.0, "b'call jedi#clear_call_signatures()'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 604'"], [7.0, "b\"if exists('b:_jedi_orig_updatetime') |   let &updatetime = b:_jedi_orig_updatetime |   unlet b:_jedi_orig_updatetime | endif\""], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 608'"], [7.0, "b'--- Autocommands ---'"], [7.0, "b'jedi_call_signatures  CursorHoldI'"], [7.0, "b'<buffer=5>'"], [7.0, "b'call jedi#show_call_signatures()'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 612'"], [7.0, "b'jedi_call_signatures  InsertEnter'"], [7.0, "b'<buffer=5>'"], [7.0, "b\"let s:show_call_signatures_last = [0, 0, '']\""], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 603'"], [7.0, "b'let b:_jedi_orig_updatetime = &updatetime | let &updatetime = g:jedi#show_call_signatures_delay'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 606'"], [7.0, "b'jedi_call_signatures  InsertLeave'"], [7.0, "b'<buffer=5>'"], [7.0, "b'call jedi#clear_call_signatures()'"], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 604'"], [7.0, "b\"if exists('b:_jedi_orig_updatetime') |   let &updatetime = b:_jedi_orig_updatetime |   unlet b:_jedi_orig_updatetime | endif\""], [7.0, "b'\\tLast set from /local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/davidhalter+jedi-vim/davidhalter+jedi-vim/autoload/jedi.vim line 608'"], [7.0, "b'ok 2 - signatures multiple buffers'"], [7.0, "b'2 buffers wiped out'"], [7.0, "b'ok 3 - signatures simple after CursorHoldI with only parenthesis'"], [7.0, "b'ok 4 - signatures highlights correct argument'"], [7.0, "b'ok 5 - signatures no signature'"], [7.0, "b'ok 6 - signatures signatures disabled'"], [7.0, "b'staticmethod(f: Callable[..., Any])'"], [7.0, "b'foo(a, b)'"], [7.0, "b'ok 7 - signatures command line simple\\x07'"], [7.0, "b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(arg1, \\xe2\\x80\\xa6)'"], [7.0, "b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, arg2, \\xe2\\x80\\xa6)'"], [7.0, "b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, a, b, c)'"], [7.0, "b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6, c)'"], [7.0, "b'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(\\xe2\\x80\\xa6)'"], [7.0, "b'ok 8 - signatures command line truncation'"], [7.0, "b'ok 9 - signatures command line no signature'"], [7.0, "b'1..9'"]]}, "Program Information": "Project Name: davidhalter+jedi-vim", "idx": 501, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _remove_command(text, command, keep_text=False):\n  \"\"\"Removes '\\\\command{*}' from the string 'text'.\n\n  Regex `base_pattern` used to match balanced parentheses taken from:\n  https://stackoverflow.com/questions/546433/regular-expression-to-match-balanced-parentheses/35271017#35271017\n  \"\"\"\n  base_pattern = r'\\\\' + command + r'\\{((?:[^{}]+|\\{(?1)\\})*)\\}'\n  # Loops in case of nested commands that need to retain text, e.g.,\n  # \\red{hello \\red{world}}.\n  while True:\n    all_substitutions = []\n    has_match = False\n    for match in regex.finditer(base_pattern, text):\n      # In case there are only spaces or nothing up to the following newline,\n      # adds a percent, not to alter the newlines.\n      has_match = True\n      new_substring = (\n          ''\n          if not keep_text\n          else text[match.span()[0] + len(command) + 2 : match.span()[1] - 1]\n      )\n      if match.span()[1] < len(text):\n        next_newline = text[match.span()[1] :].find('\\n')\n        if next_newline != -1:\n          text_until_newline = text[\n              match.span()[1] : match.span()[1] + next_newline\n          ]\n          if (\n              not text_until_newline or text_until_newline.isspace()\n          ) and not keep_text:\n            new_substring = '%'\n      all_substitutions.append(\n          (match.span()[0], match.span()[1], new_substring)\n      )\n\n    for start, end, new_substring in reversed(all_substitutions):\n      text = text[:start] + new_substring + text[end:]\n\n    if not keep_text or not has_match:\n      break\n\n  return text\n\n_remove_command(text='A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}', command='todo', keep_text=False)", "Selected Statement": "has_match = False", "Function Input": {"text": "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'", "command": "'todo'", "keep_text": "False"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"text": [[1, "'A\\\\todo{B\\nC}D\\nE\\n\\\\end{document}'"], [37.0, "'AD\\nE\\n\\\\end{document}'"]], "command": [[1, "'todo'"]], "keep_text": [[1, "False"]], "base_pattern": [[7.0, "'\\\\\\\\todo\\\\{((?:[^{}]+|\\\\{(?1)\\\\})*)\\\\}'"]], "all_substitutions": [[11.0, "[]"], [32.0, "[(1, 11, '')]"]], "has_match": [[12.0, "False"], [16.0, "True"]], "match": [[13.0, "<regex.Match object; span=(1, 11), match='\\\\todo{B\\nC}'>"]], "new_substring": [[17.0, "''"]], "next_newline": [[23.0, "1"]], "text_until_newline": [[25.0, "'D'"]], "start": [[36.0, "1"]], "end": [[36.0, "11"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 502, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _remove_comments_inline(text):\n  \"\"\"Removes the comments from the string 'text' and ignores % inside \\\\url{}.\"\"\"\n  if 'auto-ignore' in text:\n    return text\n  if text.lstrip(' ').lstrip('\\t').startswith('%'):\n    return ''\n\n  url_pattern = r'\\\\url\\{(?>[^{}]|(?R))*\\}'\n\n  def remove_comments(segment):\n    \"\"\"Remove comments from a segment of text.\"\"\"\n    if segment.lstrip().startswith('%'):\n      return ''\n    match = regex.search(r'(?<!\\\\)%', segment)\n    if match:\n      return segment[: match.end()] + '\\n'\n    else:\n      return segment\n\n  # split the text into segments based on \\url{} tags\n  segments = regex.split(f'({url_pattern})', text)\n\n  for i in range(len(segments)):\n    # only process segments that are not part of a \\url{} tag\n    if not regex.match(url_pattern, segments[i]):\n      segments[i] = remove_comments(segments[i])\n\n  final_text = ''.join(segments)\n  return (\n      final_text\n      if final_text.endswith('\\n') or final_text.endswith('\\\\n')\n      else final_text + '\\n'\n  )\n\n_remove_comments_inline(text='Foo %Comment\\n')", "Selected Statement": "url_pattern = r'\\\\url\\{(?>[^{}]|(?R))*\\}'", "Function Input": {"text": "'Foo %Comment\\n'"}, "Variable Values Before Statement": {"Constant": "r'\\\\url\\{(?>[^{}]|(?R))*\\}'"}, "Value After Statement Execution": "r'\\\\url\\{(?>[^{}]|(?R))*\\}'", "Variable States During Runtime": {"text": [[1, "'Foo %Comment\\n'"]], "url_pattern": [[8.0, "'\\\\\\\\url\\\\{(?>[^{}]|(?R))*\\\\}'"]], "remove_comments": [[10.0, "<function _remove_comments_inline.<locals>.remove_comments at 0x7f185616f280>"]], "segments": [[21.0, "['Foo %Comment\\n']"], [26.0, "['Foo %\\n']"]], "i": [[23.0, "0"]], "final_text": [[28.0, "'Foo %\\n'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 503, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _remove_iffalse_block(text):\n  \"\"\"Removes possibly nested r'\\iffalse*\\fi' blocks from 'text'.\"\"\"\n  p = regex.compile(r'\\\\if\\s*(\\w+)|\\\\fi(?!\\w)')\n  level = -1\n  positions_to_delete = []\n  start, end = 0, 0\n  for m in p.finditer(text):\n    if (\n        m.group().replace(' ', '') == r'\\iffalse'\n        or m.group().replace(' ', '') == r'\\if0'\n    ) and level == -1:\n      level += 1\n      start = m.start()\n    elif m.group().startswith(r'\\if') and level >= 0:\n      level += 1\n    elif m.group() == r'\\fi' and level >= 0:\n      if level == 0:\n        end = m.end()\n        positions_to_delete.append((start, end))\n      level -= 1\n    else:\n      pass\n\n  for start, end in reversed(positions_to_delete):\n    if end < len(text) and text[end].isspace():\n      end_to_del = end + 1\n    else:\n      end_to_del = end\n    text = text[:start] + text[end_to_del:]\n\n  return text\n\n_remove_iffalse_block(text='\\\\newcommand\\\\figref[1]{Figure~\\\\ref{fig:\\\\#1}}')", "Selected Statement": "level = -1", "Function Input": {"text": "'\\\\newcommand\\\\figref[1]{Figure~\\\\ref{fig:\\\\#1}}'"}, "Variable Values Before Statement": {"Constant": "-1"}, "Value After Statement Execution": "-1", "Variable States During Runtime": {"text": [[1, "'\\\\newcommand\\\\figref[1]{Figure~\\\\ref{fig:\\\\#1}}'"]], "p": [[3.0, "regex.Regex('\\\\\\\\if\\\\s*(\\\\w+)|\\\\\\\\fi(?!\\\\w)', flags=regex.V0)"]], "level": [[4.0, "-1"]], "positions_to_delete": [[5.0, "[]"]], "start": [[6.0, "0"]], "end": [[6.0, "0"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 504, "quantized value": "Negative Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _search_reference(filename, contents, strict=False):\n  \"\"\"Returns a match object if filename is referenced in contents, and None otherwise.\n\n  If not strict mode, path prefix and extension are optional.\n  \"\"\"\n  if strict:\n    # regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*path/to/img\\.ext[\\s%]*\\}\n    filename_regex = filename.replace('.', r'\\.')\n  else:\n    filename_path = Path(filename)\n\n    # make extension optional\n    root, extension = filename_path.stem, filename_path.suffix\n    basename_regex = '{}({})?'.format(\n        regex.escape(root), regex.escape(extension)\n    )\n\n    # iterate through parent fragments to make path prefix optional\n    path_prefix_regex = ''\n    for fragment in reversed(filename_path.parents):\n      if fragment.name == '.':\n        continue\n      fragment = regex.escape(fragment.name)\n      path_prefix_regex = '({}{}{})?'.format(\n          path_prefix_regex, fragment, os.sep\n      )\n\n    # Regex pattern for strict=True for path/to/img.ext:\n    # \\{[\\s%]*(<path_prefix>)?<basename>(<ext>)?[\\s%]*\\}\n    filename_regex = path_prefix_regex + basename_regex\n\n  # Some files 'path/to/file' are referenced in tex as './path/to/file' thus\n  # adds prefix for relative paths starting with './' or '.\\' to regex search.\n  filename_regex = r'(.' + os.sep + r')?' + filename_regex\n\n  # Pads with braces and optional whitespace/comment characters.\n  patn = r'\\{{[\\s%]*{}[\\s%]*\\}}'.format(filename_regex)\n  # Picture references in LaTeX are allowed to be in different cases.\n  return regex.search(patn, contents, regex.IGNORECASE)\n\n_search_reference(filename='to/img.ext', contents='{img.ext}', strict=False)", "Selected Statement": "path_prefix_regex = ''", "Function Input": {"filename": "'to/img.ext'", "contents": "'{img.ext}'", "strict": "False"}, "Variable Values Before Statement": {"Constant": "''"}, "Value After Statement Execution": "''", "Variable States During Runtime": {"filename": [[1, "'to/img.ext'"]], "contents": [[1, "'{img.ext}'"]], "strict": [[1, "False"]], "filename_path": [[11.0, "PosixPath('to/img.ext')"]], "root": [[14.0, "'img'"]], "extension": [[14.0, "'.ext'"]], "basename_regex": [[15.0, "'img(\\\\.ext)?'"]], "path_prefix_regex": [[20.0, "''"], [25.0, "'(/)?'"], [25.0, "'((/)?to/)?'"]], "fragment": [[21.0, "PosixPath('.')"], [24.0, "''"], [21.0, "PosixPath('to')"], [24.0, "'to'"]], "filename_regex": [[31.0, "'((/)?to/)?img(\\\\.ext)?'"], [35.0, "'(./)?((/)?to/)?img(\\\\.ext)?'"]], "patn": [[38.0, "'\\\\{[\\\\s%]*(./)?((/)?to/)?img(\\\\.ext)?[\\\\s%]*\\\\}'"]]}, "Program Information": "Project Name: google-research+arxiv-latex-cleaner", "idx": 505, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_layout(layout_str):\n    \"\"\"Parse a layout string\n\n    Return a dict\n        {'walls': list_of_wall_coordinates,\n         'food' : list_of_food_coordinates,\n         'bot'  : list_of_4_bot_coordinate}\n\n    A layout string is composed of wall characters '#', food characters '.', and\n    bot characters '0', '1', '2', and '3'.\n\n    Valid layouts must be enclosed by walls and be of rectangular shape. Example:\n\n     ########\n     #0  .  #\n     #2    1#\n     #  .  3#\n     ########\n\n\n    If items are overlapping, several layout strings can be concateneted:\n     ########\n     #0  .  #\n     #     1#\n     #  .  3#\n     ########\n     ########\n     #2  .  #\n     #     1#\n     #  .  3#\n     ########\n\n     In this case, bot '0' and bot '2' are on top of each other at position (1,1)\n    \"\"\"\n    layout_list = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # ignore emptylines\n            continue\n        if not start:\n            # start a new layout\n            # check that row is a valid opening string\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout does not start with a row of walls (line: {i})!\")\n            current_layout = [row]\n            start = True\n            continue\n        # we are in the middle of a layout, just append to the current\n        # layout unless we detect the closing string\n        current_layout.append(row)\n        if row.count('#') == len(row):\n            # this is a closing string\n            # append the layout to tha layout list\n            layout_list.append('\\n'.join(current_layout))\n            start = False\n\n    if start:\n        # the last layout has not been closed, complain here!\n        raise ValueError(f\"Layout does not end with a row of walls (line: {i})!\")\n\n    # initialize walls, food and bots from the first layout\n    out = parse_single_layout(layout_list.pop(0))\n    for layout in layout_list:\n        items = parse_layout(layout)\n        # walls should always be the same\n        if items['walls'] != out['walls']:\n            raise ValueError('Walls are not equal in all layouts!')\n        # add the food, removing duplicates\n        out['food'] = list(set(out['food'] + items['food']))\n        # add the bots\n        for bot_idx, bot_pos in enumerate(items['bots']):\n            if bot_pos:\n                # this bot position is not None, overwrite whatever we had before\n                out['bots'][bot_idx] = bot_pos\n\n    return out\n\nparse_layout(layout_str='\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## ')", "Selected Statement": "start = False", "Function Input": {"layout_str": "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"layout_str": [[1, "'\\n        ##################\\n        #. ... .##.     3#\\n        # # #  .  .### #1#\\n        # # ##.   .      #\\n        #      .   .## # #\\n        #0# ###.  .  # # #\\n        #2     .##. ... .#\\n        ################## '"]], "layout_list": [[35.0, "[]"], [56.0, "['##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################']"], [64.0, "[]"]], "start": [[36.0, "False"], [48.0, "True"], [57.0, "False"]], "i": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"], [37.0, "4"], [37.0, "5"], [37.0, "6"], [37.0, "7"], [37.0, "8"]], "line": [[37.0, "''"], [37.0, "'        ##################'"], [37.0, "'        #. ... .##.     3#'"], [37.0, "'        # # #  .  .### #1#'"], [37.0, "'        # # ##.   .      #'"], [37.0, "'        #      .   .## # #'"], [37.0, "'        #0# ###.  .  # # #'"], [37.0, "'        #2     .##. ... .#'"], [37.0, "'        ################## '"]], "row": [[38.0, "''"], [38.0, "'##################'"], [38.0, "'#. ... .##.     3#'"], [38.0, "'# # #  .  .### #1#'"], [38.0, "'# # ##.   .      #'"], [38.0, "'#      .   .## # #'"], [38.0, "'#0# ###.  .  # # #'"], [38.0, "'#2     .##. ... .#'"], [38.0, "'##################'"]], "current_layout": [[47.0, "['##################']"], [52.0, "['##################', '#. ... .##.     3#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [52.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "out": [[64.0, "{'walls': [(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)], 'food': [(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)], 'bots': [(1, 5), (16, 2), (1, 6), (16, 1)]}"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 506, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_single_layout(layout_str):\n    \"\"\"Parse a single layout from a string\n\n    See parse_layout for details about valid layout strings.\n    \"\"\"\n    # width of the layout (x-axis)\n    width = None\n    # list of layout rows\n    rows = []\n    start = False\n    for i, line in enumerate(layout_str.splitlines()):\n        row = line.strip()\n        if not row:\n            # always ignore empty lines\n            continue\n        # a layout is always started by a full row of walls\n        if not start:\n            if row.count('#') != len(row):\n                raise ValueError(f\"Layout must be enclosed by walls (line: {i})!\")\n            else:\n                # start the layout parsing\n                start = True\n                # set width of layout\n                width = len(row)\n                # check that width is even\n                if width % 2:\n                    raise ValueError(f\"Layout width must be even (found {width})!\")\n                rows.append(row)\n                continue\n        # Here we are within the layout\n        # every row must have the same length\n        if len(row) != width:\n            raise ValueError(f\"Layout rows have differing widths (line: {i})!\")\n        # rows are always enclosed by walls\n        if row[0] != '#' or row[-1] != '#':\n            raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n        # append current row to the list of rows\n        rows.append(row)\n        # detect closing row and ignore whatever follows\n        if row.count('#') == len(row):\n            start = False\n            break\n\n    if start:\n        # layout has not been closed!\n        raise ValueError(f\"Layout must be enclosed by walls (line:{i})!\")\n\n    # height of the layout (y-axis)\n    height = len(rows)\n    walls = []\n    food = []\n    # bot positions (we assume 4 bots)\n    bots = [None]*4\n\n    # iterate through the grid of characters\n    for y, row in enumerate(rows):\n        for x, char in enumerate(row):\n            coord = (x, y)\n            # assign the char to the corresponding list\n            if char == '#':\n                # wall\n                walls.append(coord)\n            elif char == '.':\n                # food\n                food.append(coord)\n            elif char == ' ':\n                # empty\n                continue\n            else:\n                # bot\n                try:\n                    # we expect an 0<=index<=3\n                    bot_idx = int(char)\n                    if bot_idx >= len(bots):\n                        # reuse the except below\n                        raise ValueError\n                except ValueError:\n                    raise ValueError(f\"Unknown character {char} in maze!\")\n                bots[bot_idx] = coord\n    walls.sort()\n    food.sort()\n    return {'walls':walls, 'food':food, 'bots':bots}\n\nparse_single_layout(layout_str='##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################')", "Selected Statement": "start = False", "Function Input": {"layout_str": "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"layout_str": [[1, "'##################\\n#. ... .##.     3#\\n# # #  .  .### #1#\\n# # ##.   .      #\\n#      .   .## # #\\n#0# ###.  .  # # #\\n#2     .##. ... .#\\n##################'"]], "width": [[7.0, "None"], [24.0, "18"]], "rows": [[9.0, "[]"], [28.0, "['##################']"], [38.0, "['##################', '#. ... .##.     3#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#']"], [38.0, "['##################', '#. ... .##.     3#', '# # #  .  .### #1#', '# # ##.   .      #', '#      .   .## # #', '#0# ###.  .  # # #', '#2     .##. ... .#', '##################']"]], "start": [[10.0, "False"], [22.0, "True"], [41.0, "False"]], "i": [[11.0, "0"], [11.0, "1"], [11.0, "2"], [11.0, "3"], [11.0, "4"], [11.0, "5"], [11.0, "6"], [11.0, "7"]], "line": [[11.0, "'##################'"], [11.0, "'#. ... .##.     3#'"], [11.0, "'# # #  .  .### #1#'"], [11.0, "'# # ##.   .      #'"], [11.0, "'#      .   .## # #'"], [11.0, "'#0# ###.  .  # # #'"], [11.0, "'#2     .##. ... .#'"], [11.0, "'##################'"]], "row": [[12.0, "'##################'"], [12.0, "'#. ... .##.     3#'"], [12.0, "'# # #  .  .### #1#'"], [12.0, "'# # ##.   .      #'"], [12.0, "'#      .   .## # #'"], [12.0, "'#0# ###.  .  # # #'"], [12.0, "'#2     .##. ... .#'"], [12.0, "'##################'"], [56.0, "'#. ... .##.     3#'"], [56.0, "'# # #  .  .### #1#'"], [56.0, "'# # ##.   .      #'"], [56.0, "'#      .   .## # #'"], [56.0, "'#0# ###.  .  # # #'"], [56.0, "'#2     .##. ... .#'"], [56.0, "'##################'"]], "height": [[49.0, "8"]], "walls": [[50.0, "[]"], [62.0, "[(0, 0)]"], [62.0, "[(0, 0), (1, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7)]"], [62.0, "[(0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0), (17, 0), (0, 1), (8, 1), (9, 1), (17, 1), (0, 2), (2, 2), (4, 2), (11, 2), (12, 2), (13, 2), (15, 2), (17, 2), (0, 3), (2, 3), (4, 3), (5, 3), (17, 3), (0, 4), (12, 4), (13, 4), (15, 4), (17, 4), (0, 5), (2, 5), (4, 5), (5, 5), (6, 5), (13, 5), (15, 5), (17, 5), (0, 6), (8, 6), (9, 6), (17, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (5, 7), (6, 7), (7, 7), (8, 7), (9, 7), (10, 7), (11, 7), (12, 7), (13, 7), (14, 7), (15, 7), (16, 7), (17, 7)]"], [80.0, "[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (1, 0), (1, 7), (2, 0), (2, 2), (2, 3), (2, 5), (2, 7), (3, 0), (3, 7), (4, 0), (4, 2), (4, 3), (4, 5), (4, 7), (5, 0), (5, 3), (5, 5), (5, 7), (6, 0), (6, 5), (6, 7), (7, 0), (7, 7), (8, 0), (8, 1), (8, 6), (8, 7), (9, 0), (9, 1), (9, 6), (9, 7), (10, 0), (10, 7), (11, 0), (11, 2), (11, 7), (12, 0), (12, 2), (12, 4), (12, 7), (13, 0), (13, 2), (13, 4), (13, 5), (13, 7), (14, 0), (14, 7), (15, 0), (15, 2), (15, 4), (15, 5), (15, 7), (16, 0), (16, 7), (17, 0), (17, 1), (17, 2), (17, 3), (17, 4), (17, 5), (17, 6), (17, 7)]"]], "food": [[51.0, "[]"], [65.0, "[(1, 1)]"], [65.0, "[(1, 1), (3, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6)]"], [65.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (7, 1), (10, 1), (7, 2), (10, 2), (6, 3), (10, 3), (7, 4), (11, 4), (7, 5), (10, 5), (7, 6), (10, 6), (12, 6), (13, 6), (14, 6), (16, 6)]"], [81.0, "[(1, 1), (3, 1), (4, 1), (5, 1), (6, 3), (7, 1), (7, 2), (7, 4), (7, 5), (7, 6), (10, 1), (10, 2), (10, 3), (10, 5), (10, 6), (11, 4), (12, 6), (13, 6), (14, 6), (16, 6)]"]], "bots": [[53.0, "[None, None, None, None]"], [79.0, "[None, None, None, (16, 1)]"], [79.0, "[None, (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), None, (16, 1)]"], [79.0, "[(1, 5), (16, 2), (1, 6), (16, 1)]"]], "y": [[56.0, "0"], [56.0, "1"], [56.0, "2"], [56.0, "3"], [56.0, "4"], [56.0, "5"], [56.0, "6"], [56.0, "7"]], "x": [[57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"], [57.0, "0"], [57.0, "1"], [57.0, "2"], [57.0, "3"], [57.0, "4"], [57.0, "5"], [57.0, "6"], [57.0, "7"], [57.0, "8"], [57.0, "9"], [57.0, "10"], [57.0, "11"], [57.0, "12"], [57.0, "13"], [57.0, "14"], [57.0, "15"], [57.0, "16"], [57.0, "17"]], "char": [[57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'3'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'1'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'0'"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "' '"], [57.0, "'#'"], [57.0, "'2'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "' '"], [57.0, "'.'"], [57.0, "'#'"]], "coord": [[58.0, "(0, 0)"], [58.0, "(1, 0)"], [58.0, "(2, 0)"], [58.0, "(3, 0)"], [58.0, "(4, 0)"], [58.0, "(5, 0)"], [58.0, "(6, 0)"], [58.0, "(7, 0)"], [58.0, "(8, 0)"], [58.0, "(9, 0)"], [58.0, "(10, 0)"], [58.0, "(11, 0)"], [58.0, "(12, 0)"], [58.0, "(13, 0)"], [58.0, "(14, 0)"], [58.0, "(15, 0)"], [58.0, "(16, 0)"], [58.0, "(17, 0)"], [58.0, "(0, 1)"], [58.0, "(1, 1)"], [58.0, "(2, 1)"], [58.0, "(3, 1)"], [58.0, "(4, 1)"], [58.0, "(5, 1)"], [58.0, "(6, 1)"], [58.0, "(7, 1)"], [58.0, "(8, 1)"], [58.0, "(9, 1)"], [58.0, "(10, 1)"], [58.0, "(11, 1)"], [58.0, "(12, 1)"], [58.0, "(13, 1)"], [58.0, "(14, 1)"], [58.0, "(15, 1)"], [58.0, "(16, 1)"], [58.0, "(17, 1)"], [58.0, "(0, 2)"], [58.0, "(1, 2)"], [58.0, "(2, 2)"], [58.0, "(3, 2)"], [58.0, "(4, 2)"], [58.0, "(5, 2)"], [58.0, "(6, 2)"], [58.0, "(7, 2)"], [58.0, "(8, 2)"], [58.0, "(9, 2)"], [58.0, "(10, 2)"], [58.0, "(11, 2)"], [58.0, "(12, 2)"], [58.0, "(13, 2)"], [58.0, "(14, 2)"], [58.0, "(15, 2)"], [58.0, "(16, 2)"], [58.0, "(17, 2)"], [58.0, "(0, 3)"], [58.0, "(1, 3)"], [58.0, "(2, 3)"], [58.0, "(3, 3)"], [58.0, "(4, 3)"], [58.0, "(5, 3)"], [58.0, "(6, 3)"], [58.0, "(7, 3)"], [58.0, "(8, 3)"], [58.0, "(9, 3)"], [58.0, "(10, 3)"], [58.0, "(11, 3)"], [58.0, "(12, 3)"], [58.0, "(13, 3)"], [58.0, "(14, 3)"], [58.0, "(15, 3)"], [58.0, "(16, 3)"], [58.0, "(17, 3)"], [58.0, "(0, 4)"], [58.0, "(1, 4)"], [58.0, "(2, 4)"], [58.0, "(3, 4)"], [58.0, "(4, 4)"], [58.0, "(5, 4)"], [58.0, "(6, 4)"], [58.0, "(7, 4)"], [58.0, "(8, 4)"], [58.0, "(9, 4)"], [58.0, "(10, 4)"], [58.0, "(11, 4)"], [58.0, "(12, 4)"], [58.0, "(13, 4)"], [58.0, "(14, 4)"], [58.0, "(15, 4)"], [58.0, "(16, 4)"], [58.0, "(17, 4)"], [58.0, "(0, 5)"], [58.0, "(1, 5)"], [58.0, "(2, 5)"], [58.0, "(3, 5)"], [58.0, "(4, 5)"], [58.0, "(5, 5)"], [58.0, "(6, 5)"], [58.0, "(7, 5)"], [58.0, "(8, 5)"], [58.0, "(9, 5)"], [58.0, "(10, 5)"], [58.0, "(11, 5)"], [58.0, "(12, 5)"], [58.0, "(13, 5)"], [58.0, "(14, 5)"], [58.0, "(15, 5)"], [58.0, "(16, 5)"], [58.0, "(17, 5)"], [58.0, "(0, 6)"], [58.0, "(1, 6)"], [58.0, "(2, 6)"], [58.0, "(3, 6)"], [58.0, "(4, 6)"], [58.0, "(5, 6)"], [58.0, "(6, 6)"], [58.0, "(7, 6)"], [58.0, "(8, 6)"], [58.0, "(9, 6)"], [58.0, "(10, 6)"], [58.0, "(11, 6)"], [58.0, "(12, 6)"], [58.0, "(13, 6)"], [58.0, "(14, 6)"], [58.0, "(15, 6)"], [58.0, "(16, 6)"], [58.0, "(17, 6)"], [58.0, "(0, 7)"], [58.0, "(1, 7)"], [58.0, "(2, 7)"], [58.0, "(3, 7)"], [58.0, "(4, 7)"], [58.0, "(5, 7)"], [58.0, "(6, 7)"], [58.0, "(7, 7)"], [58.0, "(8, 7)"], [58.0, "(9, 7)"], [58.0, "(10, 7)"], [58.0, "(11, 7)"], [58.0, "(12, 7)"], [58.0, "(13, 7)"], [58.0, "(14, 7)"], [58.0, "(15, 7)"], [58.0, "(16, 7)"], [58.0, "(17, 7)"]], "bot_idx": [[73.0, "3"], [73.0, "1"], [73.0, "0"], [73.0, "2"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 507, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def initial_positions(walls):\n    \"\"\"Calculate initial positions.\n\n    Given the list of walls, returns the free positions that are closest to the\n    bottom left and top right corner. The algorithm starts searching from\n    (1, height-2) and (width-2, 1) respectively and uses the Manhattan distance\n    for judging what is closest. On equal distances, a smaller distance in the\n    x value is preferred.\n    \"\"\"\n    width = max(walls)[0] + 1\n    height = max(walls)[1] + 1\n\n    left_start = (1, height - 2)\n    left = []\n    right_start = (width - 2, 1)\n    right = []\n\n    dist = 0\n    while len(left) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (left_start[0] + x_dist, left_start[1] - y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                left.append(pos)\n\n            if len(left) == 2:\n                break\n\n        dist += 1\n\n    dist = 0\n    while len(right) < 2:\n        # iterate through all possible x distances (inclusive)\n        for x_dist in range(dist + 1):\n            y_dist = dist - x_dist\n            pos = (right_start[0] - x_dist, right_start[1] + y_dist)\n            # if both coordinates are out of bounds, we stop\n            if not (0 <= pos[0] < width) and not (0 <= pos[1] < height):\n                raise ValueError(\"Not enough free initial positions.\")\n            # if one coordinate is out of bounds, we just continue\n            if not (0 <= pos[0] < width) or not (0 <= pos[1] < height):\n                continue\n            # check if the new value is free\n            if pos not in walls:\n                right.append(pos)\n\n            if len(right) == 2:\n                break\n\n        dist += 1\n\n    # lower indices start further away\n    left.reverse()\n    right.reverse()\n    return [left[0], right[0], left[1], right[1]]\n\ninitial_positions(walls=[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)])", "Selected Statement": "dist = 0", "Function Input": {"walls": "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"walls": [[1, "[(0, 0), (0, 1), (0, 2), (0, 3), (1, 0), (1, 3), (2, 0), (2, 1), (2, 3), (3, 0), (3, 1), (3, 3), (4, 0), (4, 1), (4, 3), (5, 0), (5, 3), (6, 0), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]"]], "width": [[10.0, "8"]], "height": [[11.0, "4"]], "left_start": [[13.0, "(1, 2)"]], "left": [[14.0, "[]"], [32.0, "[(1, 2)]"], [32.0, "[(1, 2), (1, 1)]"], [61.0, "[(1, 1), (1, 2)]"]], "right_start": [[15.0, "(6, 1)"]], "right": [[16.0, "[]"], [53.0, "[(6, 1)]"], [53.0, "[(6, 1), (6, 2)]"], [62.0, "[(6, 2), (6, 1)]"]], "dist": [[18.0, "0"], [37.0, "1"], [37.0, "2"], [39.0, "0"], [58.0, "1"], [58.0, "2"]], "x_dist": [[21.0, "0"]], "y_dist": [[22.0, "0"], [22.0, "1"], [43.0, "0"], [43.0, "1"]], "pos": [[23.0, "(1, 2)"], [23.0, "(1, 1)"], [44.0, "(6, 1)"], [44.0, "(6, 2)"]]}, "Program Information": "Project Name: ASPP+pelita", "idx": 508, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_air_quality(city):\n    \"\"\"\n    通过城市名获取空气质量\n    官网：http://aqicn.org/here/\n    token 申请地址：http://aqicn.org/data-platform/token/#/\n    :param city: 城市\n    :return:\n    \"\"\"\n\n    if not city or not city.strip():\n        return\n    print('获取 {} 的空气质量...'.format(city))\n    try:\n\n        url = 'http://api.waqi.info/feed/{city}/?token={token}'.format(city=city, token=AQICN_TOKEN)\n        resp = requests.get(url)\n        if resp.status_code == 200:\n            # print(resp.text)\n            content_dict = resp.json()\n            if content_dict.get('status') == 'ok':\n                data_dict = content_dict['data']\n                aqi = data_dict['aqi']\n                air_status = '严重污染'\n                for key in sorted(AIR_STATUS_DICT):\n                    if key >= aqi:\n                        air_status = AIR_STATUS_DICT[key]\n                        break\n                aqi_info = '{city} PM2.5：{aqi} {air_status}'.format(city=city, aqi=aqi, air_status=air_status)\n                # print(aqi_info)\n                return aqi_info\n            else:\n                print('获取空气质量失败:{}'.format(content_dict['data']))\n                return None\n        print('获取空气质量失败。')\n    except Exception as exception:\n        print(str(exception))\n    return None\n\nget_air_quality(city='桂林')", "Selected Statement": "air_status = '严重污染'", "Function Input": {"city": "'桂林'"}, "Variable Values Before Statement": {"Constant": "'严重污染'"}, "Value After Statement Execution": "'严重污染'", "Variable States During Runtime": {"city": [[1, "'桂林'"]], "url": [[15.0, "'http://api.waqi.info/feed/桂林/?token=6382db85ef321ae81f316486de0b5b8aa6c84f62'"]], "resp": [[16.0, "<Response [200]>"]], "content_dict": [[19.0, "{'status': 'ok', 'data': {'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}}"]], "data_dict": [[21.0, "{'aqi': 50, 'idx': 1552, 'attributions': [{'url': 'http://sthjt.gxzf.gov.cn/', 'name': 'Guangxi Zhuang Autonomous Region Environmental Protection Agency (广西壮族自治区环境保护厅)'}, {'url': 'https://waqi.info/', 'name': 'World Air Quality Index Project'}], 'city': {'geo': [25.273566, 110.290195], 'name': 'Guilin (桂林)', 'url': 'https://aqicn.org/city/guilin', 'location': ''}, 'dominentpol': 'pm25', 'iaqi': {'co': {'v': 9.1}, 'h': {'v': 77}, 'no2': {'v': 4.6}, 'p': {'v': 1012}, 'pm10': {'v': 20}, 'pm25': {'v': 50}, 'so2': {'v': 4.1}, 't': {'v': 18}, 'w': {'v': 4.6}}, 'time': {'s': '2024-04-04 19:00:00', 'tz': '+08:00', 'v': 1712257200, 'iso': '2024-04-04T19:00:00+08:00'}, 'forecast': {'daily': {'o3': [{'avg': 7, 'day': '2024-04-02', 'max': 22, 'min': 4}, {'avg': 3, 'day': '2024-04-03', 'max': 8, 'min': 2}, {'avg': 6, 'day': '2024-04-04', 'max': 12, 'min': 2}, {'avg': 3, 'day': '2024-04-05', 'max': 5, 'min': 1}, {'avg': 6, 'day': '2024-04-06', 'max': 7, 'min': 5}, {'avg': 8, 'day': '2024-04-07', 'max': 13, 'min': 5}, {'avg': 15, 'day': '2024-04-08', 'max': 23, 'min': 10}, {'avg': 15, 'day': '2024-04-09', 'max': 17, 'min': 14}], 'pm10': [{'avg': 47, 'day': '2024-04-02', 'max': 58, 'min': 32}, {'avg': 56, 'day': '2024-04-03', 'max': 83, 'min': 46}, {'avg': 45, 'day': '2024-04-04', 'max': 46, 'min': 41}, {'avg': 29, 'day': '2024-04-05', 'max': 38, 'min': 24}, {'avg': 22, 'day': '2024-04-06', 'max': 28, 'min': 19}, {'avg': 24, 'day': '2024-04-07', 'max': 28, 'min': 19}, {'avg': 22, 'day': '2024-04-08', 'max': 28, 'min': 19}, {'avg': 30, 'day': '2024-04-09', 'max': 38, 'min': 28}, {'avg': 44, 'day': '2024-04-10', 'max': 46, 'min': 28}], 'pm25': [{'avg': 140, 'day': '2024-04-02', 'max': 158, 'min': 98}, {'avg': 153, 'day': '2024-04-03', 'max': 185, 'min': 138}, {'avg': 136, 'day': '2024-04-04', 'max': 138, 'min': 123}, {'avg': 90, 'day': '2024-04-05', 'max': 115, 'min': 70}, {'avg': 72, 'day': '2024-04-06', 'max': 89, 'min': 68}, {'avg': 80, 'day': '2024-04-07', 'max': 89, 'min': 68}, {'avg': 74, 'day': '2024-04-08', 'max': 88, 'min': 68}, {'avg': 89, 'day': '2024-04-09', 'max': 89, 'min': 89}, {'avg': 119, 'day': '2024-04-10', 'max': 138, 'min': 89}], 'uvi': [{'avg': 0, 'day': '2022-10-15', 'max': 0, 'min': 0}, {'avg': 1, 'day': '2022-10-16', 'max': 7, 'min': 0}, {'avg': 1, 'day': '2022-10-17', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-18', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-19', 'max': 8, 'min': 0}, {'avg': 1, 'day': '2022-10-20', 'max': 5, 'min': 0}]}}, 'debug': {'sync': '2024-04-04T20:26:23+09:00'}}"]], "aqi": [[22.0, "50"]], "air_status": [[23.0, "'严重污染'"], [26.0, "'优'"]], "key": [[24.0, "50"]], "aqi_info": [[28.0, "'桂林 PM2.5：50 优'"]]}, "Program Information": "Project Name: sfyc23+EverydayWechat", "idx": 509, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def attr_map(parsed_params):\n    \"\"\"Mapping for the schema's fields (parameters)\"\"\"\n    mapped_attrs = {}\n    for param_type, def_desc in parsed_params.items():\n        if ':' in param_type:\n            param, _type = param_type.split(':', 1)\n            _type = _type.strip()\n        else:\n            param = param_type\n            _type = None\n\n        # TODO: this won't handle # in strings ...\n        if '#' in def_desc:\n            default, description = def_desc.split('#', 1)\n            default = default.strip()\n            description = description.strip()\n        else:\n            default = def_desc.strip()\n            description = ''\n\n        mapped_attrs.update(\n            {\n                param: {\n                    'type': _type,\n                    'default': default,\n                    'description': description,\n                }\n            }\n        )\n    return mapped_attrs\n\nattr_map(parsed_params=OrderedDict([('bar: int', '0')]))", "Selected Statement": "description = ''", "Function Input": {"parsed_params": "OrderedDict([('bar: int', '0')])"}, "Variable Values Before Statement": {"Constant": "''"}, "Value After Statement Execution": "''", "Variable States During Runtime": {"parsed_params": [[1, "OrderedDict([('bar: int', '0')])"]], "mapped_attrs": [[3.0, "{}"], [21.0, "{'bar': {'type': 'int', 'default': '0', 'description': ''}}"]], "param_type": [[4.0, "'bar: int'"]], "def_desc": [[4.0, "'0'"]], "param": [[6.0, "'bar'"]], "_type": [[6.0, "' int'"], [7.0, "'int'"]], "default": [[18.0, "'0'"]], "description": [[19.0, "''"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 510, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _ParseFn(args):\n    \"\"\"Parses the list of `args` into (varargs, kwargs), remaining_args.\"\"\"\n    kwargs, remaining_kwargs, remaining_args = _ParseKeywordArgs(\n        args, all_args, fn_spec.varkw)\n\n    # Note: _ParseArgs modifies kwargs.\n    parsed_args, kwargs, remaining_args, capacity = _ParseArgs(\n        fn_spec.args, fn_spec.defaults, num_required_args, kwargs,\n        remaining_args, metadata)\n\n    if fn_spec.varargs or fn_spec.varkw:\n      # If we're allowed *varargs or **kwargs, there's always capacity.\n      capacity = True\n\n    extra_kw = set(kwargs) - set(fn_spec.kwonlyargs)\n    if fn_spec.varkw is None and extra_kw:\n      raise FireError('Unexpected kwargs present:', extra_kw)\n\n    missing_kwonly = set(required_kwonly) - set(kwargs)\n    if missing_kwonly:\n      raise FireError('Missing required flags:', missing_kwonly)\n\n    # If we accept *varargs, then use all remaining arguments for *varargs.\n    if fn_spec.varargs is not None:\n      varargs, remaining_args = remaining_args, []\n    else:\n      varargs = []\n\n    for index, value in enumerate(varargs):\n      varargs[index] = _ParseValue(value, None, None, metadata)\n\n    varargs = parsed_args + varargs\n    remaining_args += remaining_kwargs\n\n    consumed_args = args[:len(args) - len(remaining_args)]\n    return (varargs, kwargs), consumed_args, remaining_args, capacity\n\n_ParseFn(args=['x'], all_args=[], fn_spec={args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}, metadata={'ACCEPTS_POSITIONAL_ARGS': False}, num_required_args=0, required_kwonly=set())", "Selected Statement": "capacity = True", "Function Input": {"args": "['x']", "all_args": "[]", "fn_spec": "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}", "metadata": "{'ACCEPTS_POSITIONAL_ARGS': False}", "num_required_args": "0", "required_kwonly": "set()"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"args": [[1, "['x']"]], "all_args": [[1, "[]"]], "fn_spec": [[1, "{args=[], varargs=None, varkw='cli_args', defaults=(), kwonlyargs=[], kwonlydefaults={}, annotations={}}"]], "metadata": [[1, "{'ACCEPTS_POSITIONAL_ARGS': False}"]], "num_required_args": [[1, "0"]], "required_kwonly": [[1, "set()"]], "kwargs": [[3.0, "{}"]], "remaining_kwargs": [[3.0, "[]"]], "remaining_args": [[3.0, "['x']"]], "parsed_args": [[7.0, "[]"]], "capacity": [[7.0, "False"], [13.0, "True"]], "extra_kw": [[15.0, "set()"]], "missing_kwonly": [[19.0, "set()"]], "varargs": [[27.0, "[]"]], "consumed_args": [[35.0, "[]"]]}, "Program Information": "Project Name: d3rp+clima", "idx": 511, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def insert_roles():\n        roles = {\n            'User': [Permission.FOLLOW, Permission.COMMENT, Permission.WRITE],\n            'Moderator': [Permission.FOLLOW, Permission.COMMENT,\n                          Permission.WRITE, Permission.MODERATE],\n            'Administrator': [Permission.FOLLOW, Permission.COMMENT,\n                              Permission.WRITE, Permission.MODERATE,\n                              Permission.ADMIN],\n        }\n        default_role = 'User'\n        for r in roles:\n            role = Role.query.filter_by(name=r).first()\n            if role is None:\n                role = Role(name=r)\n            role.reset_permissions()\n            for perm in roles[r]:\n                role.add_permission(perm)\n            role.default = (role.name == default_role)\n            db.session.add(role)\n        db.session.commit()\n\ninsert_roles()", "Selected Statement": "default_role = 'User'", "Function Input": {}, "Variable Values Before Statement": {"Constant": "'User'"}, "Value After Statement Execution": "'User'", "Variable States During Runtime": {"roles": [[2.0, "{'User': [1, 2, 4], 'Moderator': [1, 2, 4, 8], 'Administrator': [1, 2, 4, 8, 16]}"]], "default_role": [[10.0, "'User'"]], "r": [[11.0, "'User'"], [11.0, "'Moderator'"], [11.0, "'Administrator'"]], "role": [[12.0, "None"], [14.0, "<Role 'User'>"], [12.0, "None"], [14.0, "<Role 'Moderator'>"], [12.0, "None"], [14.0, "<Role 'Administrator'>"]], "perm": [[16.0, "1"], [16.0, "2"], [16.0, "4"], [16.0, "1"], [16.0, "2"], [16.0, "4"], [16.0, "8"], [16.0, "1"], [16.0, "2"], [16.0, "4"], [16.0, "8"], [16.0, "16"]]}, "Program Information": "Project Name: miguelgrinberg+flasky", "idx": 512, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def unauthorized(message):\n    response = jsonify({'error': 'unauthorized', 'message': message})\n    response.status_code = 401\n    return response\n\nunauthorized(message='Invalid credentials')", "Selected Statement": "response.status_code = 401", "Function Input": {"message": "'Invalid credentials'"}, "Variable Values Before Statement": {"Constant": "401"}, "Value After Statement Execution": "401", "Variable States During Runtime": {"message": [[1, "'Invalid credentials'"]], "response": [[2.0, "<Response 67 bytes [200 OK]>"], [3.0, "<Response 67 bytes [401 UNAUTHORIZED]>"]]}, "Program Information": "Project Name: miguelgrinberg+flasky", "idx": 513, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def check_gitignore(git_root, io, ask=True):\n    if not git_root:\n        return\n\n    try:\n        repo = git.Repo(git_root)\n        if repo.ignored(\".aider\"):\n            return\n    except git.exc.InvalidGitRepositoryError:\n        pass\n\n    pat = \".aider*\"\n\n    gitignore_file = Path(git_root) / \".gitignore\"\n    if gitignore_file.exists():\n        content = io.read_text(gitignore_file)\n        if content is None:\n            return\n        if pat in content.splitlines():\n            return\n    else:\n        content = \"\"\n\n    if ask and not io.confirm_ask(f\"Add {pat} to .gitignore (recommended)?\"):\n        return\n\n    if content and not content.endswith(\"\\n\"):\n        content += \"\\n\"\n    content += pat + \"\\n\"\n    io.write_text(gitignore_file, content)\n\n    io.tool_output(f\"Added {pat} to .gitignore\")\n\ncheck_gitignore(git_root=PosixPath('/tmp/tmpcr1f5en7'), io={user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}, ask=True)", "Selected Statement": "pat = \".aider*\"", "Function Input": {"git_root": "PosixPath('/tmp/tmpcr1f5en7')", "io": "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}", "ask": "True"}, "Variable Values Before Statement": {"Constant": "\".aider*\""}, "Value After Statement Execution": "\".aider*\"", "Variable States During Runtime": {"git_root": [[1, "PosixPath('/tmp/tmpcr1f5en7')"]], "io": [[1, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>}"], [24.0, "{user_input_color=None, tool_output_color=None, tool_error_color=None, input=None, output=None, pretty=False, yes=True, input_history_file=None, chat_history_file=None, encoding='utf-8', dry_run=False, console=<console width=105 None>, num_user_asks=1}"]], "ask": [[1, "True"]], "repo": [[6.0, "<git.repo.base.Repo '/tmp/tmpcr1f5en7/.git'>"]], "pat": [[12.0, "'.aider*'"]], "gitignore_file": [[14.0, "PosixPath('/tmp/tmpcr1f5en7/.gitignore')"]], "content": [[22.0, "''"], [29.0, "'.aider*\\n'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 514, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def find_diffs(content):\n    # We can always fence with triple-quotes, because all the udiff content\n    # is prefixed with +/-/space.\n\n    if not content.endswith(\"\\n\"):\n        content = content + \"\\n\"\n\n    lines = content.splitlines(keepends=True)\n    line_num = 0\n    edits = []\n    while line_num < len(lines):\n        while line_num < len(lines):\n            line = lines[line_num]\n            if line.startswith(\"```diff\"):\n                line_num, these_edits = process_fenced_block(lines, line_num + 1)\n                edits += these_edits\n                break\n            line_num += 1\n\n    # For now, just take 1!\n    # edits = edits[:1]\n\n    return edits\n\nfind_diffs(content='\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n')", "Selected Statement": "line_num = 0", "Function Input": {"content": "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"content": [[1, "'\\nSome text...\\n\\n```diff\\n--- /dev/null\\n+++ file.txt\\n@@ ... @@\\n-Original\\n+Modified\\n```\\n'"]], "lines": [[8.0, "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"]], "line_num": [[9.0, "0"], [18.0, "1"], [18.0, "2"], [18.0, "3"], [15.0, "10"]], "edits": [[10.0, "[]"], [16.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]], "line": [[13.0, "'\\n'"], [13.0, "'Some text...\\n'"], [13.0, "'\\n'"], [13.0, "'```diff\\n'"]], "these_edits": [[15.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 515, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def process_fenced_block(lines, start_line_num):\n    for line_num in range(start_line_num, len(lines)):\n        line = lines[line_num]\n        if line.startswith(\"```\"):\n            break\n\n    block = lines[start_line_num:line_num]\n    block.append(\"@@ @@\")\n\n    if block[0].startswith(\"--- \") and block[1].startswith(\"+++ \"):\n        # Extract the file path, considering that it might contain spaces\n        fname = block[1][4:].strip()\n        block = block[2:]\n    else:\n        fname = None\n\n    edits = []\n\n    keeper = False\n    hunk = []\n    op = \" \"\n    for line in block:\n        hunk.append(line)\n        if len(line) < 2:\n            continue\n\n        if line.startswith(\"+++ \") and hunk[-2].startswith(\"--- \"):\n            if hunk[-3] == \"\\n\":\n                hunk = hunk[:-3]\n            else:\n                hunk = hunk[:-2]\n\n            edits.append((fname, hunk))\n            hunk = []\n            keeper = False\n\n            fname = line[4:].strip()\n            continue\n\n        op = line[0]\n        if op in \"-+\":\n            keeper = True\n            continue\n        if op != \"@\":\n            continue\n        if not keeper:\n            hunk = []\n            continue\n\n        hunk = hunk[:-1]\n        edits.append((fname, hunk))\n        hunk = []\n        keeper = False\n\n    return line_num + 1, edits\n\nprocess_fenced_block(lines=['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n'], start_line_num=4)", "Selected Statement": "keeper = False", "Function Input": {"lines": "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']", "start_line_num": "4"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"lines": [[1, "['\\n', 'Some text...\\n', '\\n', '```diff\\n', '--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '```\\n']"]], "start_line_num": [[1, "4"]], "line_num": [[2.0, "4"], [2.0, "5"], [2.0, "6"], [2.0, "7"], [2.0, "8"], [2.0, "9"]], "line": [[3.0, "'--- /dev/null\\n'"], [3.0, "'+++ file.txt\\n'"], [3.0, "'@@ ... @@\\n'"], [3.0, "'-Original\\n'"], [3.0, "'+Modified\\n'"], [3.0, "'```\\n'"], [22.0, "'@@ ... @@\\n'"], [22.0, "'-Original\\n'"], [22.0, "'+Modified\\n'"], [22.0, "'@@ @@'"]], "block": [[7.0, "['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n']"], [8.0, "['--- /dev/null\\n', '+++ file.txt\\n', '@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@']"], [13.0, "['@@ ... @@\\n', '-Original\\n', '+Modified\\n', '@@ @@']"]], "fname": [[12.0, "'file.txt'"]], "edits": [[17.0, "[]"], [51.0, "[('file.txt', ['-Original\\n', '+Modified\\n'])]"]], "keeper": [[19.0, "False"], [42.0, "True"], [53.0, "False"]], "hunk": [[20.0, "[]"], [23.0, "['@@ ... @@\\n']"], [47.0, "[]"], [23.0, "['-Original\\n']"], [23.0, "['-Original\\n', '+Modified\\n']"], [23.0, "['-Original\\n', '+Modified\\n', '@@ @@']"], [50.0, "['-Original\\n', '+Modified\\n']"], [52.0, "[]"]], "op": [[21.0, "' '"], [40.0, "'@'"], [40.0, "'-'"], [40.0, "'+'"], [40.0, "'@'"]]}, "Program Information": "Project Name: paul-gauthier+aider", "idx": 516, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _addpoints(sol, distances, prec):\n    \"\"\"\n    Try for each point to add it to a given solution-approach.\n\n    gives all possibilties and a status about the solution:\n        state = 0: possibilities found\n        state = 1: no possibilities\n        state = 2: solution-approach has a contradiction with a point\n    \"\"\"\n    res = []\n\n    posfound = False\n\n    # generate all missing points in the solution approach\n    pleft = []\n    for n, m in enumerate(sol):\n        if np.ndim(m) == 0:\n            pleft.append(n)\n\n    # try each point to add to the given solution-approach\n    for i in pleft:\n        ires, state = _addpoint(sol, i, distances, prec)\n\n        # if a point is addable, add new solution-approach to the result\n        if state == 0:\n            posfound = True\n            for j in ires:\n                res.append(dcopy(j))\n        # if one point gives a contradiction, return empty result and state 2\n        elif state == 2:\n            return [], 2\n\n    # if no point is addable, return empty result and state 1\n    if posfound:\n        return res, 0\n\n    return res, 1\n\n_addpoints(sol=[array([0., 0.]), array([3., 0.]), 0, 0], distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "posfound = False", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "res": [[10.0, "[]"], [28.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0]]"], [28.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0]]"], [28.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0], [array([0., 0.]), array([3., 0.]), 0, array([0.16666667, 0.9860133 ])]]"], [28.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0], [array([0., 0.]), array([3., 0.]), 0, array([0.16666667, 0.9860133 ])], [array([0., 0.]), array([3., 0.]), 0, array([ 0.16666667, -0.9860133 ])]]"]], "posfound": [[12.0, "False"], [26.0, "True"]], "pleft": [[15.0, "[]"], [18.0, "[2]"], [18.0, "[2, 3]"]], "n": [[16.0, "0"], [16.0, "1"], [16.0, "2"], [16.0, "3"]], "m": [[16.0, "array([0., 0.])"], [16.0, "array([3., 0.])"], [16.0, "0"]], "i": [[21.0, "2"], [21.0, "3"]], "ires": [[22.0, "[[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0], [array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0]]"], [22.0, "[[array([0., 0.]), array([3., 0.]), 0, array([0.16666667, 0.9860133 ])], [array([0., 0.]), array([3., 0.]), 0, array([ 0.16666667, -0.9860133 ])]]"]], "state": [[22.0, "0"]], "j": [[27.0, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), 0]"], [27.0, "[array([0., 0.]), array([3., 0.]), array([ 3.5       , -1.93649167]), 0]"], [27.0, "[array([0., 0.]), array([3., 0.]), 0, array([0.16666667, 0.9860133 ])]"], [27.0, "[array([0., 0.]), array([3., 0.]), 0, array([ 0.16666667, -0.9860133 ])]"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 517, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _pntcoord(sol, i, n, m, distances, prec):\n    \"\"\"\n    Generate coordinates for point i in constellation to points m and n.\n\n    Check if these coordinates are valid with all other points in the solution.\n    \"\"\"\n    tmppnt = []\n\n    state = 1\n\n    pntscount = len(sol)\n\n    # if no distances known, return empty result and the unknown-state\n    if distances[i, n] < -0.5 or distances[i, m] < -0.5:\n        return tmppnt, state\n\n    # if the Triangle inequality is not fullfilled give a contradiction\n    if distances[i, n] + distances[i, m] < _dist(sol[n], sol[m]):\n        state = 2\n        return tmppnt, state\n\n    # generate the affine rotation to bring the points in the right place\n    g = _affinef(*_invtranmat(*_tranmat(sol[n], sol[m])))\n\n    # generate the coordinates\n    x = _xvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n    y1, y2 = _yvalue(distances[i, n], distances[i, m], _dist(sol[n], sol[m]))\n\n    # generate the possible positons\n    pos1 = g(np.array([x, y1]))\n    pos2 = g(np.array([x, y2]))\n\n    valid1 = True\n    valid2 = True\n\n    # check if the possible positions are valid\n    for k in range(pntscount):\n        if np.ndim(sol[k]) != 0 and distances[i, k] > -0.5:\n            valid1 &= abs(_dist(sol[k], pos1) - distances[i, k]) < prec\n            valid2 &= abs(_dist(sol[k], pos2) - distances[i, k]) < prec\n\n    # if any position is valid, add it to the result\n    if valid1 or valid2:\n        state = 0\n        same = abs(y1 - y2) < prec / 4.0\n        if valid1:\n            tmppnt.append(dcopy(pos1))\n        if valid2 and not same:\n            tmppnt.append(dcopy(pos2))\n    # if the positions are not valid, give a contradiction\n    else:\n        state = 2\n\n    return tmppnt, state\n\n_pntcoord(sol=[array([0., 0.]), array([3., 0.]), 0, 0], i=2, n=0, m=1, distances=array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]]), prec=0.1)", "Selected Statement": "state = 1", "Function Input": {"sol": "[array([0., 0.]), array([3., 0.]), 0, 0]", "i": "2", "n": "0", "m": "1", "distances": "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])", "prec": "0.1"}, "Variable Values Before Statement": {"Constant": "1"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"sol": [[1, "[array([0., 0.]), array([3., 0.]), 0, 0]"]], "i": [[1, "2"]], "n": [[1, "0"]], "m": [[1, "1"]], "distances": [[1, "array([[ 0.,  3.,  4.,  1.],       [ 3.,  0.,  2.,  3.],       [ 4.,  2.,  0., -1.],       [ 1.,  3., -1.,  0.]])"]], "prec": [[1, "0.1"]], "tmppnt": [[7.0, "[]"], [47.0, "[array([3.5       , 1.93649167])]"], [49.0, "[array([3.5       , 1.93649167]), array([ 3.5       , -1.93649167])]"]], "state": [[9.0, "1"], [44.0, "0"]], "pntscount": [[11.0, "4"]], "g": [[23.0, "<function _affinef.<locals>.func at 0x7f9d2f5dc9d0>"]], "x": [[26.0, "3.5"]], "y1": [[27.0, "1.9364916731037083"]], "y2": [[27.0, "-1.9364916731037083"]], "pos1": [[30.0, "array([3.5       , 1.93649167])"]], "pos2": [[31.0, "array([ 3.5       , -1.93649167])"]], "valid1": [[33.0, "True"]], "valid2": [[34.0, "True"]], "k": [[37.0, "0"], [37.0, "1"], [37.0, "2"], [37.0, "3"]], "same": [[45.0, "False"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 518, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _solequal(sol1, sol2, prec):\n    \"\"\"\n    Compare two different solutions with a given precicion.\n\n    Return True if they equal.\n    \"\"\"\n    res = True\n\n    for sol_1, sol_2 in zip(sol1, sol2):\n        if np.ndim(sol_1) != 0 and np.ndim(sol_2) != 0:\n            res &= _dist(sol_1, sol_2) < prec\n        elif np.ndim(sol_1) != 0 and np.ndim(sol_2) == 0:\n            return False\n        elif np.ndim(sol_1) == 0 and np.ndim(sol_2) != 0:\n            return False\n\n    return res\n\n_solequal(sol1=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])], sol2=[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])], prec=0.1)", "Selected Statement": "res = True", "Function Input": {"sol1": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]", "sol2": "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]", "prec": "0.1"}, "Variable Values Before Statement": {"Constant": "True"}, "Value After Statement Execution": "True", "Variable States During Runtime": {"sol1": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([ 0.16666667, -0.9860133 ])]"]], "sol2": [[1, "[array([0., 0.]), array([3., 0.]), array([3.5       , 1.93649167]), array([0.16666667, 0.9860133 ])]"]], "prec": [[1, "0.1"]], "res": [[7.0, "True"], [11.0, "False"]], "sol_1": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([ 0.16666667, -0.9860133 ])"]], "sol_2": [[9.0, "array([0., 0.])"], [9.0, "array([3., 0.])"], [9.0, "array([3.5       , 1.93649167])"], [9.0, "array([0.16666667, 0.9860133 ])"]]}, "Program Information": "Project Name: GeoStat-Framework+welltestpy", "idx": 519, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _test_forward_nd_quad_pot(n, ndim, abs=None):\n    x = np.arange(n) - n / 2.0\n    xs = np.meshgrid(*([x]*ndim), indexing=\"ij\")\n    xs_sq = reduce(lambda x,y:x+y*y, xs, 0.0)\n\n    # phi is quadratic on all dimension, so the target will be scaled\n    # source on all dimension by (1+B)\n    B = 1.0\n    scale = 1 + B\n    sigma = (n/30.)\n    source = np.exp(-xs_sq / (2*sigma**2))\n    source_copy = np.copy(source)\n    phi = 0.5*B*xs_sq\n    target = sb.forward(source, phi)\n\n    target_calc = (scale**-ndim)*np.exp(-xs_sq / (2*(sigma*scale)**2))\n\n    # accurate within 2.5*(1/n)*100%\n    abs = 2.5/n if abs is None else abs\n    assert target == pytest.approx(target_calc, abs=abs)\n\n    # check the dimension of target\n    assert np.ndim(target) == ndim\n\n    # make sure the source is not changed\n    assert np.all(source == source_copy)\n\n_test_forward_nd_quad_pot(n=100, ndim=1, abs=None)", "Selected Statement": "B = 1.0", "Function Input": {"n": "100", "ndim": "1", "abs": "None"}, "Variable Values Before Statement": {"Constant": "1.0"}, "Value After Statement Execution": "1.0", "Variable States During Runtime": {"n": [[1, "100"]], "ndim": [[1, "1"]], "abs": [[1, "None"], [19.0, "0.025"]], "x": [[2.0, "array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])"]], "xs": [[3.0, "[array([-50., -49., -48., -47., -46., -45., -44., -43., -42., -41., -40.,       -39., -38., -37., -36., -35., -34., -33., -32., -31., -30., -29.,       -28., -27., -26., -25., -24., -23., -22., -21., -20., -19., -18.,       -17., -16., -15., -14., -13., -12., -11., -10.,  -9.,  -8.,  -7.,        -6.,  -5.,  -4.,  -3.,  -2.,  -1.,   0.,   1.,   2.,   3.,   4.,         5.,   6.,   7.,   8.,   9.,  10.,  11.,  12.,  13.,  14.,  15.,        16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,  24.,  25.,  26.,        27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,  36.,  37.,        38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,  48.,        49.])]"]], "xs_sq": [[4.0, "array([2.500e+03, 2.401e+03, 2.304e+03, 2.209e+03, 2.116e+03, 2.025e+03,       1.936e+03, 1.849e+03, 1.764e+03, 1.681e+03, 1.600e+03, 1.521e+03,       1.444e+03, 1.369e+03, 1.296e+03, 1.225e+03, 1.156e+03, 1.089e+03,       1.024e+03, 9.610e+02, 9.000e+02, 8.410e+02, 7.840e+02, 7.290e+02,       6.760e+02, 6.250e+02, 5.760e+02, 5.290e+02, 4.840e+02, 4.410e+02,       4.000e+02, 3.610e+02, 3.240e+02, 2.890e+02, 2.560e+02, 2.250e+02,       1.960e+02, 1.690e+02, 1.440e+02, 1.210e+02, 1.000e+02, 8.100e+01,       6.400e+01, 4.900e+01, 3.600e+01, 2.500e+01, 1.600e+01, 9.000e+00,       4.000e+00, 1.000e+00, 0.000e+00, 1.000e+00, 4.000e+00, 9.000e+00,       1.600e+01, 2.500e+01, 3.600e+01, 4.900e+01, 6.400e+01, 8.100e+01,       1.000e+02, 1.210e+02, 1.440e+02, 1.690e+02, 1.960e+02, 2.250e+02,       2.560e+02, 2.890e+02, 3.240e+02, 3.610e+02, 4.000e+02, 4.410e+02,       4.840e+02, 5.290e+02, 5.760e+02, 6.250e+02, 6.760e+02, 7.290e+02,       7.840e+02, 8.410e+02, 9.000e+02, 9.610e+02, 1.024e+03, 1.089e+03,       1.156e+03, 1.225e+03, 1.296e+03, 1.369e+03, 1.444e+03, 1.521e+03,       1.600e+03, 1.681e+03, 1.764e+03, 1.849e+03, 1.936e+03, 2.025e+03,       2.116e+03, 2.209e+03, 2.304e+03, 2.401e+03])"]], "B": [[8.0, "1.0"]], "scale": [[9.0, "2.0"]], "sigma": [[10.0, "3.3333333333333335"]], "source": [[11.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "source_copy": [[12.0, "array([1.38634329e-49, 1.19303368e-47, 9.38313827e-46, 6.74461286e-44,       4.43077231e-42, 2.66020642e-40, 1.45970379e-38, 7.32027899e-37,       3.35508886e-35, 1.40538048e-33, 5.38018616e-32, 1.88240985e-30,       6.01928028e-29, 1.75909155e-27, 4.69835486e-26, 1.14687658e-24,       2.55859208e-23, 5.21673666e-22, 9.72098502e-21, 1.65552266e-19,       2.57675711e-18, 3.66543340e-17, 4.76530474e-16, 5.66199552e-15,       6.14839641e-14, 6.10193668e-13, 5.53461007e-12, 4.58796249e-11,       3.47589128e-10, 2.40672244e-09, 1.52299797e-08, 8.80817920e-08,       4.65571572e-07, 2.24905597e-06, 9.92950431e-06, 4.00652974e-05,       1.47748360e-04, 4.97955422e-04, 1.53381068e-03, 4.31784001e-03,       1.11089965e-02, 2.61214099e-02, 5.61347628e-02, 1.10250525e-01,       1.97898699e-01, 3.24652467e-01, 4.86752256e-01, 6.66976811e-01,       8.35270211e-01, 9.55997482e-01, 1.00000000e+00, 9.55997482e-01,       8.35270211e-01, 6.66976811e-01, 4.86752256e-01, 3.24652467e-01,       1.97898699e-01, 1.10250525e-01, 5.61347628e-02, 2.61214099e-02,       1.11089965e-02, 4.31784001e-03, 1.53381068e-03, 4.97955422e-04,       1.47748360e-04, 4.00652974e-05, 9.92950431e-06, 2.24905597e-06,       4.65571572e-07, 8.80817920e-08, 1.52299797e-08, 2.40672244e-09,       3.47589128e-10, 4.58796249e-11, 5.53461007e-12, 6.10193668e-13,       6.14839641e-14, 5.66199552e-15, 4.76530474e-16, 3.66543340e-17,       2.57675711e-18, 1.65552266e-19, 9.72098502e-21, 5.21673666e-22,       2.55859208e-23, 1.14687658e-24, 4.69835486e-26, 1.75909155e-27,       6.01928028e-29, 1.88240985e-30, 5.38018616e-32, 1.40538048e-33,       3.35508886e-35, 7.32027899e-37, 1.45970379e-38, 2.66020642e-40,       4.43077231e-42, 6.74461286e-44, 9.38313827e-46, 1.19303368e-47])"]], "phi": [[13.0, "array([1.2500e+03, 1.2005e+03, 1.1520e+03, 1.1045e+03, 1.0580e+03,       1.0125e+03, 9.6800e+02, 9.2450e+02, 8.8200e+02, 8.4050e+02,       8.0000e+02, 7.6050e+02, 7.2200e+02, 6.8450e+02, 6.4800e+02,       6.1250e+02, 5.7800e+02, 5.4450e+02, 5.1200e+02, 4.8050e+02,       4.5000e+02, 4.2050e+02, 3.9200e+02, 3.6450e+02, 3.3800e+02,       3.1250e+02, 2.8800e+02, 2.6450e+02, 2.4200e+02, 2.2050e+02,       2.0000e+02, 1.8050e+02, 1.6200e+02, 1.4450e+02, 1.2800e+02,       1.1250e+02, 9.8000e+01, 8.4500e+01, 7.2000e+01, 6.0500e+01,       5.0000e+01, 4.0500e+01, 3.2000e+01, 2.4500e+01, 1.8000e+01,       1.2500e+01, 8.0000e+00, 4.5000e+00, 2.0000e+00, 5.0000e-01,       0.0000e+00, 5.0000e-01, 2.0000e+00, 4.5000e+00, 8.0000e+00,       1.2500e+01, 1.8000e+01, 2.4500e+01, 3.2000e+01, 4.0500e+01,       5.0000e+01, 6.0500e+01, 7.2000e+01, 8.4500e+01, 9.8000e+01,       1.1250e+02, 1.2800e+02, 1.4450e+02, 1.6200e+02, 1.8050e+02,       2.0000e+02, 2.2050e+02, 2.4200e+02, 2.6450e+02, 2.8800e+02,       3.1250e+02, 3.3800e+02, 3.6450e+02, 3.9200e+02, 4.2050e+02,       4.5000e+02, 4.8050e+02, 5.1200e+02, 5.4450e+02, 5.7800e+02,       6.1250e+02, 6.4800e+02, 6.8450e+02, 7.2200e+02, 7.6050e+02,       8.0000e+02, 8.4050e+02, 8.8200e+02, 9.2450e+02, 9.6800e+02,       1.0125e+03, 1.0580e+03, 1.1045e+03, 1.1520e+03, 1.2005e+03])"]], "target": [[14.0, "array([3.05096834e-13, 1.53620093e-12, 2.76730504e-12, 1.28535587e-11,       2.29398124e-11, 9.83671882e-11, 1.73794564e-10, 6.88577891e-10,       1.20336122e-09, 4.40917555e-09, 7.61498987e-09, 2.58279429e-08,       4.40408960e-08, 1.38413341e-07, 2.32785786e-07, 6.78656885e-07,       1.12452798e-06, 3.04464007e-06, 4.96475215e-06, 1.24987004e-05,       2.00326487e-05, 4.69534144e-05, 7.38741801e-05, 1.61425945e-04,       2.48977711e-04, 5.07941525e-04, 7.66905340e-04, 1.46291267e-03,       2.15892000e-03, 3.85670914e-03, 5.55449827e-03, 9.30760160e-03,       1.30607049e-02, 2.05640432e-02, 2.80673814e-02, 4.15963220e-02,       5.51252627e-02, 7.70373061e-02, 9.89493495e-02, 1.30637792e-01,       1.62326234e-01, 2.02851181e-01, 2.43376128e-01, 2.88432267e-01,       3.33488405e-01, 3.75561756e-01, 4.17635106e-01, 4.47816923e-01,       4.77998741e-01, 4.88999370e-01, 5.00000000e-01, 4.88999370e-01,       4.77998741e-01, 4.47816923e-01, 4.17635106e-01, 3.75561756e-01,       3.33488405e-01, 2.88432267e-01, 2.43376128e-01, 2.02851181e-01,       1.62326234e-01, 1.30637792e-01, 9.89493495e-02, 7.70373061e-02,       5.51252627e-02, 4.15963220e-02, 2.80673814e-02, 2.05640432e-02,       1.30607049e-02, 9.30760160e-03, 5.55449827e-03, 3.85670914e-03,       2.15892000e-03, 1.46291267e-03, 7.66905340e-04, 5.07941525e-04,       2.48977711e-04, 1.61425945e-04, 7.38741801e-05, 4.69534144e-05,       2.00326487e-05, 1.24987004e-05, 4.96475215e-06, 3.04464007e-06,       1.12452798e-06, 6.78656885e-07, 2.32785786e-07, 1.38413341e-07,       4.40408960e-08, 2.58279429e-08, 7.61498987e-09, 4.40917555e-09,       1.20336122e-09, 6.88577891e-10, 1.73794564e-10, 9.83671882e-11,       2.29398124e-11, 1.28535587e-11, 2.76730504e-12, 1.53620093e-12])"]], "target_calc": [[16.0, "array([3.05096834e-13, 9.29251306e-13, 2.76730504e-12, 8.05766599e-12,       2.29398124e-11, 6.38555777e-11, 1.73794564e-10, 4.62489538e-10,       1.20336122e-09, 3.06138876e-09, 7.61498987e-09, 1.85203228e-08,       4.40408960e-08, 1.02398151e-07, 2.32785786e-07, 5.17427106e-07,       1.12452798e-06, 2.38956987e-06, 4.96475215e-06, 1.00856475e-05,       2.00326487e-05, 3.89046343e-05, 7.38741801e-05, 1.37155234e-04,       2.48977711e-04, 4.41913153e-04, 7.66905340e-04, 1.30129263e-03,       2.15892000e-03, 3.50208357e-03, 5.55449827e-03, 8.61373566e-03,       1.30607049e-02, 1.93628852e-02, 2.80673814e-02, 3.97797544e-02,       5.51252627e-02, 7.46908876e-02, 9.89493495e-02, 1.28170076e-01,       1.62326234e-01, 2.01010692e-01, 2.43376128e-01, 2.88114537e-01,       3.33488405e-01, 3.77419801e-01, 4.17635106e-01, 4.51853539e-01,       4.77998741e-01, 4.94406522e-01, 5.00000000e-01, 4.94406522e-01,       4.77998741e-01, 4.51853539e-01, 4.17635106e-01, 3.77419801e-01,       3.33488405e-01, 2.88114537e-01, 2.43376128e-01, 2.01010692e-01,       1.62326234e-01, 1.28170076e-01, 9.89493495e-02, 7.46908876e-02,       5.51252627e-02, 3.97797544e-02, 2.80673814e-02, 1.93628852e-02,       1.30607049e-02, 8.61373566e-03, 5.55449827e-03, 3.50208357e-03,       2.15892000e-03, 1.30129263e-03, 7.66905340e-04, 4.41913153e-04,       2.48977711e-04, 1.37155234e-04, 7.38741801e-05, 3.89046343e-05,       2.00326487e-05, 1.00856475e-05, 4.96475215e-06, 2.38956987e-06,       1.12452798e-06, 5.17427106e-07, 2.32785786e-07, 1.02398151e-07,       4.40408960e-08, 1.85203228e-08, 7.61498987e-09, 3.06138876e-09,       1.20336122e-09, 4.62489538e-10, 1.73794564e-10, 6.38555777e-11,       2.29398124e-11, 8.05766599e-12, 2.76730504e-12, 9.29251306e-13])"]], "@py_assert3": [[20.0, "None"]], "@py_assert7": [[20.0, "None"]], "@py_assert1": [[20.0, "None"]], "@py_assert4": [[23.0, "None"]], "@py_assert6": [[23.0, "None"]], "@py_assert8": [[26.0, "None"]]}, "Program Information": "Project Name: OxfordHED+sunbear", "idx": 520, "quantized value": "Positive Small", "mapping_info": {"value == 0.0": "zero", "0.0 < value <= 1.0": "Positive Small", "1.0 < value <= 10.0": "Positive Regular", "value > 10.0": "Positive Large", "-1.0 <= value < 0.0": "Negative Small", "-10.0 <= value < -1.0": "Negative Regular", "value < -10.0": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def parse_access_method(access_method: str):\n    num_workers = 0\n    scheduler = \"threaded\"\n    download = access_method.startswith(\"download\")\n    local = access_method.startswith(\"local\")\n    if download or local:\n        split = access_method.split(\":\")\n        if len(split) == 1:\n            split.extend((\"threaded\", \"0\"))\n        elif len(split) == 2:\n            split.append(\"threaded\" if split[1].isnumeric() else \"0\")\n        elif len(split) >= 3:\n            num_integers = sum(1 for i in split if i.isnumeric())\n            if num_integers != 1 or len(split) > 3:\n                raise ValueError(\n                    \"Invalid access_method format. Expected format is one of the following: {download, download:scheduler, download:num_workers, download:scheduler:num_workers, download:num_workers:scheduler}\"\n                )\n\n        access_method = \"download\" if download else \"local\"\n        num_worker_index = 1 if split[1].isnumeric() else 2\n        scheduler_index = 3 - num_worker_index\n        num_workers = int(split[num_worker_index])\n        scheduler = split[scheduler_index]\n    return access_method, num_workers, scheduler\n\nparse_access_method(access_method='download')", "Selected Statement": "num_workers = 0", "Function Input": {"access_method": "'download'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"access_method": [[1, "'download'"]], "num_workers": [[2.0, "0"]], "scheduler": [[3.0, "'threaded'"]], "download": [[4.0, "True"]], "local": [[5.0, "False"]], "split": [[7.0, "['download']"], [9.0, "['download', 'threaded', '0']"]], "num_worker_index": [[20.0, "2"]], "scheduler_index": [[21.0, "1"]]}, "Program Information": "Project Name: activeloopai+deeplake", "idx": 521, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_word_set_total_score(board, word_set, num_move_locations):\n    total_score = 0\n    word_score = 0\n\n    for word_location_set in word_set:\n        word_score = 0\n        word_multiplier = 1\n\n        for location in word_location_set:\n            square = board.board_square_dict[location]\n            word_multiplier *= square.word_multiplier\n            word_score += square.tile.point_value * square.letter_multiplier\n\n        word_score *= word_multiplier\n        total_score += word_score\n\n    if num_move_locations == config.PLAYER_RACK_SIZE:\n        total_score += config.BINGO_SCORE\n\n    return total_score\n\nget_word_set_total_score(board=  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________, word_set={frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}, num_move_locations=5)", "Selected Statement": "total_score = 0", "Function Input": {"board": "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________", "word_set": "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}", "num_move_locations": "5"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"board": [[1, "  abcdefghijklmno1 _______________2 _______________3 _______________4 _______________5 _______________6 _______________7 _______________8 _______BAKER___9 _______________10_______________11_______________12_______________13_______________14_______________15_______________"]], "word_set": [[1, "{frozenset(), frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})}"]], "num_move_locations": [[1, "5"]], "total_score": [[2.0, "0"], [15.0, "24"]], "word_score": [[3.0, "0"], [12.0, "3"], [12.0, "8"], [12.0, "10"], [12.0, "11"], [12.0, "12"], [14.0, "24"]], "word_location_set": [[5.0, "frozenset()"], [5.0, "frozenset({('h', 8), ('j', 8), ('l', 8), ('i', 8), ('k', 8)})"]], "word_multiplier": [[7.0, "1"], [11.0, "2"]], "location": [[9.0, "('h', 8)"], [9.0, "('j', 8)"], [9.0, "('l', 8)"], [9.0, "('i', 8)"], [9.0, "('k', 8)"]], "square": [[10.0, "B"], [10.0, "K"], [10.0, "R"], [10.0, "A"], [10.0, "E"]]}, "Program Information": "Project Name: benjamincrom+scrabble", "idx": 522, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def rolling_mean_by_h(x, h, w, name):\n    \"\"\"Compute a rolling mean of x, after first aggregating by h.\n\n    Right-aligned. Computes a single mean for each unique value of h. Each\n    mean is over at least w samples.\n\n    Parameters\n    ----------\n    x: Array.\n    h: Array of horizon for each value in x.\n    w: Integer window size (number of elements).\n    name: Name for metric in result dataframe\n\n    Returns\n    -------\n    Dataframe with columns horizon and name, the rolling mean of x.\n    \"\"\"\n    # Aggregate over h\n    df = pd.DataFrame({'x': x, 'h': h})\n    df2 = (\n        df.groupby('h').agg(['sum', 'count']).reset_index().sort_values('h')\n    )\n    xs = df2['x']['sum'].values\n    ns = df2['x']['count'].values\n    hs = df2.h.values\n\n    trailing_i = len(df2) - 1\n    x_sum = 0\n    n_sum = 0\n    # We don't know output size but it is bounded by len(df2)\n    res_x = np.empty(len(df2))\n\n    # Start from the right and work backwards\n    for i in range(len(df2) - 1, -1, -1):\n        x_sum += xs[i]\n        n_sum += ns[i]\n        while n_sum >= w:\n            # Include points from the previous horizon. All of them if still\n            # less than w, otherwise weight the mean by the difference\n            excess_n = n_sum - w\n            excess_x = excess_n * xs[i] / ns[i]\n            res_x[trailing_i] = (x_sum - excess_x)/ w\n            x_sum -= xs[trailing_i]\n            n_sum -= ns[trailing_i]\n            trailing_i -= 1\n\n    res_h = hs[(trailing_i + 1):]\n    res_x = res_x[(trailing_i + 1):]\n\n    return pd.DataFrame({'horizon': res_h, name: res_x})\n\nrolling_mean_by_h(x=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), h=array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), w=1, name='x')", "Selected Statement": "x_sum = 0", "Function Input": {"x": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "h": "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])", "w": "1", "name": "'x'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"x": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "h": [[1, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "w": [[1, "1"]], "name": [[1, "'x'"]], "df": [[19.0, "   x  h0  0  01  1  12  2  23  3  34  4  45  5  56  6  67  7  78  8  89  9  9"]], "df2": [[20.0, "   h   x           sum count0  0   0     11  1   1     12  2   2     13  3   3     14  4   4     15  5   5     16  6   6     17  7   7     18  8   8     19  9   9     1"]], "xs": [[23.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "ns": [[24.0, "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"]], "hs": [[25.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]], "trailing_i": [[27.0, "9"], [45.0, "8"], [45.0, "7"], [45.0, "6"], [45.0, "5"], [45.0, "4"], [45.0, "3"], [45.0, "2"], [45.0, "1"], [45.0, "0"], [45.0, "-1"]], "x_sum": [[28.0, "0"], [35.0, "9"], [43.0, "0"], [35.0, "8"], [43.0, "0"], [35.0, "7"], [43.0, "0"], [35.0, "6"], [43.0, "0"], [35.0, "5"], [43.0, "0"], [35.0, "4"], [43.0, "0"], [35.0, "3"], [43.0, "0"], [35.0, "2"], [43.0, "0"], [35.0, "1"], [43.0, "0"]], "n_sum": [[29.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"], [36.0, "1"], [44.0, "0"]], "res_x": [[31.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 4.4e-323])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 4.0e-323, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 3.5e-323, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       3.0e-323, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 2.5e-323,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 2.0e-323, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.0e+000, 4.9e-324, 9.9e-324, 1.5e-323, 4.0e+000, 5.0e+000,       6.0e+000, 7.0e+000, 8.0e+000, 9.0e+000])"], [42.0, "array([0.e+000, 5.e-324, 1.e-323, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0.e+000, 5.e-324, 2.e+000, 3.e+000, 4.e+000, 5.e+000, 6.e+000,       7.e+000, 8.e+000, 9.e+000])"], [42.0, "array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])"]], "i": [[34.0, "9"], [34.0, "8"], [34.0, "7"], [34.0, "6"], [34.0, "5"], [34.0, "4"], [34.0, "3"], [34.0, "2"], [34.0, "1"], [34.0, "0"]], "excess_n": [[40.0, "0"]], "excess_x": [[41.0, "0.0"]], "res_h": [[47.0, "array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"]]}, "Program Information": "Project Name: facebook+prophet", "idx": 523, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def requires_crt(reason=None):\n    if reason is None:\n        reason = \"Test requires awscrt to be installed\"\n\n    def decorator(func):\n        return unittest.skipIf(not HAS_CRT, reason)(func)\n\n    return decorator\n\nrequires_crt(reason=None)", "Selected Statement": "reason = \"Test requires awscrt to be installed\"", "Function Input": {"reason": "None"}, "Variable Values Before Statement": {"Constant": "\"Test requires awscrt to be installed\""}, "Value After Statement Execution": "\"Test requires awscrt to be installed\"", "Variable States During Runtime": {"reason": [[1, "None"], [3.0, "'Test requires awscrt to be installed'"]], "decorator": [[5.0, "<function requires_crt.<locals>.decorator at 0x7fbbe4f994c0>"]]}, "Program Information": "Project Name: boto+boto3", "idx": 524, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _check(self) -> None:\n        \"\"\"Check the syntax of the expression.\n\n        :raises ValueError:\n            If the expression is incomplete.  This error is aimed at debugging\n            the expression so it is very verbose.\n        \"\"\"\n        stack_size = 0\n        for i, token_ in enumerate(self._tokens):\n            stack_size -= token_.pops\n            if stack_size < 0:\n                raise ValueError(\n                    self._format_syntax_error(\n                        f\"'{token_}' takes {token_.pops} argument(s) but the stack\"\n                        f\" will only have {stack_size + token_.pops} element(s)\",\n                        i,\n                    )\n                )\n            stack_size += token_.puts\n        if stack_size == 0:\n            raise ValueError(\n                self._format_syntax_error(\"expression does not produce a result\")\n            )\n        if stack_size > 1:\n            raise ValueError(\n                self._format_syntax_error(\n                    f\"expression produces too many results ({stack_size}), \"\n                    \"expected 1\"\n                )\n            )\n\n_check(self=CompleteExpression([Literal(1)]), self[0]=Literal(1))", "Selected Statement": "stack_size = 0", "Function Input": {"self": "CompleteExpression([Literal(1)])", "self[0]": "Literal(1)"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "CompleteExpression([Literal(1)])"]], "self[0]": [[1, "Literal(1)"]], "stack_size": [[8.0, "0"], [19.0, "1"]], "i": [[9.0, "0"]], "token_": [[9.0, "Literal(1)"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 525, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _simulate(self) -> Tuple[int, int]:\n        \"\"\"Simulate the expression to determine inputs and outputs.\n\n        :return:\n            A tuple of the number of inputs the expression takes and the number\n            of outputs from the expression.\n        \"\"\"\n        inputs = 0\n        outputs = 0\n        for token_ in self._tokens:\n            outputs -= token_.pops\n            inputs = max(inputs, -outputs)\n            outputs += token_.puts\n        return inputs, outputs + inputs\n\n_simulate(self=Expression([Literal(1)]), self[0]=Literal(1))", "Selected Statement": "inputs = 0", "Function Input": {"self": "Expression([Literal(1)])", "self[0]": "Literal(1)"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"self": [[1, "Expression([Literal(1)])"]], "self[0]": [[1, "Literal(1)"]], "inputs": [[8.0, "0"]], "outputs": [[9.0, "0"], [13.0, "1"]], "token_": [[10.0, "Literal(1)"]]}, "Program Information": "Project Name: ccarocean+pyrads", "idx": 526, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def run_train_test(monkeypatch, overwrite_values: dict):\n    max_train_iters = 32\n    checkpoint_args = {\"train_iters\": max_train_iters}\n    overwrite_values = checkpoint_args\n    input_args = [\"train.py\", \"tests/config/test_setup.yml\"]\n    deepspeed_main_args = simulate_deepy_env(monkeypatch, input_args)\n\n    # Train model, whilst patching collect_loss_for_unit_test to track model loss at each step\n    loss_per_iteration = []\n    with patch(\n        \"megatron.training.collect_loss_for_unit_test\",\n        side_effect=lambda x: loss_per_iteration.append(x),\n    ):\n        train.main(input_args=deepspeed_main_args, overwrite_values=overwrite_values)\n        assert (\n            len(loss_per_iteration) == max_train_iters\n        ), \"patching should have collected loss values from each train step\"\n\n        # loss should have decreased by now (otherwise increasing the max_steps parameter could have the testcase pass)\n        assert min(loss_per_iteration) < loss_per_iteration[0], (\n            \"training loss should improve within \" + str(max_train_iters) + \" steps\"\n        )\n\nrun_train_test(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}, overwrite_values={'pos_emb': 'rpe'})", "Selected Statement": "max_train_iters = 32", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}", "overwrite_values": "{'pos_emb': 'rpe'}"}, "Variable Values Before Statement": {"Constant": "32"}, "Value After Statement Execution": "32", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [6.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/7', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_...*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(EleutherAI+gpt-neox) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 55664 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/EleutherAI+gpt-neox/EleutherAI+gpt-neox', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%5', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/7', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'EleutherAI+gpt-neox', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/EleutherAI+gpt-neox/bin/python', 'TORCH_CUDA_ARCH_LIST': '', 'KMP_DUPLICATE_LIB_OK': 'True', 'KMP_INIT_AT_FORK': 'FALSE', 'CUDA_MODULE_LOADING': 'LAZY', 'PYTEST_CURRENT_TEST': 'tests/model/test_model_train.py::test_model_training_options[pos_emb-rpe] (call)', 'WORLD_SIZE': '1', 'RANK': '0'}), 'RANK', <notset>)], _cwd=None, _savesyspath=None}"]], "overwrite_values": [[1, "{'pos_emb': 'rpe'}"], [4.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "max_train_iters": [[2.0, "32"]], "checkpoint_args": [[3.0, "{'train_iters': 32}"], [14.0, "{'train_iters': 32, 'train_batch_size': 4, 'train_micro_batch_size_per_gpu': 4, 'zero_optimization': {'stage': 0, 'allgather_partitions': True, 'reduce_scatter': True, 'allgather_bucket_size': 500000000, 'overlap_comm': False, 'reduce_bucket_size': 500000000, 'contiguous_gradients': False}}"]], "input_args": [[5.0, "['train.py', 'tests/config/test_setup.yml']"]], "deepspeed_main_args": [[6.0, "['--hostfile', 'None', '--include', 'localhost:1', 'train.py', '--deepspeed_config', 'eyJ0cmFpbl9iYXRjaF9zaXplIjogNCwgInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdSI6IDQsICJvcHRpbWl6ZXIiOiB7InR5cGUiOiAic20zIiwgInBhcmFtcyI6IHt9fSwgImZwMTYiOiB7InR5cGUiOiAiZnAxNiIsICJlbmFibGVkIjogdHJ1ZX0sICJ6ZXJvX29wdGltaXphdGlvbiI6IHsic3RhZ2UiOiAwLCAiYWxsZ2F0aGVyX3BhcnRpdGlvbnMiOiB0cnVlLCAicmVkdWNlX3NjYXR0ZXIiOiB0cnVlLCAiYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAib3ZlcmxhcF9jb21tIjogZmFsc2UsICJyZWR1Y2VfYnVja2V0X3NpemUiOiA1MDAwMDAwMDAsICJjb250aWd1b3VzX2dyYWRpZW50cyI6IGZhbHNlfSwgIndhbGxfY2xvY2tfYnJlYWtkb3duIjogdHJ1ZSwgImNvbW1zX2xvZ2dlciI6IHsiZW5hYmxlZCI6IHRydWUsICJ2ZXJib3NlIjogdHJ1ZSwgInByb2ZfYWxsIjogdHJ1ZSwgImRlYnVnIjogZmFsc2V9fQ==', '--megatron_config', 'eyJob3N0ZmlsZSI6ICJOb25lIiwgImluY2x1ZGUiOiAibG9jYWxob3N0OjEiLCAidHJhaW5fYmF0Y2hfc2l6ZSI6IDQsICJ0cmFpbl9taWNyb19iYXRjaF9zaXplX3Blcl9ncHUiOiA0LCAib3B0aW1pemVyIjogeyJ0eXBlIjogInNtMyIsICJwYXJhbXMiOiB7fX0sICJmcDE2IjogeyJ0eXBlIjogImZwMTYiLCAiZW5hYmxlZCI6IHRydWV9LCAiemVyb19vcHRpbWl6YXRpb24iOiB7InN0YWdlIjogMCwgImFsbGdhdGhlcl9wYXJ0aXRpb25zIjogdHJ1ZSwgInJlZHVjZV9zY2F0dGVyIjogdHJ1ZSwgImFsbGdhdGhlcl9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgIm92ZXJsYXBfY29tbSI6IGZhbHNlLCAicmVkdWNlX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAiY29udGlndW91c19ncmFkaWVudHMiOiBmYWxzZX0sICJ3YWxsX2Nsb2NrX2JyZWFrZG93biI6IHRydWUsICJkZWVwc3BlZWRfZXh0cmFfYXJncyI6IHsiY29tbXNfbG9nZ2VyIjogeyJlbmFibGVkIjogdHJ1ZSwgInZlcmJvc2UiOiB0cnVlLCAicHJvZl9hbGwiOiB0cnVlLCAiZGVidWciOiBmYWxzZX19LCAicHJlY2lzaW9uIjogImZwMTYiLCAibnVtX2xheWVycyI6IDIsICJoaWRkZW5fc2l6ZSI6IDgsICJudW1fYXR0ZW50aW9uX2hlYWRzIjogNCwgInNlcV9sZW5ndGgiOiAxMDI0LCAibWF4X3Bvc2l0aW9uX2VtYmVkZGluZ3MiOiAxMDI0LCAicG9zX2VtYiI6ICJyb3RhcnkiLCAibm9fd2VpZ2h0X3R5aW5nIjogdHJ1ZSwgImF0dGVudGlvbl9jb25maWciOiBbImdsb2JhbCIsICJnbG9iYWwiXSwgInNwYXJzaXR5X2NvbmZpZyI6IHt9LCAiaW5pdF9tZXRob2QiOiAic21hbGxfaW5pdCIsICJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2QiOiAid2FuZ19pbml0IiwgImxyX2RlY2F5X3N0eWxlIjogImNvc2luZSIsICJscl9kZWNheV9pdGVycyI6IDIwLCAib3B0aW1pemVyX3R5cGUiOiAic20zIiwgInplcm9fc3RhZ2UiOiAwLCAiemVyb19yZWR1Y2Vfc2NhdHRlciI6IHRydWUsICJ6ZXJvX2NvbnRpZ3VvdXNfZ3JhZGllbnRzIjogZmFsc2UsICJ6ZXJvX3JlZHVjZV9idWNrZXRfc2l6ZSI6IDUwMDAwMDAwMCwgInplcm9fYWxsZ2F0aGVyX2J1Y2tldF9zaXplIjogNTAwMDAwMDAwLCAibHIiOiAwLjAwMSwgImRhdGFfcGF0aCI6ICJkYXRhL2Vud2lrOC9lbndpazhfdGV4dF9kb2N1bWVudCIsICJkYXRhX2ltcGwiOiAibW1hcCIsICJjb25maWdfZmlsZXMiOiB7InRlc3Rfc2V0dXAueW1sIjogIiMgMTlNIHBhcmFtZXRlciBtb2RlbCwgJiBsb2NhbCBzZXR1cCB3aXRoIHNvbWUgYWRkaXRpb25hbCBzaW1wbGlmaWNhdGlvbnNcbntcbiAgIyBTZXR0aW5ncyB0byBtYWtlIHRoZSB0ZXN0IHNldHVwIGFzIGxpZ2h0d2VpZ2h0IGFzIHBvc3NpYmxlXG4gIFwiZGF0YV9wYXRoXCI6IFwiZGF0YS9lbndpazgvZW53aWs4X3RleHRfZG9jdW1lbnRcIixcbiAgXCJ2b2NhYl9maWxlXCI6IFwiZGF0YS9ncHQyLXZvY2FiLmpzb25cIixcbiAgXCJtZXJnZV9maWxlXCI6IFwiZGF0YS9ncHQyLW1lcmdlcy50eHRcIixcbiAgXCJscl9kZWNheV9pdGVyc1wiOiAyMCxcbiAgXCJ0cmFpbl9pdGVyc1wiOiAyMCxcbiAgXCJob3N0ZmlsZVwiOiBcIk5vbmVcIixcbiAgXCJpbmNsdWRlXCI6IFwibG9jYWxob3N0OjFcIixcbiAgXCJ1c2Vfd2FuZGJcIjogRmFsc2UsXG5cbiAgIyBTZXR0aW5ncyBjb3BpZWQgZnJvbSAxOU0gcGFyYW1ldGVyIGNvbmZpZyAoc29tZSBtb2RpZmljYXRpb25zIGFib3ZlLCBtZWFuaW5nIHdlIGNhbid0IHVzZSBjb25maWdzLzE5TS55bWwgZGlyZWN0bHkpXG4gIFwicGlwZV9wYXJhbGxlbF9zaXplXCI6IDEsXG4gIFwibW9kZWxfcGFyYWxsZWxfc2l6ZVwiOiAxLFxuXG4gICMgbW9kZWwgc2V0dGluZ3NcbiAgXCJudW1fbGF5ZXJzXCI6IDIsXG4gIFwiaGlkZGVuX3NpemVcIjogOCxcbiAgXCJudW1fYXR0ZW50aW9uX2hlYWRzXCI6IDQsXG4gIFwic2VxX2xlbmd0aFwiOiAxMDI0LFxuICBcIm1heF9wb3NpdGlvbl9lbWJlZGRpbmdzXCI6IDEwMjQsXG4gIFwicG9zX2VtYlwiOiBcInJvdGFyeVwiLFxuICBcIm5vX3dlaWdodF90eWluZ1wiOiB0cnVlLFxuICBcImdwdF9qX3Jlc2lkdWFsXCI6IGZhbHNlLFxuICBcIm91dHB1dF9sYXllcl9wYXJhbGxlbGlzbVwiOiBcImNvbHVtblwiLFxuXG4gIFwic2NhbGVkX3VwcGVyX3RyaWFuZ19tYXNrZWRfc29mdG1heF9mdXNpb25cIjogZmFsc2UsXG4gIFwiYmlhc19nZWx1X2Z1c2lvblwiOiBmYWxzZSxcbiAgXCJyb3BlX2Z1c2lvblwiOiBmYWxzZSxcblxuICAjIE9wdGltaXplclxuICBcIm9wdGltaXplclwiOiB7XG4gICAgXCJ0eXBlXCI6IFwic20zXCIsXG4gICAgXCJwYXJhbXNcIjoge30sXG4gIH0sXG5cbiAgIyBwcmVjaXNpb25cbiAgXCJwcmVjaXNpb25cIjogXCJmcDE2XCIsXG5cbiAgIyBpbml0IG1ldGhvZHNcbiAgXCJpbml0X21ldGhvZFwiOiBcInNtYWxsX2luaXRcIixcbiAgXCJvdXRwdXRfbGF5ZXJfaW5pdF9tZXRob2RcIjogXCJ3YW5nX2luaXRcIixcblxuICBcInRyYWluX21pY3JvX2JhdGNoX3NpemVfcGVyX2dwdVwiOiA0LFxuICBcImdhc1wiOiAxLFxuICBcImRhdGFfaW1wbFwiOiBcIm1tYXBcIixcbiAgXCJudW1fd29ya2Vyc1wiOiAxLFxuXG4gICMgYWN0aXZhdGlvbiBjaGVja3BvaW50aW5nXG4gIFwiY2hlY2twb2ludF9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcImNoZWNrcG9pbnRfbnVtX2xheWVyc1wiOiAxLFxuICBcInBhcnRpdGlvbl9hY3RpdmF0aW9uc1wiOiB0cnVlLFxuICBcInN5bmNocm9uaXplX2VhY2hfbGF5ZXJcIjogdHJ1ZSxcblxuICAjIHJlZ3VsYXJpemF0aW9uXG4gIFwiZ3JhZGllbnRfY2xpcHBpbmdcIjogMS4wLFxuICBcIndlaWdodF9kZWNheVwiOiAwLjEsXG4gIFwiaGlkZGVuX2Ryb3BvdXRcIjogMCxcbiAgXCJhdHRlbnRpb25fZHJvcG91dFwiOiAwLFxuXG4gIFwiZGlzdHJpYnV0ZWRfYmFja2VuZFwiOiBcIm5jY2xcIixcbiAgXCJscl9kZWNheV9zdHlsZVwiOiBcImNvc2luZVwiLFxuICBcIndhcm11cFwiOiAwLjAxLFxuICBcImNoZWNrcG9pbnRfZmFjdG9yXCI6IDEwMDAsXG4gIFwiZXZhbF9pbnRlcnZhbFwiOiAxMDAwMDAsXG4gIFwiZXZhbF9pdGVyc1wiOiAxMCxcblxuICBcImxvZ19pbnRlcnZhbFwiOiAxMCxcbiAgXCJzdGVwc19wZXJfcHJpbnRcIjogMTAsXG4gIFwid2FsbF9jbG9ja19icmVha2Rvd25cIjogdHJ1ZSxcblxuICAjIGFkZGl0aW9uYWwgZGVlcHNwZWVkIGFyZ3Mgbm90IHNwZWNpZmllZCBhYm92ZVxuICBcImRlZXBzcGVlZF9leHRyYV9hcmdzXCI6IHtcbiAgICBcImNvbW1zX2xvZ2dlclwiOiB7XG4gICAgICAgIFwiZW5hYmxlZFwiOiB0cnVlLFxuICAgICAgICBcInZlcmJvc2VcIjogdHJ1ZSxcbiAgICAgICAgXCJwcm9mX2FsbFwiOiB0cnVlLFxuICAgICAgICBcImRlYnVnXCI6IGZhbHNlXG4gICAgfSxcbiAgfVxufVxuIn0sICJjaGVja3BvaW50X2ZhY3RvciI6IDEwMDAsICJiYXRjaF9zaXplIjogNCwgInRyYWluX2l0ZXJzIjogMjAsICJldmFsX2l0ZXJzIjogMTAsICJldmFsX2ludGVydmFsIjogMTAwMDAwLCAidm9jYWJfZmlsZSI6ICJkYXRhL2dwdDItdm9jYWIuanNvbiIsICJtZXJnZV9maWxlIjogImRhdGEvZ3B0Mi1tZXJnZXMudHh0IiwgIm51bV93b3JrZXJzIjogMSwgImNoZWNrcG9pbnRfYWN0aXZhdGlvbnMiOiB0cnVlLCAic3luY2hyb25pemVfZWFjaF9sYXllciI6IHRydWUsICJwYXJ0aXRpb25fYWN0aXZhdGlvbnMiOiB0cnVlLCAiZ2FzIjogMSwgImR5bmFtaWNfbG9zc19zY2FsZSI6IHRydWUsICJwaXBlX3BhcmFsbGVsX3NpemUiOiAxLCAid29ybGRfc2l6ZSI6IDEsICJpc19waXBlX3BhcmFsbGVsIjogdHJ1ZSwgInVzZV93YW5kYiI6IGZhbHNlLCAibG9nX2ludGVydmFsIjogMTAsICJ0ZXh0X2dlbl90eXBlIjogInVuY29uZGl0aW9uYWwiLCAibG9jYWxfcmFuayI6IDAsICJyYW5rIjogMCwgInVzZXJfc2NyaXB0IjogInRyYWluLnB5IiwgInNhdmVfaXRlcnMiOiBbXSwgImdsb2JhbF9udW1fZ3B1cyI6IDF9']"]], "loss_per_iteration": [[9.0, "[]"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 527, "quantized value": "Positive Large", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_args(input_args=None):\n    parser = argparse.ArgumentParser()\n    group = parser.add_argument_group(title=\"input data\")\n    group.add_argument(\n        \"--input\",\n        type=str,\n        required=True,\n        help=\"Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated \"\n        \"list\",\n    )\n    group.add_argument(\n        \"--jsonl-keys\",\n        nargs=\"+\",\n        default=[\"text\"],\n        help=\"space separate listed of keys to extract from jsonl. Defa\",\n    )\n    group.add_argument(\n        \"--num-docs\",\n        default=None,\n        help=\"Optional: Number of documents in the input data (if known) for an accurate progress bar.\",\n        type=int,\n    )\n    group = parser.add_argument_group(title=\"tokenizer\")\n    group.add_argument(\n        \"--tokenizer-type\",\n        type=str,\n        required=True,\n        choices=[\n            \"HFGPT2Tokenizer\",\n            \"HFTokenizer\",\n            \"GPT2BPETokenizer\",\n            \"CharLevelTokenizer\",\n            \"TiktokenTokenizer\",\n            \"SPMTokenizer\",\n        ],\n        help=\"What type of tokenizer to use.\",\n    )\n    group.add_argument(\n        \"--vocab-file\", type=str, default=None, help=\"Path to the vocab file\"\n    )\n    group.add_argument(\n        \"--merge-file\",\n        type=str,\n        default=None,\n        help=\"Path to the BPE merge file (if necessary).\",\n    )\n    group.add_argument(\n        \"--append-eod\",\n        action=\"store_true\",\n        help=\"Append an <eod> token to the end of a document.\",\n    )\n    group.add_argument(\"--ftfy\", action=\"store_true\", help=\"Use ftfy to clean text\")\n    group = parser.add_argument_group(title=\"output data\")\n    group.add_argument(\n        \"--output-prefix\",\n        type=str,\n        required=True,\n        help=\"Path to binary output file without suffix\",\n    )\n    group.add_argument(\n        \"--dataset-impl\",\n        type=str,\n        default=\"mmap\",\n        choices=[\"lazy\", \"cached\", \"mmap\"],\n        help=\"Dataset implementation to use. Default: mmap\",\n    )\n\n    group = parser.add_argument_group(title=\"runtime\")\n    group.add_argument(\n        \"--workers\", type=int, default=1, help=\"Number of worker processes to launch\"\n    )\n    group.add_argument(\n        \"--log-interval\",\n        type=int,\n        default=100,\n        help=\"Interval between progress updates\",\n    )\n    args = parser.parse_args(input_args)\n    args.keep_empty = False\n\n    # some default/dummy values for the tokenizer\n    args.rank = 0\n    args.make_vocab_size_divisible_by = 128\n    args.model_parallel_size = 1\n\n    return args\n\nget_args(input_args=['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod'])", "Selected Statement": "args.keep_empty = False", "Function Input": {"input_args": "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"input_args": [[1, "['--input', './tests/data/enwik8_first100.txt', '--output-prefix', './tests/data/enwik8_first100', '--vocab', 'gpt2', '--tokenizer-type', 'HFGPT2Tokenizer', '--merge-file', './data/gpt2-merges.txt', '--append-eod']"]], "parser": [[2.0, "ArgumentParser(prog='__main__.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)"]], "group": [[3.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[]}"], [4.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None)]}"], [11.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None)]}"], [17.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='input data', _group_actions=[_StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)]}"], [23.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[]}"], [24.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None)]}"], [38.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None)]}"], [41.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None)]}"], [47.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None)]}"], [52.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='tokenizer', _group_actions=[_StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)]}"], [53.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[]}"], [54.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None)]}"], [60.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='output data', _group_actions=[_StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)]}"], [68.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[]}"], [69.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None)]}"], [72.0, "{description=None, argument_default=None, prefix_chars='-', conflict_handler='error', _registries={'action': {None: <class 'argparse._StoreAction'>, 'store': <class 'argparse._StoreAction'>, 'store_const': <class 'argparse._StoreConstAction'>, 'store_true': <class 'argparse._StoreTrueAction'>, 'store_false': <class 'argparse._StoreFalseAction'>, 'append': <class 'argparse._AppendAction'>, 'append_const': <class 'argparse._AppendConstAction'>, 'count': <class 'argparse._CountAction'>, 'help': <class 'argparse._HelpAction'>, 'version': <class 'argparse._VersionAction'>, 'parsers': <class 'argparse._SubParsersAction'>, 'extend': <class 'argparse._ExtendAction'>}, 'type': {None: <function ArgumentParser.__init__.<locals>.identity at 0x7f1a9c171d30>}}, _actions=[_HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)], _option_string_actions={'-h': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--help': _HelpAction(option_strings=['-h', '--help'], dest='help', nargs=0, const=None, default='==SUPPRESS==', type=None, choices=None, required=False, help='show this help message and exit', metavar=None), '--input': _StoreAction(option_strings=['--input'], dest='input', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to input jsonl files or lmd archive(s) - if using multiple archives, put them in a comma separated list', metavar=None), '--jsonl-keys': _StoreAction(option_strings=['--jsonl-keys'], dest='jsonl_keys', nargs='+', const=None, default=['text'], type=None, choices=None, required=False, help='space separate listed of keys to extract from jsonl. Defa', metavar=None), '--num-docs': _StoreAction(option_strings=['--num-docs'], dest='num_docs', nargs=None, const=None, default=None, type=<class 'int'>, choices=None, required=False, help='Optional: Number of documents in the input data (if known) for an accurate progress bar.', metavar=None), '--tokenizer-type': _StoreAction(option_strings=['--tokenizer-type'], dest='tokenizer_type', nargs=None, const=None, default=None, type=<class 'str'>, choices=['HFGPT2Tokenizer', 'HFTokenizer', 'GPT2BPETokenizer', 'CharLevelTokenizer', 'TiktokenTokenizer', 'SPMTokenizer'], required=True, help='What type of tokenizer to use.', metavar=None), '--vocab-file': _StoreAction(option_strings=['--vocab-file'], dest='vocab_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the vocab file', metavar=None), '--merge-file': _StoreAction(option_strings=['--merge-file'], dest='merge_file', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=False, help='Path to the BPE merge file (if necessary).', metavar=None), '--append-eod': _StoreTrueAction(option_strings=['--append-eod'], dest='append_eod', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Append an <eod> token to the end of a document.', metavar=None), '--ftfy': _StoreTrueAction(option_strings=['--ftfy'], dest='ftfy', nargs=0, const=True, default=False, type=None, choices=None, required=False, help='Use ftfy to clean text', metavar=None), '--output-prefix': _StoreAction(option_strings=['--output-prefix'], dest='output_prefix', nargs=None, const=None, default=None, type=<class 'str'>, choices=None, required=True, help='Path to binary output file without suffix', metavar=None), '--dataset-impl': _StoreAction(option_strings=['--dataset-impl'], dest='dataset_impl', nargs=None, const=None, default='mmap', type=<class 'str'>, choices=['lazy', 'cached', 'mmap'], required=False, help='Dataset implementation to use. Default: mmap', metavar=None), '--workers': _StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), '--log-interval': _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)}, _action_groups=[], _mutually_exclusive_groups=[], _defaults={}, _negative_number_matcher=re.compile('^-\\\\d+$|^-\\\\d*\\\\.\\\\d+$'), _has_negative_number_optionals=[], title='runtime', _group_actions=[_StoreAction(option_strings=['--workers'], dest='workers', nargs=None, const=None, default=1, type=<class 'int'>, choices=None, required=False, help='Number of worker processes to launch', metavar=None), _StoreAction(option_strings=['--log-interval'], dest='log_interval', nargs=None, const=None, default=100, type=<class 'int'>, choices=None, required=False, help='Interval between progress updates', metavar=None)]}"]], "args": [[78.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100)"], [79.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False)"], [82.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0)"], [83.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128)"], [84.0, "Namespace(input='./tests/data/enwik8_first100.txt', jsonl_keys=['text'], num_docs=None, tokenizer_type='HFGPT2Tokenizer', vocab_file='gpt2', merge_file='./data/gpt2-merges.txt', append_eod=True, ftfy=False, output_prefix='./tests/data/enwik8_first100', dataset_impl='mmap', workers=1, log_interval=100, keep_empty=False, rank=0, make_vocab_size_divisible_by=128, model_parallel_size=1)"]]}, "Program Information": "Project Name: EleutherAI+gpt-neox", "idx": 528, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def gen_search_gzh_url(keyword, page=1):\n        \"\"\"拼接搜索 公众号 URL\n\n        Parameters\n        ----------\n        keyword : str or unicode\n            搜索文字\n        page : int, optional\n            页数 the default is 1\n\n        Returns\n        -------\n        str\n            search_gzh_url\n        \"\"\"\n        assert isinstance(page, int) and page > 0\n\n        qs_dict = OrderedDict()\n        qs_dict['type'] = _search_type_gzh\n        qs_dict['page'] = page\n        qs_dict['ie'] = 'utf8'\n        qs_dict['query'] = keyword\n\n        return 'http://weixin.sogou.com/weixin?{}'.format(urlencode(qs_dict))\n\ngen_search_gzh_url(keyword='高考', page=1)", "Selected Statement": "qs_dict['ie'] = 'utf8'", "Function Input": {"keyword": "'高考'", "page": "1"}, "Variable Values Before Statement": {"Constant": "'utf8'"}, "Value After Statement Execution": "'utf8'", "Variable States During Runtime": {"keyword": [[1, "'高考'"]], "page": [[1, "1"]], "qs_dict": [[18.0, "OrderedDict()"], [19.0, "OrderedDict([('type', 1)])"], [20.0, "OrderedDict([('type', 1), ('page', 1)])"], [21.0, "OrderedDict([('type', 1), ('page', 1), ('ie', 'utf8')])"], [22.0, "OrderedDict([('type', 1), ('page', 1), ('ie', 'utf8'), ('query', '高考')])"]]}, "Program Information": "Project Name: chyroc+WechatSogou", "idx": 529, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def check_just_one_not_none(*value_refname):\n    nones=0\n    for a_tuple in value_refname:\n        if a_tuple[0] is not None:\n            nones += 1\n    if nones != 1:\n        raise ValueError(error_message_for_non_compatible_references([a_tuple[1] for a_tuple in value_refname]))\n\ncheck_just_one_not_none(value_refname=((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint')))", "Selected Statement": "nones=0", "Function Input": {"value_refname": "((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint'))"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"value_refname": [[1, "((None, 'graph_file_input'), (None, 'graph_list_of_files_input'), ('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph'), (None, 'url_input'), (None, 'list_of_url_input'), (None, 'url_endpoint'))"]], "nones": [[2.0, "0"], [5.0, "1"]], "a_tuple": [[3.0, "(None, 'graph_file_input')"], [3.0, "(None, 'graph_list_of_files_input')"], [3.0, "('\\n@prefix : <http://example.org/> .\\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\\n\\n:Marie a :person ;\\n\\t:likes :Justine ;\\n\\t:likes :Antoine ;\\n\\t:likes :football ;\\n\\t:name \"Marie\" ;\\n\\t:age \"30\"^^xsd:int .\\n\\n:Justine a :person ;\\n    :likes :Marie ;\\n    :likes :basketball ;\\n    :name \"Justine\" .\\n\\n:Antoine a :person ;\\n\\t:likes :Marie ;\\n\\t:likes :Justine ;\\n\\t:name \"Antoine\" ;\\n\\t:age \"32\"^^xsd:int .\\n', 'raw_graph')"], [3.0, "(None, 'url_input')"], [3.0, "(None, 'list_of_url_input')"], [3.0, "(None, 'url_endpoint')"]]}, "Program Information": "Project Name: DaniFdezAlvarez+shexerp3", "idx": 530, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def check_one_or_zero_not_none(*value_refname):\n    nones=0\n    for a_tuple in value_refname:\n        if a_tuple[0] is not None:\n            nones += 1\n    if nones > 1:\n        raise ValueError(error_message_for_non_compatible_references(\n            list_of_ref_names=[a_tuple[1] for a_tuple in value_refname],\n            one_mandatory=False))\n\ncheck_one_or_zero_not_none(value_refname=((None, 'namespaces_dict'), (None, 'namespaces_dict_file')))", "Selected Statement": "nones=0", "Function Input": {"value_refname": "((None, 'namespaces_dict'), (None, 'namespaces_dict_file'))"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"value_refname": [[1, "((None, 'namespaces_dict'), (None, 'namespaces_dict_file'))"]], "nones": [[2.0, "0"]], "a_tuple": [[3.0, "(None, 'namespaces_dict')"], [3.0, "(None, 'namespaces_dict_file')"]]}, "Program Information": "Project Name: DaniFdezAlvarez+shexerp3", "idx": 531, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def cd(args: list) -> None:\n    \"\"\"\n        Change the current working directory of the device.\n\n        While this method does not actually change any directories,\n        it simply updates the value in the file_manager_state property\n        that keeps record of the current directory.\n\n        Before changing directories though, some checks are performed\n        on the device to at least ensure that the destination directory\n        exists.\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(args) <= 0:\n        click.secho('Usage: cd <destination directory>', bold=True)\n        return\n\n    path = args[0]\n    current_dir = pwd()\n\n    # nothing to do\n    if path == '.':\n        return\n\n    # moving one directory back\n    if path == '..':\n\n        split_path = os.path.split(current_dir)\n\n        # nothing to do if we are already at root\n        if len(split_path) == 1:\n            return\n\n        new_path = ''.join(split_path[:-1])\n        click.secho(new_path, fg='green', bold=True)\n\n        file_manager_state.cwd = new_path\n\n        return\n\n    # if we got an absolute path, check if the path\n    # actually exists, and then cd to it if we can\n    if os.path.isabs(path):\n\n        # assume the path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(path, fg='green', bold=True)\n\n            file_manager_state.cwd = path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(path), fg='red')\n\n    # directory is not absolute, tack it on at the end and\n    # see if its legit.\n    else:\n\n        proposed_path = device_state.platform.path_separator.join([current_dir, path])\n\n        # assume the proposed_path does not exist by default\n        does_exist = False\n\n        # check for existence based on the runtime\n        if device_state.platform == Ios:\n            does_exist = _path_exists_ios(proposed_path)\n\n        if device_state.platform == Android:\n            does_exist = _path_exists_android(proposed_path)\n\n        # if we checked with the device that the path exists\n        # and it did, update the state manager, otherwise\n        # show an error that the path may be invalid\n        if does_exist:\n            click.secho(proposed_path, fg='green', bold=True)\n\n            file_manager_state.cwd = proposed_path\n            return\n\n        else:\n            click.secho('Invalid path: `{0}`'.format(proposed_path), fg='red')\n\ncd(args=['/foo/bar/baz'])", "Selected Statement": "does_exist = False", "Function Input": {"args": "['/foo/bar/baz']"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"args": [[1, "['/foo/bar/baz']"]], "path": [[21.0, "'/foo/bar/baz'"]], "current_dir": [[22.0, "'/foo'"]], "does_exist": [[49.0, "False"], [56.0, "True"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 532, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def dump_all(args: list) -> None:\n    \"\"\"\n        Dump memory from the currently injected process.\n        Loosely based on:\n            https://github.com/Nightbringer21/fridump\n\n        :param args:\n        :return:\n    \"\"\"\n\n    if len(clean_argument_flags(args)) <= 0:\n        click.secho('Usage: memory dump all <local destination>', bold=True)\n        return\n\n    # the destination file to write the dump to\n    destination = args[0]\n\n    # Check for file override\n    if os.path.exists(destination):\n        click.secho('Destination file {dest} already exists'.format(dest=destination), fg='yellow', bold=True)\n        if not click.confirm('Continue, appending to the file?'):\n            return\n\n    # access type used when enumerating ranges\n    access = 'rw-'\n\n    api = state_connection.get_api()\n    ranges = api.memory_list_ranges(access)\n\n    total_size = sum([x['size'] for x in ranges])\n    click.secho('Will dump {0} {1} images, totalling {2}'.format(\n        len(ranges), access, sizeof_fmt(total_size)), fg='green', dim=True)\n\n    with click.progressbar(ranges) as bar:\n        for image in bar:\n            dump = bytearray()\n            bar.label = 'Dumping {0} from base: {1}'.format(sizeof_fmt(image['size']), hex(int(image['base'], 16)))\n\n            # catch and exception thrown while dumping.\n            # this could for a few reasons like if the protection\n            # changes or the range is reallocated\n            try:\n                # grab the (size) bytes starting at the (base_address) in chunks of BLOCK_SIZE\n                chunks = _get_chunks(int(image['base'], 16), int(image['size']), BLOCK_SIZE)\n                for chunk in chunks:\n                    dump.extend(bytearray(api.memory_dump(chunk[0], chunk[1])))\n\n            except Exception as e:\n                continue\n\n            # append the results to the destination file\n            with open(destination, 'ab') as f:\n                f.write(dump)\n\n    click.secho('Memory dumped to file: {0}'.format(destination), fg='green')\n\ndump_all(args=['/foo'])", "Selected Statement": "access = 'rw-'", "Function Input": {"args": "['/foo']"}, "Variable Values Before Statement": {"Constant": "'rw-'"}, "Value After Statement Execution": "'rw-'", "Variable States During Runtime": {"args": [[1, "['/foo']"]], "destination": [[16.0, "'/foo'"]], "access": [[25.0, "'rw-'"]], "api": [[27.0, "<MagicMock name='get_api()' id='140041837128480'>"]], "ranges": [[28.0, "[{'size': 100, 'base': '0x7fff90800000'}]"]], "total_size": [[30.0, "100"]], "bar": [[34.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"], [37.0, "{fill_char='#', empty_char='-', bar_template='%(label)s  [%(bar)s]  %(info)s', info_sep='  ', show_eta=True, show_percent=None, show_pos=False, item_show_func=None, label='Dumping 100.0 B from base: 0x7fff90800000', file=<_io.StringIO object at 0x7f5e07a3a3a0>, color=None, update_min_steps=1, _completed_intervals=0, width=36, autowidth=False, iter=<list_iterator object at 0x7f5e079fda90>, length=1, pos=0, avg=[], start=1712231192.5557132, last_eta=1712231192.5557132, eta_known=False, finished=False, max_width=None, entered=True, current_item=None, is_hidden=True, _last_line=''}"]], "image": [[35.0, "{'size': 100, 'base': '0x7fff90800000'}"]], "dump": [[36.0, "bytearray(b'')"], [46.0, "bytearray(b'\\x00')"]], "chunks": [[44.0, "[(140735617695744, 100)]"]], "chunk": [[45.0, "(140735617695744, 100)"]], "f": [[52.0, "<MagicMock name='open().__enter__()' id='140041837437520'>"]]}, "Program Information": "Project Name: sensepost+objection", "idx": 533, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def num_parameters(module: nn.Module, requires_grad: Optional[bool] = None) -> int:\n    total = 0\n    for p in module.parameters():\n        if requires_grad is None or p.requires_grad == requires_grad:\n            if hasattr(p, \"quant_state\"):\n                # bitsandbytes 4bit layer support\n                total += math.prod(p.quant_state[1])\n            else:\n                total += p.numel()\n    return total\n\nnum_parameters(module=GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  )), requires_grad=True)", "Selected Statement": "total = 0", "Function Input": {"module": "GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  ))", "requires_grad": "True"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"module": [[1, "GPT(  (lm_head): Linear(in_features=8, out_features=8, bias=False)  (transformer): ModuleDict(    (wte): Embedding(8, 8)    (h): ModuleList(      (0-1): 2 x Block(        (norm_1): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (attn): CausalSelfAttention(          (attn): Linear(in_features=8, out_features=24, bias=True)          (proj): Linear(in_features=8, out_features=8, bias=True)          (adapter_wte): Embedding(10, 8)        )        (norm_2): LayerNorm((8,), eps=1e-05, elementwise_affine=True)        (mlp): GptNeoxMLP(          (fc): Linear(in_features=8, out_features=32, bias=True)          (proj): Linear(in_features=32, out_features=8, bias=True)        )      )    )    (ln_f): LayerNorm((8,), eps=1e-05, elementwise_affine=True)  ))"]], "requires_grad": [[1, "True"]], "total": [[2.0, "0"], [9.0, "4"], [9.0, "84"], [9.0, "88"], [9.0, "168"]], "p": [[3.0, "Parameter containing:tensor([[ 2.5051e-01,  7.4097e-02,  2.7177e-01, -5.9998e-02,  8.6356e-02,         -1.3355e-01,  1.0265e-01, -2.0430e-01],        [ 1.4669e-01,  7.2689e-03, -3.2900e-01,  1.0448e-01,  3.4156e-01,          2.7166e-01,  2.9204e-04,  2.8477e-01],        [ 1.3237e-01, -3.6001e-02, -1.9379e-01, -3.1665e-01, -1.9673e-02,          1.4157e-01, -1.6257e-01, -5.8137e-02],        [-3.2136e-01,  2.8897e-01, -1.4786e-01, -9.7668e-02, -9.4666e-02,          7.1392e-02,  3.3215e-02,  6.9191e-02],        [-7.4534e-02,  9.6344e-02, -1.4053e-01,  2.9236e-01, -2.3084e-01,          4.0563e-02, -1.0258e-01,  5.0443e-02],        [ 2.3882e-02, -2.4875e-01,  1.6451e-01,  2.4647e-01, -1.9841e-01,         -2.1787e-01,  4.3476e-02,  1.9028e-01],        [ 2.8256e-01, -3.3064e-01, -2.7154e-01, -3.1312e-02,  1.0199e-01,          2.0320e-01,  2.8572e-01, -3.3013e-01],        [-2.5533e-01,  3.0206e-01,  2.6309e-01, -1.9970e-01, -8.5685e-02,         -3.3387e-01, -1.4620e-01,  3.2047e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.1873, -1.6913,  1.5322, -0.2604,  0.4374, -0.5390,  0.9018, -1.3492],        [-1.4882, -0.2612,  0.2189, -2.1828,  0.2255,  0.0258,  0.5657, -0.1797],        [-0.3868,  1.8613,  1.2576,  1.1665, -1.1363,  1.3796,  0.1255, -0.7521],        [ 0.6191, -0.9324,  0.2700, -0.7107, -1.0066,  1.0416, -3.4774, -0.1996],        [-1.7366, -0.0246,  0.6478, -1.6823,  0.1165, -0.1131,  0.4057,  1.6760],        [-0.7652, -0.2967, -1.4861, -1.5751,  0.7827, -1.4315,  1.1021,  0.5113],        [ 0.7950, -1.5534, -0.1290,  0.8270, -0.6565, -1.5686, -0.7948, -0.1648],        [-0.6128, -0.9582, -1.6231, -0.1747, -0.1636, -0.4679, -0.8446,  1.3419]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[[[0.],          [0.],          [0.],          [0.]]]], device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([[ 0.0889, -0.3279,  0.2429,  0.3349, -0.2547,  0.1056,  0.0371,  0.0550],        [-0.3137,  0.1619,  0.0387,  0.0756, -0.0591, -0.1266,  0.0611,  0.3441],        [-0.1166,  0.2823, -0.3208,  0.0186, -0.1165, -0.2267, -0.0338,  0.2221],        [-0.3125,  0.1147,  0.2699, -0.2272, -0.0160, -0.1895,  0.0019, -0.0198],        [-0.2552,  0.1120, -0.0457,  0.0870, -0.1699, -0.1785, -0.3484,  0.0587],        [-0.0898, -0.0517,  0.3024,  0.1719,  0.3463, -0.2257, -0.0244,  0.1555],        [-0.1015, -0.0824,  0.3325,  0.2130, -0.0858, -0.0207, -0.2525, -0.0335],        [ 0.3278, -0.3148, -0.2676,  0.0028,  0.1150, -0.1644, -0.0803,  0.0623],        [-0.1135,  0.0017,  0.2326, -0.3266,  0.1867, -0.1497, -0.1363,  0.1261],        [-0.2058, -0.1160,  0.3138,  0.3512, -0.1568,  0.0579,  0.0548, -0.1624],        [ 0.3081, -0.2280, -0.0806,  0.2820,  0.0546, -0.2091, -0.1894,  0.2444],        [ 0.0360,  0.2564,  0.1636,  0.0356, -0.0698, -0.1037,  0.0326, -0.2676],        [ 0.1189, -0.0244, -0.2023,  0.2153, -0.2056, -0.1485, -0.3513, -0.1187],        [-0.2108, -0.0278,  0.3477, -0.1904, -0.0801,  0.0428, -0.3516, -0.3473],        [ 0.1788,  0.0423,  0.0529, -0.1381, -0.3178, -0.1098,  0.3002,  0.1866],        [-0.2771,  0.2207, -0.0026,  0.2869, -0.1001,  0.1216, -0.3239, -0.2597],        [-0.1869,  0.0867, -0.2462,  0.1342,  0.2113,  0.0029, -0.0490, -0.0770],        [ 0.3244, -0.1292, -0.1739, -0.1651, -0.1083, -0.0072,  0.1775, -0.3086],        [ 0.1697,  0.2032, -0.0511,  0.2873,  0.0381, -0.2395, -0.1862, -0.1513],        [ 0.1337, -0.1641, -0.0019, -0.2364,  0.1892,  0.2240,  0.0864,  0.0927],        [-0.2440, -0.2606, -0.0284,  0.3234, -0.0603, -0.1891,  0.1467, -0.1607],        [-0.3067,  0.1486,  0.1116,  0.0019, -0.2838,  0.2787, -0.1030, -0.1641],        [ 0.1315,  0.2802, -0.1638, -0.1215,  0.1974,  0.2127,  0.1907,  0.2682],        [-0.2875, -0.2310, -0.0783,  0.1118,  0.3227,  0.0332,  0.1439,  0.1362]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0483,  0.1167, -0.1721,  0.0502,  0.0559, -0.1433, -0.1171, -0.2256,         0.0282,  0.2646, -0.1805,  0.3409, -0.2160, -0.1443,  0.0172,  0.3150,        -0.2517,  0.2375, -0.1676,  0.1738, -0.2091, -0.0480, -0.1426, -0.1139],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.1029, -0.0955, -0.0887,  0.2959,  0.1897,  0.0878, -0.1921, -0.2629],        [-0.2350,  0.0745,  0.0712,  0.1219,  0.3308,  0.0990, -0.3520,  0.0619],        [ 0.2752, -0.3393, -0.0875,  0.1873,  0.0478,  0.0844,  0.2223, -0.3004],        [ 0.0932,  0.1875, -0.2115, -0.1469, -0.0138,  0.3032,  0.0168,  0.0173],        [ 0.2179, -0.2037, -0.1758,  0.2727, -0.0537, -0.3480, -0.2911,  0.1600],        [ 0.0678,  0.0497, -0.1150, -0.1721,  0.2346, -0.3202, -0.1367, -0.2492],        [-0.2869, -0.1534,  0.1284, -0.1534, -0.0133,  0.1076, -0.3000, -0.1015],        [-0.0978, -0.2756,  0.2477, -0.2701,  0.2655, -0.1373,  0.3460, -0.3477]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.0784,  0.1758, -0.0545, -0.1572, -0.2092, -0.1891, -0.3255, -0.1430],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 1.7841,  0.7119, -0.2547, -0.1439,  0.3325, -1.1003, -0.8118,  0.7950],        [ 0.8451,  0.6136, -0.4437, -0.5741,  0.8692,  0.7644,  0.3517, -0.5187],        [ 0.1640,  0.7780, -1.4086, -1.6044,  2.2455, -0.3546,  0.6550,  1.1929],        [-0.6591,  0.3522,  0.9287,  0.5068,  0.1667,  0.0170,  0.2055, -0.6080],        [ 0.7926,  1.4860, -0.6619,  0.0146,  1.3542, -1.1758, -0.2057,  0.3901],        [-0.3752, -1.3377, -0.0463,  0.2028, -0.4402,  1.7848, -0.1331, -0.2884],        [-0.3826, -0.1052,  0.4611, -0.9059, -2.0166,  0.2997,  1.2361, -0.4174],        [-2.1430, -0.8734,  0.5893,  0.2488, -0.2177,  0.6726,  1.1039,  1.0060],        [ 0.5812, -0.8599, -0.3468, -0.1275, -0.4766, -0.1236,  0.8605,  1.0199],        [ 0.9441,  0.3637, -1.8332,  0.1539,  0.7132,  0.0950,  0.8609, -0.9934]],       device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 6.5893e-02,  2.1358e-02,  1.4805e-01, -2.8966e-01, -9.9211e-02,         -4.0558e-02, -1.8081e-01, -1.7177e-01],        [ 1.0934e-01, -1.5795e-02, -2.1638e-01, -2.0584e-01, -2.4286e-01,         -1.9081e-01,  2.9576e-01, -1.6553e-01],        [-3.4252e-02,  6.3052e-04,  8.0188e-02, -1.1135e-01, -3.0725e-01,          2.4029e-01,  5.6000e-02,  1.8650e-01],        [-1.5190e-01, -2.3332e-01, -1.5083e-01, -8.7328e-04,  1.0818e-01,          2.6141e-01,  3.3466e-01,  6.6952e-02],        [-9.4581e-02,  2.2194e-02,  6.9640e-02, -1.8661e-01,  1.0973e-01,         -7.1523e-02,  1.0354e-01,  2.3308e-01],        [-3.3942e-01,  3.4300e-01, -3.4288e-01, -9.3225e-02,  3.4878e-01,         -2.8878e-01,  2.5149e-01, -9.0007e-03],        [-1.6085e-01,  3.5229e-01,  1.6255e-01,  3.3887e-02, -7.4003e-02,         -3.3468e-01,  2.3890e-01, -2.3619e-01],        [ 7.8607e-02, -2.8461e-01,  5.0856e-02,  8.1235e-02,  1.0375e-01,         -3.0794e-01, -6.7361e-02,  3.3582e-01],        [ 4.5722e-02, -1.1111e-02, -1.7835e-01,  1.1545e-01,  6.1457e-02,         -9.7693e-02,  1.0451e-02,  9.6269e-02],        [ 1.8339e-01,  4.3673e-02,  4.5492e-03, -1.3804e-01, -3.1340e-01,          2.9526e-01,  2.3653e-01,  2.7255e-01],        [ 8.2121e-02, -1.4972e-01, -2.2425e-01,  3.7039e-02, -2.2301e-01,         -1.5539e-01, -5.0423e-02,  2.3112e-01],        [-7.5777e-02, -2.9300e-01, -2.1856e-01,  6.8585e-02, -3.2383e-01,          2.3423e-02, -2.2967e-01, -6.8076e-02],        [ 4.8495e-02, -2.5661e-01,  2.1968e-01,  3.3006e-01,  3.2420e-01,          3.0799e-01,  6.8646e-03, -1.5422e-02],        [ 2.1354e-01,  2.3493e-01, -1.5334e-01, -3.2478e-01,  1.2354e-01,          1.9622e-01,  1.3425e-01,  4.7188e-02],        [ 2.9492e-01, -6.1003e-02, -3.3010e-01, -2.0462e-01,  1.7078e-04,         -8.6789e-03, -4.8258e-02,  1.4198e-01],        [-6.6475e-02, -1.8329e-01, -1.8995e-02,  1.3849e-01, -6.0820e-03,          2.8869e-01,  2.6644e-01,  8.7311e-03],        [ 2.7676e-01, -8.9596e-02, -1.2223e-01, -6.2885e-02, -3.0729e-01,         -2.0378e-01, -2.6045e-01,  3.4084e-01],        [ 5.7260e-02, -1.7303e-02, -1.3779e-01, -3.2510e-01,  2.3286e-01,         -1.5465e-01,  2.8172e-01,  8.2384e-02],        [ 2.1787e-01, -1.9439e-01,  2.8290e-01, -9.9440e-02,  7.4783e-03,         -1.4567e-02,  1.0209e-02,  2.4470e-01],        [ 5.9790e-02,  2.4915e-02,  2.7909e-01,  1.0035e-02, -9.5062e-02,          1.5389e-01,  1.5549e-01, -7.9868e-02],        [-3.4455e-01,  1.3742e-01, -8.2051e-02, -2.4700e-01,  1.1334e-01,         -2.1086e-02, -3.1369e-01, -3.3946e-01],        [-1.9585e-01, -2.9069e-01,  2.4966e-01, -2.0562e-01,  7.9724e-02,          2.5096e-01, -3.3514e-01, -1.1402e-01],        [-4.5188e-02, -2.8768e-01,  5.2162e-02,  2.8394e-01,  3.3272e-01,         -1.6050e-01, -2.3109e-01, -2.6183e-01],        [-2.7715e-01, -2.8243e-01,  1.6490e-01, -1.6387e-01, -1.5267e-01,         -3.0654e-01, -2.8063e-01, -3.3728e-01],        [ 3.2159e-01, -2.4516e-01, -3.2917e-01,  7.4709e-02, -2.4596e-01,         -2.8767e-01, -1.2852e-01, -2.3774e-01],        [ 3.2401e-01,  2.0746e-01, -1.3909e-01, -2.0924e-01,  1.7289e-01,          3.8450e-02,  7.6429e-02,  2.8703e-01],        [ 1.3821e-01, -1.8876e-01, -2.6919e-01,  4.1932e-02, -8.8940e-02,          7.4909e-02,  2.9936e-01, -2.3437e-01],        [-2.2846e-01, -2.4945e-01,  1.4291e-01, -2.2226e-01,  1.0372e-01,         -1.4193e-01, -1.3718e-01, -1.2027e-01],        [-1.6028e-01,  6.6377e-02, -9.3952e-03, -4.8865e-02, -2.1320e-01,          2.8190e-01, -2.0719e-01, -2.0863e-01],        [-2.7065e-01,  1.8744e-01,  1.2356e-01,  3.2627e-01,  2.4614e-01,          2.2572e-01, -3.4430e-01, -2.1322e-01],        [-1.4362e-01, -2.2222e-01, -8.3469e-02,  2.3390e-02, -9.5809e-02,         -2.0266e-01,  9.1512e-02, -3.3260e-01],        [-2.3665e-01, -8.1854e-02, -7.1756e-02, -2.0481e-01,  1.4672e-01,         -6.3378e-03,  1.8597e-01,  3.4100e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0693,  0.2328, -0.3503, -0.0378,  0.1455,  0.0200, -0.2220,  0.2883,        -0.2709,  0.3166,  0.1389,  0.2205, -0.2029, -0.0817, -0.2797,  0.0571,        -0.1136,  0.2654, -0.2372, -0.1622, -0.1799, -0.1930, -0.2183,  0.1699,         0.3248, -0.2964,  0.1801, -0.0725, -0.2218,  0.2408,  0.3513,  0.3329],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 0.1464, -0.1129, -0.1095,  0.0893, -0.0108,  0.0392, -0.1013,  0.1532,         -0.0124, -0.0246, -0.0638,  0.0769, -0.0466,  0.1481, -0.1124, -0.1066,          0.1097, -0.0430,  0.1103,  0.0872, -0.0830, -0.1511,  0.0976, -0.1090,         -0.1143,  0.0950,  0.0169,  0.1524,  0.1067,  0.0817, -0.1558, -0.1167],        [ 0.0678, -0.0146, -0.0236, -0.0889,  0.0744,  0.1361,  0.1742,  0.0300,          0.1640, -0.0186, -0.0069,  0.0699, -0.0886, -0.0880, -0.0809, -0.1162,          0.0180, -0.0298, -0.0644, -0.0384,  0.1001,  0.0490, -0.0310,  0.0793,          0.1296, -0.0868,  0.1352, -0.1328,  0.0058, -0.0982, -0.0983,  0.0562],        [-0.0575, -0.1710,  0.0355,  0.0555,  0.1724,  0.1425, -0.1615,  0.0378,          0.0080,  0.0751,  0.0394,  0.0116,  0.1137,  0.0739,  0.1725, -0.1086,         -0.0499, -0.0003,  0.0761,  0.1660,  0.1478,  0.1040,  0.1278, -0.1004,          0.0874,  0.0074, -0.1071, -0.0941,  0.0095,  0.0029, -0.0933,  0.0892],        [ 0.1076,  0.1318, -0.0689, -0.1594, -0.1509,  0.1761,  0.0723, -0.1281,         -0.1371,  0.1327, -0.0402,  0.0059, -0.0757,  0.1747, -0.0517,  0.1047,          0.0622,  0.0326,  0.0693, -0.0956,  0.0566,  0.0313,  0.0325,  0.0752,          0.0816,  0.0069,  0.0740,  0.0214, -0.0984, -0.1176, -0.0274, -0.0270],        [ 0.0759, -0.1526, -0.0286,  0.0397,  0.1753, -0.1487,  0.0796,  0.1656,          0.1386,  0.0964,  0.0936,  0.0950,  0.0939,  0.0756, -0.1343, -0.0172,          0.0196,  0.1410,  0.0824,  0.0994, -0.1293, -0.1566, -0.0153, -0.0324,          0.0465,  0.0688,  0.0656,  0.1234,  0.0673, -0.0274,  0.0552, -0.0089],        [ 0.0893, -0.0488, -0.1571,  0.1645,  0.0521,  0.0308,  0.1059,  0.0814,         -0.0626,  0.0728, -0.0717, -0.0808, -0.1219,  0.1207,  0.1472,  0.0665,          0.0720, -0.1299, -0.1581, -0.0593, -0.0114, -0.1422,  0.1361, -0.0292,         -0.1632,  0.0262,  0.0508,  0.0982, -0.1500, -0.0014,  0.1566,  0.0981],        [ 0.0735, -0.0155, -0.1155,  0.1348, -0.0813,  0.0454, -0.0755,  0.0277,         -0.0910,  0.1395,  0.0935, -0.1120, -0.0277, -0.0918, -0.0529,  0.0062,         -0.1562,  0.1040, -0.1699, -0.1419, -0.1301, -0.1144, -0.0618, -0.0108,         -0.0460,  0.0686, -0.1263, -0.0370,  0.1667,  0.1585,  0.1256, -0.0375],        [-0.0112,  0.0668, -0.1109,  0.0616, -0.0958, -0.0099, -0.0839,  0.0191,         -0.0971, -0.1085,  0.1118, -0.0774, -0.0070,  0.0122,  0.0954, -0.1193,          0.0114, -0.1147, -0.0314,  0.1747,  0.0346, -0.0840,  0.0391, -0.0541,         -0.1091, -0.0645,  0.0696, -0.1561,  0.1208, -0.0191, -0.1513, -0.1428]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0323, -0.1023,  0.0092, -0.0543,  0.0628,  0.1554,  0.1386,  0.1144],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[[[0.],          [0.],          [0.],          [0.]]]], device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([[ 0.3404, -0.0784, -0.2037,  0.2218, -0.0007,  0.1675,  0.1265, -0.2665],        [ 0.1137, -0.2400, -0.1582,  0.0319,  0.0463, -0.0668, -0.1449, -0.0193],        [-0.1495,  0.1699, -0.0677,  0.0785, -0.1401, -0.3277, -0.0493,  0.2157],        [-0.2634, -0.3281,  0.3506, -0.3214,  0.1807,  0.3403, -0.3308, -0.3356],        [ 0.1668,  0.1837,  0.1467, -0.0405,  0.2801, -0.0171, -0.0484,  0.0961],        [ 0.2353, -0.0604, -0.0708, -0.2719,  0.2399,  0.2501,  0.0848,  0.3235],        [ 0.3000,  0.2217, -0.1636, -0.2605,  0.1227, -0.2346, -0.2952,  0.0467],        [-0.1680, -0.3223,  0.0317,  0.2811, -0.1306,  0.2391, -0.0291,  0.3324],        [-0.1472, -0.2807, -0.0162,  0.1179, -0.0733, -0.1747, -0.3524, -0.1365],        [-0.1992, -0.0492, -0.3342,  0.0430,  0.0751,  0.0572, -0.3215, -0.1702],        [ 0.1430,  0.1289, -0.1294,  0.0013, -0.2896,  0.3294, -0.1515,  0.0263],        [-0.1950,  0.1204,  0.1324,  0.3293, -0.3097,  0.0476,  0.0084,  0.0343],        [ 0.1137, -0.2344, -0.1993, -0.0210, -0.2179,  0.0066, -0.3235, -0.1004],        [-0.3300, -0.3260,  0.2415, -0.3090,  0.0729, -0.1025,  0.2328,  0.0191],        [ 0.2150, -0.3134,  0.0762, -0.1156, -0.1841, -0.0109,  0.1217,  0.1615],        [-0.2518, -0.0740, -0.3067,  0.1081,  0.3030,  0.3289, -0.3526,  0.2631],        [ 0.0603, -0.1945,  0.3530,  0.0670,  0.3311,  0.1793, -0.3446,  0.3345],        [ 0.2503,  0.2751, -0.2760,  0.0078,  0.2025, -0.0548,  0.1079, -0.1133],        [-0.1582, -0.2716, -0.1800, -0.3301, -0.2902, -0.1650, -0.3153,  0.2391],        [ 0.0342, -0.1090, -0.2687, -0.0358,  0.0786, -0.1517,  0.1254,  0.0957],        [ 0.2575,  0.1834, -0.0470, -0.0204, -0.2808, -0.0673, -0.0558,  0.0008],        [ 0.1258, -0.2072,  0.0555, -0.2077,  0.1351, -0.0566,  0.3471,  0.1228],        [ 0.3349, -0.1774, -0.0522,  0.2082, -0.0324,  0.2381,  0.2848,  0.1482],        [-0.0430,  0.0106,  0.3237, -0.0044,  0.2087, -0.2612,  0.0164,  0.0838]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0530, -0.0763, -0.0028,  0.1085, -0.3189, -0.1606, -0.1181, -0.1334,         0.2640, -0.1576, -0.2550,  0.0455, -0.0787,  0.0398,  0.1590, -0.1556,         0.0225, -0.0938, -0.2418,  0.0467,  0.0833, -0.1870,  0.3066, -0.3505],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[-0.0839,  0.0659,  0.2793,  0.1647, -0.0542,  0.2126,  0.1493, -0.0943],        [ 0.1107,  0.3330, -0.1780, -0.3524, -0.0611, -0.2709,  0.1982, -0.0123],        [ 0.0282, -0.3372, -0.2035,  0.0192,  0.0389,  0.3252,  0.1040, -0.2365],        [ 0.2659,  0.0564,  0.1125, -0.1685, -0.1637,  0.0264,  0.0199,  0.2551],        [ 0.3084,  0.1416,  0.0470,  0.2403, -0.0901, -0.3014, -0.3301, -0.1559],        [ 0.3133,  0.3529, -0.3407, -0.0382, -0.0358, -0.1787, -0.0387, -0.1373],        [-0.1918,  0.0755,  0.3417,  0.1268, -0.3168, -0.0384,  0.2844, -0.1642],        [-0.2773,  0.2255,  0.1545, -0.3410, -0.2755,  0.2318, -0.3153,  0.2691]],       device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.2181,  0.2350, -0.2638,  0.2656, -0.1387,  0.3444,  0.0198, -0.1788],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 1.1537,  1.4106,  1.5544, -1.0306, -1.3801,  0.2603, -0.6515,  1.5445],        [-0.1275, -0.6874, -0.6158, -0.8035, -0.0088, -1.2591,  0.3704,  1.4032],        [-1.0058,  0.0532,  0.4710,  1.2358,  0.1716, -0.8462,  0.8084, -1.2172],        [ 1.7788,  0.7106, -1.3180, -2.5337, -0.5739, -1.1140,  1.0843,  0.3369],        [ 0.3764, -1.4538,  1.3136, -0.0065,  0.3045, -1.1442, -0.2558,  1.2981],        [ 0.0188, -0.3169, -1.2457,  1.2154,  0.2243,  1.8292, -2.1265, -1.7702],        [-0.4025,  0.5508, -1.0771,  0.8800, -0.4297,  0.6837, -1.3463, -0.7835],        [-0.0045,  1.1033, -1.2160, -0.4731,  0.8819,  0.0372,  0.7367,  0.3115],        [-0.5226,  0.3311, -0.0913,  0.7536,  1.3422, -0.2453, -0.9801,  0.5688],        [-0.2757,  1.6502,  0.6107,  1.4373, -0.5155,  0.7005, -1.1838,  0.8372]],       device='cuda:0', requires_grad=True)"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"], [3.0, "Parameter containing:tensor([[-1.3732e-01, -2.3332e-01, -1.6029e-01, -3.3240e-01, -4.2077e-02,         -8.1405e-02, -2.2076e-01,  5.6473e-02],        [-6.9899e-02,  7.1788e-02,  2.3753e-02,  6.6103e-02, -3.4360e-01,          2.1811e-01, -2.5904e-01, -3.1350e-01],        [-1.0057e-01,  2.1701e-01, -4.4901e-02,  2.4451e-02,  2.3035e-01,         -2.5810e-01,  1.2159e-01, -1.6353e-01],        [ 3.3067e-02, -2.4335e-01,  2.1367e-01, -2.7855e-01, -9.4848e-02,         -2.1932e-01,  2.0793e-01, -8.0509e-02],        [ 1.2841e-01, -7.9310e-02, -3.3849e-01, -1.0480e-01,  2.1637e-01,          5.6048e-02,  9.2525e-02, -3.5254e-01],        [ 2.7111e-01, -2.2776e-01,  3.1415e-01,  6.6136e-02,  3.3047e-01,         -2.1541e-02, -2.3139e-01,  2.8371e-01],        [ 3.3119e-01, -2.2968e-01, -1.3497e-01,  1.0050e-01, -9.7787e-02,          1.0685e-01, -1.5194e-01,  3.0975e-02],        [ 1.8377e-01, -2.4812e-01,  1.7400e-02, -1.9171e-01, -3.4704e-01,         -2.3089e-01, -2.8404e-01, -2.6585e-01],        [-4.0592e-02,  3.2437e-01, -6.2993e-02,  7.5329e-02,  2.7870e-01,          2.7401e-01,  2.7759e-01, -2.3725e-01],        [-2.6910e-01, -2.8936e-01, -1.3322e-01,  3.1138e-01,  1.9009e-01,          3.0851e-01,  3.4273e-01, -3.6591e-02],        [ 9.4119e-02, -9.1043e-02, -4.0021e-02,  1.9836e-01,  3.0940e-04,         -1.8952e-01,  1.1122e-01,  1.8951e-01],        [-3.2792e-01,  3.2173e-01,  2.2076e-01, -2.3394e-01,  2.2487e-01,         -1.2898e-01, -8.4961e-02, -1.5538e-01],        [ 2.0375e-01, -4.0108e-02, -1.0112e-01,  2.7968e-02, -2.8452e-02,         -3.0800e-01, -2.7689e-01, -7.3817e-02],        [ 1.3027e-01,  9.0503e-02,  2.8481e-01, -3.0312e-01, -3.1633e-01,          2.6214e-01,  1.8745e-01, -2.6924e-01],        [ 1.3722e-01, -1.1742e-01,  2.4721e-02, -2.7830e-01,  3.3598e-01,         -3.3192e-01, -1.7417e-01,  2.3394e-01],        [-2.3660e-01, -1.7402e-01, -3.2918e-01, -2.9007e-01, -2.7806e-02,          2.9714e-01,  1.3426e-01, -7.9150e-02],        [ 1.7340e-01,  2.1998e-01, -6.6770e-02,  5.8768e-02,  1.8551e-02,         -3.3554e-02, -2.8439e-01, -9.2082e-02],        [ 8.6543e-02, -1.3679e-01,  1.9206e-01,  3.4259e-01, -2.4001e-01,          2.4259e-01,  1.1591e-01, -2.5047e-03],        [-2.3748e-01, -1.3318e-01, -1.2024e-01, -8.3167e-02, -1.7073e-01,         -1.0206e-01, -3.1937e-01, -2.0122e-01],        [-2.1916e-02,  2.5703e-01,  7.3084e-02, -6.3421e-02,  1.5156e-01,         -7.8713e-02,  3.3370e-01,  7.9817e-02],        [-3.5000e-01,  1.4815e-01, -2.9351e-01, -1.9803e-01, -3.5240e-01,          1.7256e-01, -3.2106e-02,  2.3932e-01],        [-2.9592e-01,  3.0265e-01,  1.3891e-01,  3.2459e-01,  3.0302e-01,          2.8832e-02, -3.5200e-02, -3.0984e-02],        [ 2.8873e-01,  2.4445e-01, -5.7766e-02,  2.9249e-01, -3.0069e-01,         -7.8974e-02,  3.3308e-01, -1.8910e-01],        [ 1.9461e-01, -2.2685e-01,  1.0647e-01, -3.4326e-01, -2.9526e-01,          2.4968e-01, -2.4847e-01, -3.5818e-03],        [-2.2206e-01, -2.2976e-01, -1.1552e-01, -5.3808e-02, -8.3601e-02,          2.0537e-01, -3.4641e-01,  1.4962e-01],        [ 3.3328e-01, -3.3841e-01,  2.2180e-01, -1.7589e-01,  8.9045e-02,         -2.8206e-01,  3.3939e-01, -1.4631e-01],        [ 2.6775e-01,  2.0620e-01, -3.2241e-01, -1.0405e-01, -1.8671e-01,         -2.1127e-01,  9.8313e-03,  6.5414e-02],        [-1.7894e-01, -2.7265e-01, -1.5433e-01, -1.4552e-01,  2.6358e-01,         -9.3848e-02,  1.3530e-02, -1.0751e-02],        [-1.4177e-01,  2.8125e-01, -3.0068e-01, -2.9215e-01, -2.7913e-02,          2.7730e-01,  2.1517e-01, -3.4198e-01],        [ 2.7883e-01, -1.2303e-01, -1.3842e-01,  1.9788e-01, -2.4735e-01,          7.9309e-02, -1.7941e-02, -2.5372e-01],        [-3.1383e-01,  1.6512e-01, -6.6150e-03, -3.2212e-01, -1.6698e-01,         -2.5484e-01, -1.3594e-01,  1.1862e-01],        [ 2.0073e-01, -1.3519e-01,  1.3472e-01,  2.8381e-01,  3.0003e-01,          1.5058e-01, -2.9155e-01, -1.5276e-01]], device='cuda:0')"], [3.0, "Parameter containing:tensor([ 0.0230,  0.2693, -0.1822,  0.1215,  0.0237,  0.0995,  0.3511, -0.0494,        -0.1502,  0.1793,  0.2525, -0.0892, -0.2716, -0.1036, -0.1978, -0.0045,        -0.0400,  0.2644,  0.1202, -0.2093, -0.1216, -0.0320, -0.2973,  0.3021,         0.1840, -0.1094,  0.3364, -0.2633,  0.2542,  0.0856,  0.1225,  0.2950],       device='cuda:0')"], [3.0, "Parameter containing:tensor([[ 3.2091e-02, -1.0682e-01, -1.3673e-01, -6.4852e-02, -1.5851e-01,         -1.4597e-02, -3.4998e-02, -1.7307e-02, -3.1298e-02,  1.3823e-01,          8.6090e-02,  1.6641e-02, -5.0713e-02,  9.0618e-02,  1.2002e-01,          1.0725e-01, -1.2712e-01, -1.4069e-01,  4.4547e-02,  1.4398e-01,          2.2691e-02, -1.6055e-01, -1.0734e-01,  1.2551e-01, -9.9248e-02,         -1.3766e-01,  2.7332e-02,  6.6128e-02,  1.4520e-01, -6.3990e-02,         -8.8924e-02,  1.6574e-01],        [-8.5860e-02,  1.6455e-01,  5.5703e-03, -7.5762e-03, -5.8784e-02,          8.7587e-02,  1.7518e-01, -1.2245e-01, -1.6567e-01,  1.5311e-01,          1.3423e-01,  1.5241e-01,  1.6841e-01,  1.1972e-01, -4.9093e-02,         -4.3115e-02,  4.8810e-02, -1.3533e-01,  4.2802e-02, -9.4440e-02,          6.5721e-02, -1.2723e-01,  2.0516e-02,  1.1529e-01, -6.3554e-02,          3.7811e-02, -7.6571e-02, -4.0653e-02, -3.6779e-03, -1.3432e-01,         -7.0104e-02, -1.6757e-01],        [ 3.1871e-02,  9.5419e-02,  2.4403e-02, -7.4098e-02,  3.5393e-02,         -1.2427e-01,  8.2556e-02, -4.0956e-02,  1.1842e-01, -2.6363e-02,         -1.5294e-01, -1.2758e-01,  4.8718e-02, -1.7604e-01,  7.0715e-02,         -1.4409e-01,  4.9713e-02,  1.0302e-01,  1.6939e-01,  5.8464e-02,         -1.2441e-01, -6.2853e-02,  4.0320e-02, -1.2951e-01, -6.3597e-02,          7.8169e-02, -1.1068e-01, -1.4177e-01,  1.1039e-01, -1.4397e-02,         -1.0798e-01,  1.2992e-01],        [-6.8907e-02,  6.8767e-02,  1.2048e-01, -9.3299e-02, -9.3412e-02,          1.4834e-01,  1.3076e-01,  8.3786e-02,  5.0215e-02,  7.6105e-02,          9.1665e-02, -1.7451e-01,  1.7482e-01,  4.2569e-02, -1.7710e-02,         -5.2226e-02,  4.1657e-03, -8.9350e-02, -1.6638e-01, -3.4854e-02,          1.1221e-01,  5.0713e-02,  1.4936e-01,  9.5436e-02, -1.8535e-02,         -1.5881e-01, -1.4284e-01,  5.2121e-02,  1.5759e-02, -1.0651e-01,         -1.1450e-01, -3.8950e-02],        [ 6.4010e-02,  4.1832e-02, -1.7165e-02,  1.5794e-02, -1.3269e-01,          7.4074e-02, -1.3031e-01,  8.5265e-02, -6.7803e-02, -1.9770e-03,         -5.1846e-02, -1.1780e-01,  7.4514e-04,  4.0716e-02, -1.4831e-01,          1.6150e-01,  1.7425e-01,  7.8152e-02,  1.5945e-01,  2.6147e-02,         -2.3951e-02,  1.2115e-01,  3.7625e-02, -6.1239e-02, -1.2143e-01,         -1.0947e-01,  7.2787e-02,  1.4134e-01,  7.7765e-02,  1.1258e-01,         -3.1872e-02,  2.5150e-02],        [-7.7370e-02,  1.5542e-01, -1.4555e-01, -1.2390e-01, -1.1911e-01,         -2.1942e-02,  1.5837e-01, -1.5696e-01,  5.3065e-02, -3.7610e-02,          1.2573e-02,  3.9276e-02, -1.0505e-01, -1.0437e-01, -1.3930e-01,          9.3889e-02, -5.2252e-02, -1.0276e-02, -9.2492e-02,  1.0355e-01,         -1.5270e-01,  1.1641e-01, -5.1292e-02, -5.1706e-02, -1.7213e-01,          1.2448e-01,  4.8178e-03,  6.7001e-02, -1.3091e-01, -1.3727e-01,          1.0331e-01, -5.4297e-02],        [-9.6762e-02, -8.1677e-02, -1.3128e-01,  7.4091e-02, -1.2999e-01,          5.5845e-05,  6.3019e-02,  1.5693e-01,  2.6206e-02,  1.4452e-01,          1.5972e-01, -1.1917e-01,  1.7290e-01,  1.6383e-01, -1.6653e-01,          1.5148e-01, -5.6980e-02, -2.2292e-02, -9.6283e-03, -7.7248e-02,          6.7019e-02, -9.5227e-02, -1.3011e-01,  1.2579e-01,  2.6667e-02,          7.3271e-02,  2.2565e-02,  1.1339e-01,  7.8180e-02,  1.0898e-01,          7.3876e-02,  1.3928e-01],        [ 4.6086e-02, -1.7529e-01, -1.6908e-01, -4.2175e-02,  1.4678e-01,         -4.8583e-02,  2.5431e-02, -9.0840e-02,  6.5542e-02, -1.2747e-01,          1.0576e-01, -1.2599e-01,  1.0223e-02, -1.5799e-01,  9.4894e-02,         -1.7279e-01,  1.7128e-01,  7.1158e-02, -1.6636e-01,  3.0011e-02,         -3.8756e-02, -6.6649e-02, -1.0032e-01, -9.6605e-02, -1.0353e-01,         -4.9014e-02,  3.7320e-02, -6.4673e-02, -1.6552e-01,  1.3066e-01,         -2.5382e-02, -4.8320e-02]], device='cuda:0')"], [3.0, "Parameter containing:tensor([-0.0858, -0.1672, -0.0081, -0.1258,  0.1006,  0.0445,  0.0299,  0.0104],       device='cuda:0')"], [3.0, "Parameter containing:tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='cuda:0')"], [3.0, "Parameter containing:tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='cuda:0')"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 534, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def layer_template(layer_name: str, idx: int) -> Tuple[str, int]:\n    split = layer_name.split(\".\")\n    number = int(split[idx])\n    split[idx] = \"{}\"\n    from_name = \".\".join(split)\n    return from_name, number\n\nlayer_template(layer_name='model.layers.0.self_attn.q_proj.weight', idx=2)", "Selected Statement": "split[idx] = \"{}\"", "Function Input": {"layer_name": "'model.layers.0.self_attn.q_proj.weight'", "idx": "2"}, "Variable Values Before Statement": {"Constant": "\"{}\""}, "Value After Statement Execution": "\"{}\"", "Variable States During Runtime": {"layer_name": [[1, "'model.layers.0.self_attn.q_proj.weight'"]], "idx": [[1, "2"]], "split": [[2.0, "['model', 'layers', '0', 'self_attn', 'q_proj', 'weight']"], [4.0, "['model', 'layers', '{}', 'self_attn', 'q_proj', 'weight']"]], "number": [[3.0, "0"]], "from_name": [[5.0, "'model.layers.{}.self_attn.q_proj.weight'"]]}, "Program Information": "Project Name: Lightning-AI+lit-gpt", "idx": 535, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def rowcol_to_a1(row, col):\n    \"\"\"Translates a row and column cell address to A1 notation.\n\n    :param row: The row of the cell to be converted.\n        Rows start at index 1.\n    :type row: int, str\n\n    :param col: The column of the cell to be converted.\n        Columns start at index 1.\n    :type row: int, str\n\n    :returns: a string containing the cell's coordinates in A1 notation.\n\n    Example:\n\n    >>> rowcol_to_a1(1, 1)\n    A1\n\n    \"\"\"\n    row = int(row)\n    col = int(col)\n\n    if row < 1 or col < 1:\n        raise IncorrectCellLabel(\"({}, {})\".format(row, col))\n\n    div = col\n    column_label = \"\"\n\n    while div:\n        (div, mod) = divmod(div, 26)\n        if mod == 0:\n            mod = 26\n            div -= 1\n        column_label = chr(mod + MAGIC_NUMBER) + column_label\n\n    label = \"{}{}\".format(column_label, row)\n\n    return label\n\nrowcol_to_a1(row=4, col=4)", "Selected Statement": "column_label = \"\"", "Function Input": {"row": "4", "col": "4"}, "Variable Values Before Statement": {"Constant": "\"\""}, "Value After Statement Execution": "\"\"", "Variable States During Runtime": {"row": [[1, "4"]], "col": [[1, "4"]], "div": [[26.0, "4"], [30.0, "0"]], "column_label": [[27.0, "''"], [34.0, "'D'"]], "mod": [[30.0, "4"]], "label": [[36.0, "'D4'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 536, "quantized value": "Empty String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def a1_to_rowcol(label):\n    \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n\n    :param str label: A cell label in A1 notation, e.g. 'B1'.\n        Letter case is ignored.\n    :returns: a tuple containing `row` and `column` numbers. Both indexed\n              from 1 (one).\n    :rtype: tuple\n\n    Example:\n\n    >>> a1_to_rowcol('A1')\n    (1, 1)\n\n    \"\"\"\n    m = CELL_ADDR_RE.match(label)\n    if m:\n        column_label = m.group(1).upper()\n        row = int(m.group(2))\n\n        col = 0\n        for i, c in enumerate(reversed(column_label)):\n            col += (ord(c) - MAGIC_NUMBER) * (26**i)\n    else:\n        raise IncorrectCellLabel(label)\n\n    return (row, col)\n\na1_to_rowcol(label='B1')", "Selected Statement": "col = 0", "Function Input": {"label": "'B1'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"label": [[1, "'B1'"]], "m": [[16.0, "<re.Match object; span=(0, 2), match='B1'>"]], "column_label": [[18.0, "'B'"]], "row": [[19.0, "1"]], "col": [[21.0, "0"], [23.0, "2"]], "i": [[22.0, "0"]], "c": [[22.0, "'B'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 537, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def _a1_to_rowcol_unbounded(label):\n    \"\"\"Translates a cell's address in A1 notation to a tuple of integers.\n\n    Same as `a1_to_rowcol()` but allows for missing row or column part\n    (e.g. \"A\" for the first column)\n\n    :returns: a tuple containing `row` and `column` numbers. Both indexed\n        from 1 (one).\n    :rtype: tuple\n\n    Example:\n\n    >>> _a1_to_rowcol_unbounded('A1')\n    (1, 1)\n\n    >>> _a1_to_rowcol_unbounded('A')\n    (inf, 1)\n\n    >>> _a1_to_rowcol_unbounded('1')\n    (1, inf)\n\n    >>> _a1_to_rowcol_unbounded('ABC123')\n    (123, 731)\n\n    >>> _a1_to_rowcol_unbounded('ABC')\n    (inf, 731)\n\n    >>> _a1_to_rowcol_unbounded('123')\n    (123, inf)\n\n    >>> _a1_to_rowcol_unbounded('1A')\n    Traceback (most recent call last):\n        ...\n    gspread.exceptions.IncorrectCellLabel: 1A\n\n    >>> _a1_to_rowcol_unbounded('')\n    (inf, inf)\n\n    \"\"\"\n    m = A1_ADDR_ROW_COL_RE.match(label)\n    if m:\n        column_label, row = m.groups()\n\n        if column_label:\n            col = 0\n            for i, c in enumerate(reversed(column_label.upper())):\n                col += (ord(c) - MAGIC_NUMBER) * (26**i)\n        else:\n            col = inf\n\n        if row:\n            row = int(row)\n        else:\n            row = inf\n    else:\n        raise IncorrectCellLabel(label)\n\n    return (row, col)\n\n_a1_to_rowcol_unbounded(label='A1')", "Selected Statement": "col = 0", "Function Input": {"label": "'A1'"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"label": [[1, "'A1'"]], "m": [[40.0, "<re.Match object; span=(0, 2), match='A1'>"]], "column_label": [[42.0, "'A'"]], "row": [[42.0, "'1'"], [52.0, "1"]], "col": [[45.0, "0"], [47.0, "1"]], "i": [[46.0, "0"]], "c": [[46.0, "'A'"]]}, "Program Information": "Project Name: burnash+gspread", "idx": 538, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_config():\n    \"\"\"Create, populate and return the VersioneerConfig() object.\"\"\"\n    # these strings are filled in when 'setup.py versioneer' creates\n    # _version.py\n    cfg = VersioneerConfig()\n    cfg.VCS = \"git\"\n    # cfg.style = \"pep440-micro\"\n    # cfg.style = \"pep440-develop\"\n    cfg.style = \"pep440-auto\"\n    cfg.tag_prefix = \"\"\n    cfg.parentdir_prefix = \"\"\n    cfg.versionfile_source = \"milo/_version.py\"\n    cfg.verbose = False\n    return cfg\n\nget_config()", "Selected Statement": "cfg.VCS = \"git\"", "Function Input": {}, "Variable Values Before Statement": {"Constant": "\"git\""}, "Value After Statement Execution": "\"git\"", "Variable States During Runtime": {"cfg": [[5.0, "{}"], [6.0, "{VCS='git'}"], [9.0, "{VCS='git', style='pep440-auto'}"], [10.0, "{VCS='git', style='pep440-auto', tag_prefix=''}"], [11.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix=''}"], [12.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix='', versionfile_source='milo/_version.py'}"], [13.0, "{VCS='git', style='pep440-auto', tag_prefix='', parentdir_prefix='', versionfile_source='milo/_version.py', verbose=False}"]]}, "Program Information": "Project Name: berkeleylab+als.milo", "idx": 539, "quantized value": "Alphabetic String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def leftmost_bit(x):\n            assert x > 0\n            result = 1\n            while result <= x:\n                result = 2 * result\n            return result // 2\n\nleftmost_bit(x=35418756707884953894268771885010418872764936485960643117951731578891074948686)", "Selected Statement": "result = 1", "Function Input": {"x": "35418756707884953894268771885010418872764936485960643117951731578891074948686"}, "Variable Values Before Statement": {"Constant": "1"}, "Value After Statement Execution": "1", "Variable States During Runtime": {"x": [[1, "35418756707884953894268771885010418872764936485960643117951731578891074948686"]], "result": [[3.0, "1"], [5.0, "2"], [5.0, "4"], [5.0, "8"], [5.0, "16"], [5.0, "32"], [5.0, "64"], [5.0, "128"], [5.0, "256"], [5.0, "512"], [5.0, "1024"], [5.0, "2048"], [5.0, "4096"], [5.0, "8192"], [5.0, "16384"], [5.0, "32768"], [5.0, "65536"], [5.0, "131072"], [5.0, "262144"], [5.0, "524288"], [5.0, "1048576"], [5.0, "2097152"], [5.0, "4194304"], [5.0, "8388608"], [5.0, "16777216"], [5.0, "33554432"], [5.0, "67108864"], [5.0, "134217728"], [5.0, "268435456"], [5.0, "536870912"], [5.0, "1073741824"], [5.0, "2147483648"], [5.0, "4294967296"], [5.0, "8589934592"], [5.0, "17179869184"], [5.0, "34359738368"], [5.0, "68719476736"], [5.0, "137438953472"], [5.0, "274877906944"], [5.0, "549755813888"], [5.0, "1099511627776"], [5.0, "2199023255552"], [5.0, "4398046511104"], [5.0, "8796093022208"], [5.0, "17592186044416"], [5.0, "35184372088832"], [5.0, "70368744177664"], [5.0, "140737488355328"], [5.0, "281474976710656"], [5.0, "562949953421312"], [5.0, "1125899906842624"], [5.0, "2251799813685248"], [5.0, "4503599627370496"], [5.0, "9007199254740992"], [5.0, "18014398509481984"], [5.0, "36028797018963968"], [5.0, "72057594037927936"], [5.0, "144115188075855872"], [5.0, "288230376151711744"], [5.0, "576460752303423488"], [5.0, "1152921504606846976"], [5.0, "2305843009213693952"], [5.0, "4611686018427387904"], [5.0, "9223372036854775808"], [5.0, "18446744073709551616"], [5.0, "36893488147419103232"], [5.0, "73786976294838206464"], [5.0, "147573952589676412928"], [5.0, "295147905179352825856"], [5.0, "590295810358705651712"], [5.0, "1180591620717411303424"], [5.0, "2361183241434822606848"], [5.0, "4722366482869645213696"], [5.0, "9444732965739290427392"], [5.0, "18889465931478580854784"], [5.0, "37778931862957161709568"], [5.0, "75557863725914323419136"], [5.0, "151115727451828646838272"], [5.0, "302231454903657293676544"], [5.0, "604462909807314587353088"], [5.0, "1208925819614629174706176"], [5.0, "2417851639229258349412352"], [5.0, "4835703278458516698824704"], [5.0, "9671406556917033397649408"], [5.0, "19342813113834066795298816"], [5.0, "38685626227668133590597632"], [5.0, "77371252455336267181195264"], [5.0, "154742504910672534362390528"], [5.0, "309485009821345068724781056"], [5.0, "618970019642690137449562112"], [5.0, "1237940039285380274899124224"], [5.0, "2475880078570760549798248448"], [5.0, "4951760157141521099596496896"], [5.0, "9903520314283042199192993792"], [5.0, "19807040628566084398385987584"], [5.0, "39614081257132168796771975168"], [5.0, "79228162514264337593543950336"], [5.0, "158456325028528675187087900672"], [5.0, "316912650057057350374175801344"], [5.0, "633825300114114700748351602688"], [5.0, "1267650600228229401496703205376"], [5.0, "2535301200456458802993406410752"], [5.0, "5070602400912917605986812821504"], [5.0, "10141204801825835211973625643008"], [5.0, "20282409603651670423947251286016"], [5.0, "40564819207303340847894502572032"], [5.0, "81129638414606681695789005144064"], [5.0, "162259276829213363391578010288128"], [5.0, "324518553658426726783156020576256"], [5.0, "649037107316853453566312041152512"], [5.0, "1298074214633706907132624082305024"], [5.0, "2596148429267413814265248164610048"], [5.0, "5192296858534827628530496329220096"], [5.0, "10384593717069655257060992658440192"], [5.0, "20769187434139310514121985316880384"], [5.0, "41538374868278621028243970633760768"], [5.0, "83076749736557242056487941267521536"], [5.0, "166153499473114484112975882535043072"], [5.0, "332306998946228968225951765070086144"], [5.0, "664613997892457936451903530140172288"], [5.0, "1329227995784915872903807060280344576"], [5.0, "2658455991569831745807614120560689152"], [5.0, "5316911983139663491615228241121378304"], [5.0, "10633823966279326983230456482242756608"], [5.0, "21267647932558653966460912964485513216"], [5.0, "42535295865117307932921825928971026432"], [5.0, "85070591730234615865843651857942052864"], [5.0, "170141183460469231731687303715884105728"], [5.0, "340282366920938463463374607431768211456"], [5.0, "680564733841876926926749214863536422912"], [5.0, "1361129467683753853853498429727072845824"], [5.0, "2722258935367507707706996859454145691648"], [5.0, "5444517870735015415413993718908291383296"], [5.0, "10889035741470030830827987437816582766592"], [5.0, "21778071482940061661655974875633165533184"], [5.0, "43556142965880123323311949751266331066368"], [5.0, "87112285931760246646623899502532662132736"], [5.0, "174224571863520493293247799005065324265472"], [5.0, "348449143727040986586495598010130648530944"], [5.0, "696898287454081973172991196020261297061888"], [5.0, "1393796574908163946345982392040522594123776"], [5.0, "2787593149816327892691964784081045188247552"], [5.0, "5575186299632655785383929568162090376495104"], [5.0, "11150372599265311570767859136324180752990208"], [5.0, "22300745198530623141535718272648361505980416"], [5.0, "44601490397061246283071436545296723011960832"], [5.0, "89202980794122492566142873090593446023921664"], [5.0, "178405961588244985132285746181186892047843328"], [5.0, "356811923176489970264571492362373784095686656"], [5.0, "713623846352979940529142984724747568191373312"], [5.0, "1427247692705959881058285969449495136382746624"], [5.0, "2854495385411919762116571938898990272765493248"], [5.0, "5708990770823839524233143877797980545530986496"], [5.0, "11417981541647679048466287755595961091061972992"], [5.0, "22835963083295358096932575511191922182123945984"], [5.0, "45671926166590716193865151022383844364247891968"], [5.0, "91343852333181432387730302044767688728495783936"], [5.0, "182687704666362864775460604089535377456991567872"], [5.0, "365375409332725729550921208179070754913983135744"], [5.0, "730750818665451459101842416358141509827966271488"], [5.0, "1461501637330902918203684832716283019655932542976"], [5.0, "2923003274661805836407369665432566039311865085952"], [5.0, "5846006549323611672814739330865132078623730171904"], [5.0, "11692013098647223345629478661730264157247460343808"], [5.0, "23384026197294446691258957323460528314494920687616"], [5.0, "46768052394588893382517914646921056628989841375232"], [5.0, "93536104789177786765035829293842113257979682750464"], [5.0, "187072209578355573530071658587684226515959365500928"], [5.0, "374144419156711147060143317175368453031918731001856"], [5.0, "748288838313422294120286634350736906063837462003712"], [5.0, "1496577676626844588240573268701473812127674924007424"], [5.0, "2993155353253689176481146537402947624255349848014848"], [5.0, "5986310706507378352962293074805895248510699696029696"], [5.0, "11972621413014756705924586149611790497021399392059392"], [5.0, "23945242826029513411849172299223580994042798784118784"], [5.0, "47890485652059026823698344598447161988085597568237568"], [5.0, "95780971304118053647396689196894323976171195136475136"], [5.0, "191561942608236107294793378393788647952342390272950272"], [5.0, "383123885216472214589586756787577295904684780545900544"], [5.0, "766247770432944429179173513575154591809369561091801088"], [5.0, "1532495540865888858358347027150309183618739122183602176"], [5.0, "3064991081731777716716694054300618367237478244367204352"], [5.0, "6129982163463555433433388108601236734474956488734408704"], [5.0, "12259964326927110866866776217202473468949912977468817408"], [5.0, "24519928653854221733733552434404946937899825954937634816"], [5.0, "49039857307708443467467104868809893875799651909875269632"], [5.0, "98079714615416886934934209737619787751599303819750539264"], [5.0, "196159429230833773869868419475239575503198607639501078528"], [5.0, "392318858461667547739736838950479151006397215279002157056"], [5.0, "784637716923335095479473677900958302012794430558004314112"], [5.0, "1569275433846670190958947355801916604025588861116008628224"], [5.0, "3138550867693340381917894711603833208051177722232017256448"], [5.0, "6277101735386680763835789423207666416102355444464034512896"], [5.0, "12554203470773361527671578846415332832204710888928069025792"], [5.0, "25108406941546723055343157692830665664409421777856138051584"], [5.0, "50216813883093446110686315385661331328818843555712276103168"], [5.0, "100433627766186892221372630771322662657637687111424552206336"], [5.0, "200867255532373784442745261542645325315275374222849104412672"], [5.0, "401734511064747568885490523085290650630550748445698208825344"], [5.0, "803469022129495137770981046170581301261101496891396417650688"], [5.0, "1606938044258990275541962092341162602522202993782792835301376"], [5.0, "3213876088517980551083924184682325205044405987565585670602752"], [5.0, "6427752177035961102167848369364650410088811975131171341205504"], [5.0, "12855504354071922204335696738729300820177623950262342682411008"], [5.0, "25711008708143844408671393477458601640355247900524685364822016"], [5.0, "51422017416287688817342786954917203280710495801049370729644032"], [5.0, "102844034832575377634685573909834406561420991602098741459288064"], [5.0, "205688069665150755269371147819668813122841983204197482918576128"], [5.0, "411376139330301510538742295639337626245683966408394965837152256"], [5.0, "822752278660603021077484591278675252491367932816789931674304512"], [5.0, "1645504557321206042154969182557350504982735865633579863348609024"], [5.0, "3291009114642412084309938365114701009965471731267159726697218048"], [5.0, "6582018229284824168619876730229402019930943462534319453394436096"], [5.0, "13164036458569648337239753460458804039861886925068638906788872192"], [5.0, "26328072917139296674479506920917608079723773850137277813577744384"], [5.0, "52656145834278593348959013841835216159447547700274555627155488768"], [5.0, "105312291668557186697918027683670432318895095400549111254310977536"], [5.0, "210624583337114373395836055367340864637790190801098222508621955072"], [5.0, "421249166674228746791672110734681729275580381602196445017243910144"], [5.0, "842498333348457493583344221469363458551160763204392890034487820288"], [5.0, "1684996666696914987166688442938726917102321526408785780068975640576"], [5.0, "3369993333393829974333376885877453834204643052817571560137951281152"], [5.0, "6739986666787659948666753771754907668409286105635143120275902562304"], [5.0, "13479973333575319897333507543509815336818572211270286240551805124608"], [5.0, "26959946667150639794667015087019630673637144422540572481103610249216"], [5.0, "53919893334301279589334030174039261347274288845081144962207220498432"], [5.0, "107839786668602559178668060348078522694548577690162289924414440996864"], [5.0, "215679573337205118357336120696157045389097155380324579848828881993728"], [5.0, "431359146674410236714672241392314090778194310760649159697657763987456"], [5.0, "862718293348820473429344482784628181556388621521298319395315527974912"], [5.0, "1725436586697640946858688965569256363112777243042596638790631055949824"], [5.0, "3450873173395281893717377931138512726225554486085193277581262111899648"], [5.0, "6901746346790563787434755862277025452451108972170386555162524223799296"], [5.0, "13803492693581127574869511724554050904902217944340773110325048447598592"], [5.0, "27606985387162255149739023449108101809804435888681546220650096895197184"], [5.0, "55213970774324510299478046898216203619608871777363092441300193790394368"], [5.0, "110427941548649020598956093796432407239217743554726184882600387580788736"], [5.0, "220855883097298041197912187592864814478435487109452369765200775161577472"], [5.0, "441711766194596082395824375185729628956870974218904739530401550323154944"], [5.0, "883423532389192164791648750371459257913741948437809479060803100646309888"], [5.0, "1766847064778384329583297500742918515827483896875618958121606201292619776"], [5.0, "3533694129556768659166595001485837031654967793751237916243212402585239552"], [5.0, "7067388259113537318333190002971674063309935587502475832486424805170479104"], [5.0, "14134776518227074636666380005943348126619871175004951664972849610340958208"], [5.0, "28269553036454149273332760011886696253239742350009903329945699220681916416"], [5.0, "56539106072908298546665520023773392506479484700019806659891398441363832832"], [5.0, "113078212145816597093331040047546785012958969400039613319782796882727665664"], [5.0, "226156424291633194186662080095093570025917938800079226639565593765455331328"], [5.0, "452312848583266388373324160190187140051835877600158453279131187530910662656"], [5.0, "904625697166532776746648320380374280103671755200316906558262375061821325312"], [5.0, "1809251394333065553493296640760748560207343510400633813116524750123642650624"], [5.0, "3618502788666131106986593281521497120414687020801267626233049500247285301248"], [5.0, "7237005577332262213973186563042994240829374041602535252466099000494570602496"], [5.0, "14474011154664524427946373126085988481658748083205070504932198000989141204992"], [5.0, "28948022309329048855892746252171976963317496166410141009864396001978282409984"], [5.0, "57896044618658097711785492504343953926634992332820282019728792003956564819968"]]}, "Program Information": "Project Name: ccxt+ccxt", "idx": 540, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def requires_crt(reason=None):\n    if reason is None:\n        reason = \"Test requires awscrt to be installed\"\n\n    def decorator(func):\n        return unittest.skipIf(not HAS_CRT, reason)(func)\n\n    return decorator\n\nrequires_crt(reason=None)", "Selected Statement": "reason = \"Test requires awscrt to be installed\"", "Function Input": {"reason": "None"}, "Variable Values Before Statement": {"Constant": "\"Test requires awscrt to be installed\""}, "Value After Statement Execution": "\"Test requires awscrt to be installed\"", "Variable States During Runtime": {"reason": [[1, "None"], [3.0, "'Test requires awscrt to be installed'"]], "decorator": [[5.0, "<function requires_crt.<locals>.decorator at 0x7f51d80bc0d0>"]]}, "Program Information": "Project Name: aws+aws-cli", "idx": 541, "quantized value": "Mixed String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def bytes_from_int(val: int) -> bytes:\n    remaining = val\n    byte_length = 0\n\n    while remaining != 0:\n        remaining >>= 8\n        byte_length += 1\n\n    return val.to_bytes(byte_length, \"big\", signed=False)\n\nbytes_from_int(val=0)", "Selected Statement": "byte_length = 0", "Function Input": {"val": "0"}, "Variable Values Before Statement": {"Constant": "0"}, "Value After Statement Execution": "0", "Variable States During Runtime": {"val": [[1, "0"]], "remaining": [[2.0, "0"]], "byte_length": [[3.0, "0"]]}, "Program Information": "Project Name: jpadilla+pyjwt", "idx": 542, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def get_targets_from_csv(csv_filename):\n        '''Returns list of Target objects parsed from CSV file.'''\n        targets = []\n        import csv\n        with open(csv_filename, 'r') as csvopen:\n            lines = []\n            for line in csvopen:\n                line = line.replace('\\0', '')\n                lines.append(line)\n            csv_reader = csv.reader(lines,\n                    delimiter=',',\n                    quoting=csv.QUOTE_ALL,\n                    skipinitialspace=True,\n                    escapechar='\\\\')\n\n            hit_clients = False\n            for row in csv_reader:\n                # Each 'row' is a list of fields for a target/client\n\n                if len(row) == 0: continue\n\n                if row[0].strip() == 'BSSID':\n                    # This is the 'header' for the list of Targets\n                    hit_clients = False\n                    continue\n\n                elif row[0].strip() == 'Station MAC':\n                    # This is the 'header' for the list of Clients\n                    hit_clients = True\n                    continue\n\n                if hit_clients:\n                    # The current row corresponds to a 'Client' (computer)\n                    try:\n                        client = Client(row)\n                    except (IndexError, ValueError) as e:\n                        # Skip if we can't parse the client row\n                        continue\n\n                    if 'not associated' in client.bssid:\n                        # Ignore unassociated clients\n                        continue\n\n                    # Add this client to the appropriate Target\n                    for t in targets:\n                        if t.bssid == client.bssid:\n                            t.clients.append(client)\n                            break\n\n                else:\n                    # The current row corresponds to a 'Target' (router)\n                    try:\n                        target = Target(row)\n                        targets.append(target)\n                    except Exception:\n                        continue\n\n        return targets\n\nget_targets_from_csv(csv_filename='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv')", "Selected Statement": "hit_clients = False", "Function Input": {"csv_filename": "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"}, "Variable Values Before Statement": {"Constant": "False"}, "Value After Statement Execution": "False", "Variable States During Runtime": {"csv_filename": [[1, "'/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv'"]], "targets": [[3.0, "[]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>]"], [54.0, "[<wifite.model.target.Target object at 0x7ff2ae4e23d0>, <wifite.model.target.Target object at 0x7ff2ae4e2310>, <wifite.model.target.Target object at 0x7ff2ae4e2a30>, <wifite.model.target.Target object at 0x7ff2ae4e2df0>, <wifite.model.target.Target object at 0x7ff2ae4e2af0>]"]], "csv": [[4.0, "<module 'csv' from '/local/rcs/XXX/miniforge3/envs/derv82+wifite2/lib/python3.9/csv.py'>"]], "csvopen": [[5.0, "<_io.TextIOWrapper name='/local/rcs/XXX/code/pytrace-collector/logs/self_collected/tried/derv82+wifite2/derv82+wifite2/tests/files/airodump-weird-ssids.csv' mode='r' encoding='UTF-8'>"]], "lines": [[6.0, "[]"], [9.0, "['\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n']"], [9.0, "['\\n', 'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n', 'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n', '\\n', '\\n', '\\n', '\\n', 'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n', '\\n']"]], "line": [[7.0, "'\\n'"], [7.0, "'BSSID, First time seen, Last time seen, channel, Speed, Privacy, Cipher, Authentication, Power, # beacons, # IV, LAN IP, ID-length, ESSID, Key\\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:21:23, 2018-04-06 18:21:24, 10,  54, WPA2, CCMP,PSK, -34,        5,        0,   0.  0.  0.  0,  24, Comma\\\\, no trailing space, \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:19:17, 2018-04-06 18:19:19, 10,  54, WPA2, CCMP,PSK, -35,       18,        0,   0.  0.  0.  0,  20, \\\\\"Quoted ESSID\\\\, Comma\\\\, no trailing spaces.   \\\\\", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:35:29, 2018-04-06 18:35:30, 10,  54, WPA2, CCMP,PSK, -31,       12,        0,   0.  0.  0.  0,  22, \"Comma\\\\, Trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:22:45, 2018-04-06 18:22:46, 10,  54, WPA2, CCMP,PSK, -29,       15,        0,   0.  0.  0.  0,  30, \"\\\\\"quote\\\\\" comma\\\\, trailing space \", \\n'"], [7.0, "'AA:BB:CC:DD:EE:FF, 2018-04-06 18:50:11, 2018-04-06 18:50:17, 10,  54, WPA2, CCMP,PSK, -20,       43,        0,   0.  0.  0.  0,  19, \\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00, \\n'"], [7.0, "'\\n'"], [7.0, "'Station MAC, First time seen, Last time seen, Power, # packets, BSSID, Probed ESSIDs\\n'"], [7.0, "'\\n'"]], "csv_reader": [[10.0, "REPR FAILED"]], "hit_clients": [[16.0, "False"], [29.0, "True"]], "row": [[17.0, "[]"], [17.0, "['BSSID', 'First time seen', 'Last time seen', 'channel', 'Speed', 'Privacy', 'Cipher', 'Authentication', 'Power', '# beacons', '# IV', 'LAN IP', 'ID-length', 'ESSID', 'Key']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:21:23', '2018-04-06 18:21:24', '10', '54', 'WPA2', 'CCMP', 'PSK', '-34', '5', '0', '0.  0.  0.  0', '24', 'Comma, no trailing space', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:19:17', '2018-04-06 18:19:19', '10', '54', 'WPA2', 'CCMP', 'PSK', '-35', '18', '0', '0.  0.  0.  0', '20', '\"Quoted ESSID, Comma, no trailing spaces.   \"', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:35:29', '2018-04-06 18:35:30', '10', '54', 'WPA2', 'CCMP', 'PSK', '-31', '12', '0', '0.  0.  0.  0', '22', 'Comma, Trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:22:45', '2018-04-06 18:22:46', '10', '54', 'WPA2', 'CCMP', 'PSK', '-29', '15', '0', '0.  0.  0.  0', '30', '\"quote\" comma, trailing space ', '']"], [17.0, "['AA:BB:CC:DD:EE:FF', '2018-04-06 18:50:11', '2018-04-06 18:50:17', '10', '54', 'WPA2', 'CCMP', 'PSK', '-20', '43', '0', '0.  0.  0.  0', '19', 'x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00', '']"], [17.0, "[]"], [17.0, "['Station MAC', 'First time seen', 'Last time seen', 'Power', '# packets', 'BSSID', 'Probed ESSIDs']"], [17.0, "[]"]], "target": [[53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=66, beacons=5, ivs=0, essid_known=True, essid_len=24, essid='Comma, no trailing space', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=65, beacons=18, ivs=0, essid_known=True, essid_len=20, essid='\"Quoted ESSID, Comma, no trailing spaces.   \"', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=69, beacons=12, ivs=0, essid_known=True, essid_len=22, essid='Comma, Trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=71, beacons=15, ivs=0, essid_known=True, essid_len=30, essid='\"quote\" comma, trailing space ', wps=3, decloaked=False, clients=[]}"], [53.0, "{bssid='AA:BB:CC:DD:EE:FF', channel='10', encryption='WPA', power=80, beacons=43, ivs=0, essid_known=False, essid_len=19, essid=None, wps=3, decloaked=False, clients=[]}"]]}, "Program Information": "Project Name: derv82+wifite2", "idx": 543, "quantized value": "Zero", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def test_multithreading_lock(execution_number):  # type: ignore[misc]\n    \"\"\"Reruns test multiple times since error is random and\n    depends on CPU and can lead to false positive result.\n\n    \"\"\"\n    n_threads = 10\n    n_requests = 30\n    with responses.RequestsMock() as m:\n        for j in range(n_threads):\n            for i in range(n_requests):\n                m.add(url=f\"http://example.com/example{i}\", method=\"GET\")\n\n        def fun():\n            for req in range(n_requests):\n                requests.get(f\"http://example.com/example{req}\")\n\n        threads = [\n            threading.Thread(name=f\"example{i}\", target=fun) for i in range(n_threads)\n        ]\n        for thread in threads:\n            thread.start()\n        for thread in threads:\n            thread.join()\n\ntest_multithreading_lock(execution_number=0)", "Selected Statement": "n_threads = 10", "Function Input": {"execution_number": "0"}, "Variable Values Before Statement": {"Constant": "10"}, "Value After Statement Execution": "10", "Variable States During Runtime": {"execution_number": [[1, "0"]], "n_threads": [[6.0, "10"]], "n_requests": [[7.0, "30"]], "m": [[8.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>}"], [21.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<locked _thread.lock object at 0x7f684a53b390>}"], [21.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>}"], [21.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<locked _thread.lock object at 0x7f684a53b390>}"], [21.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>}"], [21.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<locked _thread.lock object at 0x7f684a53b390>}"], [23.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f684a53be80>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=<unittest.mock._patch object at 0x7f6849be1af0>, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>}"], [22.0, "{_calls=<responses.CallList object at 0x7f684a53bee0>, _registry=<responses.registries.FirstMatchRegistry object at 0x7f6838645a60>, passthru_prefixes=(), assert_all_requests_are_fired=True, response_callback=None, target='requests.adapters.HTTPAdapter.send', _patcher=None, _thread_lock=<unlocked _thread.lock object at 0x7f684a53b390>}"]], "j": [[9.0, "0"], [9.0, "1"], [9.0, "2"], [9.0, "3"], [9.0, "4"], [9.0, "5"], [9.0, "6"], [9.0, "7"], [9.0, "8"], [9.0, "9"]], "i": [[10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"], [10.0, "0"], [10.0, "1"], [10.0, "2"], [10.0, "3"], [10.0, "4"], [10.0, "5"], [10.0, "6"], [10.0, "7"], [10.0, "8"], [10.0, "9"], [10.0, "10"], [10.0, "11"], [10.0, "12"], [10.0, "13"], [10.0, "14"], [10.0, "15"], [10.0, "16"], [10.0, "17"], [10.0, "18"], [10.0, "19"], [10.0, "20"], [10.0, "21"], [10.0, "22"], [10.0, "23"], [10.0, "24"], [10.0, "25"], [10.0, "26"], [10.0, "27"], [10.0, "28"], [10.0, "29"]], "fun": [[13.0, "<function test_multithreading_lock.<locals>.fun at 0x7f683d0139d0>"]], "threads": [[17.0, "[<Thread(example0, initial)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, initial)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, initial)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, initial)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, initial)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, initial)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, initial)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, initial)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, initial)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, initial)>]"], [21.0, "[<Thread(example0, started 140085666891328)>, <Thread(example1, started 140085658236480)>, <Thread(example2, started 140085649843776)>, <Thread(example3, started 140085641451072)>, <Thread(example4, started 140085633058368)>, <Thread(example5, started 140085624665664)>, <Thread(example6, started 140085616272960)>, <Thread(example7, started 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, started 140085114693184)>]"], [23.0, "[<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, started 140085123085888)>, <Thread(example9, started 140085114693184)>]"], [23.0, "[<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, stopped 140085123085888)>, <Thread(example9, started 140085114693184)>]"], [23.0, "[<Thread(example0, stopped 140085666891328)>, <Thread(example1, stopped 140085658236480)>, <Thread(example2, stopped 140085649843776)>, <Thread(example3, stopped 140085641451072)>, <Thread(example4, stopped 140085633058368)>, <Thread(example5, stopped 140085624665664)>, <Thread(example6, stopped 140085616272960)>, <Thread(example7, stopped 140085607880256)>, <Thread(example8, stopped 140085123085888)>, <Thread(example9, stopped 140085114693184)>]"]], "thread": [[20.0, "<Thread(example0, initial)>"], [21.0, "<Thread(example0, started 140085666891328)>"], [20.0, "<Thread(example1, initial)>"], [21.0, "<Thread(example1, started 140085658236480)>"], [20.0, "<Thread(example2, initial)>"], [21.0, "<Thread(example2, started 140085649843776)>"], [20.0, "<Thread(example3, initial)>"], [21.0, "<Thread(example3, started 140085641451072)>"], [20.0, "<Thread(example4, initial)>"], [21.0, "<Thread(example4, started 140085633058368)>"], [20.0, "<Thread(example5, initial)>"], [21.0, "<Thread(example5, started 140085624665664)>"], [20.0, "<Thread(example6, initial)>"], [21.0, "<Thread(example6, started 140085616272960)>"], [20.0, "<Thread(example7, initial)>"], [21.0, "<Thread(example7, started 140085607880256)>"], [20.0, "<Thread(example8, initial)>"], [21.0, "<Thread(example8, started 140085123085888)>"], [20.0, "<Thread(example9, initial)>"], [21.0, "<Thread(example9, started 140085114693184)>"], [22.0, "<Thread(example0, started 140085666891328)>"], [23.0, "<Thread(example0, stopped 140085666891328)>"], [22.0, "<Thread(example1, stopped 140085658236480)>"], [22.0, "<Thread(example2, stopped 140085649843776)>"], [22.0, "<Thread(example3, stopped 140085641451072)>"], [22.0, "<Thread(example4, stopped 140085633058368)>"], [22.0, "<Thread(example5, stopped 140085624665664)>"], [22.0, "<Thread(example6, stopped 140085616272960)>"], [22.0, "<Thread(example7, stopped 140085607880256)>"], [22.0, "<Thread(example8, started 140085123085888)>"], [23.0, "<Thread(example8, stopped 140085123085888)>"], [22.0, "<Thread(example9, started 140085114693184)>"], [23.0, "<Thread(example9, stopped 140085114693184)>"]]}, "Program Information": "Project Name: getsentry+responses", "idx": 544, "quantized value": "Positive Regular", "mapping_info": {"value == 0": "zero", "0 < value <= 10": "Positive Regular", "value > 10": "Positive Large", "-10 <= value < 0": "Negative Regular", "value < -10": "Negative Large"}}
{"Programming Language": "Python", "Statement Type": "Constant Assignment", "Source Code": "def patch_terminal_size(monkeypatch):\n    term_width = '250'\n    term_height = '60'\n    monkeypatch.setitem(os.environ, 'COLUMNS', term_width)\n    monkeypatch.setitem(os.environ, 'LINES', term_height)\n\npatch_terminal_size(monkeypatch={_setattr=[], _setitem=[], _cwd=None, _savesyspath=None})", "Selected Statement": "term_width = '250'", "Function Input": {"monkeypatch": "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"}, "Variable Values Before Statement": {"Constant": "'250'"}, "Value After Statement Execution": "'250'", "Variable States During Runtime": {"monkeypatch": [[1, "{_setattr=[], _setitem=[], _cwd=None, _savesyspath=None}"], [4.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250'}), 'COLUMNS', <notset>)], _cwd=None, _savesyspath=None}"], [5.0, "{_setattr=[], _setitem=[(environ({'SHELL': '/bin/bash', 'LSCOLORS': 'Gxfxcxdxbxegedabagacad', 'USER_ZDOTDIR': '/home/XXX', 'COLORTERM': 'truecolor', 'LESS': '-R', 'TERM_PROGRAM_VERSION': '3.2a', 'GVM_VERSION': '1.0.22', 'CONDA_EXE': '/local/rcs/XXX/miniforge3/bin/conda', '_CE_M': '', 'TMUX': '/tmp/tmux-19200/default,59951,3', 'PKG_CONFIG_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib/pkgconfig:', '_P9K_TTY': '/dev/pts/20', 'GVM_PATH_BACKUP': '/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/mal/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'P9K_TTY': 'old', 'LC_FIG_SET_PARENT': '4c022497-5122-4b80-b325-c89bab32302a', 'PWD': '/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'LOGNAME': 'XXX', 'XDG_SESSION_TYPE': 'tty', 'CONDA_PREFIX': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat', 'VSCODE_GIT_ASKPASS_NODE': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/node', 'MOTD_SHOWN': 'pam', 'VSCODE_INJECTION': '1', 'GVM_OVERLAY_PREFIX': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay', 'HOME': '/home/XXX', 'LANG': 'en_US.UTF-8', 'DYLD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'V...deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'gvm_pkgset_name': 'global', 'SSL_CERT_DIR': '/usr/lib/ssl/certs', 'CONDA_PROMPT_MODIFIER': '(AmmsA+Githeat) ', 'GIT_ASKPASS': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass.sh', 'GVM_ROOT': '/home/XXX/.gvm', 'SSH_CONNECTION': '127.0.0.1 39996 127.0.0.1 22', 'GOROOT': '/home/XXX/.gvm/gos/go1.19.1', 'NVM_DIR': '/local/rcs/XXX/.nvm', 'VSCODE_GIT_ASKPASS_EXTRA_ARGS': '', 'XDG_SESSION_CLASS': 'user', 'PYTHONPATH': ':/local/rcs/XXX/code/pytrace-collector:/local/rcs/XXX/code/pytrace-collector/logs/pypibugs/tried/AmmsA+Githeat/AmmsA+Githeat', 'TERM': 'screen', 'ZSH': '/home/XXX/.oh-my-zsh', '_CE_CONDA': '', 'VSCODE_NONCE': 'd0bc7031-48a3-4719-8bb5-ef236ddd0016', 'ZDOTDIR': '/home/XXX', 'USER': 'XXX', 'TMUX_PANE': '%3', 'VSCODE_GIT_IPC_HANDLE': '/run/user/19200/vscode-git-13d67c6199.sock', 'CONDA_SHLVL': '3', 'SHLVL': '3', 'PAGER': 'less', '_P9K_SSH_TTY': '/dev/pts/20', 'XDG_SESSION_ID': '43', 'CONDA_PYTHON_EXE': '/local/rcs/XXX/miniforge3/bin/python', 'LD_LIBRARY_PATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/lib', 'XDG_RUNTIME_DIR': '/run/user/19200', 'SSL_CERT_FILE': '/usr/lib/ssl/certs/ca-certificates.crt', 'SSH_CLIENT': '127.0.0.1 46946 22', 'CONDA_DEFAULT_ENV': 'AmmsA+Githeat', 'P9K_SSH': '1', 'LC_ALL': 'en_US.UTF-8', 'VSCODE_GIT_ASKPASS_MAIN': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/extensions/git/dist/askpass-main.js', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'BROWSER': '/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/helpers/browser.sh', 'PATH': '/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/bin:/home/XXX/.gvm/gos/go1.19.1/bin:/home/XXX/.gvm/pkgsets/go1.19.1/global/overlay/bin:/home/XXX/.gvm/bin:/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin:/local/rcs/XXX/miniforge3/condabin:/home/XXX/.gdrive-downloader:/local/arise/XXX/miniforge3/bin:/home/XXX/.vscode-server/cli/servers/Stable-31c37ee8f63491495ac49e43b8544550fbae4533/server/bin/remote-cli:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/XXX/.local/bin:/home/XXX/.local/bin', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/19200/bus', 'gvm_go_name': 'go1.19.1', 'CONDA_PREFIX_1': '/local/rcs/XXX/miniforge3', 'CONDA_PREFIX_2': '/local/rcs/XXX/miniforge3/envs/mal', 'OLDPWD': '/local/rcs/XXX/code/pytrace-collector', 'GOPATH': '/home/XXX/.gvm/pkgsets/go1.19.1/global', 'TERM_PROGRAM': 'tmux', 'VSCODE_IPC_HOOK_CLI': '/run/user/19200/vscode-ipc-518d6355-acaf-4714-a359-be3fe9f21e09.sock', '_': '/local/rcs/XXX/miniforge3/envs/AmmsA+Githeat/bin/python', 'PYTEST_CURRENT_TEST': 'test/test_interactive.py::test_print_left_header (setup)', 'COLUMNS': '250', 'LINES': '60'}), 'LINES', <notset>)], _cwd=None, _savesyspath=None}"]], "term_width": [[2.0, "'250'"]], "term_height": [[3.0, "'60'"]]}, "Program Information": "Project Name: AmmsA+Githeat", "idx": 545, "quantized value": "Numeric String", "mapping_info": {"len(value) == 0": "Empty String", "len(value) > 0 and value.isalpha()": "Alphabetic String", "len(value) > 0 and value.isdigit()": "Numeric String", "len(value) > 0 and not (value.isalpha() or value.isdigit())": "Mixed String"}}
